{"version":3,"file":"PopupWebElementBase.js","sourceRoot":"","sources":["PopupWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,mBAAoB,SAAQ,uBAAY;IACnD;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAU,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAkB,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAS,WAAW,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAS,WAAW,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAkB,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAkB,UAAU,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAkB,UAAU,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAkB,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAkB,WAAW,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAkB,WAAW,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,kBAAkB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAS,iBAAiB,CAAC,CAAC;IACrD,CAAC;CACF;AApLD,kDAoLC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-popup WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, PopupWebElement.ts.\n */\nexport class PopupWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>opened</code> property.\n   * Specifies whether the Popup is open.\n   * @return The value of <code>opened</code> property.\n   *\n   */\n  public getOpened(): Promise<boolean> {\n    return this.getProperty<boolean>('opened');\n  }\n\n  /**\n   * Gets the value of <code>launcher</code> property.\n   * Specifies Popup's launcher. After Popup closes, it returns focus to the launcher.\n   * @return The value of <code>launcher</code> property.\n   *\n   */\n  public getLauncher(): Promise<string> {\n    return this.getProperty<string>('launcher');\n  }\n\n  /**\n   * Gets the value of <code>anchor</code> property.\n   * Specifies Popup's anchor. Popup is placed relative to its anchor.\n   * @return The value of <code>anchor</code> property.\n   *\n   */\n  public getAnchor(): Promise<string | object> {\n    return this.getProperty<string | object>('anchor');\n  }\n\n  /**\n   * Gets the value of <code>placement</code> property.\n   * Specifies the location the popup will appear relative to another element.\n   * @return The value of <code>placement</code> property.\n   *\n   */\n  public getPlacement(): Promise<string> {\n    return this.getProperty<string>('placement');\n  }\n\n  /**\n   * Gets the value of <code>modality</code> property.\n   * Specifies modality of the Popup.\n   * @return The value of <code>modality</code> property.\n   *\n   */\n  public getModality(): Promise<string> {\n    return this.getProperty<string>('modality');\n  }\n\n  /**\n   * Gets the value of <code>autoDismiss</code> property.\n   * Specifies the auto dismissal behavior.\n   * @return The value of <code>autoDismiss</code> property.\n   *\n   */\n  public getAutoDismiss(): Promise<string> {\n    return this.getProperty<string>('autoDismiss');\n  }\n\n  /**\n   * Gets the value of <code>tail</code> property.\n   * Specifies Popup's tail. Simple tail is an arrow pointing to Popup's anchor.\n   * @return The value of <code>tail</code> property.\n   *\n   */\n  public getTail(): Promise<string> {\n    return this.getProperty<string>('tail');\n  }\n\n  /**\n   * Gets the value of <code>variant</code> property.\n   * Specifies Popup's style variant.\n   * @return The value of <code>variant</code> property.\n   *\n   */\n  public getVariant(): Promise<string> {\n    return this.getProperty<string>('variant');\n  }\n\n  /**\n   * Gets the value of <code>initialFocus</code> property.\n   * Specifies if the Popup sets focus to its content when initially open.\n   * @return The value of <code>initialFocus</code> property.\n   *\n   */\n  public getInitialFocus(): Promise<string> {\n    return this.getProperty<string>('initialFocus');\n  }\n\n  /**\n   * Gets the value of <code>offset</code> property.\n   * Specifies displacement of the Popup from the anchor element along the specified axes.\n   * @return The value of <code>offset</code> property.\n   *\n   */\n  public getOffset(): Promise<Offset> {\n    return this.getProperty<Offset>('offset');\n  }\n\n  /**\n   * Gets the value of <code>collision</code> property.\n   * Specifies rule for alternate placement alignment.\n   * @return The value of <code>collision</code> property.\n   *\n   */\n  public getCollision(): Promise<string> {\n    return this.getProperty<string>('collision');\n  }\n\n  /**\n   * Gets the value of <code>width</code> property.\n   * Specifies width of the Popup content.\n   * @return The value of <code>width</code> property.\n   *\n   */\n  public getWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('width');\n  }\n\n  /**\n   * Gets the value of <code>minWidth</code> property.\n   * Specifies minWidth of the Popup content.\n   * @return The value of <code>minWidth</code> property.\n   *\n   */\n  public getMinWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('minWidth');\n  }\n\n  /**\n   * Gets the value of <code>maxWidth</code> property.\n   * Specifies maxWidth of the Popup content.\n   * @return The value of <code>maxWidth</code> property.\n   *\n   */\n  public getMaxWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('maxWidth');\n  }\n\n  /**\n   * Gets the value of <code>height</code> property.\n   * Specifies height of the Popup content.\n   * @return The value of <code>height</code> property.\n   *\n   */\n  public getHeight(): Promise<number | string> {\n    return this.getProperty<number | string>('height');\n  }\n\n  /**\n   * Gets the value of <code>minHeight</code> property.\n   * Specifies minHeight of the Popup content.\n   * @return The value of <code>minHeight</code> property.\n   *\n   */\n  public getMinHeight(): Promise<number | string> {\n    return this.getProperty<number | string>('minHeight');\n  }\n\n  /**\n   * Gets the value of <code>maxHeight</code> property.\n   * Specifies maxHeight of the Popup content.\n   * @return The value of <code>maxHeight</code> property.\n   *\n   */\n  public getMaxHeight(): Promise<number | string> {\n    return this.getProperty<number | string>('maxHeight');\n  }\n\n  /**\n   * Gets the value of <code>backgroundColor</code> property.\n   * Specifies background color of the Popup.\n   * @return The value of <code>backgroundColor</code> property.\n   *\n   */\n  public getBackgroundColor(): Promise<string> {\n    return this.getProperty<string>('backgroundColor');\n  }\n}\nexport interface Offset {\n  /**\n   *\n   */\n  x: number;\n  /**\n   *\n   */\n  y: number;\n}\n"]}