{"version":3,"file":"InputDatePickerWebElement.js","sourceRoot":"","sources":["InputDatePickerWebElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { InputDatePickerWebElementBase } from './InputDatePickerWebElementBase';\nimport { By, Key } from 'selenium-webdriver';\nimport { DateTimeUtils } from '@oracle/oraclejet-preact/UNSAFE_IntlDateTime';\n\n/**\n * The component WebElement for [oj-c-input-date-picker](../../jsdocs/oj-c.InputDatePicker.html).\n * Do not instantiate this class directly, instead, use\n * [findInputDatePicker](../functions/findInputDatePicker.html).\n */\nexport class InputDatePickerWebElement extends InputDatePickerWebElementBase {\n  /**\n   * Sets the value of the \"value\" property of the input component.\n   * @param value The value to set for the <code>value</code>\n   */\n  public async changeValue(value: string | null): Promise<void> {\n    if (!DateTimeUtils.isDateOnlyIsoString(value)) {\n      throw new Error(`InputDatePickerWebElement - value must be a date-only ISO string: ${value}`);\n    }\n\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(disabled || readonly)) {\n      await this.getDriver().executeScript((el: HTMLElement) => el.focus(), this);\n      await this.whenBusyContextReady();\n\n      const segments = await this.findElements(By.css('[role=\"spinbutton\"]'));\n\n      if (!value) {\n        // Delete the text in each of the mask segments.\n        for (const segment of segments) {\n          await segment.click();\n          await segment.sendKeys(Key.BACK_SPACE);\n          await this.whenBusyContextReady();\n        }\n      } else {\n        // Enter text in each of the mask segments.\n        const tokenizedValue = value.split('-');\n        if (segments.length === 3 && tokenizedValue.length === 3) {\n          for (const segment of segments) {\n            await segment.click();\n            const dataSegment = await segment.getAttribute('data-segment');\n            const segmentValue =\n              dataSegment === 'month'\n                ? tokenizedValue[1]\n                : dataSegment === 'year'\n                ? tokenizedValue[0]\n                : tokenizedValue[2];\n            await segment.sendKeys(Key.BACK_SPACE);\n            await this.whenBusyContextReady();\n            // send the keys one at a time, because otherwise the year segment only seems to\n            // end up with the last two digits of the year\n            for (let i = 0; i < segmentValue.length; i++) {\n              await segment.sendKeys(segmentValue.charAt(i));\n              await this.whenBusyContextReady();\n            }\n          }\n        }\n      }\n      // Commit the new value.\n      if (segments.length > 0) {\n        await segments[segments.length - 1].sendKeys(Key.ENTER);\n      }\n    }\n\n    return this.whenBusyContextReady();\n  }\n\n  /**\n   * Clears the value of the component.\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n}\n"]}