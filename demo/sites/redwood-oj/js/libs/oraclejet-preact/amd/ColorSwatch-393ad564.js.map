{"version":3,"file":"ColorSwatch-393ad564.js","sources":["../../src/UNSAFE_ColorSwatch/NoFill.tsx","../../src/UNSAFE_ColorSwatch/ColorSwatch.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * The NoFill image\n */\nexport const NoFill = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 48 48\"\n    preserveAspectRatio=\"none\"\n    width=\"100%\"\n    height=\"100%\">\n    <path stroke-width=\"2\" vector-effect=\"non-scaling-stroke\" d=\"M0 0L48 48\" />\n  </svg>\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment, Ref } from 'preact';\nimport { useEffect, useState, useCallback } from 'preact/hooks';\nimport { forwardRef, ElementRef } from 'preact/compat';\n\nimport { BareButton } from '../UNSAFE_BareButton';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { useToggleAction, ToggleDetail } from '../hooks/UNSAFE_useToggleAction';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useColorScheme } from '../hooks/UNSAFE_useColorScheme';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ColorSwatchVariantOptions } from './themes/ColorSwatchStyles.css';\nimport { ColorSwatchRedwoodTheme } from './themes/redwood/ColorSwatchTheme';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { NoFill } from './NoFill';\nimport { processGlobals } from '../utils/UNSAFE_buttonUtils';\nimport type { ButtonIntrinsicProps, ButtonIntrinsicAriaProps } from '../utils/UNSAFE_buttonUtils';\nimport {\n  parseColorValue,\n  type ColorValue,\n  isEightDigitHex,\n  getSixDigitHex\n} from '../utils/UNSAFE_color';\nimport translations from '#resources/nls/en/bundle';\nimport { CheckboxCrossed } from '#PRIVATE_Icons/CheckboxCrossed';\nimport { classNames } from '#utils/UNSAFE_classNames';\n\ntype SwatchHandle = ElementRef<typeof BareButton>;\n\nexport type ColorSwatchProps = Partial<ButtonIntrinsicProps> &\n  Partial<ButtonIntrinsicAriaProps> &\n  TestIdProps & {\n    /**\n     * color of the swatch\n     */\n    value?: ColorValue;\n\n    /**\n     * The size indicates how large the color swatch is rendered.\n     */\n    size?: 'xs' | 'sm';\n\n    /**\n     * Specifies if the color swatch is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Specifies if the color swatch has role = button.  By default, the color swatch is used in a\n     * palette whereby it is not a button, but just a color swatch inside a grid cell.  However,\n     * it can be used as a stand-alone button, in which case this property should be set to true.  For\n     * example, inside inputColor, the color swatch is a button.\n     */\n    isButton?: boolean;\n\n    /**\n     * Specifies if the color swatch is disabled\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if the color swatch tooltip is disabled\n     */\n    isTooltipDisabled?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n  };\n\n/**\n * ColorSwatches render a color, showing focus, hover, and selection variations.\n */\nexport const ColorSwatch = forwardRef(\n  (\n    {\n      size = 'sm',\n      isSelected = false,\n      isButton = false,\n      onToggle,\n      isDisabled = false,\n      isTooltipDisabled = false,\n      testId,\n      value,\n      ...props\n    }: ColorSwatchProps,\n    ref: Ref<SwatchHandle>\n  ) => {\n    const clientHints = getClientHints();\n    const isHybrid = clientHints.hoverSupport === 'events';\n    const valueText = value as string;\n    const hasValue = valueText && valueText.length;\n    const lowerValueText = hasValue ? valueText?.toLocaleLowerCase() : value;\n    const isNoFill = hasValue ? lowerValueText === 'transparent' : false;\n    const hasAlpha = value && hasValue ? isEightDigitHex(value) : false;\n    // const isSmallButton = isButton && size === 'xs'; // if used as xs button, the icon is 20x20, while the target size is 24x24\n\n    const selectedTranslated = translations.vis_stateSelected();\n    const noneTranslated = translations.labelNone();\n    const colorSwatchTranslated = translations.accColorSwatch();\n\n    const {\n      globalEventProps,\n      ariaProps: {\n        'aria-label': ariaLabel,\n        'aria-hidden': ariaHidden,\n        'aria-roledescription': ariaRoleDescription,\n        ...swatchAriaProps\n      }\n    } = processGlobals(props);\n    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n    const { activeProps, isActive } = useActive({ isDisabled: isDisabled });\n\n    // Cope with rgb or palette colors or illegal colors\n    const getHexValue = useCallback(\n      (raw?: string) => {\n        if (raw?.toLowerCase() === 'transparent') {\n          return noneTranslated;\n        }\n        return parseColorValue(raw);\n      },\n      [noneTranslated]\n    );\n\n    const [accessibleLabel, setAccessibleLabel] = useState<string>(\n      ariaLabel\n        ? ariaLabel\n        : getHexValue(value as string) + isSelected\n        ? ' ' + selectedTranslated\n        : ''\n    );\n\n    const colorScheme = useColorScheme();\n\n    const {\n      classes,\n      styles: {\n        alphaHalfStyles,\n        swatchStyles,\n        buttonStyles,\n        noFillStyles,\n        noFillDisabledStyles,\n        noFillHoverStyles,\n        smallButtonContainerStyles\n      }\n    } = useComponentTheme<ColorSwatchVariantOptions>(ColorSwatchRedwoodTheme, {\n      size: size,\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      active: isActive ? 'isActive' : 'notActive',\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      hover: isHover ? 'isHover' : 'notHover',\n      noFill: isNoFill ? 'isNoFill' : 'notNoFill',\n      hasValue: hasValue ? 'hasValue' : 'notHasValue',\n      button: isButton ? 'isButton' : 'notButton',\n      colorScheme\n    });\n\n    useEffect(() => {\n      if (!ariaLabel) {\n        setAccessibleLabel(\n          (isSelected ? selectedTranslated + ' ' : '') + getHexValue(value as string)\n        );\n      }\n    }, [isSelected, value, getHexValue, selectedTranslated, ariaLabel]);\n\n    const { triggerProps } = useToggleAction({\n      onToggle: onToggle\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: accessibleLabel,\n      isDisabled: isDisabled || isTooltipDisabled\n    });\n\n    const elementDetails = {\n      type: 'div' as const\n    };\n\n    const splitSwatch = () => {\n      return (\n        <Fragment>\n          <div\n            className={alphaHalfStyles}\n            style={isDisabled ? {} : { backgroundColor: getSixDigitHex(value!) as string }}\n          />\n          <div\n            className={alphaHalfStyles}\n            style={isDisabled ? {} : { backgroundColor: value as string }}\n          />\n        </Fragment>\n      );\n    };\n    const noFill = () => {\n      return (\n        <div className={isDisabled ? noFillDisabledStyles : noFillStyles}>\n          <NoFill />\n        </div>\n      );\n    };\n\n    const valueSwatch = () => {\n      return (\n        <div\n          className={classNames([\n            smallButtonContainerStyles,\n            isButton && buttonStyles,\n            !isButton && swatchStyles\n          ])}\n          style={isNoFill || isDisabled || hasAlpha ? {} : { backgroundColor: value as string }}>\n          {isNoFill ? noFill() : hasAlpha ? splitSwatch() : undefined}\n        </div>\n      );\n    };\n\n    const noValueSwatch = () => {\n      return (\n        <div\n          className={classNames([\n            !isButton && swatchStyles,\n            isDisabled ? noFillDisabledStyles : noFillHoverStyles\n          ])}>\n          <CheckboxCrossed />\n        </div>\n      );\n    };\n\n    const swatchContents = () => {\n      return hasValue ? valueSwatch() : noValueSwatch();\n    };\n\n    const buttonContents = () => {\n      return (\n        <IconButton\n          aria-label={accessibleLabel}\n          aria-roledescription={ariaRoleDescription ?? colorSwatchTranslated}\n          {...swatchAriaProps}\n          isDisabled={isDisabled}\n          ref={ref}\n          size=\"sm\"\n          testId={testId}\n          variant=\"ghost\"\n          onAction={() => onToggle?.({ value: isSelected })}>\n          {swatchContents()}\n        </IconButton>\n      );\n    };\n\n    return isButton ? (\n      buttonContents()\n    ) : (\n      <Fragment>\n        <BareButton\n          ref={ref}\n          elementDetails={elementDetails}\n          {...mergeProps(\n            triggerProps,\n            globalEventProps,\n            hoverProps,\n            activeProps,\n            globalEventProps,\n            tooltipProps\n          )}\n          testId={testId}\n          isDisabled={isDisabled}\n          aria-label={accessibleLabel}\n          aria-roledescription={ariaRoleDescription ?? colorSwatchTranslated}\n          {...swatchAriaProps}\n          classNames={classes}\n          onAction={() => onToggle?.({ value: isSelected })}>\n          {swatchContents()}\n        </BareButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nColorSwatch.displayName = 'ColorSwatch';\n"],"names":["NoFill","_jsx","xmlns","viewBox","preserveAspectRatio","width","height","d","ColorSwatch","forwardRef","size","isSelected","isButton","onToggle","isDisabled","isTooltipDisabled","testId","value","props","ref","isHybrid","getClientHints","hoverSupport","valueText","hasValue","length","lowerValueText","toLocaleLowerCase","isNoFill","hasAlpha","isEightDigitHex","selectedTranslated","translations","vis_stateSelected","noneTranslated","labelNone","colorSwatchTranslated","accColorSwatch","globalEventProps","ariaProps","ariaLabel","ariaHidden","ariaRoleDescription","swatchAriaProps","processGlobals","hoverProps","isHover","useHover","activeProps","isActive","useActive","getHexValue","useCallback","raw","toLowerCase","parseColorValue","accessibleLabel","setAccessibleLabel","useState","colorScheme","useColorScheme","classes","styles","alphaHalfStyles","swatchStyles","buttonStyles","noFillStyles","noFillDisabledStyles","noFillHoverStyles","smallButtonContainerStyles","useComponentTheme","ColorSwatchRedwoodTheme","selected","active","disabled","hover","noFill","button","useEffect","triggerProps","useToggleAction","tooltipContent","tooltipProps","useTooltip","text","swatchContents","className","classNames","style","backgroundColor","children","jsx","_jsxs","Fragment","getSixDigitHex","undefined","CheckboxCrossed","SvgCheckboxCrossed","IconButton","variant","onAction","BareButton","elementDetails","type","mergeProps","displayName"],"mappings":"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"}