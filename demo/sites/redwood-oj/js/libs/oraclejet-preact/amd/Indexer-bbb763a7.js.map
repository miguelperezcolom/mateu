{"version":3,"file":"Indexer-bbb763a7.js","sources":["../../src/UNSAFE_Indexer/IndexerItems.tsx","../../src/UNSAFE_Indexer/Indexer.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { ItemContext } from 'src/UNSAFE_Collection';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { IndexerStyles, IndexerItemVariantOptions } from './themes/IndexerStyles.css';\nimport { IndexerRedwoodTheme } from './themes/redwood/IndexerTheme';\n\n/**\n * Type of a section\n */\nexport type Section<K> = {\n  /**\n   * The key of each section\n   */\n  key: K;\n  /**\n   * The label of each section\n   */\n  label?: string;\n  /**\n   * A property that indicates whether the section\n   * is disabled or not. Typically, when Indexer is\n   * used with ListView, a disabled section implies\n   * that there's no corresponding items in the ListView\n   */\n  isDisabled?: boolean;\n};\n\n/**\n * The others section variable that application could use\n * to compare value\n */\n// const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\nexport const SECTION_OTHERS: Section<string> = Object.freeze({\n  key: '__others__',\n  label: '#'\n});\n\nexport const ITEM_SELECTOR = '[data-oj-key]';\n\nexport type SectionProps<K> = {\n  context: ItemContext<Section<K>>;\n  currentKey: K;\n  selectedKey: K;\n  valueNow: number; // the index of an item within currently visible sections\n  isFocusRingVisible: boolean;\n};\n\nexport const SectionItem = forwardRef(\n  <K extends string | number>(props: SectionProps<K>, ref: ForwardedRef<HTMLLIElement>) => {\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const { context, selectedKey } = props;\n    const isSelected = context.data.key === selectedKey;\n    const commonProps = getCommonProps(props, ref);\n\n    const { classes } = useComponentTheme<IndexerItemVariantOptions, IndexerStyles>(\n      IndexerRedwoodTheme,\n      {\n        focused: commonProps.ref && commonProps.isFocusRingVisible ? 'isFocused' : 'notFocused',\n        disabled: context.data.isDisabled ? 'isDisabled' : 'notDisabled',\n        selected: isSelected ? 'isSelected' : 'notSelected'\n      }\n    );\n    const itemClasses = classNames([classes]);\n\n    const sectionLabel = context.data.label || context.data.key;\n    const valueText = context.data.isDisabled\n      ? translations.indexer_disabledLabel({ SECTION: `${sectionLabel}` })\n      : `${sectionLabel}`;\n\n    return (\n      <li\n        {...commonProps}\n        class={itemClasses}\n        data-oj-valuetext={valueText}\n        data-oj-disabled={context.data.isDisabled}>\n        {context.data.label || context.data.key}\n      </li>\n    );\n  }\n);\n\nfunction getCommonProps<K>(\n  { context, currentKey, valueNow, isFocusRingVisible }: SectionProps<K>,\n  ref: ForwardedRef<HTMLLIElement>\n) {\n  const isCurrent = context.data.key === currentKey;\n  return {\n    ...(isCurrent && { ref }),\n    key: context.data.key,\n    'data-oj-key': context.data.key,\n    'data-oj-key-type': typeof context.data.key,\n    'data-oj-valuenow': valueNow,\n    isFocusRingVisible: !!isFocusRingVisible\n  };\n}\n\ntype LastSectionProps<K> = SectionProps<K> & {\n  lastValueNow: number;\n};\n\n// render the last section, that contains the last character and others character\nexport const LastSectionItem = forwardRef(\n  <K extends string | number>(\n    { lastValueNow, ...sectionProps }: LastSectionProps<K>,\n    ref: ForwardedRef<HTMLLIElement>\n  ) => {\n    const commonProps = { ...sectionProps, ref };\n    return (\n      <Fragment>\n        <SectionItem {...commonProps} />\n        <OthersItem\n          {...commonProps}\n          ref={ref}\n          context={{ index: -1, data: SECTION_OTHERS } as ItemContext<Section<K>>}\n          valueNow={lastValueNow}\n        />\n      </Fragment>\n    );\n  }\n);\n\nconst OthersItem = forwardRef(<K,>(props: SectionProps<K>, ref: ForwardedRef<HTMLLIElement>) => {\n  const { context, selectedKey } = props;\n  const commonProps = getCommonProps(props, ref);\n\n  const isSelected = context.data.key === selectedKey;\n  const { classes } = useComponentTheme<IndexerItemVariantOptions>(IndexerRedwoodTheme, {\n    focused: commonProps.ref && commonProps.isFocusRingVisible ? 'isFocused' : 'notFocused',\n    selected: isSelected ? 'isSelected' : 'notSelected'\n  });\n  const othersClasses = classNames([classes]);\n  const othersValueText = SECTION_OTHERS.label;\n\n  return (\n    <li {...commonProps} class={othersClasses} data-oj-valuetext={othersValueText}>\n      {context.data.label}\n    </li>\n  );\n});\n\ntype SeparatorProps<K> = SectionProps<K> & {\n  sectionsPerTruncation: number;\n  last: number;\n  sections: Section<K>[];\n};\n\nexport const SeparatorItem = forwardRef(\n  <K extends string | number>(props: SeparatorProps<K>, ref: ForwardedRef<HTMLLIElement>) => {\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const { context, sections } = props;\n    const commonProps = getCommonProps(props, ref);\n    const { from, to } = getSeparatorRange(props);\n    const {\n      classes,\n      styles: { dotStyle }\n    } = useComponentTheme<IndexerItemVariantOptions, IndexerStyles>(IndexerRedwoodTheme, {\n      focused: commonProps.ref && commonProps.isFocusRingVisible ? 'isFocused' : 'notFocused'\n    });\n\n    if (!isInSeparatorMiddle(context.index, from, to)) {\n      return null;\n    }\n\n    const fromText = sections[from].label || sections[from].key;\n    const toText = sections[to].label || sections[to].key;\n\n    const separatorClasses = classNames([classes]);\n\n    const separatorValueText = translations.indexer_separatorLabel({\n      FROM_SECTION: `${fromText}`,\n      TO_SECTION: `${toText}`\n    });\n\n    return (\n      <li {...commonProps} class={separatorClasses} data-oj-valuetext={separatorValueText}>\n        <Flex align=\"center\" justify=\"center\">\n          <div class={dotStyle}></div>\n        </Flex>\n      </li>\n    );\n  }\n);\n\nexport function hasSeparator<K>(props: SeparatorProps<K>) {\n  const { from, to } = getSeparatorRange(props);\n  return isInSeparatorMiddle(props.context.index, from, to);\n}\n\nfunction getSeparatorRange<K>({ context, sectionsPerTruncation, last }: SeparatorProps<K>) {\n  const from = context.index - (context.index % sectionsPerTruncation) + 1;\n  let to = from + sectionsPerTruncation - 2;\n  to = to >= last ? last - 1 : to;\n\n  return { from, to };\n}\n\nfunction isInSeparatorMiddle(index: number, from: number, to: number) {\n  return index === Math.floor((from + to) / 2);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, createRef, type RefObject } from 'preact';\nimport { useEffect, useRef, useState, StateUpdater, useCallback, Dispatch } from 'preact/hooks';\nimport { Flex } from '../UNSAFE_Flex';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useSingleSelection } from '../hooks/PRIVATE_useSingleSelection/useSingleSelection';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { keyExtractor, getPrevNextKey, isMobile } from '../utils/PRIVATE_collectionUtils';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { ItemContext, CurrentKeyDetail, SingleSelectionDetail } from '../UNSAFE_Collection';\nimport { Collection } from '../PRIVATE_Collection';\nimport {\n  Section,\n  SectionItem,\n  LastSectionItem,\n  SeparatorItem,\n  SECTION_OTHERS,\n  hasSeparator,\n  ITEM_SELECTOR\n} from './IndexerItems';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { IndexerStyles } from './themes/IndexerStyles.css';\nimport { IndexerRedwoodTheme } from './themes/redwood/IndexerTheme';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\n\nexport type CommitDetail<K> = {\n  value: K;\n};\n\ntype Props<K> = {\n  /**\n   * An array of sections, the default sections is an\n   * array of 26 English alphabets and the # others character\n   */\n  sections?: Section<K>[];\n\n  /**\n   * The currently selected Section\n   */\n  value?: K;\n\n  /**\n   * A function that will be invoked when selection happens,\n   * no matter the Section was selected before or not.\n   */\n  onCommit?: (detail: CommitDetail<K>) => void;\n};\n\nconst defaultSections: Section<string>[] = [\n  { key: 'A' },\n  { key: 'B' },\n  { key: 'C' },\n  { key: 'D' },\n  { key: 'E' },\n  { key: 'F' },\n  { key: 'G' },\n  { key: 'H' },\n  { key: 'I' },\n  { key: 'J' },\n  { key: 'K' },\n  { key: 'L' },\n  { key: 'M' },\n  { key: 'N' },\n  { key: 'O' },\n  { key: 'P' },\n  { key: 'Q' },\n  { key: 'R' },\n  { key: 'S' },\n  { key: 'T' },\n  { key: 'U' },\n  { key: 'V' },\n  { key: 'W' },\n  { key: 'X' },\n  { key: 'Y' },\n  { key: 'Z' }\n];\n\n/**\n * Pure Preact based component that consumes Collection component\n * and renders an indexer.\n */\nexport function Indexer<K extends string | number>({\n  sections = defaultSections as Section<K>[],\n  value,\n  onCommit = () => {},\n  testId\n}: Props<K> & TestIdProps) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const ulRef = useRef<HTMLUListElement>(null);\n  const currElementRef = createRef<HTMLLIElement>();\n  const [current, setCurrent] = useState<K | undefined>(sections[0]?.key);\n  // the number of sections in each truncation\n  const [sectionsPerTruncation, setSectionsPerTruncation] = useState<number>(-1);\n  // the total number of rendered sections and separators\n  const renderedSectionsCount = useRef<number>(-1);\n  const itemHeightRef = useRef<number>(0);\n  // the id for aria describedby\n  const uniqueId = useId();\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(rootRef, ['ArrowUp', 'ArrowDown']);\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    true,\n    getPrevNextKey(rootRef.current, current, true, ITEM_SELECTOR),\n    getPrevNextKey(rootRef.current, current, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    current,\n    (detail: CurrentKeyDetail<K>) => setCurrent(detail.value)\n  );\n\n  const { selectionProps } = useSingleSelection(\n    (element) => handleKeyExtract(element, ulRef, current as K),\n    // pass in undefined so onCommit handler will be called\n    // no matter whether the Section was selected before or not\n    undefined,\n    (detail: SingleSelectionDetail<K>) => handleSelection(detail, onCommit, sections)\n  );\n\n  /**\n   * Item renderer that will return a section item or a section separator\n   * based on the sectionsPerTruncation and item context index.\n   * @param context item context\n   */\n  const itemRenderer = (context: ItemContext<Section<K>>): ComponentChildren => {\n    const last = sections.length - 1;\n    renderedSectionsCount.current += 1;\n\n    const commonProps = {\n      context,\n      ref: currElementRef,\n      currentKey: current as K,\n      selectedKey: value as K,\n      valueNow: renderedSectionsCount.current,\n      isFocusRingVisible: !!showFocusRing\n    };\n\n    // render the last and the others character, they are always present\n    if (context.index === last) {\n      return <LastSectionItem {...commonProps} lastValueNow={renderedSectionsCount.current + 1} />;\n    }\n\n    // render a section, in the non-truncation case or when it is the first in a truncation\n    if (sectionsPerTruncation <= 1 || context.index % sectionsPerTruncation === 0) {\n      return <SectionItem {...commonProps} />;\n    }\n\n    // render the separator in the middle of a truncation\n    const separatorProps = { ...commonProps, sectionsPerTruncation, last, sections };\n    if (hasSeparator(separatorProps)) {\n      return <SeparatorItem {...separatorProps} />;\n    }\n\n    // remove the count for truncated sections\n    renderedSectionsCount.current -= 1;\n\n    return null;\n  };\n\n  // truncate the Indexer during resize\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const entry of entries) {\n        updateSectionsPerTruncation(\n          entry.contentRect.height,\n          itemHeightRef.current,\n          sections.length,\n          sections[0]?.key,\n          sectionsPerTruncation,\n          setSectionsPerTruncation,\n          setCurrent\n        );\n      }\n    },\n    [sections, sectionsPerTruncation]\n  );\n\n  useEffect(() => {\n    if (ulRef.current) {\n      // Get aria values from IndexerItem to update aria values on Indexer ul element\n      ulRef.current.setAttribute('aria-valuemax', renderedSectionsCount.current + 1 + '');\n      ulRef.current.setAttribute(\n        'aria-valuetext',\n        currElementRef.current?.dataset?.['ojValuetext'] || ''\n      );\n      ulRef.current.setAttribute(\n        'aria-valuenow',\n        currElementRef.current?.dataset?.['ojValuenow'] || ''\n      );\n    }\n    renderedSectionsCount.current = -1;\n  });\n\n  /**\n   * Set up the initial values for sectionsPerTruncation and event listeners\n   */\n  useEffect(() => {\n    const root = rootRef.current;\n    if (root) {\n      itemHeightRef.current = root.querySelector('li')?.offsetHeight || 0;\n      updateSectionsPerTruncation(\n        root.offsetHeight,\n        itemHeightRef.current,\n        sections.length,\n        sections[0]?.key,\n        sectionsPerTruncation,\n        setSectionsPerTruncation,\n        setCurrent\n      );\n    }\n  }, [sections, sectionsPerTruncation]);\n\n  /**\n   * Set up resize observer and refresh the resize observer when\n   * sectionsPerTruncation is changed, otherwise it will only have the\n   * old copy of sectionsPerTruncation.\n   */\n  useEffect(() => {\n    const root = rootRef.current;\n    if (root) {\n      const resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n        handleResize(entries);\n      });\n      resizeObserver.observe(root);\n      return () => {\n        resizeObserver.unobserve(root);\n      };\n    }\n    return undefined;\n  }, [sectionsPerTruncation, handleResize]);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const {\n    styles: { baseStyle, innerStyle }\n  } = useComponentTheme<never, IndexerStyles>(IndexerRedwoodTheme);\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div ref={rootRef} class={baseStyle} {...testIdProps}>\n      <Flex align=\"center\" width=\"6x\" height=\"100%\">\n        <ul\n          {...mergeProps(currentKeyProps, focusRingProps, selectionProps)}\n          ref={ulRef}\n          tabIndex={0}\n          aria-label=\"Indexer\"\n          aria-orientation=\"vertical\"\n          aria-valuemin={0}\n          aria-describedby={uniqueId}\n          role=\"slider\"\n          class={innerStyle}>\n          <Collection items={sections}>{itemRenderer}</Collection>\n        </ul>\n      </Flex>\n      <HiddenAccessible>\n        <span id={uniqueId}>{getIndexerDescription(translations)}</span>\n      </HiddenAccessible>\n    </div>\n  );\n}\n\n// A function to extract key for selection\nconst handleKeyExtract = <K extends string | number>(\n  element: HTMLElement,\n  rootRef: RefObject<HTMLElement>,\n  current: K\n) => {\n  if (element === rootRef.current) {\n    return current === undefined ? null : current;\n  }\n  return keyExtractor(element, ITEM_SELECTOR) as K;\n};\n\nconst handleSelection = <K extends string | number>(\n  detail: SingleSelectionDetail<K>,\n  onCommit: (value: CommitDetail<K>) => void,\n  sections: Section<K>[]\n) => {\n  if (detail.value === SECTION_OTHERS.key) {\n    onCommit({ value: SECTION_OTHERS.key as K });\n  } else {\n    const selectedSection = sections.find((section) => section.key === detail.value) as Section<K>;\n    onCommit({ value: selectedSection.key as K });\n  }\n};\n\n/**\n * A function that calculates the section count, based on\n * the container height and the number of sections\n * @param height height of Indexer container\n */\nconst updateSectionsPerTruncation = <K extends string | number>(\n  height: number,\n  itemHeight: number,\n  sectionsLength: number,\n  firstSectionKey: K,\n  sectionsPerTruncation: number,\n  setSectionsPerTruncation: Dispatch<StateUpdater<number>>,\n  setCurrent: Dispatch<StateUpdater<K | undefined>>\n) => {\n  if (height === 0 || itemHeight === 0) {\n    return;\n  }\n\n  const maxSections = height / itemHeight;\n  const last = sectionsLength - 1;\n\n  // when the container size is too small to hold two sections\n  if (maxSections < 2) {\n    if (sectionsPerTruncation !== last) {\n      setSectionsPerTruncation(last);\n      setCurrent(firstSectionKey);\n    }\n\n    // no truncation\n    // compare with < 0.01 for the deviation from calculation, when sectionsLength and maxSections\n    // are about the same, maxNum === sectionsLength doesn't work\n  } else if (maxSections > sectionsLength || sectionsLength - maxSections < 0.01) {\n    if (sectionsPerTruncation > 1) {\n      setSectionsPerTruncation(1);\n      setCurrent(firstSectionKey);\n    }\n\n    // need truncation\n  } else {\n    const tempSectionCount = findSectionCount(maxSections, last);\n    if (tempSectionCount !== sectionsPerTruncation && tempSectionCount < sectionsLength) {\n      setSectionsPerTruncation(tempSectionCount);\n      setCurrent(firstSectionKey);\n    }\n  }\n};\n\n/**\n * A helper function to find the best section count\n * in a truncation\n *\n * @param maxSections maximum number of sections allowed in a truncation\n * @param last the index of last section\n */\nconst findSectionCount = (maxSections: number, last: number) => {\n  // need truncation\n  maxSections -= 2; // minus the last character and the others character\n  maxSections /= 2; // each truncation has a section and a separator\n\n  const newSectionCount = Math.round(last / maxSections) + 1;\n  const truncationLeftover = last % newSectionCount;\n  const truncationCount = Math.floor(last / newSectionCount) + (truncationLeftover > 1 ? 1 : 0);\n\n  // When the sectionCount becomes greater, it will result in\n  // same truncations but with different sections appearing.\n  // The following is to find the best sectionCount in this case\n  // and prevent unnecessary truncations.\n  let tempLeftover = last - (truncationCount - 1) * newSectionCount;\n  let tempSectionCount = newSectionCount;\n  while (tempSectionCount > tempLeftover) {\n    tempSectionCount -= 1;\n    tempLeftover = last - (truncationCount - 1) * tempSectionCount;\n  }\n  if (tempSectionCount != newSectionCount) {\n    tempSectionCount += 1;\n  }\n\n  return tempSectionCount;\n};\n\n/**\n * Helper function to find the aria description for Indexer,\n * based on whether current device is a mobile device\n */\nfunction getIndexerDescription(translations: any) {\n  if (isMobile()) {\n    return translations.indexer_touchInstructionText();\n  } else {\n    return translations.indexer_keyboardInstructionText();\n  }\n}\n"],"names":["SECTION_OTHERS","Object","freeze","key","label","ITEM_SELECTOR","SectionItem","forwardRef","props","ref","translations","useTranslationBundle","context","selectedKey","isSelected","data","commonProps","getCommonProps","classes","useComponentTheme","IndexerRedwoodTheme","focused","isFocusRingVisible","disabled","isDisabled","selected","itemClasses","classNames","sectionLabel","valueText","indexer_disabledLabel","SECTION","_jsx","jsx","class","children","currentKey","valueNow","LastSectionItem","lastValueNow","sectionProps","_jsxs","jsxs","Fragment","OthersItem","index","othersClasses","othersValueText","SeparatorItem","sections","from","to","getSeparatorRange","styles","dotStyle","isInSeparatorMiddle","fromText","toText","separatorClasses","separatorValueText","indexer_separatorLabel","FROM_SECTION","TO_SECTION","Flex","align","justify","sectionsPerTruncation","last","Math","floor","defaultSections","handleKeyExtract","element","rootRef","current","undefined","keyExtractor","handleSelection","detail","onCommit","value","find","section","updateSectionsPerTruncation","height","itemHeight","sectionsLength","firstSectionKey","setSectionsPerTruncation","setCurrent","maxSections","tempSectionCount","findSectionCount","newSectionCount","round","truncationLeftover","truncationCount","tempLeftover","getIndexerDescription","isMobile","indexer_touchInstructionText","indexer_keyboardInstructionText","testId","useRef","ulRef","currElementRef","createRef","useState","renderedSectionsCount","itemHeightRef","uniqueId","useId","showFocusRing","focusRingProps","useCollectionFocusRing","currentKeyProps","useCurrentKey","getPrevNextKey","selectionProps","useSingleSelection","handleResize","useCallback","entries","entry","contentRect","length","useEffect","setAttribute","dataset","root","querySelector","offsetHeight","resizeObserver","ResizeObserver","observe","unobserve","baseStyle","innerStyle","testIdProps","useTestId","width","mergeProps","tabIndex","role","Collection","items","separatorProps","hasSeparator","HiddenAccessible","id"],"mappings":"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"}