{"version":3,"file":"ToggleButtonLabel-03111248.js","sources":["../../src/UNSAFE_ToggleButtonLabel/ToggleButtonInput.tsx","../../src/UNSAFE_ToggleButtonLabel/ToggleButtonLabel.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentChildren, JSX } from 'preact';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { ButtonLabelLayout } from '#UNSAFE_ButtonLabelLayout';\nimport { styles } from '#UNSAFE_BaseButton/themes/BaseButtonStyles.css';\nimport { classNames } from '#/utils/UNSAFE_classNames';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n\ntype IntrinsicProps = Pick<\n  UnpackSignals<JSX.HTMLAttributes<HTMLElement>>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\nexport type Props = IntrinsicProps & {\n  /**\n   * Specifies that the button separator should be rendered disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies that the input is intended for use in a switch button\n   */\n  isSwitch?: boolean;\n\n  /**\n   * Specifies if input is checked or not, controlled pattern\n   */\n  isChecked?: boolean;\n\n  /**\n   * onAction is invoked when then input is pressed\n   */\n  onAction?: (event: Event) => void;\n\n  /**\n   * inputType specifies what type of input is needed\n   */\n  inputType?: 'radio' | 'checkbox';\n\n  /**\n   * inputName is the name of the radio or checkbox\n   */\n  inputName?: string;\n\n  /**\n   * value is the value of the radio or checkbox\n   */\n  value?: string;\n\n  /**\n   * inputId is the id used by the label\n   */\n  inputId?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Display indicates whether only the label or all elements should be rendered by the togglebutton.\n   */\n  display?: 'label' | 'all' | 'icons';\n\n  /**\n   * The size indicates how large the togglebutton is rendered.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * label - togglebutton label\n   */\n  label?: string;\n};\n\nexport const ToggleButtonInput = ({\n  isDisabled,\n  isChecked,\n  isSwitch,\n  inputName,\n  inputType,\n  value,\n  inputId,\n  startIcon,\n  endIcon,\n  display,\n  onAction,\n  size,\n  label,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchEnd,\n  onTouchStart\n}: Props) => {\n  const { pressProps } = usePress((e) => {\n    onAction?.(e);\n  });\n  const { tabbableModeProps } = useTabbableMode(isDisabled);\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'ArrowLeft':\n      case 'ArrowRight': {\n        event.preventDefault();\n        break;\n      }\n    }\n  };\n  const keyProps = { onKeyDown };\n\n  const mergedProps = mergeProps(pressProps, tabbableModeProps, keyProps);\n  const inputElement = (\n    <HiddenAccessible>\n      <input\n        {...(isSwitch ? { role: 'switch' } : {})}\n        type={inputType}\n        checked={isChecked}\n        name={inputName}\n        value={value}\n        disabled={isDisabled}\n        {...mergedProps}\n        id={inputId}></input>\n    </HiddenAccessible>\n  );\n\n  const isLabel = (!startIcon && !endIcon) || display === 'label';\n\n  const isIcon = display === 'icons';\n\n  const wrapperClasses = classNames([\n    styles.inputLabel,\n    !isIcon ? styles.labelSizes[size ?? 'md'] : undefined,\n    !isLabel && styles.min\n  ]);\n\n  // For input types, must use labels and modify approach for button\n  return isLabel ? (\n    <label\n      for={inputId}\n      class={wrapperClasses}\n      onBlur={(event) => {\n        onBlur?.(event);\n      }}\n      onFocus={(event) => {\n        onFocus?.(event);\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}>\n      {label}\n      {inputElement}\n    </label>\n  ) : (\n    <label\n      for={inputId}\n      class={wrapperClasses}\n      onBlur={(event) => {\n        onBlur?.(event);\n      }}\n      onFocus={(event) => {\n        onFocus?.(event);\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}>\n      <ButtonLabelLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLabelLayout>\n      {inputElement}\n      {display === 'icons' ? <HiddenAccessible>{label}</HiddenAccessible> : undefined}\n    </label>\n  );\n};\n\nToggleButtonInput.displayName = 'ToggleButtonInput';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { type ComponentChildren, Fragment, type JSX } from 'preact';\nimport { ButtonLabelLayout } from '#UNSAFE_ButtonLabelLayout';\nimport { InputTypes, ToggleButtonTypes } from '#utils/UNSAFE_buttonUtils/toggle.types';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { ToggleButtonInput } from './ToggleButtonInput';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\ntype IntrinsicProps = Pick<\n  UnpackSignals<JSX.HTMLAttributes<HTMLElement>>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\nexport type ToggleButtonLabelProps = IntrinsicProps & {\n  /**\n   * Specifies that the button separator should be rendered disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if button is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Specifies if button is toggle\n   */\n  isToggle?: boolean;\n\n  /**\n   * onAction is invoked when then input is pressed\n   */\n  onAction?: (event: Event) => void;\n\n  /**\n   * inputType specifies what type of input is needed\n   */\n  inputType?: ToggleButtonTypes;\n\n  /**\n   * inputName is the name of the radio or checkbox\n   */\n  inputName?: string;\n\n  /**\n   *  value is the value of the radio or checkbox\n   */\n  value?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Display indicates whether only the label or all elements should be rendered by the togglebutton.\n   */\n  display?: 'label' | 'all' | 'icons';\n\n  /**\n   * The size indicates how large the togglebutton is rendered.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * label - togglebutton label\n   */\n  label?: string;\n};\n\nexport const ToggleButtonLabel = ({\n  isDisabled,\n  isSelected,\n  isToggle = true,\n  inputName,\n  inputType,\n  value,\n  startIcon,\n  endIcon,\n  display,\n  onAction,\n  size,\n  label,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchEnd,\n  onTouchStart\n}: ToggleButtonLabelProps) => {\n  const isInput = inputType === 'radio' || inputType === 'checkbox';\n  const labelOnly = (!startIcon && !endIcon) || display === 'label';\n\n  // preact useId fails to be unique on storybook pages, each canvas starts from scratch\n  //const childId = useId() + '-' + (isInput ? inputName : '');\n  const childId = useId();\n\n  const inputElement = isInput ? (\n    <ToggleButtonInput\n      isSwitch={!isToggle}\n      onAction={onAction}\n      isChecked={isSelected}\n      inputType={inputType as InputTypes}\n      inputName={inputName}\n      value={value}\n      inputId={childId}\n      isDisabled={isDisabled}\n      label={label}\n      display={display}\n      startIcon={startIcon}\n      endIcon={endIcon}\n      size={size}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onTouchEnd={onTouchEnd}\n      onTouchStart={onTouchStart}\n    />\n  ) : undefined;\n\n  if (!isInput) {\n    // For standalone toggles, no need for labels\n    return labelOnly ? (\n      <Fragment>{label}</Fragment>\n    ) : (\n      <ButtonLabelLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLabelLayout>\n    );\n  } else {\n    // For input types, must use labels and modify approach for button\n    return <Fragment>{inputElement}</Fragment>;\n  }\n};\n\nToggleButtonLabel.displayName = 'ToggleButtonLabel';\n"],"names":["ToggleButtonInput","isDisabled","isChecked","isSwitch","inputName","inputType","value","inputId","startIcon","endIcon","display","onAction","size","label","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","pressProps","usePress","e","tabbableModeProps","useTabbableMode","keyProps","onKeyDown","event","key","preventDefault","mergedProps","mergeProps","inputElement","_jsx","jsx","HiddenAccessible","children","role","type","checked","name","disabled","id","isLabel","isIcon","wrapperClasses","classNames","styles","inputLabel","undefined","labelSizes","min","_jsxs","for","class","ButtonLabelLayout","displayName","ToggleButtonLabel","isSelected","isToggle","isInput","labelOnly","childId","useId","Fragment"],"mappings":"uWAgGO,MAAMA,EAAoB,EAC/BC,aACAC,YACAC,WACAC,YACAC,YACAC,QACAC,UACAC,YACAC,UACAC,UACAC,WACAC,OACAC,QACAC,SACAC,UACAC,eACAC,eACAC,aACAC,mBAEA,MAAMC,WAAEA,GAAeC,EAAQA,UAAEC,IAC/BX,IAAWW,EAAE,KAETC,kBAAEA,GAAsBC,EAAeA,gBAACvB,GAYxCwB,EAAW,CAAEC,UAVAC,IAEjB,OADYA,EAAMC,KAEhB,IAAK,YACL,IAAK,aACHD,EAAME,iBAGT,GAIGC,EAAcC,EAAUA,WAACX,EAAYG,EAAmBE,GACxDO,EACJC,EAAAC,IAACC,EAAgBA,iBACf,CAAAC,SAAAH,EAAAA,IAAA,QAAA,IACO9B,EAAW,CAAEkC,KAAM,UAAa,CAAA,EACrCC,KAAMjC,EACNkC,QAASrC,EACTsC,KAAMpC,EACNE,MAAOA,EACPmC,SAAUxC,KACN6B,EACJY,GAAInC,MAIJoC,GAAYnC,IAAcC,GAAwB,UAAZC,EAEtCkC,EAAqB,UAAZlC,EAETmC,EAAiBC,EAAAA,WAAW,CAChCC,EAAAA,OAAOC,WACNJ,OAA2CK,EAAlCF,EAAAA,OAAOG,WAAWtC,GAAQ,OACnC+B,GAAWI,EAAAA,OAAOI,MAIrB,OAAOR,EACLS,EAAAA,KAAA,QAAA,CACEC,IAAK9C,EACL+C,MAAOT,EACP/B,OAASa,IACPb,IAASa,EAAM,EAEjBZ,QAAUY,IACRZ,IAAUY,EAAM,EAElBX,aAAcA,EACdC,aAAcA,EACdC,WAAYA,EACZC,aAAcA,EAAYiB,SAAA,CACzBvB,EACAmB,KAGHoB,EAAAA,KACE,QAAA,CAAAC,IAAK9C,EACL+C,MAAOT,EACP/B,OAASa,IACPb,IAASa,EAAM,EAEjBZ,QAAUY,IACRZ,IAAUY,EAAM,EAElBX,aAAcA,EACdC,aAAcA,EACdC,WAAYA,EACZC,aAAcA,EAAYiB,SAAA,CAC1BH,EAACC,IAAAqB,oBAAkB,CAAA7C,QAASA,EAASF,UAAWA,EAAWC,QAASA,EAASG,KAAMA,EAAIwB,SACpFvB,IAEFmB,EACY,UAAZtB,EAAsBuB,EAAAA,IAACE,EAAAA,iBAAgB,CAAAC,SAAEvB,SAA4BoC,IAEzE,EAGHjD,EAAkBwD,YAAc,0BCjHnBC,EAAoB,EAC/BxD,aACAyD,aACAC,YAAW,EACXvD,YACAC,YACAC,QACAE,YACAC,UACAC,UACAC,WACAC,OACAC,QACAC,SACAC,UACAC,eACAC,eACAC,aACAC,mBAEA,MAAMyC,EAAwB,UAAdvD,GAAuC,aAAdA,EACnCwD,GAAcrD,IAAcC,GAAwB,UAAZC,EAIxCoD,EAAUC,EAAAA,QAEV/B,EAAe4B,EACnB3B,EAAAA,IAACjC,EAAiB,CAChBG,UAAWwD,EACXhD,SAAUA,EACVT,UAAWwD,EACXrD,UAAWA,EACXD,UAAWA,EACXE,MAAOA,EACPC,QAASuD,EACT7D,WAAYA,EACZY,MAAOA,EACPH,QAASA,EACTF,UAAWA,EACXC,QAASA,EACTG,KAAMA,EACNE,OAAQA,EACRC,QAASA,EACTC,aAAcA,EACdC,aAAcA,EACdC,WAAYA,EACZC,aAAcA,SAEd8B,EAEJ,OAAKW,EAWI3B,EAACC,IAAA8B,EAAQA,SAAE,CAAA5B,SAAAJ,IATX6B,EACL5B,MAAC+B,EAAAA,SAAQ,CAAA5B,SAAEvB,IAEXoB,MAACsB,EAAAA,kBAAiB,CAAC7C,QAASA,EAASF,UAAWA,EAAWC,QAASA,EAASG,KAAMA,WAChFC,GAMN,EAGH4C,EAAkBD,YAAc"}