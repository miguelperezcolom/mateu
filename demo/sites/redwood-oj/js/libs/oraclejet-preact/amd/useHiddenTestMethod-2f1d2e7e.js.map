{"version":3,"file":"useHiddenTestMethod-2f1d2e7e.js","sources":["../../src/hooks/UNSAFE_useHiddenTestMethod/useHiddenTestMethod.ts"],"sourcesContent":["import { RefObject } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport { EnvironmentContext } from '../../UNSAFE_Environment';\nimport { useContext } from 'preact/hooks';\n\ntype UseHiddenTestMethodProps = {\n  elementRef: RefObject<HTMLElement>;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  method: (...args: any[]) => void;\n  name: string;\n};\n\n/**\n * This hook is used to add a hidden method to a component's root DOM element\n * that can be called by test adapters. The hidden method is only added when\n * we are not running in production mode, i.e. it's only used for testing.\n *\n * @param elementRef The ref to a component's root DOM element\n * @param method The hidden method to expose in the DOM\n * @param name The name of the hidden method in the DOM\n */\nexport function useHiddenTestMethod({ elementRef, method, name }: UseHiddenTestMethodProps) {\n  const context = useContext(EnvironmentContext);\n\n  // Add the hidden method to the DOM element only when mode !== production.\n  useEffect(() => {\n    if (elementRef.current && context.mode !== 'production') {\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      (elementRef.current as any)[name] = method;\n    }\n  }, [context.mode, elementRef, method, name]);\n}\n"],"names":["elementRef","method","name","context","useContext","EnvironmentContext","useEffect","current","mode"],"mappings":"sJAqBM,UAA8BA,WAAEA,EAAUC,OAAEA,EAAMC,KAAEA,IACxD,MAAMC,EAAUC,aAAWC,EAAAA,oBAG3BC,EAAAA,WAAU,KACJN,EAAWO,SAA4B,eAAjBJ,EAAQK,OAE/BR,EAAWO,QAAgBL,GAAQD,EACrC,GACA,CAACE,EAAQK,KAAMR,EAAYC,EAAQC,GACxC"}