{"version":3,"file":"List-5b5b3bd7.js","sources":["../../src/PRIVATE_List/ListRoles.ts","../../src/PRIVATE_List/ListItem.tsx","../../src/PRIVATE_List/SkeletonContainer.tsx","../../src/PRIVATE_List/Sparkle.tsx","../../src/PRIVATE_List/usePromotedSection.ts","../../src/PRIVATE_List/useSelectionItemAction.ts","../../src/PRIVATE_List/List.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { JSX } from 'preact';\nimport { Roles } from '../UNSAFE_ListView';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\n/**\n * List Roles need to be kept in matching sets, this module encapsulates the sets\n *\n * @param ariaRole\n * @returns matching, valid set of roles\n */\n\nconst getListViewRoles = (\n  ariaRole: Roles\n): {\n  list: UnpackSignals<JSX.HTMLAttributes['role']>;\n  item: UnpackSignals<JSX.HTMLAttributes['role']>;\n  cell: UnpackSignals<JSX.HTMLAttributes['role']>;\n} => {\n  switch (ariaRole) {\n    case 'listbox':\n      return { list: 'listbox', item: 'presentation', cell: 'option' };\n    case 'treegrid':\n      return { list: 'treegrid', item: 'row', cell: 'gridcell' };\n    default:\n      return { list: 'grid', item: 'row', cell: 'gridcell' };\n  }\n};\n\nexport { getListViewRoles };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useRef, useMemo } from 'preact/hooks';\nimport { memo } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { CurrentItemVariant, ListItemRendererContext } from '../UNSAFE_Collection';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { Roles, ItemPadding, Props as ListProps } from '../UNSAFE_ListView';\nimport { isMultipleSelection } from './ListUtils';\nimport { getListViewRoles } from './ListRoles';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { listItemStyles, listItemMultiVariantStyles, paddingStyles } from './themes/ListStyles.css';\nimport { compareListItemContext } from '../utils/PRIVATE_collectionUtils';\n\nexport const ITEM_SELECTOR = '[data-oj-key]';\n\n/**\n * Props for the ListViewItem Component\n */\nexport type Props<K, D> = {\n  children: (context: ListItemRendererContext<K, D>) => ComponentChildren;\n  context: ListItemRendererContext<K, D>;\n  itemDepth?: number;\n  isFocused: boolean;\n  isFocusRingVisible: boolean;\n  isActive: boolean;\n  isGridlineVisible: boolean;\n  isSelected: boolean;\n  isTopGridlineVisible?: boolean;\n  isTabbable?: boolean;\n  role: Roles;\n  selectionMode: ListProps<K, D>['selectionMode'];\n  suggestion?: 'end' | true;\n  currentItemVariant?: CurrentItemVariant;\n  padding?: 'enabled' | 'disabled' | ItemPadding;\n};\n\n/**\n * The internal component used to render a single item in ListView.\n */\nexport function ListViewItem<K extends string | number, D>({\n  children,\n  context,\n  itemDepth,\n  isFocused,\n  isFocusRingVisible,\n  isActive,\n  isGridlineVisible,\n  isSelected,\n  isTopGridlineVisible = false,\n  isTabbable = false,\n  role,\n  selectionMode,\n  suggestion,\n  currentItemVariant,\n  padding\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const roles = useMemo(() => getListViewRoles(role), [role]);\n  const itemKey = context.metadata.key;\n  const itemIndex = context.index;\n\n  // some roles come with related aria attributes which need to be set\n  const cellRoleAttributes =\n    roles.cell === 'option'\n      ? {\n          role: roles.cell,\n          'aria-posinset': itemIndex + 1,\n          'aria-setsize': -1\n        }\n      : {\n          role: roles.cell\n        };\n\n  // don't bubble Arrow Up and Down events to parent when in isTabbable mode\n  // this bubbling causes the outer CollectionFocus ring to change index while in the isTabbable mode.\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (isTabbable && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n      event.stopPropagation();\n    }\n  };\n\n  const { interactionProps, applyActiveStyle, applyHoverStyle, applyPseudoHoverStyle } =\n    useInteractionStyle();\n\n  const variantClasses = listItemMultiVariantStyles({\n    selectable: isSelectable(selectionMode, isSelected) ? 'isSelectable' : 'notSelectable',\n    selected: isSelected ? 'isSelected' : 'notSelected',\n    selectedSingle:\n      isSelected && selectionMode === 'single' ? 'isSelectedSingle' : 'notSelectedSingle',\n    needsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',\n    pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n    active: applyActiveStyle || isActive ? 'isActive' : 'notActive',\n    focusHighlight:\n      currentItemVariant === 'highlight' && isFocused ? 'isFocusHighlight' : 'notFocusHighlight',\n    focusRingVisible:\n      isFocusRingVisible && isFocused ? 'isFocusRingVisible' : 'notFocusRingVisible',\n    gridlineTop: isTopGridlineVisible ? 'visible' : 'hidden',\n    gridlineBottom:\n      isGridlineVisible ||\n      (suggestion === 'end' && !isGridlineVisible && (!isSelected || selectionMode !== 'single'))\n        ? 'visible'\n        : 'hidden'\n  });\n  const paddingClasses = [];\n  if (padding) {\n    if (padding === 'enabled') {\n      paddingClasses.push(paddingStyles.allPadding);\n    } else if (padding !== 'disabled') {\n      if (padding.top === 'enabled') {\n        paddingClasses.push(paddingStyles.topItemPadding);\n      }\n      if (padding.bottom === 'enabled') {\n        paddingClasses.push(paddingStyles.bottomItemPadding);\n      }\n      if (padding.start === 'enabled') {\n        paddingClasses.push(paddingStyles.startItemPadding);\n      }\n      if (padding.end === 'enabled') {\n        paddingClasses.push(paddingStyles.endItemPadding);\n      }\n    }\n  }\n\n  const classes = classNames([variantClasses, ...paddingClasses]);\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const { class: cls, ...cellStyles } = styleInterpolations({\n    flex: '1 1 auto',\n    alignSelf: 'center'\n  });\n  const cellClasses = classNames([\n    cls,\n    isMultipleSelection(selectionMode) && listItemStyles.checkboxContainer\n  ]);\n\n  // todo: use translated text for selector\n  // note cannot put focus on gridcell div since JAWS will not read the aria-rowindex\n  // correctly, so unfortunately needed another div\n  return (\n    <div\n      aria-rowindex={role === 'grid' ? itemIndex + 1 : undefined}\n      aria-level={itemDepth}\n      data-oj-key={itemKey}\n      class={classes}\n      ref={rootRef}\n      role={roles.item}\n      {...(suggestion && { 'data-oj-suggestion': true })}\n      {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}\n      {...interactionProps}>\n      <div\n        id={useId()}\n        style={cellStyles}\n        class={cellClasses}\n        aria-posinset={role === 'grid' ? undefined : itemIndex + 1}\n        aria-setsize={role === 'grid' ? undefined : -1}\n        onKeyDown={handleKeyDown}\n        aria-colindex={role === 'grid' ? 1 : undefined}\n        aria-selected={selectionMode !== 'none' ? isSelected : undefined}\n        {...cellRoleAttributes}>\n        <TabbableModeContext.Provider value={{ isTabbable }}>\n          <FocusTrap isDisabled={!isTabbable} restoreFocusRef={false}>\n            {children(context)}\n          </FocusTrap>\n        </TabbableModeContext.Provider>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Helper method to determine whether item is selectable\n * @returns true if item is selectable (show hover effect), false otherwise\n */\nconst isSelectable = (\n  selectionMode: ListProps<any, any>['selectionMode'],\n  isItemSelected: boolean\n) => {\n  return selectionMode !== 'none' && (isMultipleSelection(selectionMode) || !isItemSelected);\n};\n\nexport const MemoizeListViewItem = memo(ListViewItem, (prev: any, next: any) => {\n  if (prev && next) {\n    return (\n      prev.children === next.children &&\n      prev.isFocused === next.isFocused &&\n      prev.isFocusRingVisible === next.isFocusRingVisible &&\n      prev.isSelected === next.isSelected &&\n      prev.isTabbable === next.isTabbable &&\n      prev.isActive === next.isActive &&\n      prev.suggestion === next.suggestion &&\n      prev.isGridlineVisible === next.isGridlineVisible &&\n      prev.isTopGridlineVisible === next.isTopGridlineVisible &&\n      prev.padding === next.padding &&\n      compareListItemContext(prev.context, next.context)\n    );\n  }\n  return false;\n});\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { skeletonStyles } from './themes/ListStyles.css';\n\ntype Props = {\n  /**\n   * Allows to pass and access the properties from child elements\n   **/\n  children?: (index: number) => ComponentChildren;\n  /**\n   * Allows to specify number of skeletons to be rendered on initial load\n   **/\n  minimumCount?: number;\n};\n\n/**\n * Allows to specify the time delay for rendering the component\n **/\nconst timerValue = 50;\n\n/**\n * SkeletonContainer renders 'minimumCount' number of skeletons\n * of the variant specified from its child element - Skeleton's prop after\n * 'timerValue' ms delay\n **/\nexport function SkeletonContainer({ children, minimumCount = 1 }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsVisible(true);\n    }, timerValue);\n  }, []);\n\n  const containerClasses = classNames([skeletonStyles.container]);\n  return isVisible && children ? (\n    <div class={containerClasses} role=\"presentation\">\n      {[...Array(minimumCount)].map((_element, index) => children(index))}\n    </div>\n  ) : null;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { globalImages } from '#/ImageVars.css';\nimport { sparkleStyles } from './themes/ListStyles.css';\nimport { useTheme } from '#/hooks/UNSAFE_useTheme';\n\nconst SPARKLE_STYLE_CLASS = 'oj-collection-sparkle';\n\n/**\n * A sparkle component for smart suggestion indicator in ListView\n * @param sparkleHeight the height of sparkle\n */\nexport function Sparkle({ sparkleHeight }: { sparkleHeight: number }) {\n  const { name } = useTheme();\n  if (sparkleHeight <= 0) {\n    return null;\n  }\n\n  const height = sparkleHeight + 'px';\n  const sparkleClasses = classNames([sparkleStyles.base]);\n  const containerClasses = classNames([\n    sparkleStyles.container,\n    SPARKLE_STYLE_CLASS,\n    // TODO: this component should create separate theme definitions to only show the image in redwood\n    name === 'redwood' && globalImages\n  ]);\n\n  return (\n    <div key=\"sparkle\" class={containerClasses}>\n      <div class={sparkleClasses} style={{ height }}></div>\n    </div>\n  );\n}\n","import type { RefObject } from 'preact';\nimport { useState, useEffect, useMemo } from 'preact/hooks';\nimport { Props as ListViewProps } from '../UNSAFE_ListView';\nimport { PLACEHOLDER_STYLE_CLASS } from '../PRIVATE_VirtualizedCollection';\nimport { Metadata } from '../UNSAFE_Collection';\n\nexport const usePromotedSection = <K extends string | number, D>(\n  data: ListViewProps<K, D>['data'],\n  promotedSection: ListViewProps<K, D>['promotedSection'],\n  rootRef: RefObject<HTMLDivElement>\n) => {\n  // tracking sparkle height\n  const [sparkleHeight, setSparkleHeight] = useState<number>(0);\n\n  const suggestions = useMemo(\n    () => data && promotedSection && findSuggestions(data.data, promotedSection.count),\n    [data, promotedSection]\n  );\n\n  useEffect(() => {\n    // update sparkleHeight only when we have suggestions\n    // avoid unnecessary iterating through elements\n    if (suggestions) {\n      const placeholder = rootRef.current?.querySelector(\n        '.' + PLACEHOLDER_STYLE_CLASS\n      ) as HTMLElement;\n      let height = placeholder?.offsetHeight || 0;\n      const suggestionItems = rootRef.current?.querySelectorAll('[data-oj-suggestion]');\n      suggestionItems?.forEach((item) => (height += (item as HTMLElement).offsetHeight));\n      setSparkleHeight(height);\n    }\n  }, [rootRef, suggestions]);\n\n  return { sparkleHeight, suggestions };\n};\n\n/**\n * A helper function that finds the data with suggestions, and\n * returns the corresponding keys\n * @param dataState\n */\nconst findSuggestions = <K, D>(data: { data: D; metadata: Metadata<K> }[], count: number) => {\n  if (count === 0) {\n    return null;\n  }\n\n  const suggestionsData = data.slice(0, count);\n  return suggestionsData.reduce((suggestions, value, index) => {\n    const key = value.metadata.key;\n\n    if (index === count - 1) {\n      suggestions.set(key, 'end');\n    } else {\n      suggestions.set(key, true);\n    }\n\n    return suggestions;\n  }, new Map<K, 'end' | true>());\n};\n","import type { RefObject } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { Keys, addKeys } from '../utils/UNSAFE_keys';\nimport { DataState, Metadata, Range, SelectionDetail } from '../UNSAFE_Collection';\nimport {\n  SelectionRangeDetail,\n  useSelection,\n  useAdditiveSelection\n} from '../hooks/PRIVATE_useSelection';\nimport { useItemAction } from '../hooks/PRIVATE_useItemAction';\nimport { Props as ListViewProps } from '../UNSAFE_ListView';\nimport { getPrevNextKey, findElementByKey, keyExtractor } from '../utils/PRIVATE_collectionUtils';\nimport { ITEM_SELECTOR } from './ListItem';\nimport { scrollToVisible } from './ListUtils';\n\nexport const useSelectionItemAction = <K extends string | number, D>(\n  currentKey: K | undefined,\n  selectedKeys: Keys<K>,\n  selectionMode: ListViewProps<K, D>['selectionMode'] = 'none',\n  onSelectionChange: ListViewProps<K, D>['onSelectionChange'],\n  onItemAction: ListViewProps<K, D>['onItemAction'],\n  data: ListViewProps<K, D>['data'],\n  viewportConfig: ListViewProps<K, D>['viewportConfig'],\n  scrollToVisibleOffset: ListViewProps<K, D>['scrollToVisibleOffset'],\n  rootRef: RefObject<HTMLDivElement>,\n  pendingSelectionCallback: (detail: SelectionRangeDetail<K>, value: Range) => void,\n  isEmbedded: boolean\n) => {\n  // tracking the anchor key which is used for shift+click selection\n  const anchorKey = useRef<K | undefined>();\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange) {\n        if (detail.value.all === false && detail.value.keys.size > 0) {\n          // during regular selection, the last key selected by a user gesture is the anchor key\n          anchorKey.current = Array.from(detail.value.keys.values()).pop();\n        }\n        onSelectionChange(detail);\n      }\n    },\n    [anchorKey, onSelectionChange]\n  );\n\n  const handleSelectionRangeChange = useCallback(\n    (detail: SelectionRangeDetail<K>) => {\n      if (data && onSelectionChange) {\n        const value = handleSelectionRange(detail, data);\n        if (Array.isArray(value)) {\n          if (detail.eventType === 'shiftSpace') {\n            // during range selection by shift+space, the first key selected by a user gesture is the anchor key\n            anchorKey.current = detail.value.start;\n          } else {\n            // during range selection by shift+click/arrow keys, the last key selected by a user gesture is the anchor key\n            anchorKey.current = detail.value.end;\n          }\n          if (isEmbedded || selectionMode === 'multipleToggle') {\n            const keys = addKeys(selectedKeys, value);\n            onSelectionChange({ value: keys, target: null });\n          } else {\n            onSelectionChange({ value: { all: false, keys: new Set(value) }, target: null });\n          }\n        } else {\n          pendingSelectionCallback(detail, value);\n        }\n      }\n    },\n    [data, isEmbedded, selectedKeys, onSelectionChange, pendingSelectionCallback]\n  );\n\n  const { selectionProps } = useSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    isEmbedded || selectionMode === 'multipleToggle' ? 'none' : selectionMode,\n    false,\n    'replace',\n    handleSelectionChange,\n    anchorKey.current,\n    currentKey,\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    undefined,\n    (key: K) => {\n      if (rootRef.current) {\n        const elem = findElementByKey(rootRef.current, key, ITEM_SELECTOR);\n        if (elem) {\n          const scroller = viewportConfig?.scroller();\n          const offset = scrollToVisibleOffset ? scrollToVisibleOffset(rootRef.current) : 0;\n          scrollToVisible(elem, scroller != null ? scroller : rootRef.current, offset);\n        }\n      }\n    },\n    handleSelectionRangeChange\n  );\n\n  const { eventProps: additiveSelectionProps, setAdditiveSelectionACKey } = useAdditiveSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    selectionMode === 'multipleToggle' ? 'multiple' : isEmbedded ? selectionMode : 'none',\n    false,\n    (key: K) => {\n      if (data) {\n        return data.data.findIndex(\n          (value: { data: D; metadata: Metadata<K> }) => value.metadata.key === key\n        );\n      }\n      return -1;\n    },\n    (startIndex: number, endIndex: number) => {\n      if (data) {\n        const keys = data.data.map(\n          (value: { data: D; metadata: Metadata<K> }) => value.metadata.key\n        );\n        return keys.slice(startIndex, endIndex);\n      }\n      return [];\n    },\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    currentKey,\n    handleSelectionChange,\n    handleSelectionRangeChange,\n    selectionMode === 'multipleToggle' ? false : isEmbedded\n  );\n\n  const itemActionProps = useItemAction(currentKey, data, onItemAction, ITEM_SELECTOR, isEmbedded);\n\n  return {\n    eventProps: mergeProps(selectionProps, itemActionProps, additiveSelectionProps),\n    handleSelectionChange,\n    setAdditiveSelectionACKey\n  };\n};\n\nexport const handleSelectionRange = <K, D>(\n  detail: SelectionRangeDetail<K>,\n  dataState: DataState<K, D>\n) => {\n  const keys = dataState.data.map((value: { data: D; metadata: Metadata<K> }) => {\n    return value.metadata.key;\n  });\n  const startIndex = keys.indexOf(detail.value.start);\n  const endIndex = keys.indexOf(detail.value.end);\n  const minIndex = Math.min(startIndex, endIndex);\n  const maxIndex = Math.max(startIndex, endIndex);\n  if (minIndex === -1) {\n    // return a range to fetch so we can find all the keys, maxIndex should not be -1\n    return { offset: 0, count: dataState.totalSize };\n  } else {\n    // range of keys are in the current viewport, return them\n    return keys.slice(minIndex, maxIndex + 1);\n  }\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject, JSX } from 'preact';\nimport {\n  useRef,\n  useCallback,\n  useState,\n  useImperativeHandle,\n  useEffect,\n  useMemo\n} from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { containsKey, Keys, isKeyDefined, addKeys } from '../utils/UNSAFE_keys';\nimport { getPrevNextKey, ITEM_SELECTOR } from '../utils/PRIVATE_collectionUtils';\nimport { DataState, ItemContext, ListItemRendererContext, Range } from '../UNSAFE_Collection';\nimport { LoadMoreCollection, LOADMORE_STYLE_CLASS } from '../PRIVATE_LoadMoreCollection';\nimport { VirtualizedCollection } from '../PRIVATE_VirtualizedCollection';\nimport { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\nimport type { UnpackSignals } from '../utils/UNSAFE_attributeUtils';\nimport { ListViewItem, MemoizeListViewItem } from './ListItem';\nimport { getListViewRoles } from './ListRoles';\nimport { isMultipleSelection } from './ListUtils';\n\nimport { SelectionRangeDetail } from '../hooks/PRIVATE_useSelection';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Selector } from '../UNSAFE_Selector';\nimport { Props } from '../UNSAFE_ListView';\nimport { Sparkle } from './Sparkle';\nimport { listStyles } from './themes/ListStyles.css';\nimport { useTestId } from '../hooks/UNSAFE_useTestId';\nimport { useNavigation } from '../hooks/PRIVATE_useListCommon';\nimport { useCollectionInteractionContext } from '../hooks/UNSAFE_useCollectionInteractionContext';\nimport { usePromotedSection } from './usePromotedSection';\nimport { useSelectionItemAction, handleSelectionRange } from './useSelectionItemAction';\nimport { Inset } from '../UNSAFE_Inset';\n// TODO: add this import due to issue JET-67485, need to update once Stable is introduced\nimport './themes/redwood/ListBaseTheme.css';\n\n/**\n * Component that renders items as a flat list.\n * In order to maximize performance, only items that are visible in the viewport are rendered.\n */\nexport function List<K extends string | number, D>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  allowTabbableMode = true,\n  children,\n  data,\n  gridlines,\n  loadingIndicator = defaultLoadingIndicator,\n  loadMoreIndicator = defaultLoadMoreIndicator,\n  currentItemOverride,\n  onPersistCurrentItem,\n  onLoadRange,\n  onSelectionChange,\n  onItemAction,\n  rangeExtractor,\n  role = 'grid',\n  selectedKeys = emptyKeys as Keys<K>,\n  selectionMode = 'none',\n  viewportConfig,\n  currentItemVariant,\n  promotedSection,\n  isVirtualized = false,\n  customItemRenderer,\n  scrollToVisibleOffset,\n  testId,\n  scrollerRef,\n  reorderProps,\n  contextMenuTriggerProps,\n  itemPadding,\n  itemEnterKeyFocusBehavior = 'focusWithin',\n  ...props\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isFetching = useRef(false);\n\n  // tracking pending selection key that is not in current data\n  const pendingSelection = useRef<{ detail: SelectionRangeDetail<K>; range: Range }>();\n\n  const [active, setActive] = useState<boolean>(false);\n\n  const showGridline = (index: number) => {\n    // show bottom gridlines for each item, and for the last item if specified\n    return (\n      gridlines?.item === 'visible' &&\n      (index + 1 !== data?.totalSize || gridlines?.bottom === 'visible')\n    );\n  };\n\n  const showGridlineTop = () => {\n    // show the top gridline for the first item\n    return gridlines?.item === 'visible' && gridlines?.top === 'visible';\n  };\n\n  const ariaMultiSelectable =\n    selectionMode === 'none' ? undefined : isMultipleSelection(selectionMode);\n  const ariaRowCount =\n    data === null ? undefined : data.sizePrecision === 'exact' ? data.totalSize : -1;\n\n  const classes = classNames([listStyles.base]);\n\n  const isEmbedded = useCollectionInteractionContext() === 'embedded';\n  const itemVariant =\n    currentItemVariant !== undefined ? currentItemVariant : isEmbedded ? 'highlight' : 'none';\n\n  const pendingSelectionCallback = useCallback(\n    (detail: SelectionRangeDetail<K>, value: Range) => {\n      if (data) {\n        pendingSelection.current = {\n          detail: detail,\n          range: { offset: data.offset, count: data.data.length }\n        };\n        onLoadRange(value);\n      }\n    },\n    [data, onLoadRange]\n  );\n\n  /*****************************************************************************************/\n  /************************************* Load More *****************************************/\n  /*****************************************************************************************/\n\n  const lastRange = useRef({ offset: 0, count: 0 });\n  const handleLoadRange = useCallback(\n    (newRange: { offset: number; count: number }) => {\n      // check isFetching to avoid multiple load more at the same time (details in JET-68994)\n      if (\n        !isFetching.current ||\n        lastRange.current.offset !== newRange.offset ||\n        lastRange.current.count !== newRange.count\n      ) {\n        isFetching.current = true;\n        lastRange.current = newRange;\n        onLoadRange(newRange);\n      }\n    },\n    [isFetching, onLoadRange]\n  );\n\n  useEffect(() => {\n    isFetching.current = false;\n    // listen to data because when one of them gets updated, the fetching is done\n  }, [data]);\n\n  const listRoles = useMemo(() => getListViewRoles(role), [role]);\n\n  const arrowKeyAndHandlers = {\n    ArrowUp: (key?: K) => getPrevNextKey(rootRef.current, key, true, ITEM_SELECTOR),\n    ArrowDown: (key?: K) => getPrevNextKey(rootRef.current, key, false, ITEM_SELECTOR)\n  };\n\n  const { navigationProps, currentKey, showFocusRing, isCurrentTabbableKey } = useNavigation(\n    data,\n    rootRef,\n    (elem: Element) => {\n      return idExtractor(elem, listRoles.cell);\n    },\n    arrowKeyAndHandlers,\n    currentItemOverride,\n    onPersistCurrentItem,\n    viewportConfig,\n    scrollToVisibleOffset,\n    selectionMode !== 'multiple' || isEmbedded,\n    allowTabbableMode,\n    true,\n    isEmbedded,\n    itemEnterKeyFocusBehavior === 'focusWithin'\n  );\n\n  const { eventProps, handleSelectionChange, setAdditiveSelectionACKey } = useSelectionItemAction(\n    currentKey,\n    selectedKeys,\n    selectionMode,\n    onSelectionChange,\n    onItemAction,\n    data,\n    viewportConfig,\n    scrollToVisibleOffset,\n    rootRef,\n    pendingSelectionCallback,\n    isEmbedded\n  );\n\n  if (data && pendingSelection.current !== undefined && onSelectionChange) {\n    const keys = handleSelectionRange(pendingSelection.current.detail, data);\n    if (Array.isArray(keys)) {\n      if (!isEmbedded) {\n        onSelectionChange({ value: { all: false, keys: new Set(keys) }, target: null });\n      } else {\n        const value = addKeys(selectedKeys, keys);\n        onSelectionChange({ value, target: null });\n      }\n    }\n    const range = pendingSelection.current\n      ? pendingSelection.current.range\n      : { offset: data.offset, count: data.data.length };\n    data = adjustDataState(data, range);\n    pendingSelection.current = undefined;\n    onLoadRange(range);\n  }\n\n  const { sparkleHeight, suggestions } = usePromotedSection(data, promotedSection, rootRef);\n\n  // TODO: check suggestions before Sparkle would cause a scrolling issue\n  const sparkleIndicator = <Sparkle sparkleHeight={sparkleHeight}></Sparkle>;\n\n  // Collection generic is of this type\n  type DataStateData = DataState<K, D>['data'][number];\n\n  // returns an ListItemContext based on ItemContext (added metadata and selector)\n  // note the type for ItemContext, this is the context coming from Collection\n  const getItemContext = useCallback(\n    (context: ItemContext<DataStateData>) => {\n      const dataStateData = context.data;\n      const selectorRenderer = isMultipleSelection(selectionMode)\n        ? () => (\n            <Selector\n              onChange={(detail) => {\n                handleSelectionChange(detail);\n                setAdditiveSelectionACKey(dataStateData.metadata.key);\n              }}\n              rowKey={dataStateData.metadata.key}\n              selectedKeys={selectedKeys}></Selector>\n          )\n        : undefined;\n\n      return {\n        index: context.index,\n        data: dataStateData.data,\n        metadata: dataStateData.metadata,\n        selector: selectorRenderer\n      };\n    },\n    [selectionMode, selectedKeys, handleSelectionChange]\n  );\n\n  const ItemComponent = isVirtualized ? ListViewItem : MemoizeListViewItem;\n\n  const childrenComponent = (context: ItemContext<DataStateData>) => {\n    const listItemContext = getItemContext(context);\n    const suggestion = suggestions?.get(listItemContext.metadata.key);\n    const isTabbable = allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key);\n    const isFocused = currentKey === listItemContext.metadata.key && !isTabbable;\n    const isActive = isFocused && active;\n    const isSelected = containsKey(selectedKeys, listItemContext.metadata.key);\n    const isFocusRingVisible = isFocused && showFocusRing;\n    const listItemFunc = (ctx: ListItemRendererContext<K, D>, otherProps?: any) => (\n      <ItemComponent\n        key={listItemContext.metadata.key}\n        context={ctx}\n        isFocused={isFocused}\n        isFocusRingVisible={isFocusRingVisible}\n        isActive={isActive}\n        isGridlineVisible={showGridline(listItemContext.index)}\n        isSelected={isSelected}\n        isTabbable={allowTabbableMode && isCurrentTabbableKey(listItemContext.metadata.key)}\n        role={role}\n        selectionMode={selectionMode}\n        currentItemVariant={itemVariant}\n        padding={itemPadding}\n        {...(suggestion && { suggestion })}\n        {...(listItemContext.index === 0 && { isTopGridlineVisible: showGridlineTop() })}\n        {...otherProps}>\n        {children}\n      </ItemComponent>\n    );\n\n    // if customItemRenderer is specified (ExpandableList and GroupedList)\n    // create a custom context with additional info including a function\n    // that helps create the default item component\n    if (customItemRenderer) {\n      const customRendererContext = {\n        listItemContext,\n        isFocused,\n        isFocusRingVisible,\n        isSelected,\n        isTabbable,\n        isActive,\n        defaultListItem: listItemFunc\n      };\n      return customItemRenderer(customRendererContext);\n    }\n    return listItemFunc(listItemContext);\n  };\n\n  viewportConfig = getViewportConfig(rootRef, viewportConfig);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === ' ' && isKeyDefined(currentKey) && selectionMode !== 'none') {\n        setActive(true);\n      }\n    },\n    [currentKey, selectionMode, setActive]\n  );\n\n  const handleKeyUp = useCallback(() => {\n    setActive(false);\n  }, [setActive]);\n\n  useImperativeHandle(scrollerRef!, () => rootRef.current);\n\n  // if data is not specified, listview should show loading indicator\n  // todo: replace placeholder with actual SkeletonContainer component (Ash is working on)\n  const testIdProps = useTestId(testId);\n  return (\n    <div\n      {...mergeProps(\n        eventProps,\n        navigationProps,\n        contextMenuTriggerProps || {},\n        reorderProps || {},\n        {\n          onKeyDown: handleKeyDown,\n          onKeyUp: handleKeyUp\n        },\n        props\n      )}\n      {...testIdProps}\n      role={role}\n      aria-rowcount={role === 'grid' ? ariaRowCount : undefined}\n      aria-colcount={role === 'grid' ? 1 : undefined}\n      ref={rootRef}\n      class={classes}\n      tabIndex={0}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={ariaMultiSelectable}>\n      {data == null ? (\n        loadingIndicator\n      ) : isVirtualized ? (\n        <VirtualizedCollection\n          data={data}\n          itemSelector={ITEM_SELECTOR}\n          loadMoreIndicator={loadMoreIndicator}\n          onLoadRange={onLoadRange}\n          rangeExtractor={rangeExtractor}\n          suggestions={sparkleIndicator}\n          viewportConfig={viewportConfig}>\n          {childrenComponent}\n        </VirtualizedCollection>\n      ) : (\n        <LoadMoreCollection\n          data={data.data}\n          loadMoreIndicator={loadMoreIndicator}\n          hasMore={data.sizePrecision === 'atLeast' && data.data.length <= data.totalSize}\n          onLoadMore={() => {\n            data && handleLoadRange({ offset: 0, count: data.data.length + 25 });\n          }}\n          suggestions={sparkleIndicator}\n          viewportConfig={viewportConfig}>\n          {childrenComponent}\n        </LoadMoreCollection>\n      )}\n    </div>\n  );\n}\n\nconst getViewportConfig = (rootRef: RefObject<HTMLElement>, config?: ViewportConfig) => {\n  return (\n    config ?? {\n      scroller: () => {\n        return rootRef.current;\n      }\n    }\n  );\n};\n\nconst idExtractor = (elem: Element, role: UnpackSignals<JSX.HTMLAttributes['role']>) => {\n  return elem.querySelector(`[role=${role}]`)?.id || '';\n};\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst defaultLoadingIndicator = (\n  <SkeletonContainer minimumCount={25}>\n    {() => {\n      return (\n        <Inset variant=\"listview\">\n          <Flex height=\"6x\" align=\"center\">\n            <Skeleton height=\"4x\" />\n          </Flex>\n        </Inset>\n      );\n    }}\n  </SkeletonContainer>\n);\n\nconst defaultLoadMoreIndicator = (\n  <div class={LOADMORE_STYLE_CLASS}>\n    <SkeletonContainer minimumCount={3}>\n      {() => {\n        return (\n          <Inset variant=\"listview\">\n            <Flex height=\"6x\" align=\"center\">\n              <Skeleton height=\"4x\" />\n            </Flex>\n          </Inset>\n        );\n      }}\n    </SkeletonContainer>\n  </div>\n);\n\n/**\n * Adjust the DataState as needed if it contains more than needed for the specified range\n */\nconst adjustDataState = <K, D>(dataState: DataState<K, D>, range: Range | null) => {\n  if (range) {\n    // prevent range offset from being larger than the data state\n    const safeRangeOffset = Math.min(range.offset, dataState.offset + dataState.totalSize);\n    const diff = safeRangeOffset - dataState.offset;\n    if (diff > 0) {\n      dataState = {\n        offset: safeRangeOffset,\n        data: dataState.data.slice(diff, diff + range.count),\n        totalSize: dataState.totalSize,\n        sizePrecision: dataState.sizePrecision\n      };\n    }\n  }\n  return dataState;\n};\n"],"names":["getListViewRoles","ariaRole","list","item","cell","ITEM_SELECTOR","ListViewItem","children","context","itemDepth","isFocused","isFocusRingVisible","isActive","isGridlineVisible","isSelected","isTopGridlineVisible","isTabbable","role","selectionMode","suggestion","currentItemVariant","padding","rootRef","useRef","roles","useMemo","itemKey","metadata","key","itemIndex","index","cellRoleAttributes","interactionProps","applyActiveStyle","applyHoverStyle","applyPseudoHoverStyle","useInteractionStyle","variantClasses","listItemMultiVariantStyles","selectable","isSelectable","selected","selectedSingle","needsEventsHover","pseudoHover","active","focusHighlight","focusRingVisible","gridlineTop","gridlineBottom","paddingClasses","push","paddingStyles","allPadding","top","topItemPadding","bottom","bottomItemPadding","start","startItemPadding","end","endItemPadding","classes","classNames","styleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","cls","cellStyles","flex","alignSelf","cellClasses","isMultipleSelection","listItemStyles","checkboxContainer","_jsx","jsx","undefined","ref","id","useId","style","onKeyDown","event","stopPropagation","TabbableModeContext","Provider","value","FocusTrap","isDisabled","restoreFocusRef","isItemSelected","MemoizeListViewItem","memo","prev","next","compareListItemContext","SkeletonContainer","minimumCount","isVisible","setIsVisible","useState","useEffect","setTimeout","containerClasses","skeletonStyles","container","Array","map","_element","Sparkle","sparkleHeight","name","useTheme","height","sparkleClasses","sparkleStyles","base","globalImages","findSuggestions","data","count","slice","reduce","suggestions","set","Map","handleSelectionRange","detail","dataState","keys","startIndex","indexOf","endIndex","minIndex","Math","min","maxIndex","max","offset","totalSize","getViewportConfig","config","scroller","current","idExtractor","elem","querySelector","emptyKeys","all","Set","defaultLoadingIndicator","Inset","variant","Flex","align","Skeleton","defaultLoadMoreIndicator","LOADMORE_STYLE_CLASS","adjustDataState","range","safeRangeOffset","diff","sizePrecision","ariaLabel","ariaLabelledBy","ariaDescribedBy","allowTabbableMode","gridlines","loadingIndicator","loadMoreIndicator","currentItemOverride","onPersistCurrentItem","onLoadRange","onSelectionChange","onItemAction","rangeExtractor","selectedKeys","viewportConfig","promotedSection","isVirtualized","customItemRenderer","scrollToVisibleOffset","testId","scrollerRef","reorderProps","contextMenuTriggerProps","itemPadding","itemEnterKeyFocusBehavior","props","isFetching","pendingSelection","setActive","ariaMultiSelectable","ariaRowCount","listStyles","isEmbedded","useCollectionInteractionContext","itemVariant","pendingSelectionCallback","useCallback","length","lastRange","handleLoadRange","newRange","listRoles","arrowKeyAndHandlers","ArrowUp","getPrevNextKey","ArrowDown","navigationProps","currentKey","showFocusRing","isCurrentTabbableKey","useNavigation","eventProps","handleSelectionChange","setAdditiveSelectionACKey","anchorKey","size","from","pop","handleSelectionRangeChange","isArray","eventType","addKeys","target","selectionProps","useSelection","element","keyExtractor","isPrev","findElementByKey","scrollToVisible","additiveSelectionProps","useAdditiveSelection","findIndex","itemActionProps","useItemAction","mergeProps","useSelectionItemAction","setSparkleHeight","placeholder","PLACEHOLDER_STYLE_CLASS","offsetHeight","suggestionItems","querySelectorAll","forEach","usePromotedSection","sparkleIndicator","getItemContext","dataStateData","selectorRenderer","Selector","onChange","rowKey","selector","ItemComponent","childrenComponent","listItemContext","get","containsKey","listItemFunc","ctx","otherProps","defaultListItem","handleKeyDown","isKeyDefined","handleKeyUp","useImperativeHandle","testIdProps","useTestId","onKeyUp","tabIndex","VirtualizedCollection","itemSelector","LoadMoreCollection","hasMore","onLoadMore"],"mappings":"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"}