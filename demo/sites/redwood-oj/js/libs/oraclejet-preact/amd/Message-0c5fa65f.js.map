{"version":3,"file":"Message-0c5fa65f.js","sources":["../../src/PRIVATE_Message/MessageCloseButton.tsx","../../src/PRIVATE_Message/MessageCustomStartIcon.tsx","../../src/PRIVATE_Message/MessageDetail.tsx","../../src/PRIVATE_Message/MessageHeader.tsx","../../src/PRIVATE_Message/MessageTimestamp.tsx","../../src/PRIVATE_Message/Message.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageVariant } from './Message.types';\nimport { messageCloseButtonStyles } from './themes/MessageStyles.css';\n\n/**\n * Props for the MessageCloseButton component\n */\ntype Props = {\n  /**\n   * The callback function to be called when the close icon is clicked\n   */\n  onAction: (event?: Event) => void;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * A Component for rendering the message close button\n */\nfunction MessageCloseButton({ onAction, variant = 'banner' }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const renderedButton = (\n    <IconButton\n      aria-label={translations.message_close()}\n      size=\"sm\"\n      variant=\"borderless\"\n      onAction={onAction}>\n      <CloseIcon />\n    </IconButton>\n  );\n  // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.\n  const classes = classNames([messageCloseButtonStyles.base, messageCloseButtonStyles[variant]]);\n\n  // Otherwise, render the close icon\n  return (\n    <div class={classes} data-oj-message-close-button=\"\">\n      {renderedButton}\n    </div>\n  );\n}\n\nexport { MessageCloseButton };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageStartIconStyles } from './themes/MessageStyles.css';\nimport { MessageRendererDataItem } from './Message.types';\n\n/**\n * Props for the StartIcon component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the start icon\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  renderer: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n};\n\n/**\n * Component for rendering custom icon/content for start icon in Message\n */\nfunction MessageCustomStartIcon<K, D>({ item, renderer }: Props<K, D>) {\n  // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.\n  const classes = classNames([\n    messageStartIconStyles.base,\n    // for now only toast has support for custom icon\n    messageStartIconStyles.toast,\n    messageStartIconStyles.customToast\n  ]);\n  return (\n    <div class={classes} role=\"presentation\" data-oj-message-custom-icon=\"\">\n      {renderer(item)}\n    </div>\n  );\n}\n\nexport { MessageCustomStartIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, Fragment } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageDetailStyles } from './themes/MessageStyles.css';\nimport { MessageRendererDataItem, MessageVariant } from './Message.types';\nimport { isValidValueForProp } from './MessageFormattingUtils';\n\ntype MessageWithDetailText = {\n  /**\n   * The detail text for the message\n   */\n  detail?: string;\n};\n\n/**\n * Props for the Detail component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the detail content\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  renderer?: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Default renderer for rendering the detail content.\n *\n * @param item The data item object\n * @returns Rendered detail content\n */\nfunction defaultDetailRenderer<D extends MessageWithDetailText>(\n  item: MessageRendererDataItem<unknown, D>\n): ComponentChildren {\n  const { detail } = item.data;\n  // If the detail is null or an empty string, do not render the\n  // content row\n  if (!isValidValueForProp(detail)) {\n    return null;\n  }\n  return <Fragment>{detail}</Fragment>;\n}\n\n/**\n * Detail Component for rendering the detail content of the Message\n */\nfunction MessageDetail<K, D extends MessageWithDetailText>({\n  item,\n  renderer,\n  variant = 'banner'\n}: Props<K, D>) {\n  const isCustomRendered = renderer != null;\n  const renderedContent = (renderer ?? defaultDetailRenderer)(item);\n\n  if (renderedContent == null) return null;\n\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  const classes = classNames([messageDetailStyles.base, messageDetailStyles[variant]]);\n  return (\n    <div class={classes} {...(isCustomRendered ? { 'data-oj-message-custom-detail': '' } : {})}>\n      {renderedContent}\n    </div>\n  );\n}\n\nexport { MessageDetail };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageHeaderStyles } from './themes/MessageStyles.css';\nimport { MessageVariant } from './Message.types';\n\n/**\n * Props for the MessageHeader component\n */\ntype MessageHeaderProps = {\n  variant?: MessageVariant;\n  children?: ComponentChildren;\n};\n/**\n * A component that styles the header for the message component\n * @param param0 Props\n * @returns MessageHeader component instance\n */\nexport function MessageHeader({ children, variant = 'banner' }: MessageHeaderProps) {\n  const rootClasses = classNames([messageHeaderStyles.base, messageHeaderStyles[variant]]);\n  return (\n    <div role=\"presentation\" class={rootClasses}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageTimestampStyles } from './themes/MessageStyles.css';\nimport { MessageVariant } from './Message.types';\nimport { formatTimestamp } from './MessageFormattingUtils';\n\n/**\n * Props for the Timestamp component\n */\ntype Props = {\n  /**\n   * The timestamp to show in ISO format\n   */\n  value: string;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Timestamp Component for rendering timestamp in Message\n */\nfunction MessageTimestamp({ value, variant = 'banner' }: Props) {\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.\n  const classes = classNames([messageTimestampStyles[variant]]);\n\n  // Otherwise, render the timestamp\n  const formattedTimestamp = formatTimestamp(value as string);\n  return <div class={classes}>{formattedTimestamp}</div>;\n}\n\nexport { MessageTimestamp };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { Flex } from '../UNSAFE_Flex';\nimport { MessageBannerVariantOptions } from '../UNSAFE_MessageBanner';\nimport { MessageBannerRedwoodTheme } from '../UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme';\nimport { MessageToastItem } from '../UNSAFE_MessageToast';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { Timer } from '../utils/PRIVATE_timer';\nimport { classNames as cx } from '../utils/UNSAFE_classNames';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { MessageRendererDataItem, MessageSeverity } from './Message.types';\nimport { MessageCloseButton } from './MessageCloseButton';\nimport { MessageCustomStartIcon } from './MessageCustomStartIcon';\nimport { MessageDetail } from './MessageDetail';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageHeader } from './MessageHeader';\nimport { MessageStartIcon } from './MessageStartIcon';\nimport { MessageSummary } from './MessageSummary';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { playSound, severityBasedStyleClass } from './MessageUtils';\nimport { messageStyles } from './themes/MessageStyles.css';\nimport { xUnits } from '#UNSAFE_Theme';\nimport { Size } from '#utils/UNSAFE_size';\n\n// TODO: Refactor Message Item types\n// \n\n/**\n * An object representing a single message in Message component.\n */\nexport type MessageItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: MessageSeverity;\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * A ref object for holding reference to this component\n   */\n  messageRef?: Ref<HTMLDivElement>;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  detailRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  iconRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The parent\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message to be removed from the DOM. If the parent\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * A message can be a Banner message or Toast message.\n   *\n   * Furthermore, a Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  variant?: 'pageBanner' | 'sectionBanner' | 'toast';\n};\n\n/**\n * Determines the base variant of the message - banner or toast\n *\n * @param variant The message variant\n * @returns The base variant\n */\nfunction getBaseVariant(variant: 'pageBanner' | 'sectionBanner' | 'toast') {\n  if (variant === 'pageBanner' || variant === 'sectionBanner') {\n    return 'banner';\n  }\n  return 'toast';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\n/**\n * Default timeout duration for autoTimeout in milliseconds\n */\nconst MIN_SECONDS = 5;\nconst DEFAULT_TIMEOUT = MIN_SECONDS * 1000;\n\n/**\n * Component that renders an individual message\n */\nfunction Message<K extends string | number = string | number, D extends MessageItem = MessageItem>({\n  detailRenderer,\n  iconRenderer,\n  item,\n  onClose,\n  messageRef = () => {},\n  variant = 'pageBanner'\n}: Props<K, D>) {\n  const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;\n  const { autoTimeout = 'off' } = item.data as MessageToastItem;\n  const baseVariant = getBaseVariant(variant);\n\n  /**\n   * Handles clicking on the close icon of the message\n   */\n  const handleClose = useCallback(() => {\n    onClose?.(item);\n  }, [item, onClose]);\n\n  /**\n   * Handles closing the message on pressing Esc\n   */\n  const handleCloseOnEsc = useCallback(\n    (event: KeyboardEvent) => {\n      // Close the message only when closeAffordance is on\n      if (event.key === 'Escape' && closeAffordance === 'on') {\n        onClose?.(item);\n      }\n    },\n    [closeAffordance, item, onClose]\n  );\n\n  /**\n   * Set auto timeout for toast messages\n   */\n  const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';\n  const currentTimerRef = useRef<Timer>();\n  const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;\n  const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;\n\n  const startTimer = useCallback(() => {\n    if (currentTimerRef.current) return;\n\n    currentTimerRef.current = new Timer(handleClose, timeoutDuration);\n  }, [handleClose, timeoutDuration]);\n\n  const clearTimer = useCallback(() => {\n    if (!currentTimerRef.current) return;\n\n    currentTimerRef.current.clear();\n    currentTimerRef.current = undefined;\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    currentTimerRef.current?.pause();\n  }, []);\n\n  const resumeTimer = useCallback(() => {\n    currentTimerRef.current?.resume();\n  }, []);\n\n  useEffect(() => {\n    if (isValidValueForProp(sound)) {\n      // It is sufficient to check for the value to be a\n      // non-empty string. The playSound method takes care of the rest.\n      playSound(sound);\n    }\n\n    // on mount, start timer for toast messages if needed\n    if (shouldTimeout) {\n      startTimer();\n    }\n\n    return () => {\n      // clear out any pending timer\n      clearTimer();\n    };\n    // eslint-disable-next-line\n  }, []); // No deps to run this only on mount\n\n  const { variantClasses } = useComponentTheme<MessageBannerVariantOptions>(\n    MessageBannerRedwoodTheme,\n    {\n      severity\n    }\n  );\n\n  // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.\n  const rootClasses = cx([\n    baseVariant === 'banner' && variantClasses,\n    messageStyles.base[baseVariant],\n    // for now, we do not have severity based styling on toast. So, we ignore this class for toasts\n    variant !== 'toast' && severityBasedStyleClass(severity, baseVariant),\n    variant === 'sectionBanner' && messageStyles.section\n  ]);\n\n  const contentClasses = cx([messageStyles.content.base, messageStyles.content[baseVariant]]);\n\n  // We will be animating the root div, so add padding to an inner wrapper div so that\n  // when animating height looks smooth. If padding were to be added to the root\n  // div, the animation will not be smooth as height will never reach 0 due to the\n  // padding.\n  return (\n    <div\n      ref={messageRef}\n      class={rootClasses}\n      role=\"alert\"\n      aria-atomic=\"true\"\n      data-oj-key={`${typeof item.key}-${item.key}`}\n      tabIndex={0}\n      onKeyUp={handleCloseOnEsc}\n      onFocusIn={pauseTimer}\n      onFocusOut={resumeTimer}>\n      <div class={contentClasses}>\n        {iconRenderer ? (\n          <MessageCustomStartIcon item={item} renderer={iconRenderer} />\n        ) : isSeverityIconNeeded(severity) ? (\n          <MessageStartIcon severity={severity} variant={baseVariant} />\n        ) : null}\n        <Flex direction=\"column\" flex=\"1\" gap={xUnits(2) as Size}>\n          <MessageHeader variant={baseVariant}>\n            <MessageSummary variant={baseVariant} text={summary} role=\"heading\" aria-level={2} />\n            {isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && (\n              <MessageTimestamp variant={baseVariant} value={timestamp!} />\n            )}\n          </MessageHeader>\n          <MessageDetail variant={baseVariant} item={item} renderer={detailRenderer} />\n        </Flex>\n        {closeAffordance === 'on' && (\n          <MessageCloseButton variant={baseVariant} onAction={handleClose} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n"],"names":["MessageCloseButton","onAction","variant","translations","useTranslationBundle","renderedButton","_jsx","jsx","IconButton","message_close","size","children","CloseIcon","classes","classNames","messageCloseButtonStyles","base","class","MessageCustomStartIcon","item","renderer","messageStartIconStyles","toast","customToast","role","defaultDetailRenderer","detail","data","isValidValueForProp","Fragment","MessageDetail","isCustomRendered","renderedContent","messageDetailStyles","MessageHeader","rootClasses","messageHeaderStyles","MessageTimestamp","value","messageTimestampStyles","formattedTimestamp","formatTimestamp","isSeverityIconNeeded","severity","detailRenderer","iconRenderer","onClose","messageRef","closeAffordance","sound","summary","timestamp","autoTimeout","baseVariant","getBaseVariant","handleClose","useCallback","handleCloseOnEsc","event","key","shouldTimeout","currentTimerRef","useRef","timeoutDuration","MIN_SECONDS","startTimer","current","Timer","clearTimer","clear","undefined","pauseTimer","pause","resumeTimer","resume","useEffect","playSound","variantClasses","useComponentTheme","MessageBannerRedwoodTheme","cx","messageStyles","severityBasedStyleClass","section","contentClasses","content","ref","tabIndex","onKeyUp","onFocusIn","onFocusOut","_jsxs","jsxs","MessageStartIcon","Flex","direction","flex","gap","xUnits","MessageSummary","text"],"mappings":"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"}