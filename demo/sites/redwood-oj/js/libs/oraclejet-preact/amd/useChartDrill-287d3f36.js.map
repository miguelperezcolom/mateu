{"version":3,"file":"useChartDrill-287d3f36.js","sources":["../../src/hooks/PRIVATE_useChartDrill/useChartDrill.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { getInfo } from '#utils/UNSAFE_visUtils';\nimport { ChartGroupInfo, Info, GroupDetail, ItemDetail } from '#utils/UNSAFE_visTypes/chart';\nimport { useVisDrill } from '#hooks/PRIVATE_useVisDrill';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\n\ntype DrillEventsProps<K, D> = {\n  rootRef: RefObject<HTMLDivElement>;\n  levelsArray: GroupLevelItem[][];\n  focusedItemInfo: Info;\n  focusedGroupInfo: ChartGroupInfo;\n  selectionMode: 'none' | 'single' | 'multiple';\n  getDataItem: (seriesIndex: number, groupIndex: number, groupPath: number[]) => D | undefined;\n  drilling: 'on' | 'groupsOnly' | 'off';\n  onItemDrill?: (detail: ItemDetail<K, D>) => void;\n  onGroupDrill?: (detail: GroupDetail) => void;\n};\n\nconst isDrillable = <K, D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>>(\n  info: { seriesIndex?: number; groupIndex?: number; levelIndex?: number },\n  drilling: 'on' | 'groupsOnly' | 'off',\n  levelsArray: GroupLevelItem[][],\n  getDataItem: (seriesIndex: number, groupIndex: number, path: number[]) => D | undefined\n) => {\n  const { seriesIndex, groupIndex, levelIndex } = info;\n\n  if (groupIndex === undefined || levelsArray.length < 1) {\n    return false;\n  }\n\n  const groupInfo = levelsArray[levelsArray.length - 1][groupIndex];\n  if (seriesIndex != null) {\n    const itemDrilling = getDataItem(seriesIndex, groupIndex, groupInfo.path)?.drilling != 'off';\n    return drilling === 'on' && itemDrilling;\n  } else if (levelIndex !== undefined) {\n    return levelsArray[levelIndex][groupIndex].item.drilling != 'off';\n  }\n\n  return false;\n};\n\n/**\n * Returns the event handlers for drill support.\n */\nexport function useChartDrill<K, D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>>({\n  rootRef,\n  focusedItemInfo,\n  focusedGroupInfo,\n  levelsArray,\n  selectionMode,\n  drilling,\n  getDataItem,\n  onItemDrill,\n  onGroupDrill\n}: DrillEventsProps<K, D>) {\n  const processDrill = useCallback(\n    (info?: { seriesIndex?: number; groupIndex?: number; levelIndex?: number }) => {\n      if (\n        !info ||\n        info.groupIndex == undefined ||\n        !isDrillable(info, drilling, levelsArray, getDataItem)\n      ) {\n        return;\n      }\n\n      const { seriesIndex, groupIndex, levelIndex } = info;\n      const groupInfo =\n        levelsArray[levelIndex != undefined ? levelIndex : levelsArray.length - 1][groupIndex];\n      if (seriesIndex != null) {\n        const data = getDataItem(seriesIndex, groupIndex, groupInfo.path);\n        if (data) {\n          onItemDrill?.({\n            groupIndex,\n            seriesIndex,\n            data,\n            id: data?.id,\n            groupPath: groupInfo.path\n          });\n        }\n      } else {\n        onGroupDrill?.({\n          groupIndex,\n          group: groupInfo.item,\n          id: groupInfo.item.id,\n          groupPath: groupInfo.path\n        });\n      }\n    },\n    [drilling, getDataItem, onGroupDrill, onItemDrill, levelsArray]\n  );\n\n  const onDrill = useCallback(\n    (event: Event) => {\n      if (event.type === 'keydown') {\n        const focusedInfo = focusedItemInfo.isCurrent ? focusedItemInfo : focusedGroupInfo;\n        processDrill(focusedInfo);\n      } else {\n        processDrill(getInfo(rootRef, event.target as HTMLElement));\n      }\n    },\n    [rootRef, focusedItemInfo, focusedGroupInfo, processDrill]\n  );\n\n  return useVisDrill(selectionMode, onDrill);\n}\n"],"names":["rootRef","focusedItemInfo","focusedGroupInfo","levelsArray","selectionMode","drilling","getDataItem","onItemDrill","onGroupDrill","processDrill","useCallback","info","undefined","groupIndex","seriesIndex","levelIndex","length","groupInfo","itemDrilling","path","item","isDrillable","data","id","groupPath","group","onDrill","event","type","focusedInfo","isCurrent","getInfo","target","useVisDrill"],"mappings":"4JAuDM,UAAwFA,QAC5FA,EAAOC,gBACPA,EAAeC,iBACfA,EAAgBC,YAChBA,EAAWC,cACXA,EAAaC,SACbA,EAAQC,YACRA,EAAWC,YACXA,EAAWC,aACXA,IAEA,MAAMC,EAAeC,eAClBC,IACC,IACGA,GACkBC,MAAnBD,EAAKE,aAzCO,EAClBF,EACAN,EACAF,EACAG,KAEA,MAAMQ,YAAEA,EAAWD,WAAEA,EAAUE,WAAEA,GAAeJ,EAEhD,QAAmBC,IAAfC,GAA4BV,EAAYa,OAAS,EACnD,OAAO,EAGT,MAAMC,EAAYd,EAAYA,EAAYa,OAAS,GAAGH,GACtD,GAAmB,MAAfC,EAAqB,CACvB,MAAMI,EAAiF,OAAlEZ,EAAYQ,EAAaD,EAAYI,EAAUE,OAAOd,SAC3E,MAAoB,OAAbA,GAAqBa,CAC7B,CAAM,YAAmBN,IAAfG,GACmD,OAArDZ,EAAYY,GAAYF,GAAYO,KAAKf,QAGtC,EAsBLgB,CAAYV,EAAMN,EAAUF,EAAaG,GAE1C,OAGF,MAAMQ,YAAEA,EAAWD,WAAEA,EAAUE,WAAEA,GAAeJ,EAC1CM,EACJd,EAA0BS,MAAdG,EAA0BA,EAAaZ,EAAYa,OAAS,GAAGH,GAC7E,GAAmB,MAAfC,EAAqB,CACvB,MAAMQ,EAAOhB,EAAYQ,EAAaD,EAAYI,EAAUE,MACxDG,GACFf,IAAc,CACZM,aACAC,cACAQ,OACAC,GAAID,GAAMC,GACVC,UAAWP,EAAUE,MAG1B,MACCX,IAAe,CACbK,aACAY,MAAOR,EAAUG,KACjBG,GAAIN,EAAUG,KAAKG,GACnBC,UAAWP,EAAUE,MAExB,GAEH,CAACd,EAAUC,EAAaE,EAAcD,EAAaJ,IAG/CuB,EAAUhB,eACbiB,IACC,GAAmB,YAAfA,EAAMC,KAAoB,CAC5B,MAAMC,EAAc5B,EAAgB6B,UAAY7B,EAAkBC,EAClEO,EAAaoB,EACd,MACCpB,EAAasB,EAAAA,QAAQ/B,EAAS2B,EAAMK,QACrC,GAEH,CAAChC,EAASC,EAAiBC,EAAkBO,IAG/C,OAAOwB,EAAWA,YAAC7B,EAAesB,EACpC"}