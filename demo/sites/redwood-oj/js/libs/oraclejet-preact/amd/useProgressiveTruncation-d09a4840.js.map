{"version":3,"file":"useProgressiveTruncation-d09a4840.js","sources":["../../src/UNSAFE_TabBarCommon/useProgressiveTruncation.ts"],"sourcesContent":["import type { RefObject } from 'preact';\nimport { useCallback, useLayoutEffect, useState, useRef, StateUpdater } from 'preact/hooks';\nimport { useResizeObserver } from '../hooks/UNSAFE_useResizeObserver';\nimport { Size } from '../utils/UNSAFE_size';\nimport { getTabWidths } from '../utils/PRIVATE_tabBarUtils';\nimport type { TrailingContentInfo } from '../utils/PRIVATE_tabBarUtils';\n\ntype ProgressiveTruncationProps = {\n  rootRef: RefObject<HTMLDivElement>;\n  isDisabled?: boolean;\n};\n\nexport const useProgressiveTruncation = <K extends string | number>({\n  rootRef,\n  isDisabled = false\n}: ProgressiveTruncationProps) => {\n  const trailingContentWidths = useRef(new Map<K, TrailingContentInfo>());\n  const [tabMaxWidth, setTabMaxWidth] = useState<Map<K, Size>>();\n  const [tabBarWidth, setTabBarWidth] = useState<number>(0);\n\n  useLayoutEffect(() => {\n    if (tabMaxWidth == undefined && rootRef && rootRef.current && !isDisabled) {\n      const isOverflow = tabBarWidth < rootRef.current.scrollWidth;\n      if (!isOverflow) {\n        return;\n      }\n      const tabWidths = getTabWidths(\n        rootRef.current,\n        trailingContentWidths,\n        isDisabled,\n        tabBarWidth,\n        false\n      );\n\n      const tabMaxWidthMap = new Map(\n        tabWidths.map((tab) => [tab.key, (tab.maxWidth + 'px') as Size])\n      );\n      setTabMaxWidth(tabMaxWidthMap);\n    }\n  }, [tabBarWidth, tabMaxWidth, isDisabled, rootRef]);\n\n  const getTabBarMaxWidth = useCallback(\n    (entry: { contentRect: { width: StateUpdater<number> } }) => {\n      if (tabBarWidth !== entry.contentRect.width) {\n        setTabBarWidth(entry.contentRect.width);\n        if (tabMaxWidth !== undefined) {\n          setTabMaxWidth(undefined);\n        }\n      }\n    },\n    [tabMaxWidth, tabBarWidth]\n  );\n  useResizeObserver(rootRef, getTabBarMaxWidth, { isDisabled: isDisabled });\n  return {\n    maxWidths: tabMaxWidth\n  };\n};\n"],"names":["rootRef","isDisabled","trailingContentWidths","useRef","Map","tabMaxWidth","setTabMaxWidth","useState","tabBarWidth","setTabBarWidth","useLayoutEffect","undefined","current","scrollWidth","tabWidths","getTabWidths","tabMaxWidthMap","map","tab","key","maxWidth","getTabBarMaxWidth","useCallback","entry","contentRect","width","useResizeObserver","maxWidths"],"mappings":"qJAYwC,EACtCA,UACAC,cAAa,MAEb,MAAMC,EAAwBC,EAAAA,OAAO,IAAIC,MAClCC,EAAaC,GAAkBC,EAAQA,YACvCC,EAAaC,GAAkBF,EAAQA,SAAS,GAEvDG,EAAAA,iBAAgB,KACd,GAAmBC,MAAfN,GAA4BL,GAAWA,EAAQY,UAAYX,EAAY,CAEzE,KADmBO,EAAcR,EAAQY,QAAQC,aAE/C,OAEF,MAAMC,EAAYC,EAAYA,aAC5Bf,EAAQY,QACRV,EACAD,EACAO,GACA,GAGIQ,EAAiB,IAAIZ,IACzBU,EAAUG,KAAKC,GAAQ,CAACA,EAAIC,IAAMD,EAAIE,SAAW,SAEnDd,EAAeU,EAChB,IACA,CAACR,EAAaH,EAAaJ,EAAYD,IAE1C,MAAMqB,EAAoBC,eACvBC,IACKf,IAAgBe,EAAMC,YAAYC,QACpChB,EAAec,EAAMC,YAAYC,YACbd,IAAhBN,GACFC,OAAeK,GAElB,GAEH,CAACN,EAAaG,IAGhB,OADAkB,EAAiBA,kBAAC1B,EAASqB,EAAmB,CAAEpB,WAAYA,IACrD,CACL0B,UAAWtB,EACZ"}