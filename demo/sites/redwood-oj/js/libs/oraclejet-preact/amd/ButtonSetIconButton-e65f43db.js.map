{"version":3,"file":"ButtonSetIconButton-e65f43db.js","sources":["../../src/UNSAFE_ButtonSetIconButton/ButtonSetIconButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef, ElementRef } from 'preact/compat';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport { ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '#utils/UNSAFE_interpolations/dimensions';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useButtonSetContext } from '#hooks/UNSAFE_useButtonSetContext';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport {\n  toggleStyling,\n  processSetButtonProps,\n  ButtonSetPosition,\n  LayoutWidths,\n  type InputTypes\n} from '#utils/UNSAFE_buttonUtils';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type ButtonSetIconButtonProps = WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * icon - the icon for the button\n     */\n    children?: ComponentChild;\n\n    /**\n     * InpuType indicate if the toggle is a radio or checkbox,\n     */\n    inputType?: InputTypes;\n\n    /**\n     * The name of the input group\n     */\n    inputName?: string;\n\n    /**\n     * The value of the input\n     */\n    value?: string;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * The position modifies the borders for usage inside a button group.\n     */\n    position?: ButtonSetPosition;\n\n    /**\n     * The layoutWidth specifies if the toggle button width fits the contents or\n     * the container.\n     */\n    layoutWidth?: LayoutWidths;\n  };\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * A ButtonSetIconButton is an icon button that allows users to switch\n * between states when pressed.\n */\nexport const ButtonSetIconButton = forwardRef(\n  (\n    {\n      children,\n      tooltip,\n      value,\n      accessibleLabel,\n      isSelected = false,\n      onToggle,\n      position,\n      testId,\n      width,\n      'aria-describedby': ariaDescribedBy,\n      ...props\n    }: ButtonSetIconButtonProps & VariationAccessibleLabelProps & TestIdProps,\n    ref: ForwardedRef<ButtonHandle>\n  ) => {\n    const buttonSetProps = useButtonSetContext();\n    const { inputProps, buttonSetButtonProps, isDisabled } = processSetButtonProps(\n      props,\n      buttonSetProps\n    );\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ?? accessibleLabel,\n      isDisabled: isDisabled\n    });\n\n    const styling = toggleStyling(\n      buttonSetButtonProps.layoutWidth,\n      isSelected,\n      false,\n      true,\n      buttonSetButtonProps.variant === 'outlined',\n      position,\n      undefined,\n      true\n    );\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(buttonSetButtonProps, ariaProps, tooltipProps)}\n          elementDetails={{ type: 'span', isFocusable: false, isLabel: true }}\n          onAction={() => onToggle?.({ value: isSelected })}\n          styling={styling}\n          width={buttonSetProps.width ? '100%' : width}\n          ref={ref}\n          testId={testId}>\n          <ToggleButtonLabel\n            label={accessibleLabel ?? tooltip}\n            display={'icons'}\n            isSelected={isSelected}\n            {...inputProps}\n            value={value}\n            startIcon={children}></ToggleButtonLabel>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nButtonSetIconButton.displayName = 'ButtonSetIconButton';\n"],"names":["ButtonSetIconButton","forwardRef","children","tooltip","value","accessibleLabel","isSelected","onToggle","position","testId","width","ariaDescribedBy","props","ref","buttonSetProps","useButtonSetContext","inputProps","buttonSetButtonProps","isDisabled","processSetButtonProps","tooltipContent","tooltipProps","useTooltip","text","styling","toggleStyling","layoutWidth","variant","undefined","ariaProps","_jsxs","Fragment","_jsx","BaseButton","mergeProps","elementDetails","type","isFocusable","isLabel","onAction","jsx","ToggleButtonLabel","label","display","startIcon","displayName"],"mappings":"ykBA8Ha,MAAAA,EAAsBC,EAAUA,YAC3C,EAEIC,WACAC,UACAC,QACAC,kBACAC,cAAa,EACbC,WACAC,WACAC,SACAC,QACA,mBAAoBC,KACjBC,GAELC,KAEA,MAAMC,EAAiBC,EAAAA,uBACjBC,WAAEA,EAAUC,qBAAEA,EAAoBC,WAAEA,GAAeC,wBACvDP,EACAE,IAGIM,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMpB,GAAWE,EACjBa,WAAYA,IAGRM,EAAUC,EAAaA,cAC3BR,EAAqBS,YACrBpB,GACA,GACA,EACiC,aAAjCW,EAAqBU,QACrBnB,OACAoB,GACA,GAGIC,EAAY,CAAE,mBAAoBlB,GAExC,OACEmB,OAACC,EAAQA,SAAA,CAAA7B,SAAA,CACP8B,EAAAA,IAACC,EAAAA,WAAU,IACLC,EAAUA,WAACjB,EAAsBY,EAAWR,GAChDc,eAAgB,CAAEC,KAAM,OAAQC,aAAa,EAAOC,SAAS,GAC7DC,SAAU,IAAMhC,IAAW,CAAEH,MAAOE,IACpCkB,QAASA,EACTd,MAAOI,EAAeJ,MAAQ,OAASA,EACvCG,IAAKA,EACLJ,OAAQA,WACRuB,EAACQ,IAAAC,EAAiBA,kBAChB,CAAAC,MAAOrC,GAAmBF,EAC1BwC,QAAS,QACTrC,WAAYA,KACRU,EACJZ,MAAOA,EACPwC,UAAW1C,MAEdkB,IAEH,IAINpB,EAAoB6C,YAAc"}