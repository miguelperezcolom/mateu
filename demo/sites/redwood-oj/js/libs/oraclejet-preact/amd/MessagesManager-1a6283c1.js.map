{"version":3,"file":"MessagesManager-1a6283c1.js","sources":["../../src/PRIVATE_Message/MessageStartIcon.tsx","../../src/PRIVATE_Message/MessageUtils.ts","../../src/PRIVATE_Message/MessageTransition.tsx","../../src/PRIVATE_Message/MessageSummary.tsx","../../src/PRIVATE_Message/MessagesManager.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageSeverity, MessageVariant } from './Message.types';\nimport { MessageConfirmationIcon } from '../PRIVATE_ThemedIcons/MessageConfirmationIcon';\nimport { MessageErrorIcon } from '../PRIVATE_ThemedIcons/MessageErrorIcon';\nimport { MessageInfoIcon } from '../PRIVATE_ThemedIcons/MessageInfoIcon';\nimport { MessageWarningIcon } from '../PRIVATE_ThemedIcons/MessageWarningIcon';\nimport { Flex } from '../UNSAFE_Flex';\nimport {\n  messageStartIconStyles,\n  severityIconStyles,\n  startIconContainerStyles\n} from './themes/MessageStyles.css';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\nconst severityIcons = {\n  confirmation: MessageConfirmationIcon,\n  error: MessageErrorIcon,\n  info: MessageInfoIcon,\n  warning: MessageWarningIcon\n};\n\n/**\n * Props for the StartIcon component\n */\ntype Props = TestIdProps & {\n  /**\n   * The icon severity\n   */\n  severity: Exclude<MessageSeverity, 'none'>;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * StartIcon Component for rendering the severity based icon in Message\n */\nfunction MessageStartIcon({ severity, testId, variant = 'banner' }: Props) {\n  const IconComponent = severityIcons[severity];\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const labelMap = {\n    confirmation: translations.message_confirmation(),\n    error: translations.message_error(),\n    info: translations.message_info(),\n    warning: translations.message_warning()\n  };\n  const testIdProps = useTestId(testId);\n\n  // TODO: JET-50793\n  const iconContent =\n    variant !== 'inline' ? (\n      <Flex align=\"center\" height=\"100%\">\n        <span class={startIconContainerStyles[variant]} role=\"img\" aria-label={labelMap[severity]}>\n          <IconComponent />\n        </span>\n      </Flex>\n    ) : (\n      <span class={startIconContainerStyles.inline} role=\"img\" aria-label={labelMap[severity]}>\n        <IconComponent />\n      </span>\n    );\n\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  return (\n    <div\n      class={classNames([\n        messageStartIconStyles.base,\n        messageStartIconStyles[variant],\n        severityIconStyles[variant]\n      ])}\n      role=\"presentation\"\n      {...testIdProps}>\n      {iconContent}\n    </div>\n  );\n}\n\nexport { MessageStartIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport * as Logger from '../utils/UNSAFE_logger';\nimport { playAudioFromURL, playDefaultNotificationSound } from '../utils/UNSAFE_soundUtils';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageSeverity, MessageVariant } from './Message.types';\n\n/**\n * Logger that prepends the component name to the message\n */\nconst MessageLogger = {\n  error: (message: string, type = 'common') => Logger.error(`JET Message(${type}): ${message}`),\n  warn: (message: string, type = 'common') => Logger.warn(`JET Message(${type}): ${message}`),\n  info: (message: string, type = 'common') => Logger.info(`JET Message(${type}): ${message}`),\n  log: (message: string, type = 'common') => Logger.log(`JET Message(${type}): ${message}`)\n};\n\n/**\n * Plays a sound based on the provided argument. Supported keywords:\n * 1. default - plays the default beep sound\n * 2. none - no sound will be played\n *\n * @param sound Supported keywords or URL to an audio file\n */\nasync function playSound(sound: string) {\n  if (sound === 'none') {\n    // no need to play any audio\n    return;\n  }\n\n  // For default, we play a beep sound using WebAudio API\n  if (sound === 'default') {\n    try {\n      playDefaultNotificationSound();\n    } catch (error) {\n      // Default sound is not played due to some error\n      // Log a message and return doing nothing else\n      MessageLogger.warn(`Failed to play the default sound. ${error}.`);\n    }\n    return;\n  }\n\n  // If it is not a key word, then it is an URL\n  try {\n    await playAudioFromURL(sound);\n  } catch (error) {\n    // Playing audio using the URL failed.\n    MessageLogger.warn(`Failed to play the audio from the url ${sound}. ${error}.`);\n  }\n}\n\n/**\n * A helper function that throws an error\n *\n * @param message The error message\n * @param type The type of the message that is throwing an error\n * @throws {Error}\n */\nfunction throwError(message: string, type = 'common') {\n  throw new Error(`JET Message(${type}) - ${message}`);\n}\n\n/**\n * Fetches a renderer for the current message if one is provided\n *\n * @param message The item context for the current message\n * @param rendererIdentifier Identifier of the current renderer\n * @param renderers All available renderers\n * @returns The renderer for rendering the custom content\n */\nfunction getRenderer<K, D, R>(\n  message: Item<K, D>,\n  rendererIdentifier?: string | ((item: Item<K, D>) => string | undefined),\n  renderers?: Record<string, (data: R) => ComponentChildren>,\n  type?: string\n) {\n  // If either detailRenderer function or record of renderers are not available,\n  // return null\n  if (!rendererIdentifier || !renderers) {\n    return undefined;\n  }\n\n  const rendererKey =\n    typeof rendererIdentifier === 'function' ? rendererIdentifier(message) : rendererIdentifier;\n\n  // If rendererKey is null or undefined, then we need to use default rendering\n  // so return null\n  if (rendererKey == null) {\n    return undefined;\n  }\n\n  // If the returned render key is a string but does not exist in the provided\n  // record of renderers, throw an error\n  if (!(rendererKey in renderers)) {\n    throwError(\n      `${rendererKey} is not a valid template name for the message with key=${message.key}`,\n      type\n    );\n  }\n\n  // Else, fetch and return the renderer\n  return renderers[rendererKey];\n}\n\n/**\n * Generates a root style class based on the severity. For invalid severity and severity=none\n * no specific style class exists.\n *\n * @param severity The message severity\n * @returns calculated style class based on the severity\n */\nfunction severityBasedStyleClass(severity: MessageSeverity, variant: MessageVariant) {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none' ? `oj-c-message${variant}-${severity}` : '';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\nexport { getRenderer, playSound, throwError, severityBasedStyleClass, isSeverityIconNeeded };\n","import { JSX, RenderableProps } from 'preact';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { useMessagesContext } from '../hooks/UNSAFE_useMessagesContext';\nimport { Transition, TransitionProps } from '../PRIVATE_TransitionGroup';\n\ntype State = 'entering' | 'exiting';\ntype AnimationStates = UseAnimationConfig<State, HTMLDivElement>['animationStates'];\ntype AnimationCallback = UseAnimationConfig<State, HTMLDivElement>['onAnimationEnd'];\ntype Props = RenderableProps<TransitionProps> & {\n  animationStates?: AnimationStates;\n  initialAnimationStyles?: JSX.HTMLAttributes<HTMLDivElement>['style'];\n};\n\nconst DEFAULT_ANIMATION_STATES = {};\n\n/**\n * A intermediary component that handles animation for the messages component.\n *\n * The expected flow is as follows:\n * 1. message removed from the data\n * 2. onExiting called and a callback is passed which needs to be called to complete the transition\n * 3. state set to \"exiting\" in this component\n * 4. triggers useAnimation to perform the exit animation\n * 5. onAnimationEnd is called after the animation, which invokes the callback provided earlier\n * 6. onExited is called (done when the callback mentioned above is called)\n * 7. message is removed from the UI\n *\n * @param param0 Props of the message component\n */\nexport function MessageTransition({\n  animationStates = DEFAULT_ANIMATION_STATES,\n  initialAnimationStyles,\n  onEntering,\n  onExiting,\n  ...transitionProps\n}: Props) {\n  const [state, setState] = useState<State>('entering');\n  const animationCallbackRef = useRef<() => void>();\n  const busyStateResolveRef = useRef<() => void>();\n  const { controller, nodeRef } = useAnimation(state, {\n    animationStates,\n    isAnimatedOnMount: true,\n    onAnimationEnd: useCallback<NonNullable<AnimationCallback>>(() => {\n      // resolve animation callbacks & busyStates\n      animationCallbackRef.current?.();\n      animationCallbackRef.current = undefined;\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n    }, [])\n  });\n  const { addBusyState } = useMessagesContext();\n\n  const onEnteringCallback = useCallback<NonNullable<TransitionProps['onEntering']>>(\n    (node, callback, metadata) => {\n      // cancel any existing animation\n      if (animationCallbackRef.current) {\n        animationCallbackRef.current = undefined;\n        controller.cancel();\n      }\n\n      // resolve any existing busyState\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n\n      onEntering?.(node, undefined, metadata);\n      // start the animation and set the callback & busyState\n      setState('entering');\n\n      // if there is no animation configured, resolve immediately\n      if (\n        animationStates['entering'] === undefined &&\n        animationStates['exiting => entering'] === undefined\n      ) {\n        callback?.();\n        return;\n      }\n      animationCallbackRef.current = callback;\n      busyStateResolveRef.current = addBusyState?.('messages animating');\n    },\n    [animationStates, controller, addBusyState, onEntering]\n  );\n\n  const onExitingCallback = useCallback<NonNullable<TransitionProps['onExiting']>>(\n    (node, callback, metadata) => {\n      // cancel any existing animation\n      if (animationCallbackRef.current) {\n        animationCallbackRef.current = undefined;\n        controller.cancel();\n      }\n\n      // resolve any existing busyState\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n\n      onExiting?.(node, undefined, metadata);\n      // start the animation and set the callback & busyState\n      setState('exiting');\n\n      // if there is no animation configured, resolve immediately\n      if (\n        animationStates['exiting'] === undefined &&\n        animationStates['entering => exiting'] === undefined\n      ) {\n        callback?.();\n        return;\n      }\n      animationCallbackRef.current = callback;\n      busyStateResolveRef.current = addBusyState?.('messages animating');\n    },\n    [animationStates, controller, addBusyState, onExiting]\n  );\n\n  // if animation is interrupted, the busyState may be left hanging. So clear that on unmount\n  // Note: When using a class-based component inside a functional component, the timings of\n  // componentDidMount and useEffect might differ. So, in order to guarantee the registration\n  // of the cleanup function, use useLayoutEffect instead of useEffect. This way we can make sure\n  // the cleanup registers at all times.\n  useLayoutEffect(() => () => busyStateResolveRef.current?.(), []);\n\n  return (\n    <div ref={nodeRef} style={initialAnimationStyles}>\n      <Transition\n        {...transitionProps}\n        onEntering={onEnteringCallback}\n        onExiting={onExitingCallback}\n      />\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { JSX } from 'preact';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { messageSummaryStyles } from './themes/MessageStyles.css';\nimport { MessageVariant } from './Message.types';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\ntype AriaProps = Pick<UnpackSignals<JSX.AriaAttributes>, 'aria-level'>;\n\n/**\n * Props for the Summary component\n */\ntype Props = AriaProps &\n  TestIdProps & {\n    /**\n     * The role associated with the message summary.\n     * In MessageToast and MessageBanner, role should be 'heading' and aria-level should be 2.\n     * In ComponentMessage, role should be undefined.\n     */\n    role?: UnpackSignals<JSX.HTMLAttributes['role']>;\n\n    /**\n     * The summary text\n     */\n    text?: string;\n\n    /**\n     * Style variant\n     */\n    variant?: MessageVariant;\n  };\n\n/**\n * Summary Component for rendering the summary text of the Message\n */\nfunction MessageSummary({\n  'aria-level': ariaLevel,\n  role,\n  text,\n  testId,\n  variant = 'banner'\n}: Props) {\n  const testIdProps = useTestId(testId);\n\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.\n  const classes = classNames([messageSummaryStyles.base, messageSummaryStyles[variant]]);\n  return (\n    <div aria-level={ariaLevel} role={role} class={classes} {...testIdProps}>\n      {text}\n    </div>\n  );\n}\n\nexport { MessageSummary };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, ComponentProps, Fragment } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { TransitionGroup } from '../PRIVATE_TransitionGroup';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { MessageTransition } from './MessageTransition';\n\n/**\n * Metadata passed on to the Transition component\n */\ntype TransitionMetadata<K> = {\n  index: number;\n  key: K;\n};\n\n/**\n * Type of the render context passed on to render individual message\n */\ntype MessageRenderContext<Key, Data> = {\n  /**\n   * The index of the current message\n   */\n  index: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n};\n\ntype PickedPropsFromMessageTransition = Pick<\n  ComponentProps<typeof MessageTransition>,\n  'animationStates' | 'initialAnimationStyles'\n>;\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = PickedPropsFromMessageTransition & {\n  /**\n   * A render function that renders individual child.\n   */\n  children?: (context: MessageRenderContext<Key, Data>) => ComponentChild;\n\n  /**\n   * Data for the messages. This data is used for rendering each message.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * A callback function that gets called before a message is removed\n   */\n  onMessageWillRemove?: (key: Key, index: number, node?: Element) => void;\n};\n\n/**\n * The component that renders individual messages for the provided data.\n */\nexport function MessagesManager<K extends string | number = string | number, D = any>({\n  data,\n  animationStates,\n  children,\n  initialAnimationStyles,\n  onMessageWillRemove\n}: Props<K, D>) {\n  /**\n   * Handles when a message has finished to exit.\n   *\n   * @param node The corresponding message element\n   * @param callback A callback function to be called after the animation is complete\n   */\n  const handleExited = useCallback(\n    async (node?: Element, metadata?: TransitionMetadata<K>) => {\n      metadata && onMessageWillRemove?.(metadata.key, metadata.index, node);\n    },\n    [onMessageWillRemove]\n  );\n\n  return (\n    <TransitionGroup elementType={Fragment}>\n      {data.map((item, index) => (\n        <MessageTransition\n          animationStates={animationStates}\n          initialAnimationStyles={initialAnimationStyles}\n          key={item.key}\n          metadata={{ index, key: item.key }}\n          onExited={handleExited}>\n          {children?.({ index, item })}\n        </MessageTransition>\n      ))}\n    </TransitionGroup>\n  );\n}\n"],"names":["severityIcons","confirmation","MessageConfirmationIcon","SvgSuccessS","error","MessageErrorIcon","SvgErrorS","info","MessageInfoIcon","SvgInformationS","warning","MessageWarningIcon","SvgWarningS","MessageLogger","message","type","Logger.warn","throwError","Error","DEFAULT_ANIMATION_STATES","MessageTransition","animationStates","initialAnimationStyles","onEntering","onExiting","transitionProps","state","setState","useState","animationCallbackRef","useRef","busyStateResolveRef","controller","nodeRef","useAnimation","isAnimatedOnMount","onAnimationEnd","useCallback","current","undefined","addBusyState","useMessagesContext","onEnteringCallback","node","callback","metadata","cancel","onExitingCallback","useLayoutEffect","_jsx","ref","style","children","Transition","severity","testId","variant","IconComponent","translations","useTranslationBundle","labelMap","message_confirmation","message_error","message_info","message_warning","testIdProps","useTestId","iconContent","jsx","Flex","align","height","class","startIconContainerStyles","role","inline","classNames","messageStartIconStyles","base","severityIconStyles","ariaLevel","text","classes","messageSummaryStyles","data","onMessageWillRemove","handleExited","async","key","index","TransitionGroup","elementType","Fragment","map","item","onExited","rendererIdentifier","renderers","rendererKey","isValidValueForProp","sound","playAudioFromURL","playDefaultNotificationSound"],"mappings":"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"}