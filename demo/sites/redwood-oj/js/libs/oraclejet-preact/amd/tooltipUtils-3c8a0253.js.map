{"version":3,"file":"tooltipUtils-3c8a0253.js","sources":["../../src/hooks/UNSAFE_useTooltip/TooltipManager.ts","../../src/utils/PRIVATE_tooltipUtils/tooltipUtils.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type TooltipManagerCallback = () => void;\n\nconst FocusTriggerKeys = ['Tab', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n\n/**\n * A global tooltip manager that\n * - ensures that only one tooltip is shown at a time\n * - detects a Tab key press and allows tooltips to check if their target was focused via keyboard\n */\nexport class TooltipManager {\n  private activeCallback: TooltipManagerCallback | null;\n\n  private triggerKeyActive: boolean;\n\n  private keyDownHandler = (event: KeyboardEvent) => {\n    if (FocusTriggerKeys.includes(event.key)) {\n      this.triggerKeyActive = true;\n      setTimeout(() => {\n        this.triggerKeyActive = false;\n      }, 100);\n    }\n    if (this.activeCallback && event.key === 'Escape') {\n      // hide active tooltip on Escape\n      this.activeCallback();\n    }\n  };\n\n  constructor() {\n    this.activeCallback = null;\n    this.triggerKeyActive = false;\n    window.addEventListener('keydown', this.keyDownHandler, true);\n  }\n\n  /**\n   * notifies the previously registered active tooltip callback and registers a new one\n   */\n  public register = (callback: TooltipManagerCallback) => {\n    if (this.activeCallback && this.activeCallback !== callback) {\n      this.activeCallback();\n    }\n    this.activeCallback = callback;\n  };\n\n  /**\n   * resets the registered active callback\n   */\n  public unregister = (callback: TooltipManagerCallback) => {\n    if (this.activeCallback === callback) {\n      this.activeCallback = null;\n    }\n  };\n\n  /**\n   * returns the active Tab key status ('active' means a Tab key press within the last 100ms)\n   */\n  public isTabKeyActive = () => {\n    return this.triggerKeyActive;\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { EnvironmentProvider } from '../../UNSAFE_Environment';\nimport { Coords, Floating, Placement } from '../../UNSAFE_Floating';\nimport { Layer } from '../../UNSAFE_Layer';\nimport { ColorScheme } from '../../UNSAFE_Theme';\nimport { TooltipManager } from '../../hooks/UNSAFE_useTooltip/TooltipManager';\n\n// Global TooltipManager singleton instance\nconst globalTooltipManager = new TooltipManager();\n\n/**\n * The delays (in ms) for Redwood tooltips.\n */\nexport const SHOW_TOOLTIP_DELAY = 1000;\nexport const HIDE_TOOLTIP_DELAY = 150;\n\n/**\n * Returns a global TooltipManager singleton instance\n */\nexport const getGlobalTooltipManager = (): TooltipManager => {\n  return globalTooltipManager;\n};\n\n/**\n * Wraps the tooltip content provided in the appropriate layering and returns the result for display.\n */\nexport const getWrappedTooltipContent = (\n  tooltipContent: JSXInternal.Element,\n  variant: 'tooltip' | 'datatip',\n  colorScheme: ColorScheme,\n  anchorRef: RefObject<Element | Coords>,\n  placement: Placement,\n  offset?: { mainAxis?: number; crossAxis?: number }\n): JSXInternal.Element => {\n  const defaultOffset = 8; // Redwood tooltip has a default offset of 8 pixels\n  const newOffset = offset ? offset : { mainAxis: defaultOffset, crossAxis: 0 };\n\n  const newColorScheme = !colorScheme || colorScheme === 'light' ? 'dark' : 'light';\n\n  const renderTooltipOrDatatip = () => {\n    if (variant === 'tooltip') {\n      return (\n        <EnvironmentProvider environment={{ colorScheme: newColorScheme }}>\n          {tooltipContent}\n        </EnvironmentProvider>\n      );\n    } else {\n      return <>{tooltipContent}</>;\n    }\n  };\n\n  return (\n    <Layer priority=\"tooltip\">\n      <Floating anchorRef={anchorRef} placement={placement} offsetValue={newOffset}>\n        {renderTooltipOrDatatip()}\n      </Floating>\n    </Layer>\n  );\n};\n"],"names":["FocusTriggerKeys","globalTooltipManager","constructor","this","keyDownHandler","event","includes","key","triggerKeyActive","setTimeout","activeCallback","register","callback","unregister","isTabKeyActive","window","addEventListener","tooltipContent","variant","colorScheme","anchorRef","placement","offset","newOffset","mainAxis","crossAxis","newColorScheme","_jsx","jsx","Layer","priority","children","Floating","offsetValue","EnvironmentProvider","environment","_Fragment","Fragment"],"mappings":"+LAUA,MAAMA,EAAmB,CAAC,MAAO,YAAa,aAAc,UAAW,aCMvE,MAAMC,EAAuB,UDmB3B,WAAAC,GAbQC,KAAAC,eAAkBC,IACpBL,EAAiBM,SAASD,EAAME,OAClCJ,KAAKK,kBAAmB,EACxBC,YAAW,KACTN,KAAKK,kBAAmB,CAAK,GAC5B,MAEDL,KAAKO,gBAAgC,WAAdL,EAAME,KAE/BJ,KAAKO,gBACN,EAYIP,KAAAQ,SAAYC,IACbT,KAAKO,gBAAkBP,KAAKO,iBAAmBE,GACjDT,KAAKO,iBAEPP,KAAKO,eAAiBE,CAAQ,EAMzBT,KAAAU,WAAcD,IACfT,KAAKO,iBAAmBE,IAC1BT,KAAKO,eAAiB,KACvB,EAMIP,KAAcW,eAAG,IACfX,KAAKK,iBA5BZL,KAAKO,eAAiB,KACtBP,KAAKK,kBAAmB,EACxBO,OAAOC,iBAAiB,UAAWb,KAAKC,gBAAgB,EACzD,wBCjB+B,yBADA,8BAMK,IAC9BH,6BAM+B,CACtCgB,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MACMC,EAAYD,GAAkB,CAAEE,SADhB,EACyCC,UAAW,GAEpEC,EAAkBP,GAA+B,UAAhBA,EAAmC,QAAT,OAcjE,OACEQ,EAAAC,IAACC,EAAKA,MAAA,CAACC,SAAS,UAASC,SACvBJ,EAAAA,IAACK,EAAAA,SAAS,CAAAZ,UAAWA,EAAWC,UAAWA,EAAWY,YAAaV,EAChEQ,SAdW,YAAZb,EAEAS,EAAAC,IAACM,sBAAmB,CAACC,YAAa,CAAEhB,YAAaO,GAAgBK,SAC9Dd,IAIEU,EAAAC,IAAAQ,EAAAC,SAAA,CAAAN,SAAGd,OAUZ"}