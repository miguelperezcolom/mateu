{"version":3,"file":"NavigationListItem-73686e95.js","sources":["../../src/UNSAFE_NavigationList/useNavigationList.ts","../../src/UNSAFE_NavigationList/NavigationList.tsx","../../src/UNSAFE_NavigationList/NavigationListItem.tsx"],"sourcesContent":["import { ComponentChildren, ComponentProps } from 'preact';\nimport { useState, useCallback, MutableRef, useRef, useEffect, useId } from 'preact/hooks';\nimport {\n  keyExtractor,\n  getFirstVisibleKey,\n  getKey,\n  getPrevNextKeyUsingRef,\n  findElementByKey\n} from '../utils/PRIVATE_collectionUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { MenuProps } from '../hooks/PRIVATE_useVisContextMenu/util';\nimport { useContextMenuGesture } from '../hooks/UNSAFE_useContextMenuGesture';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Menu } from '../UNSAFE_Menu';\nimport { getDefaultContextMenu } from '../UNSAFE_TabBar/TabBarContextMenu';\nimport { TabBarContextMenuConfig, TabBarItemContextMenuContext } from '../UNSAFE_TabBarCommon';\nimport { NavigationListContextProps } from '../UNSAFE_NavigationListCommon';\n\nconst ITEM_SELECTOR = '[role=\"tab\"]';\nexport const REMOVE_ICON_SELECTOR = '[data-oj-navigationlist-item-remove-icon]';\nconst TOUCH_OFFSET_VALUE = 40;\nconst menuPropGestureStates: Record<\n  'mouse' | 'keyboard' | 'touch',\n  Omit<Required<MenuProps>, 'anchorRef' | 'isOpen'>\n> = {\n  mouse: {\n    initialFocus: 'menu',\n    placement: 'bottom-start',\n    offsetValue: 0\n  },\n  keyboard: {\n    initialFocus: 'firstItem',\n    placement: 'bottom-start',\n    offsetValue: 0\n  },\n  touch: {\n    initialFocus: 'menu',\n    placement: 'end',\n    offsetValue: TOUCH_OFFSET_VALUE\n  }\n};\n\n/**\n * type for payload of current key change event handler\n */\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n  reason: 'pointer' | 'keyboard';\n};\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\nconst initialMenuProps: MenuProps = {\n  isOpen: false,\n  initialFocus: 'menu',\n  placement: 'bottom-start',\n  offsetValue: 0,\n  anchorRef: { current: null }\n};\n\n/*TODO: JET-58534. Create a hook to share some logic between navlist and tabbar. Hook will be used inside this one. */\nexport function useNavigationList<K extends string | number>({\n  containerRef,\n  selection,\n  onRemove,\n  onSelectionChange,\n  children,\n  contextMenuConfig\n}: {\n  containerRef: MutableRef<HTMLDivElement>;\n  selection?: K;\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  onSelectionChange?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  children: ComponentChildren;\n  contextMenuConfig?: TabBarContextMenuConfig<K>;\n}) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const [currentKey, setCurrentKey] = useState<K | undefined>(selection);\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K | undefined>) => {\n    setCurrentKey(detail.value);\n  }, []) as NavigationListContextProps<K>['onCurrentKeyChange'];\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) =>\n      onRemove\n        ? (extractOnlyItemKey(element, ITEM_SELECTOR, REMOVE_ICON_SELECTOR) as K)\n        : keyExtractor(element, ITEM_SELECTOR),\n    false,\n    getPrevNextKeyUsingRef(containerRef, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKeyUsingRef(containerRef, currentKey, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(containerRef, [\n    'Home',\n    'End',\n    'ArrowUp',\n    'ArrowDown'\n  ]);\n\n  const onFocus = useCallback(() => {\n    if (containerRef.current && currentKey === undefined) {\n      const key = getFirstVisibleKey(containerRef.current, ITEM_SELECTOR);\n      if (key) {\n        setCurrentKey(key as K);\n      }\n    }\n  }, [currentKey, containerRef]);\n\n  const onFocusProps = { onFocus };\n  const prevNavItems = useRef<K[]>();\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const navListItemKeys = Array.from(\n        containerRef.current.querySelectorAll(ITEM_SELECTOR),\n        (elem) => getKey(elem as HTMLElement) as K\n      );\n      if (currentKey != null && navListItemKeys.indexOf(currentKey) !== -1) {\n        const navListItem = findElementByKey(\n          containerRef.current,\n          currentKey,\n          ITEM_SELECTOR\n        ) as any;\n        if (navListItem.scrollIntoViewIfNeeded) {\n          // for some browsers, we'll need the non-standard scrollIntoViewIfNeeded\n          navListItem.scrollIntoViewIfNeeded();\n        } else {\n          navListItem.scrollIntoView({ block: 'nearest' });\n        }\n      } else {\n        if (currentKey && navListItemKeys.indexOf(currentKey) === -1) {\n          prevNavItems.current\n            ? setCurrentKey(findNextCurrentKey(currentKey, navListItemKeys, prevNavItems.current))\n            : setCurrentKey(navListItemKeys[0] as K);\n        }\n        prevNavItems.current = navListItemKeys;\n      }\n    }\n  }, [children, currentKey, containerRef]);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if ((event.key === 'Home' || event.key === 'End') && containerRef.current && currentKey) {\n        const navListItemKey = Array.from(\n          containerRef.current.querySelectorAll(ITEM_SELECTOR),\n          (elem) => getKey(elem as HTMLElement) as K\n        );\n        onCurrentKeyChange?.({\n          value: navListItemKey[event.key === 'Home' ? 0 : navListItemKey.length - 1] as K\n        });\n      }\n      if (currentKey && (event.key === 'Enter' || event.key === ' ')) {\n        onSelectionChange?.({\n          value: currentKey as K,\n          reason: 'keyboard'\n        });\n      }\n      if (currentKey && event.key === 'Delete') {\n        onRemove?.({ value: currentKey as K });\n      }\n    },\n    [currentKey, onSelectionChange, onRemove, onCurrentKeyChange, containerRef]\n  );\n\n  const [contextMenuContext, setContextMenuContext] = useState<TabBarItemContextMenuContext<K>>();\n\n  const [menuProps, setMenuProps] = useState<MenuProps>(initialMenuProps);\n  const [accStatusInfo, setAccStatusInfo] = useState<string>();\n\n  const { triggerProps } = useContextMenuGesture(\n    ({ gesture, anchor, target }) => {\n      let anchorBasedOnGesture = anchor;\n      let itemKey = currentKey as K;\n      if (gesture === 'keyboard') {\n        //We find the element where the position of the menu is going to be based of\n        const elem = findElementByKey(\n          containerRef.current as HTMLElement,\n          currentKey as K,\n          ITEM_SELECTOR\n        );\n        //We set the correct anchor\n        anchorBasedOnGesture = elem ? elem : anchor;\n      } else {\n        //We search for the key using the target of the event\n        const key = keyExtractor(target as HTMLElement, ITEM_SELECTOR);\n\n        //On touch devices, the keyExtractor returns null because target of touch event is the entire tabbar. Hence we make use of currentkey since the context menu is always launched from selected item and its key is currentKey\n        itemKey = key != null ? (key as K) : (currentKey as K);\n      }\n      let isRemovable = false;\n      if (containerRef.current) {\n        isRemovable = getItemAttribute(itemKey, containerRef.current, REMOVE_ICON_SELECTOR) != null;\n      }\n      const defaultContext = getDefaultContextMenu<K>({\n        // For default menu items the existence of REMOVE_ICON_SELECTOR is the indicator that it is removable because we render the default menu in touch devices not the application.\n        // Furthermore in corepack due to delegations onRemove is always defined as it is a even handler hence not a good check for isRemovable.\n        isRemovable: isRemovable,\n        handleRemove: onRemove,\n        handleReorder: undefined,\n        itemKey: itemKey,\n        tabKeys: undefined,\n        // As direction is only needed for reorder to switch the labels\n        direction: undefined,\n        itemLabels: {\n          labelRemove: isRemovable ? translations.tabbar_labelRemove() : undefined\n        },\n        handleAccStatus: (detail) => {\n          const removeItemLabel = getItemLabel(detail.removedKey!, containerRef.current!) as string;\n          const removeStatus =\n            isRemovable && detail.removedKey ? ` Removed ${removeItemLabel}` : '';\n\n          setAccStatusInfo(removeStatus);\n        }\n      });\n      setContextMenuContext(defaultContext);\n\n      setMenuProps({\n        ...menuPropGestureStates[gesture],\n        anchorRef: { current: anchorBasedOnGesture },\n        // This is set so that when no contextMenuConfig and when items is not removable we need not open it.\n        isOpen: contextMenuConfig != null\n      });\n    },\n    {\n      isDisabled: !contextMenuConfig //If there is no a context menu renderer we disable the hook\n    }\n  );\n\n  const handleCloseContextMenu = useCallback<Required<ComponentProps<typeof Menu>>['onClose']>(\n    (detail) => {\n      //Focus has to be set on the current target that was obtained\n      //during context menu gesture when menu is dismissed or item is \"selected\"\n      if (detail.reason === 'dismissed' || detail.reason === 'itemAction') {\n        setCurrentKey(contextMenuContext?.itemKey);\n        containerRef.current?.focus();\n      }\n      // We close the menu.The only prop that matters here is isOpen\n      setMenuProps({ ...initialMenuProps });\n    },\n    [containerRef, contextMenuContext?.itemKey]\n  );\n\n  const contextMenuDescriptionId = 'contextMenu_' + useId();\n  const contextMenuDescription = translations.tabbar_labelContextMenu();\n\n  return {\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    onKeyDown,\n    menuProps: { ...menuProps, onClose: handleCloseContextMenu },\n    contextMenuContext,\n    contextMenuDescription,\n    contextMenuDescriptionId,\n    accStatusInfo,\n    containerHandlers: mergeProps(focusRingProps, currentKeyProps, onFocusProps, triggerProps)\n  };\n}\n// Utility that returns the value for a attribute related to the role=\"tab\" item.\nexport const getItemAttribute = <K extends string | number>(\n  itemKey: K,\n  root: HTMLElement,\n  attribute: string\n) => {\n  const navItem = findElementByKey(root, itemKey as K, ITEM_SELECTOR) as HTMLElement;\n  if (navItem) {\n    const tabBarItemAttribute = navItem.querySelector(attribute);\n    return tabBarItemAttribute;\n  }\n  return;\n};\n\n// Utility that returns the visible inner text inside the role=\"tab\" item.\nconst getItemLabel = <K extends string | number>(itemKey: K, root: HTMLElement) => {\n  const tabBarItem = findElementByKey(root, itemKey as K, ITEM_SELECTOR) as HTMLElement;\n  if (tabBarItem) {\n    return tabBarItem.innerText;\n  }\n  return;\n};\n\nconst extractOnlyItemKey = (element: HTMLElement, itemSelector: string, itemEliminator: string) => {\n  const navigationListItem = element.closest(itemSelector);\n  const removeButton = element.closest(itemEliminator);\n  return navigationListItem?.contains(removeButton) ? null : keyExtractor(element, itemSelector);\n};\n\nconst findNextCurrentKey = <K>(currentKey: K, currNavs: K[], prevNavs: K[]) => {\n  const index = prevNavs.indexOf(currentKey);\n  if (index > 0) {\n    const nextIndex = index === prevNavs.length - 1 ? index - 1 : index + 1;\n    const nextKey = prevNavs[nextIndex];\n    if (currNavs.indexOf(nextKey) !== -1) {\n      return nextKey;\n    }\n  }\n  // update current key to be the first one if we can't find a suitable next key\n  return currNavs[0];\n};\n","import { Ref } from 'preact';\nimport { MutableRef, useMemo, useRef } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { isMobile } from '#utils/UNSAFE_clientUtils';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { navigationListStyles } from './themes/NavigationListStyles.css';\nimport { getItemAttribute, REMOVE_ICON_SELECTOR, useNavigationList } from './useNavigationList';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { NavigationListProps, NavigationListContext } from '../UNSAFE_NavigationListCommon';\nimport { TabBarContextMenu } from '../UNSAFE_TabBar/TabBarContextMenu';\nimport type { TabBarContextMenuConfig as NavigationListContextMenuConfig } from '../UNSAFE_TabBarCommon';\nexport {\n  RemovableNavigationListItem,\n  NavigationListLinkItem\n} from '../UNSAFE_NavigationListCommon';\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\n\nexport const NavigationList = forwardRef(\n  <K extends string | number>(\n    {\n      children,\n      selection,\n      onSelectionChange,\n      onRemove,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelLedBy,\n      testId\n    }: NavigationListProps<K> & TestIdProps,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const isMobileDevice = isMobile();\n    const defaultContextMenuConfig = useMemo<\n      NavigationListContextMenuConfig<string | number>\n    >(() => {\n      return {\n        itemsRenderer: (context) => {\n          //Only if context is available, it is a mobile device and it is removable item, we will return remove context menu item\n          if (context) {\n            const isRemovableItem =\n              getItemAttribute(context.itemKey, containerRef.current!, REMOVE_ICON_SELECTOR) !=\n              null;\n            if (isRemovableItem && isMobileDevice) {\n              const defaultItems = context.defaultMenuItems;\n              return <>{defaultItems}</>;\n            }\n          }\n          return null;\n        }\n      };\n    }, []);\n\n    const {\n      showFocusRing,\n      currentKey,\n      onCurrentKeyChange,\n      containerHandlers,\n      onKeyDown,\n      contextMenuContext,\n      menuProps,\n      contextMenuDescription,\n      contextMenuDescriptionId,\n      accStatusInfo\n    } = useNavigationList({\n      containerRef: containerRef as MutableRef<HTMLDivElement>,\n      selection,\n      onRemove,\n      onSelectionChange,\n      children,\n      contextMenuConfig: defaultContextMenuConfig\n    });\n\n    const isContextMenuAvailable = defaultContextMenuConfig != null && isMobileDevice;\n\n    const eventProps = { onKeyDown };\n    const navigationListClass = classNames([navigationListStyles.uListStyle]);\n    const navigationListItemPrefix = useId() + '_';\n    const testIdProps = useTestId(testId);\n\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(ref!, () => ({\n      focus: () => {\n        if (containerRef.current) {\n          containerRef.current.focus();\n        }\n      },\n      blur: () => {\n        if (containerRef.current) {\n          containerRef.current.focus();\n        }\n      }\n    }));\n\n    return (\n      <>\n        <div\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelLedBy}\n          role=\"tablist\"\n          ref={containerRef}\n          aria-orientation={'vertical'}\n          tabIndex={0}\n          aria-activedescendant={currentKey ? navigationListItemPrefix + currentKey : ''}\n          {...mergeProps(eventProps, containerHandlers)}\n          {...testIdProps}\n          class={navigationListClass}>\n          <NavigationListContext.Provider\n            value={{\n              selection,\n              onSelectionChange,\n              onCurrentKeyChange,\n              currentKey,\n              showFocusRing,\n              navigationListItemPrefix,\n              onRemove\n            }}>\n            {children}\n          </NavigationListContext.Provider>\n        </div>\n        {isContextMenuAvailable && contextMenuDescriptionId && contextMenuDescription && (\n          <span id={contextMenuDescriptionId}>\n            <HiddenAccessible>{contextMenuDescription}</HiddenAccessible>\n          </span>\n        )}\n        {isContextMenuAvailable && accStatusInfo && <LiveRegion>{accStatusInfo}</LiveRegion>}\n        {isContextMenuAvailable && (\n          <TabBarContextMenu\n            {...menuProps}\n            contextMenuConfig={defaultContextMenuConfig}\n            contextMenuContext={contextMenuContext!}\n          />\n        )}\n      </>\n    );\n  }\n);\n","import {\n  BaseNavigationListItem,\n  BaseNavigationListItemProps\n} from '../UNSAFE_NavigationListCommon/BaseNavigationListItem';\n\nexport type NavigationListItemProps<K extends string | number> = Omit<\n  BaseNavigationListItemProps<K>,\n  'removeIcon'\n>;\n\nexport function NavigationListItem<K extends string | number>({\n  itemKey,\n  label,\n  badge,\n  metadata,\n  severity\n}: NavigationListItemProps<K>) {\n  return (\n    <BaseNavigationListItem\n      itemKey={itemKey}\n      label={label}\n      badge={badge}\n      metadata={metadata}\n      severity={severity}\n    />\n  );\n}\n"],"names":["ITEM_SELECTOR","REMOVE_ICON_SELECTOR","menuPropGestureStates","mouse","initialFocus","placement","offsetValue","keyboard","touch","initialMenuProps","isOpen","anchorRef","current","getItemAttribute","itemKey","root","attribute","navItem","findElementByKey","querySelector","getItemLabel","tabBarItem","innerText","extractOnlyItemKey","element","itemSelector","itemEliminator","navigationListItem","closest","removeButton","contains","keyExtractor","findNextCurrentKey","currentKey","currNavs","prevNavs","index","indexOf","nextKey","length","NavigationList","forwardRef","children","selection","onSelectionChange","onRemove","ariaLabel","ariaLabelLedBy","testId","ref","containerRef","useRef","isMobileDevice","isMobile","defaultContextMenuConfig","useMemo","itemsRenderer","context","defaultItems","defaultMenuItems","_jsx","jsx","_Fragment","Fragment","showFocusRing","onCurrentKeyChange","containerHandlers","onKeyDown","contextMenuContext","menuProps","contextMenuDescription","contextMenuDescriptionId","accStatusInfo","contextMenuConfig","translations","useTranslationBundle","setCurrentKey","useState","useCallback","detail","value","currentKeyProps","useCurrentKey","getPrevNextKeyUsingRef","undefined","focusRingProps","useCollectionFocusRing","onFocusProps","onFocus","key","getFirstVisibleKey","prevNavItems","useEffect","navListItemKeys","Array","from","querySelectorAll","elem","getKey","navListItem","scrollIntoViewIfNeeded","scrollIntoView","block","event","navListItemKey","reason","setContextMenuContext","setMenuProps","setAccStatusInfo","triggerProps","useContextMenuGesture","gesture","anchor","target","anchorBasedOnGesture","isRemovable","defaultContext","getDefaultContextMenu","handleRemove","handleReorder","tabKeys","direction","itemLabels","labelRemove","tabbar_labelRemove","handleAccStatus","removeItemLabel","removedKey","removeStatus","isDisabled","handleCloseContextMenu","focus","useId","tabbar_labelContextMenu","onClose","mergeProps","useNavigationList","isContextMenuAvailable","eventProps","navigationListClass","classNames","navigationListStyles","uListStyle","navigationListItemPrefix","testIdProps","useTestId","useImperativeHandle","blur","_jsxs","role","tabIndex","class","NavigationListContext","Provider","id","HiddenAccessible","LiveRegion","TabBarContextMenu","label","badge","metadata","severity","BaseNavigationListItem"],"mappings":"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"}