{"version":3,"file":"DatePicker-26834e69.js","sources":["../../src/UNSAFE_DatePicker/useDatePickerState.ts","../../src/UNSAFE_DatePicker/useDatePicker.ts","../../src/UNSAFE_DatePicker/TodayButton.tsx","../../src/UNSAFE_DatePicker/DatePicker.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport {\n  addToCalendarDate,\n  addToMonth,\n  addToYear,\n  compareDates,\n  getDaysInMonth\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { useMemo, useReducer, useRef } from 'preact/compat';\n\n// This is the type of the state that is returned from the useDatePickerState reducer.\n// This is a single state that will handle the different views of the DatePicker, the\n// MonthView, the MonthGridView, and the YearGridView. Initially we have implemented\n// the state for the MonthView.\ntype DatePickerState = {\n  /**\n   * Specifies the current view the DatePicker is showing.\n   */\n  currentView: 'monthView' | 'monthsGridView' | 'yearsGridView';\n\n  /**\n   * The focusableDate is the one day in the MonthView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders\n   * with Today as the focusableDate. The focusableDate doesn't have focus until the user tabs in\n   * to the Month View.\n   * When the user navigates the days with the arrow keys,\n   * the focusableDate changes along with the focusedDate, and they will be the same date.\n   * This is a 'roving' index.\n   * The focusableDate is never undefined.\n   * <p>\n   * If the user keyboards to the next month (Fn+Down Arrow on a Mac),\n   * then the focusableDate and the focusedDate of the next month\n   * is the same day number, or as close as possible to stay in the same month. For example,\n   * if the focusedDate and focusableDate is April 2, 2024, the focusedDate and focusableDate for the next month is May 2, 2024.\n   * If the focusedDate and focusableDate is February 28, 2024, the focusedDate and focusableDate for the next month is March 28, 2024.\n   * If the focusedDate and focusableDate is January 31, 2024, the focusedDate and focusableDate for the next month is February 29, 2024 (2024 is a leap year).\n   * </p>\n   * <p>\n   * If the user clicks the Next Month button in the DatePicker's header, then\n   * there is no date that has focus, so the focusedDate is undefined.\n   * The focusableDate will be set.\n   * For example,\n   * if the focusableDate is April 2, 2024, the focusableDate for the next month is May 2, 2024.\n   * If the focusableDate is February 28, 2024, the focusableDate for the next month is March 28, 2024.\n   * If the focusableDate is January 31, 2024, the focusableDate for the next month is February 29, 2024 (2024 is a leap year).\n   *\n   * </p>\n   */\n  focusableDate: CalendarDateRequired;\n\n  /**\n   * The focusableMonth is the one month in the MonthsGridView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders with Today's month as the\n   * focusableMonth. The focusableMonth doesn't have focus until the user tabs in\n   * to the Months Grid View.\n   *\n   * When the user navigates the month with the arrow keys, the focusableMonth changes\n   * along with the focusedMonth, and they will be the same date. This is a 'roving' index.\n   *\n   * The focusableMonth is never undefined.\n   */\n  focusableMonth: CalendarDateRequired['month'];\n\n  /**\n   * The focusableYear is the one month in the YearsGridView that has tabIndex: 0 on it.\n   * If nothing is selected, the DatePicker initially renders with Today's month as the\n   * focusableYear. The focusableYear doesn't have focus until the user tabs in\n   * to the Months Grid View.\n   *\n   * When the user navigates the month with the arrow keys, the focusableYear changes\n   * along with the focusedYear, and they will be the same date. This is a 'roving' index.\n   *\n   * The focusableYear is never undefined.\n   */\n  focusableYear: CalendarDateRequired['year'];\n\n  /**\n   * A boolean to indicate if the focus is in the view.\n   */\n  isViewFocused: boolean;\n\n  /**\n   * Specifies whether to hide the previous navigation button is hidden from the header.\n   */\n  isPreviousNavigationButtonHidden: boolean;\n\n  /**\n   * Specifies whether to hide the today navigation button is hidden from the header.\n   */\n  isTodayNavigationButtonHidden: boolean;\n\n  /**\n   * Specifies whether to hide the next navigation button is hidden from the header.\n   */\n  isNextNavigationButtonHidden: boolean;\n};\n\nconst datePickerResetActionTypes = ['reset'] as const;\n\nconst datePickerViewActionTypes = [\n  'monthView',\n  'monthsGridView',\n  'yearsGridView',\n  'viewFocus',\n  'viewBlur'\n] as const;\n\nconst monthViewActionTypes = [\n  'dayFocused',\n  'daySelected',\n  'goToToday',\n  'previousDay',\n  'nextDay',\n  'previousWeek',\n  'nextWeek',\n  'previousMonth',\n  'previousMonthAndFocus',\n  'nextMonth',\n  'nextMonthAndFocus',\n  'previousYear',\n  'nextYear',\n  'firstDayOfMonth',\n  'lastDayOfMonth'\n] as const;\n\nconst monthsGridViewActionTypes = [\n  'previousMonthInGridView',\n  'nextMonthInGridView',\n  'previousMonthRowInGridView',\n  'nextMonthRowInGridView',\n  'monthFocused',\n  'monthSelected'\n] as const;\n\nconst yearsGridViewActionTypes = [\n  'previousYearInGridView',\n  'nextYearInGridView',\n  'previousYearRowInGridView',\n  'nextYearRowInGridView',\n  'previousDecade',\n  'previousDecadeAndFocus',\n  'nextDecade',\n  'nextDecadeAndFocus',\n  'yearFocused',\n  'yearSelected'\n] as const;\n\ntype DatePickerViewActionTypes = (typeof datePickerViewActionTypes)[number];\ntype DatePickerResetActionTypes = (typeof datePickerResetActionTypes)[number];\ntype MonthViewActionTypes = (typeof monthViewActionTypes)[number];\ntype MonthsGridViewActionTypes = (typeof monthsGridViewActionTypes)[number];\ntype YearsGridViewActionTypes = (typeof yearsGridViewActionTypes)[number];\n\n// This is the type of the actions that the hook returns.\ntype DatePickerStateAction = ReturnType<typeof useDatePickerState>['actions'];\n\n// Type for the action of the datePickerReducer.\ntype DatePickerViewAction = {\n  [Type in DatePickerViewActionTypes]: { type: Type; payload?: undefined };\n}[DatePickerViewActionTypes];\n\ntype DatePickerResetAction = {\n  [Type in DatePickerResetActionTypes]: { type: Type; payload: DatePickerState };\n}[DatePickerResetActionTypes];\n\ntype MonthViewAction = {\n  [Type in MonthViewActionTypes]: { type: Type; payload: CalendarDateRequired };\n}[MonthViewActionTypes];\n\ntype MonthsGridViewAction = {\n  [Type in MonthsGridViewActionTypes]: { type: Type; payload: Pick<CalendarDateRequired, 'month'> };\n}[MonthsGridViewActionTypes];\n\ntype YearsGridViewAction = {\n  [Type in YearsGridViewActionTypes]: { type: Type; payload: Pick<CalendarDateRequired, 'year'> };\n}[YearsGridViewActionTypes];\n\ntype DatePickerReducerAction =\n  | DatePickerResetAction\n  | DatePickerViewAction\n  | MonthViewAction\n  | MonthsGridViewAction\n  | YearsGridViewAction;\n\n// A reducer is a plain old function you write that takes the current state,\n// and the action to be processed, and returns the state as it should be, based on that action occurring.\n// The reducer, not the sender,  determines how a given report (action) affects the state.\nconst datePickerReducer = (\n  state: DatePickerState,\n  action: DatePickerReducerAction\n): DatePickerState => {\n  // On mount, the reducer is initialized with initial state derived from the DatePicker's value.\n  // If that value is changed programmatically afterwards, the only way to push that update\n  // into the reducer is to define a \"reset\" action.\n  if (action.type === 'reset') {\n    return action.payload!;\n  }\n\n  switch (action.type) {\n    case 'monthView': {\n      return {\n        ...state,\n        currentView: 'monthView',\n        isViewFocused: false,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n    case 'monthsGridView': {\n      return {\n        ...state,\n        currentView: 'monthsGridView',\n        focusableMonth: state.focusableDate.month,\n        isViewFocused: false,\n        isNextNavigationButtonHidden: true,\n        isPreviousNavigationButtonHidden: true,\n        isTodayNavigationButtonHidden: true\n      };\n    }\n    case 'yearsGridView': {\n      return {\n        ...state,\n        currentView: 'yearsGridView',\n        focusableYear: state.focusableDate.year,\n        isViewFocused: false,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: true\n      };\n    }\n    case 'viewFocus': {\n      return state.isViewFocused ? state : { ...state, isViewFocused: true };\n    }\n    case 'viewBlur': {\n      return state.isViewFocused ? { ...state, isViewFocused: false } : state;\n    }\n    case 'dayFocused':\n    case 'daySelected': {\n      return { ...state, isViewFocused: true, focusableDate: action.payload };\n    }\n    case 'goToToday': {\n      // User clicked on the 'Today' icon, which means they want to navigate to show the month of Today\n      // payload is Today's date. We also set the focus to Today.\n      return { ...state, isViewFocused: true, focusableDate: action.payload };\n    }\n    case 'previousDay': {\n      const previousDay = addToCalendarDate(action.payload, { days: -1 });\n      return { ...state, isViewFocused: true, focusableDate: previousDay };\n    }\n    case 'nextDay': {\n      const nextDay = addToCalendarDate(action.payload, { days: 1 });\n      return { ...state, isViewFocused: true, focusableDate: nextDay };\n    }\n    case 'previousWeek': {\n      const previousDay = addToCalendarDate(action.payload, { days: -7 });\n      return { ...state, isViewFocused: true, focusableDate: previousDay };\n    }\n    case 'nextWeek': {\n      const nextDay = addToCalendarDate(action.payload, { days: 7 });\n      return { ...state, isViewFocused: true, focusableDate: nextDay };\n    }\n    case 'previousMonth':\n    case 'previousMonthAndFocus': {\n      // PageUp moves focus to the previous month.\n      // We also get here if the DatePicker while in month view header's Previous navigation button is pressed.\n      const prevMonth = addToCalendarDate(action.payload, { months: -1 });\n      return {\n        ...state,\n        isViewFocused: action.type === 'previousMonthAndFocus',\n        focusableDate: prevMonth\n      };\n    }\n    case 'nextMonth':\n    case 'nextMonthAndFocus': {\n      // Shift PageDown moves focus to the next month. TODO: Confirm this works on a Windows machine.\n      // Shift Fn Arrow Down works on my Mac.\n      // We also get here if the DatePicker while in month view header's Next navigation button is pressed.\n      const nextMonth = addToCalendarDate(action.payload, { months: 1 });\n      return {\n        ...state,\n        isViewFocused: action.type === 'nextMonthAndFocus',\n        focusableDate: nextMonth\n      };\n    }\n    case 'previousYear': {\n      // Shift Page Up moves focus to the previous year. TODO: Confirm this works on a Windows machine.\n      const previousYear = addToCalendarDate(action.payload, { years: -1 });\n      return { ...state, isViewFocused: true, focusableDate: previousYear };\n    }\n    case 'nextYear': {\n      const nextYear = addToCalendarDate(action.payload, { years: 1 });\n      return { ...state, isViewFocused: true, focusableDate: nextYear };\n    }\n    case 'firstDayOfMonth': {\n      // Home moves focus to the first day of the month (Fn+LeftArrow on a mouse.)\n      const currentDate = action.payload;\n      const firstDayOfMonthDate = {\n        year: currentDate.year,\n        month: currentDate.month,\n        day: 1\n      } as CalendarDateRequired;\n      return { ...state, isViewFocused: true, focusableDate: firstDayOfMonthDate };\n    }\n    case 'lastDayOfMonth': {\n      // End moves focus to the last day of the month\n      const currentDate = action.payload;\n      const lastDay = getDaysInMonth(currentDate.month, currentDate.year);\n      const lastDayOfMonthDate = {\n        year: currentDate.year,\n        month: currentDate.month,\n        day: lastDay\n      } as CalendarDateRequired;\n      return { ...state, isViewFocused: true, focusableDate: lastDayOfMonthDate };\n    }\n\n    case 'previousMonthInGridView': {\n      const previousMonth = addToMonth(action.payload.month, -1);\n      return { ...state, focusableMonth: previousMonth, isViewFocused: true };\n    }\n    case 'previousMonthRowInGridView': {\n      const previousMonth = addToMonth(action.payload.month, -4);\n      return { ...state, focusableMonth: previousMonth, isViewFocused: true };\n    }\n    case 'nextMonthInGridView': {\n      const nextMonth = addToMonth(action.payload.month, 1);\n      return { ...state, focusableMonth: nextMonth, isViewFocused: true };\n    }\n    case 'nextMonthRowInGridView': {\n      const nextMonth = addToMonth(action.payload.month, 4);\n      return { ...state, focusableMonth: nextMonth, isViewFocused: true };\n    }\n    case 'monthFocused': {\n      return { ...state, focusableMonth: action.payload.month, isViewFocused: true };\n    }\n    case 'monthSelected': {\n      const monthSteps = action.payload.month - state.focusableDate.month;\n      const goToDate = addToCalendarDate(state.focusableDate, { months: monthSteps });\n      return {\n        ...state,\n        currentView: 'monthView',\n        focusableDate: goToDate,\n        isViewFocused: true,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n\n    case 'previousYearInGridView': {\n      const previousYear = addToYear(action.payload.year, -1);\n      return { ...state, focusableYear: previousYear, isViewFocused: true };\n    }\n    case 'previousYearRowInGridView': {\n      const previousYear = addToYear(action.payload.year, -4);\n      return { ...state, focusableYear: previousYear, isViewFocused: true };\n    }\n    case 'previousDecade':\n    case 'previousDecadeAndFocus': {\n      const previousYear = addToYear(action.payload.year, -10);\n      return {\n        ...state,\n        focusableYear: previousYear,\n        isViewFocused: action.type === 'previousDecadeAndFocus'\n      };\n    }\n    case 'nextYearInGridView': {\n      const nextYear = addToYear(action.payload.year, 1);\n      return { ...state, focusableYear: nextYear, isViewFocused: true };\n    }\n    case 'nextYearRowInGridView': {\n      const nextYear = addToYear(action.payload.year, 4);\n      return { ...state, focusableYear: nextYear, isViewFocused: true };\n    }\n    case 'nextDecade':\n    case 'nextDecadeAndFocus': {\n      const nextYear = addToYear(action.payload.year, 10);\n      return {\n        ...state,\n        focusableYear: nextYear,\n        isViewFocused: action.type === 'nextDecadeAndFocus'\n      };\n    }\n    case 'yearFocused': {\n      return { ...state, focusableYear: action.payload.year, isViewFocused: true };\n    }\n    case 'yearSelected': {\n      const yearSteps = action.payload.year - state.focusableDate.year;\n      const goToDate = addToCalendarDate(state.focusableDate, { years: yearSteps });\n      return {\n        ...state,\n        currentView: 'monthView',\n        focusableDate: goToDate,\n        isViewFocused: true,\n        isNextNavigationButtonHidden: false,\n        isPreviousNavigationButtonHidden: false,\n        isTodayNavigationButtonHidden: false\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  /**\n   * This becomes the state's focusableDate.\n   */\n  initialFocusableDate: CalendarDateRequired;\n};\n\n/**\n * useDatePickerState takes an object with the initialFocusableDate and\n * determines the initial state; i.e., focusableDate and focusedDate. It returns the state\n * and actions a user can take on the DatePicker that will update the state. The actions are functions\n * that call dispatch with the type and payload.\n * @param param0\n * @returns\n */\nconst useDatePickerState = ({ initialFocusableDate }: Props) => {\n  // Create the initial state to pass to our reducer.\n  const initialState: DatePickerState = {\n    currentView: 'monthView',\n    focusableDate: initialFocusableDate,\n    focusableMonth: initialFocusableDate.month,\n    focusableYear: initialFocusableDate.year,\n    isViewFocused: false,\n    isNextNavigationButtonHidden: false,\n    isPreviousNavigationButtonHidden: false,\n    isTodayNavigationButtonHidden: false\n  };\n\n  const [state, dispatch] = useReducer(datePickerReducer, initialState);\n\n  // initialFocusableDate is the controlled value passed from the parent.\n  const lastValueFromParentRef = useRef<CalendarDateRequired>(initialFocusableDate);\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current focusableDate of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (compareDates(lastValueFromParentRef.current, initialFocusableDate) !== 0) {\n    lastValueFromParentRef.current = initialFocusableDate;\n    if (compareDates(initialFocusableDate, state.focusableDate) !== 0) {\n      dispatch({ type: 'reset', payload: initialState });\n    }\n  }\n\n  // Using an action creator like this is nice because now each time we want to add an action,\n  // we don't have to remember the action constant to use or how the payload should be structured. (from the redux doc)\n\n  // memoize the actions object since we pass this around to our components.\n  const actions = useMemo(() => {\n    const actionsObject: {\n      [Type in\n        | DatePickerViewActionTypes\n        | MonthViewActionTypes\n        | MonthsGridViewActionTypes\n        | YearsGridViewActionTypes]: (\n        payload: Extract<DatePickerReducerAction, { type: Type }>['payload']\n      ) => void;\n    } = {} as any;\n\n    datePickerViewActionTypes.forEach((type) => {\n      actionsObject[type] = () => dispatch({ type });\n    });\n\n    monthViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: MonthViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    monthsGridViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: MonthsGridViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    yearsGridViewActionTypes.forEach((type) => {\n      actionsObject[type] = (\n        payload: Extract<DatePickerReducerAction, { type: YearsGridViewActionTypes }>['payload']\n      ) => dispatch({ type, payload });\n    });\n\n    return actionsObject;\n  }, [dispatch]);\n\n  return { state, actions };\n};\n\nexport { useDatePickerState };\nexport type {\n  DatePickerState,\n  DatePickerStateAction,\n  DatePickerViewActionTypes,\n  MonthViewActionTypes,\n  MonthsGridViewActionTypes,\n  YearsGridViewActionTypes\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { MonthView } from '#PRIVATE_MonthView';\nimport type { MonthsGridView, YearsGridView } from '#PRIVATE_MonthYearGridView';\nimport { useFocusWithin } from '#hooks/UNSAFE_useFocusWithin';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport {\n  constrainCalendarDate,\n  getCalendarDateToday,\n  isCalendarDateBefore,\n  type CalendarDateRequired\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ComponentProps, RefObject, useCallback, useMemo } from 'preact/compat';\nimport { useDatePickerState } from './useDatePickerState';\nimport { useHiddenTestMethod } from '#hooks/UNSAFE_useHiddenTestMethod';\n\n/**\n * A map that specifies the selection of the header toggle button based on the\n * view we are in.\n */\nconst headerToggleSelection = {\n  monthView: 'none',\n  monthsGridView: 'month',\n  yearsGridView: 'year'\n} as const;\n\ntype MonthViewProps = ComponentProps<typeof MonthView>;\ntype MonthsGridViewProps = ComponentProps<typeof MonthsGridView>;\ntype YearsGridViewProps = ComponentProps<typeof YearsGridView>;\n\ntype UseDatePickerProps = {\n  isReadonly?: boolean;\n  max?: CalendarDateRequired;\n  min?: CalendarDateRequired;\n  rootRef: RefObject<HTMLDivElement>;\n  todayTimeZone?: Intl.DateTimeFormatOptions['timeZone'];\n  value?: CalendarDateRequired;\n  onCommit: (detail: ValueUpdateDetail<CalendarDateRequired>) => void;\n};\n\n/**\n * A custom hook that adds functionality to the DatePicker component.\n */\nexport const useDatePicker = ({\n  isReadonly,\n  max,\n  min,\n  rootRef,\n  todayTimeZone,\n  value,\n  onCommit\n}: UseDatePickerProps) => {\n  // Check for errors first\n  if (min && max && isCalendarDateBefore(max, min)) {\n    throw new Error('DatePicker: min must be equal or less than max.');\n  }\n\n  const todaysDate = getCalendarDateToday(todayTimeZone);\n\n  // We need to make sure that this initialFocusableDate is within the min/max range.\n  // When there is no min or max set, we draw the month of the value if value is set, otherwise we draw today's month.\n  // If the initialFocusableDate is not within the min/max range, then we constrain the calendar date by changing the month to draw\n  // so that the initialFocusableDate is the min date if the initialFocusableDate is < min or the max month if the initialFocusableDate is > max.\n  const initialFocusableDate = useMemo(\n    () => constrainCalendarDate(value ?? todaysDate, min, max),\n    [value, todaysDate, min, max]\n  );\n\n  const { state, actions } = useDatePickerState({ initialFocusableDate });\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const accessibleLabels = {\n    next: translations.datePicker_next(),\n    previous: translations.datePicker_prev(),\n    goToToday: translations.datePicker_goToToday(),\n    today: translations.datePicker_today()\n  };\n\n  // JET-73420, JET-62113: Create a changeValue method that can be called by a test adapter to\n  // simulate a user changing the value. This method calls the onCommit callback, just like what\n  // would happen if a user (or test) made a change through the UI.\n  const changeValue = useCallback(\n    (newValue: CalendarDateRequired) => {\n      // We always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI. Note that newValue\n      // cannot be undefined (meaning you cannot clear the value) because there is no way to\n      // do that through the UI.\n      if (!isReadonly) {\n        onCommit({ value: newValue, previousValue: value });\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly');\n    },\n    [isReadonly, onCommit, value]\n  );\n\n  // Expose _changeValue as a hidden method on the root DOM.\n  useHiddenTestMethod({\n    elementRef: rootRef,\n    method: changeValue,\n    name: '_changeValue'\n  });\n\n  const handlers = {\n    /**\n     * Handler for DatePickerHeader.onMonthToggle.\n     * This is used for toggling between the MonthView and\n     * MonthsGridView.\n     */\n    handleMonthToggle: useCallback(() => {\n      if (state.currentView !== 'monthsGridView') {\n        actions.monthsGridView(undefined);\n      } else {\n        actions.monthView(undefined);\n      }\n    }, [actions, state.currentView]),\n\n    /**\n     * Handler for DatePickerHeader.onYearToggle.\n     * This is used for toggling between the MonthView and\n     * YearsGridView.\n     */\n    handleYearToggle: useCallback(() => {\n      if (state.currentView !== 'yearsGridView') {\n        actions.yearsGridView(undefined);\n      } else {\n        actions.monthView(undefined);\n      }\n    }, [actions, state.currentView]),\n\n    /**\n     * Handler for DatePickerHeader.onTodayNavigation.\n     * This is used for navigating to today in the MonthView.\n     */\n    handleTodayNavigation: useCallback(() => {\n      actions.goToToday(todaysDate);\n    }, [actions, todaysDate]),\n\n    /**\n     * Handler for DatePickerHeader.onPreviousNavigation.\n     * This is used for navigating to the previous month in MonthView\n     * and previous decade in YearsGridView.\n     */\n    handlePreviousNavigation: useCallback(() => {\n      if (state.currentView === 'monthView') {\n        return actions.previousMonth(state.focusableDate);\n      }\n\n      if (state.currentView === 'yearsGridView') {\n        return actions.previousDecade({ year: state.focusableYear });\n      }\n    }, [actions, state.currentView, state.focusableDate, state.focusableYear]),\n\n    /**\n     * Handler for DatePickerHeader.onNextNavigation.\n     * This is used for navigating to the next month in MonthView\n     * and next decade in YearsGridView.\n     */\n    handleNextNavigation: useCallback(() => {\n      if (state.currentView === 'monthView') {\n        return actions.nextMonth(state.focusableDate);\n      }\n\n      if (state.currentView === 'yearsGridView') {\n        return actions.nextDecade({ year: state.focusableYear });\n      }\n    }, [actions, state.currentView, state.focusableDate, state.focusableYear]),\n\n    /**\n     * Handler for MonthView.onAction.\n     * This is used for selecting a date in MonthView.\n     */\n    handleMonthViewAction: useCallback<MonthViewProps['onAction']>(\n      (payload) => {\n        if (payload.date === undefined || isReadonly) return;\n        actions.daySelected(payload.date);\n        // We purposely send onCommit even if the value is the same.\n        // The InputDatePicker closes the datepicker when the user commits,\n        // even if it is the already selected date.\n        onCommit?.({ previousValue: value, value: payload.date });\n      },\n      [actions, isReadonly, onCommit, value]\n    ),\n\n    /**\n     * Handler for MonthView.onDayFocused.\n     * This is used to set focus to a day cell on mouse down.\n     */\n    handleDayFocused: useCallback<MonthViewProps['onDayFocused']>(\n      (payload) => {\n        actions.dayFocused(payload.date);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for MonthView.onNavigation.\n     * This is used for navigating in the MonthView like moving around the\n     * dates in the month and going to the prev/next month/year.\n     */\n    handleMonthViewNavigation: useCallback<MonthViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'previousMonth':\n            return actions.previousMonthAndFocus(detail.date);\n          case 'nextMonth':\n            return actions.nextMonthAndFocus(detail.date);\n          case 'today':\n            return actions.goToToday(todaysDate);\n          default:\n            return actions[detail.direction](detail.date);\n        }\n      },\n      [actions, todaysDate]\n    ),\n\n    /**\n     * Handler for MonthsGridView.onAction.\n     * This is used for selecting a month in MonthsGridView and navigating to\n     * the selected month in MonthView.\n     */\n    handleMonthsGridViewAction: useCallback<MonthsGridViewProps['onAction']>(\n      (detail) => {\n        actions.monthSelected(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for MonthsGridView.onMonthFocused.\n     * This is used for focusing a month in MonthsGridView on mouse down.\n     */\n    handleMonthFocused: useCallback<MonthsGridViewProps['onMonthFocused']>(\n      (detail) => {\n        actions.monthFocused(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for MonthsGridView.onNavigation.\n     * This is used for navigating through the MonthsGridView.\n     */\n    handleMonthsGridViewNavigation: useCallback<MonthsGridViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'down':\n            return actions.nextMonthRowInGridView({ month: detail.month });\n          case 'next':\n            return actions.nextMonthInGridView({ month: detail.month });\n          case 'previous':\n            return actions.previousMonthInGridView({ month: detail.month });\n          case 'up':\n            return actions.previousMonthRowInGridView({ month: detail.month });\n        }\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for YearsGridView.onAction.\n     * This is used for selecting a year in YearsGridView and navigating to\n     * the selected year in MonthView.\n     */\n    handleYearsGridViewAction: useCallback<YearsGridViewProps['onAction']>(\n      (detail) => {\n        actions.yearSelected(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for YearsGridView.onYearFocused.\n     * This is used for focusing a year in YearsGridView on mouse down.\n     */\n    handleYearFocused: useCallback<YearsGridViewProps['onYearFocused']>(\n      (detail) => {\n        actions.yearFocused(detail);\n      },\n      [actions]\n    ),\n\n    /**\n     * Handler for YearsGridView.onNavigation.\n     * This is used for navigating through the YearsGridView.\n     */\n    handleYearsGridViewNavigation: useCallback<YearsGridViewProps['onNavigation']>(\n      (detail) => {\n        switch (detail.direction) {\n          case 'down':\n            return actions.nextYearRowInGridView({ year: detail.year });\n          case 'next':\n            return actions.nextYearInGridView({ year: detail.year });\n          case 'nextDecade':\n            return actions.nextDecadeAndFocus({ year: detail.year });\n          case 'previous':\n            return actions.previousYearInGridView({ year: detail.year });\n          case 'previousDecade':\n            return actions.previousDecadeAndFocus({ year: detail.year });\n          case 'up':\n            return actions.previousYearRowInGridView({ year: detail.year });\n        }\n      },\n      [actions]\n    )\n  };\n\n  const { focusProps } = useFocusWithin({\n    // keep the state in sync with the actual focus state\n    onBlurWithin: useCallback(() => actions.viewBlur(undefined), [actions]),\n    onFocusWithin: useCallback(() => actions.viewFocus(undefined), [actions])\n  });\n\n  return {\n    accessibleLabels,\n    actions,\n    handlers,\n    state,\n    todaysDate,\n    toggleSelection: headerToggleSelection[state.currentView],\n    viewContainerProps: { ...focusProps }\n  };\n};\n","import { Flex } from '#UNSAFE_Flex';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { Button } from '#UNSAFE_Button';\nimport { ComponentProps } from 'preact/compat';\n\ntype ButtonOnAction = NonNullable<ComponentProps<typeof Button>['onAction']>;\n\ntype Props = TestIdProps & {\n  /**\n   * Accessible label for the today navigation button that is in the footer of the DatePicker\n   * in small screens.\n   *\n   * Use this property to provide a screen reader aria-label for the\n   * footer today navigation button.\n   */\n  todayNavigationAriaLabel: string;\n\n  /**\n   * Label for the today navigation button that is in the footer of the DatePicker in small screens.\n   * Use this property to provide a label for the footer today navigation button.\n   */\n  todayNavigationLabel: string;\n\n  /**\n   * A callback function to be called when the today button is clicked. Only\n   * applicable when `isTodayNavigationButtonHidden` is set to `false`.\n   */\n  onTodayNavigationAction?: ButtonOnAction;\n};\n\n/**\n * A Today button. The DatePicker puts this in its footer on small screens.\n * When a user presses the button, the DatePicker navigates to Today and sets focus on Today.\n */\nexport const TodayButton = ({\n  onTodayNavigationAction,\n  testId,\n  todayNavigationAriaLabel,\n  todayNavigationLabel\n}: Props) => {\n  return (\n    <Flex direction=\"column\">\n      <Button\n        testId={testId}\n        label={todayNavigationLabel}\n        aria-label={todayNavigationAriaLabel}\n        size=\"sm\"\n        onAction={onTodayNavigationAction}\n      />\n    </Flex>\n  );\n};\n","import { useRef } from 'preact/hooks';\nimport { DatePickerHeader } from '#PRIVATE_DatePickerHeader';\nimport { MonthView } from '#PRIVATE_MonthView';\nimport { MonthsGridView, YearsGridView } from '#PRIVATE_MonthYearGridView';\nimport { Flex } from '#UNSAFE_Flex';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { type CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { useDatePicker } from './useDatePicker';\nimport { useBreakpointValues } from '#hooks/UNSAFE_useBreakpointValues';\nimport { TodayButton } from './TodayButton';\nimport { datePickerPropVars } from './themes/DatePickerContract.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { DatePickerRedwoodTheme } from './themes/redwood/DatePickerTheme';\nimport { Size } from '#utils/UNSAFE_size';\n\nexport type DayFormatOptions = {\n  state: 'enabled' | 'disabled' | 'restricted';\n};\n\ntype Props = TestIdProps & {\n  /**\n   * A function that receives a date and returns an object specifying how to format the provided date.\n   * This function is called for each date that is rendered and this can be used to control how individual\n   * dates are rendered - disabled, restricted, or enabled.\n   * @param date The date to format\n   * @returns The format options\n   */\n  dayFormatter?: (date: CalendarDateRequired) => DayFormatOptions;\n\n  /**\n   * The daysOutsideMonth property affects the day cells that are outside of the current month.\n   * If set to 'hidden', then the days outside of the current month will be hidden.\n   * If set to 'selectable', then the days outside of the current month will be visible and selectable.\n   * This defaults to 'hidden'.\n   */\n  daysOutsideMonth?: 'hidden' | 'selectable';\n\n  /**\n   * When property is set to \"auto\", the date picker will automatically adjust to the height of the rows of weeks.\n   * This is mainly to be used in conjunction with InputDatePicker.\n   * <p>If not specified, defaults to the theme specified height.<br/>\n   */\n  height?: 'auto';\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * The monthAndYearPicker property can be used to specify whether or not the DatePicker should show the\n   * Months Grid View and Years Grid View.\n   */\n  monthAndYearPicker?: 'on' | 'off';\n\n  /**\n   * The maximum selectable date. The max must be equal or greater than the min if they are both specified or an error is thrown.\n   */\n  max?: CalendarDateRequired;\n\n  /**\n   * Specifies the component style maxWidth.\n   * <p>If not specified, defaults to the theme specified maxWidth.<br/>\n   * This attribute accepts values of type:<br/>\n   * 0 | `${number}${CssUnits}` | `${number}x` | `--${string}` | `var($string})` | `${number}%`</p>\n   * <p>When this component is used in composition and the component should take up 100% of the parent container's\n   * width, set maxWidth to '100%'.<br/>\n   * Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n   * set the maxWidth property to the same value.</p>\n   */\n  maxWidth?: Size;\n\n  /**\n   * The minimum selectable date. The min must be equal or less than the max if they are both specified or an error is thrown.\n   */\n  min?: CalendarDateRequired;\n\n  /**\n   * The todayTimeZone property is used to compute what the highlighted today cell is for the DatePicker.\n   * This defaults to the user's system timezone.\n   * <p>\n   * The only reason an application would set the todayTimeZone property is if they want the\n   * highlighted today cell to be in a different timezone than the user's system's timezone,\n   * like if the user has a preferred timezone that is not where they are physically working.\n   * </p>\n   */\n  todayTimeZone?: Intl.DateTimeFormatOptions['timeZone'];\n\n  /**\n   * Specifies how to render the 'Go to today' button.\n   * <ul>\n   * <li>'visible' - set this property to 'visible' to show the 'Go to today' button.</li>\n   * <li>'hidden' - set this property to 'hidden' to hide the 'Go to today' button.</li>\n   * </ul>\n   */\n  todayButton?: 'visible' | 'hidden';\n\n  /**\n   * The value of the DatePicker. The value property is the date that looks selected in the DatePicker.\n   * If the value is undefined, no day will look selected.\n   * <p>\n   * The DatePicker initially opens to the selected date if there is one and it is within the min/max range.\n   * If there is no value, the DatePicker initially opens to today's month.\n   * </p>\n   */\n  value?: CalendarDateRequired;\n\n  /**\n   * Specifies the component style width.\n   * <p>If not specified, defaults to '100%'.</p>\n   * <p>This attribute accepts values of type:</p>\n   * <p>0 | `${number}${CssUnits}` | `${number}x` | `--${string}`  | `var($string})` | `${number}%`</p>\n   * <br/>\n   * <p>Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n   * set the maxWidth property to the same value.</p>\n   */\n  width?: Size;\n\n  /**\n   * Callback invoked when the user selects a date in the DatePicker. This callback is called even when the previous\n   * value and the value are the same, that is, when the user selects an already selected date.\n   * The app needs to handle this to write back the controlled 'value' property, or else no date will be shown\n   * to be selected.\n   * If the app is using a DatePicker to control another component, like as a way to navigate an Event Calendar,\n   * then they would listen to the onCommit to get the value of the selected date.\n   */\n  onCommit: (detail: ValueUpdateDetail<CalendarDateRequired>) => void;\n\n  /**\n   * Whether week of the year will be shown in the DatePicker. The default calculation follows the\n   * rule for ISO 8601 as follows: The first week of the year is defined as the week that contains\n   * the first Thursday. Therefore, if January 1st falls on a Friday, it is considered part of the last week\n   * of the previous year. Conversely, if December 31st falls on a Wednesday, it is part of week 1 of the following year.\n   */\n  weekDisplay?: 'none' | 'number';\n};\n\n/**\n * A DatePicker is a calendar interface that allows users to select a single date.\n */\nexport const DatePicker = ({\n  dayFormatter,\n  daysOutsideMonth,\n  height,\n  isReadonly = false,\n  monthAndYearPicker = 'on',\n  max,\n  maxWidth,\n  min,\n  value,\n  testId,\n  todayTimeZone,\n  todayButton = 'visible',\n  weekDisplay = 'none',\n  width,\n  onCommit\n}: Props) => {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const { accessibleLabels, handlers, state, todaysDate, toggleSelection, viewContainerProps } =\n    useDatePicker({\n      isReadonly,\n      max,\n      min,\n      rootRef,\n      todayTimeZone,\n      value,\n      onCommit\n    });\n  const { month, year } = state.focusableDate;\n  const isMonthYearPickerEnabled = monthAndYearPicker === 'on' && !isReadonly;\n  // When the screen is < 360px, we hide the DatePickerHeader's today button and show a Today button\n  // on the bottom of the DatePicker instead.\n  // NOTE: I cannot use xs, sm here since useBreakpointValues's types do not allow it.\n  const shouldShowTodayFooterButton = useBreakpointValues(\n    {\n      sm: true,\n      md: false\n    },\n    { sm: '0px', md: '360px' }\n  );\n\n  const showTodayFooterButton =\n    !state.isTodayNavigationButtonHidden &&\n    shouldShowTodayFooterButton &&\n    todayButton === 'visible';\n\n  // we need to render the baseTheme on the root dom element so that the CSS vars in datePickerPropVars will be defined.\n  const { classes } = useComponentTheme(DatePickerRedwoodTheme);\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div class={classes} ref={rootRef} {...testIdProps}>\n      <Flex\n        direction=\"column\"\n        gap={\n          state.currentView === 'monthView'\n            ? datePickerPropVars.calendarGridRowGap\n            : datePickerPropVars.monthYearGridRowGap\n        }\n        height={\n          height === 'auto'\n            ? undefined\n            : showTodayFooterButton\n            ? datePickerPropVars.todayFooterButtonHeight\n            : datePickerPropVars.height\n        }\n        maxWidth={maxWidth !== undefined ? maxWidth : datePickerPropVars.maxWidth}\n        width={width !== undefined ? width : datePickerPropVars.width}>\n        <DatePickerHeader\n          testId={testId ? testId + '_header' : undefined}\n          month={month}\n          year={year}\n          isPreviousNavigationButtonHidden={state.isPreviousNavigationButtonHidden}\n          isTodayNavigationButtonHidden={\n            todayButton === 'hidden' ||\n            state.isTodayNavigationButtonHidden ||\n            shouldShowTodayFooterButton\n          }\n          isNextNavigationButtonHidden={state.isNextNavigationButtonHidden}\n          monthYearHeader={isMonthYearPickerEnabled ? 'independentButtons' : 'text'}\n          toggleSelection={isMonthYearPickerEnabled ? toggleSelection : undefined}\n          previousNavigationAccessibleLabel={accessibleLabels.previous}\n          todayNavigationAccessibleLabel={accessibleLabels.goToToday}\n          nextNavigationAccessibleLabel={accessibleLabels.next}\n          onTodayNavigationAction={handlers.handleTodayNavigation}\n          onPreviousNavigationAction={handlers.handlePreviousNavigation}\n          onNextNavigationAction={handlers.handleNextNavigation}\n          onMonthToggle={isMonthYearPickerEnabled ? handlers.handleMonthToggle : undefined}\n          onYearToggle={isMonthYearPickerEnabled ? handlers.handleYearToggle : undefined}\n        />\n        <div {...viewContainerProps}>\n          {state.currentView === 'monthView' && (\n            <MonthView\n              dayFormatter={dayFormatter}\n              daysOutsideMonth={daysOutsideMonth}\n              isReadonly={isReadonly}\n              max={max}\n              min={min}\n              selectedDate={value}\n              focusableDate={state.focusableDate}\n              isFocused={state.isViewFocused}\n              testId={testId ? testId + '_monthView' : undefined}\n              todaysDate={todaysDate}\n              onNavigation={handlers.handleMonthViewNavigation}\n              onDayFocused={handlers.handleDayFocused}\n              onAction={handlers.handleMonthViewAction}\n              weekDisplay={weekDisplay}\n            />\n          )}\n          {state.currentView === 'monthsGridView' && (\n            <MonthsGridView\n              currentMonth={todaysDate.month}\n              focusableMonth={state.focusableMonth}\n              isFocused={state.isViewFocused}\n              selectedMonth={month}\n              testId={testId ? testId + '_monthsGridView' : undefined}\n              onAction={handlers.handleMonthsGridViewAction}\n              onMonthFocused={handlers.handleMonthFocused}\n              onNavigation={handlers.handleMonthsGridViewNavigation}\n            />\n          )}\n          {state.currentView === 'yearsGridView' && (\n            <YearsGridView\n              currentYear={todaysDate.year}\n              focusableYear={state.focusableYear}\n              isFocused={state.isViewFocused}\n              selectedYear={year}\n              testId={testId ? testId + '_yearsGridView' : undefined}\n              onAction={handlers.handleYearsGridViewAction}\n              onNavigation={handlers.handleYearsGridViewNavigation}\n              onYearFocused={handlers.handleYearFocused}\n            />\n          )}\n        </div>\n        {showTodayFooterButton && (\n          <div>\n            <TodayButton\n              testId={testId ? testId + '_footerTodayButton' : undefined}\n              todayNavigationLabel={accessibleLabels.today}\n              todayNavigationAriaLabel={accessibleLabels.goToToday}\n              onTodayNavigationAction={handlers.handleTodayNavigation}\n            />\n          </div>\n        )}\n      </Flex>\n    </div>\n  );\n};\n"],"names":["datePickerViewActionTypes","monthViewActionTypes","monthsGridViewActionTypes","yearsGridViewActionTypes","datePickerReducer","state","action","type","payload","currentView","isViewFocused","isNextNavigationButtonHidden","isPreviousNavigationButtonHidden","isTodayNavigationButtonHidden","focusableMonth","focusableDate","month","focusableYear","year","previousDay","addToCalendarDate","days","nextDay","prevMonth","months","nextMonth","previousYear","years","nextYear","currentDate","firstDayOfMonthDate","day","lastDay","getDaysInMonth","lastDayOfMonthDate","previousMonth","addToMonth","monthSteps","goToDate","addToYear","yearSteps","headerToggleSelection","monthView","monthsGridView","yearsGridView","useDatePicker","isReadonly","max","min","rootRef","todayTimeZone","value","onCommit","isCalendarDateBefore","Error","todaysDate","getCalendarDateToday","initialFocusableDate","useMemo","constrainCalendarDate","actions","initialState","dispatch","useReducer","lastValueFromParentRef","useRef","compareDates","current","actionsObject","forEach","useDatePickerState","translations","useTranslationBundle","accessibleLabels","next","datePicker_next","previous","datePicker_prev","goToToday","datePicker_goToToday","today","datePicker_today","changeValue","useCallback","newValue","Promise","reject","previousValue","resolve","useHiddenTestMethod","elementRef","method","name","handlers","handleMonthToggle","undefined","handleYearToggle","handleTodayNavigation","handlePreviousNavigation","previousDecade","handleNextNavigation","nextDecade","handleMonthViewAction","date","daySelected","handleDayFocused","dayFocused","handleMonthViewNavigation","detail","direction","previousMonthAndFocus","nextMonthAndFocus","handleMonthsGridViewAction","monthSelected","handleMonthFocused","monthFocused","handleMonthsGridViewNavigation","nextMonthRowInGridView","nextMonthInGridView","previousMonthInGridView","previousMonthRowInGridView","handleYearsGridViewAction","yearSelected","handleYearFocused","yearFocused","handleYearsGridViewNavigation","nextYearRowInGridView","nextYearInGridView","nextDecadeAndFocus","previousYearInGridView","previousDecadeAndFocus","previousYearRowInGridView","focusProps","useFocusWithin","onBlurWithin","viewBlur","onFocusWithin","viewFocus","toggleSelection","viewContainerProps","TodayButton","onTodayNavigationAction","testId","todayNavigationAriaLabel","todayNavigationLabel","_jsx","jsx","Flex","children","Button","label","size","onAction","dayFormatter","daysOutsideMonth","height","monthAndYearPicker","maxWidth","todayButton","weekDisplay","width","isMonthYearPickerEnabled","shouldShowTodayFooterButton","useBreakpointValues","sm","md","showTodayFooterButton","classes","useComponentTheme","DatePickerRedwoodTheme","testIdProps","useTestId","class","ref","_jsxs","gap","datePickerPropVars","calendarGridRowGap","monthYearGridRowGap","todayFooterButtonHeight","DatePickerHeader","monthYearHeader","previousNavigationAccessibleLabel","todayNavigationAccessibleLabel","nextNavigationAccessibleLabel","onPreviousNavigationAction","onNextNavigationAction","onMonthToggle","onYearToggle","MonthView","selectedDate","isFocused","onNavigation","onDayFocused","MonthsGridView","currentMonth","selectedMonth","onMonthFocused","YearsGridView","currentYear","selectedYear","onYearFocused"],"mappings":"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"}