{"version":3,"file":"ActionCard-eb924a00.js","sources":["../../src/UNSAFE_ActionCard/ActionCard.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { ActionDetail } from '#UNSAFE_BaseButton';\nimport { StyledCard } from '#PRIVATE_StyledCard';\n\nimport { type ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { type AriaProps } from '#utils/UNSAFE_interpolations/aria';\nimport { type DimensionProps } from '#utils/UNSAFE_interpolations/dimensions';\nimport { type PaddingProps } from '#utils/UNSAFE_interpolations/padding';\nimport { useActionable } from '#hooks/UNSAFE_useActionable';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\n\ntype StyleProps = DimensionProps & PaddingProps & ColorProps & AriaProps;\n\ntype Props = StyleProps &\n  TestIdProps & {\n    children?: ComponentChildren;\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: (details: ActionDetail) => void;\n  };\n\n/**\n * An action card is a container that renders a group of related information in a styled rectangular area, provides enhanced styling for hover and focus states, and invokes an action event when clicked.\n * Width, height, padding, and background color are set through props.\n */\nexport const ActionCard = forwardRef(\n  ({ children, onAction, testId, ...rest }: Props, ref: Ref<HTMLDivElement>) => {\n    const { isTabbable } = useTabbableMode();\n\n    const pressHandler = (e: Event) => {\n      if (onAction) {\n        onAction({\n          reason: e.type == 'keyup' ? 'keyboard' : 'pointer'\n        });\n      }\n    };\n\n    const { actionableProps, isHover, isActive } = useActionable(pressHandler);\n\n    return (\n      <StyledCard\n        {...actionableProps}\n        cursor=\"pointer\"\n        display=\"inlineFlex\"\n        isActive={isActive}\n        isHover={isHover}\n        parentComponentVariant=\"actionCard\"\n        ref={ref}\n        role=\"button\"\n        tabIndex={isTabbable ? 0 : -1}\n        testId={testId}\n        {...rest}>\n        {children}\n      </StyledCard>\n    );\n  }\n);\n"],"names":["ActionCard","forwardRef","children","onAction","testId","rest","ref","isTabbable","useTabbableMode","actionableProps","isHover","isActive","useActionable","e","reason","type","_jsx","jsx","StyledCard","cursor","display","parentComponentVariant","role","tabIndex"],"mappings":"qNAqCaA,EAAaC,EAAAA,YACxB,EAAGC,WAAUC,WAAUC,YAAWC,GAAeC,KAC/C,MAAMC,WAAEA,GAAeC,EAAAA,mBAUjBC,gBAAEA,EAAeC,QAAEA,EAAOC,SAAEA,GAAaC,EAAAA,eARzBC,IAChBV,GACFA,EAAS,CACPW,OAAkB,SAAVD,EAAEE,KAAkB,WAAa,WAE5C,IAKH,OACEC,EAACC,IAAAC,EAAUA,WACL,IAAAT,EACJU,OAAO,UACPC,QAAQ,aACRT,SAAUA,EACVD,QAASA,EACTW,uBAAuB,aACvBf,IAAKA,EACLgB,KAAK,SACLC,SAAUhB,EAAa,GAAK,EAC5BH,OAAQA,KACJC,EACHH,SAAAA,GAEH"}