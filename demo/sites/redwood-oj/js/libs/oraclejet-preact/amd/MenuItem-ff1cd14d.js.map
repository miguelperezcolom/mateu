{"version":3,"file":"MenuItem-ff1cd14d.js","sources":["../../src/UNSAFE_Menu/menuUtils.ts","../../src/UNSAFE_Menu/MenuContext.ts","../../src/UNSAFE_Menu/useMenuContext.ts","../../src/UNSAFE_Menu/MenuContainerContext.ts","../../src/UNSAFE_Menu/useMenuContainerContext.ts","../../src/UNSAFE_Menu/MenuItem.tsx","../../src/UNSAFE_Menu/useSubmenuItemHover.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\n\nimport { Menu } from './Menu';\n\n/**\n * Returns the key from the item element\n */\nexport const getKey = (item: HTMLElement) => {\n  // Key is set on data-oj-menu-item-key on each menuItem. To get this key from the\n  // the actual menuItem we need to do a kebab to camel-case conversion.\n  return item.dataset['ojMenuItemKey'];\n};\n\n/**\n * A helper function that return the key of the n available item.\n */\nexport const getNVisible = (root: HTMLElement | null, positionIndex: number) => {\n  if (root) {\n    const items = root.querySelectorAll('[data-oj-menu-item-key]');\n    const positionedItem = items[positionIndex] as HTMLElement;\n    if (positionedItem) {\n      const key = getKey(positionedItem as HTMLElement);\n      if (key) {\n        return key;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function that return the key of the last available item.\n */\nexport const getLastVisible = (root: HTMLElement | null) => {\n  if (root) {\n    const items = root.querySelectorAll('[data-oj-menu-item-key]');\n    const lastItem = items[items.length - 1] as HTMLElement;\n    if (lastItem) {\n      const key = getKey(lastItem as HTMLElement);\n      if (key) {\n        return key;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * A helper function that returns the key of the previous or the next item\n * given the specified current key\n */\nexport const getPrevNext = (root: HTMLElement | null, isPrev: boolean, currentKey?: string) => {\n  return (): string | null => {\n    if (root) {\n      const items = Array.from(root.querySelectorAll('[data-oj-menu-item-key]')) as HTMLElement[];\n      const currentKeyIndex = items.findIndex((item) => getKey(item) === currentKey);\n      let nextIndex = currentKeyIndex + (isPrev ? -1 : 1);\n      const itemsLastIndex = items.length - 1;\n      if (nextIndex < 0) {\n        nextIndex = itemsLastIndex;\n      }\n      if (nextIndex > itemsLastIndex) {\n        nextIndex = 0;\n      }\n\n      const key = getKey(items[nextIndex]);\n      return key ? key : null;\n    }\n    return null;\n  };\n};\n\n/**\n * A helper function to get the key from an element\n */\nexport const keyElemExtractor = (\n  element: HTMLElement\n): { key: string; elem: HTMLElement } | null => {\n  const elem = element.closest('[data-oj-menu-item-key]') as HTMLElement;\n  if (elem) {\n    const key = getKey(elem as HTMLElement);\n    return key === undefined ? null : ({ key, elem } as { key: string; elem: HTMLElement });\n  }\n  return null;\n};\n\n/**\n * Function to get the corresponding keyboard behavior to close the menu.\n */\nexport const getKeyboardCloseProps = (\n  onClose: ComponentProps<typeof Menu>['onClose'],\n  menuLevel: 'main' | 'sub'\n) => {\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'Tab') {\n      event.stopPropagation();\n      onClose?.({ reason: 'dismissed' });\n      event.preventDefault(); //TODO: Revisit this since we should let focus be at its natural flow, quick solution for now to focus correct item in main use case\n    } else if (event.key === 'Escape' && menuLevel === 'main') {\n      event.stopPropagation();\n      onClose?.({ reason: 'dismissed' });\n    }\n  };\n  return { onKeyDown };\n};\n\n/**\n * Function to get the corresponding specific behavior for closing submenu via keyboard\n */\nexport const getCloseSubmenuEvent = (direction: 'ltr' | 'rtl', closeSubmenu?: () => void) => {\n  if (!closeSubmenu) {\n    return {};\n  }\n  const onKeyDown = (e: KeyboardEvent) => {\n    if (\n      e.key === 'Escape' ||\n      (direction === 'ltr' && e.key === 'ArrowLeft') ||\n      (direction === 'rtl' && e.key === 'ArrowRight')\n    ) {\n      e.stopPropagation();\n      closeSubmenu?.();\n    }\n  };\n  return { onKeyDown };\n};\n\n/**\n * Function to get the corresponding specific behavior for opening submenu via keyboard\n */\nexport const getOpenSubmenuEvent = (direction: 'ltr' | 'rtl', openSubmenu?: () => void) => {\n  if (!openSubmenu) {\n    return {};\n  }\n  const onKeyDown = (e: KeyboardEvent) => {\n    if (direction === 'ltr') {\n      if (e.key === 'ArrowRight') {\n        openSubmenu?.();\n      }\n    } else {\n      if (e.key === 'ArrowLeft') {\n        openSubmenu?.();\n      }\n    }\n  };\n  return { onKeyDown };\n};\n\n/**\n * Function to get type of device\n */\nexport const getIsMobile = () => {\n  const { deviceType } = getClientHints();\n  return deviceType === 'phone';\n};\n\n/**\n * Get blur and focus events\n */\nexport const getMenuContainerFocusMethods = (\n  blurFunction: () => void,\n  focusFunction: () => void\n) => {\n  const onBlur = () => {\n    setTimeout(() => {\n      blurFunction();\n    }, 100);\n  };\n\n  const onFocus = () => {\n    focusFunction();\n  };\n\n  return { onBlur, onFocus };\n};\n\n/**\n * Set currentKey based on clicking menuItem\n */\nexport const getMenuItemClickChangeKey = (\n  key: string,\n  changeKeyMethod: (payload: { key: string; reason: 'click' | 'mouseEnter' | 'keyboard' }) => void\n) => {\n  const onClick = () => {\n    changeKeyMethod({ key, reason: 'click' });\n  };\n  return { onClick };\n};\n\nexport const getMenuContainerMouseLeave = (mouseLeaveFunction: (e: MouseEvent) => void) => {\n  const onMouseLeave = (e: MouseEvent) => {\n    mouseLeaveFunction(e);\n  };\n  return { onMouseLeave };\n};\n\n/**\n * Function to get the corresponding specific behavior for clicking/touching down menuContainer\n */\nexport const getMenuPointerDown = () => {\n  const onPointerDown = (event: PointerEvent) => {\n    //We just want to prevent default when element that was\n    //pressed down was not a menu item.\n    const keyElem = keyElemExtractor(event.target as HTMLElement);\n    if (!keyElem?.key) {\n      event.preventDefault();\n    }\n  };\n  return { onPointerDown };\n};\n\nexport const isMenuChildrenFalsy = (children: ComponentChildren) => {\n  return !children || (Array.isArray(children) && !children.length);\n};\n\nexport type MenuValueUpdateDetail<T> = {\n  previousValue?: T;\n  value: T;\n};\n\nexport type MenuCollectionItem = {\n  key?: string;\n  reason: 'mouseEnter' | 'click' | 'keyboard' | 'touch';\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext, ComponentProps } from 'preact';\n\nimport { Menu } from './Menu';\n\ntype Props = {\n  isMobile: boolean;\n  onClose: ComponentProps<typeof Menu>['onClose'];\n  testId: string | undefined;\n};\n\n/**\n * Context used to pass menu information without having to pass it to menu children props.\n * We want to communicate information down to any interested menu item children.\n */\nconst MenuContext = createContext<Props>({\n  isMobile: false,\n  onClose: () => null,\n  testId: ''\n});\n\nexport { MenuContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\n\nimport { MenuContext } from './MenuContext';\n\n/**\n * Utility hook for consuming the MenuContext\n *\n * @returns The value of MenuContext provider\n */\nfunction useMenuContext() {\n  return useContext(MenuContext);\n}\n\nexport { useMenuContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { MutableRef } from 'preact/hooks';\n\nimport { MenuCollectionItem } from './menuUtils';\n\nexport type MenuContainerContextProps = {\n  menuContainerRef: MutableRef<HTMLDivElement | null>;\n  currentKey?: string;\n  showFocusRing: boolean;\n  changeKey: (detail: MenuCollectionItem) => void;\n  isContainerFocused: boolean;\n  menuContainerGeneralInformation: MutableRef<{\n    wasMouseMoved: boolean;\n    lastMouseLeaveMenuItemdRelatedTarget: HTMLElement | null;\n  }>;\n};\n/**\n * Context used to pass menu information without having to pass it to menu children MenuContainerContextprops.\n * We want to communicate information down to any interested menu item children.\n */\nconst MenuContainerContext = createContext<MenuContainerContextProps>({\n  menuContainerRef: { current: null },\n  currentKey: undefined,\n  showFocusRing: false,\n  changeKey: () => {},\n  isContainerFocused: false,\n  menuContainerGeneralInformation: {\n    current: {\n      wasMouseMoved: false,\n      lastMouseLeaveMenuItemdRelatedTarget: null\n    }\n  }\n});\n\nexport { MenuContainerContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\n\nimport { MenuContainerContext } from './MenuContainerContext';\n\n/**\n * Utility hook for consuming the MenuContainerContext\n *\n * @returns The value of MenuContainerContext provider\n */\nfunction useMenuContainerContext() {\n  return useContext(MenuContainerContext);\n}\n\nexport { useMenuContainerContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport {\n  MutableRef,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useCallback,\n  useImperativeHandle\n} from 'preact/hooks';\nimport { ComponentChildren } from 'preact';\n\nimport { Text } from '../UNSAFE_Text';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\n\nimport { useMenuContext } from './useMenuContext';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { getMenuItemClickChangeKey, getOpenSubmenuEvent } from './menuUtils';\nimport { useMenuContainerContext } from './useMenuContainerContext';\nimport { useSubmenuItemHover } from './useSubmenuItemHover';\nimport { MenuItemStyles, MenuItemVariantOptions } from './themes/MenuItemStyles.css';\nimport { MenuItemRedwoodTheme } from './themes/redwood/MenuItemTheme';\n\ntype MenuItemProps = BaseBaseMenuItemProps;\n\ntype BaseBaseMenuItemProps = {\n  label: string;\n  onAction?: () => void;\n  startIcon?: ComponentChildren;\n  isDisabled?: boolean;\n  variant?: 'standard' | 'destructive';\n  itemKey?: string;\n} & EndSlot;\n\ntype EndSlot =\n  | { endIcon?: ComponentChildren; keyboardShortcut?: never }\n  | { endIcon?: never; keyboardShortcut?: string };\n\nexport function MenuItem(props: MenuItemProps) {\n  const uniqueID = useId();\n  const id = useMemo(() => `oj-menu-item-${uniqueID}`, [uniqueID]);\n  return <BaseMenuItem {...props} role=\"menuitem\" type=\"simple\" id={id}></BaseMenuItem>;\n}\n//TODO:Omit<T, K> utility type does not distribute over union types in T. Have to check what can we do for\n//the discriminated union to be working. JET-57191\ntype BaseMenuItemProps = (SimpleBaseMenuItem | SelectBaseMenuItem | SubmenuBaseMenuItem) &\n  Omit<BaseBaseMenuItemProps, 'onAction'> & {\n    id: string;\n    menuItemLabelWeight?: 'normal' | 'bold';\n    onAction?: (e: Event) => void;\n  };\n\ntype SimpleBaseMenuItem = {\n  type: 'simple';\n  role: 'menuitem';\n} & ExcludedSubmenuProps &\n  ExcludedSelectProps;\n\ntype SelectBaseMenuItem = {\n  type: 'select';\n  role: 'menuitemcheckbox' | 'menuitemradio';\n  isChecked?: boolean;\n} & ExcludedSubmenuProps;\n\ntype SubmenuBaseMenuItem = {\n  type: 'submenu';\n  role: 'menuitem';\n} & IncludedSubmenuProps &\n  ExcludedSelectProps;\n\ntype ExcludedSubmenuProps = {\n  hoverInfo?: never;\n  openSubmenu?: never;\n  isSubmenuOpen?: never;\n  submenuId?: never;\n  submenuRef?: never;\n};\ntype IncludedSubmenuProps = {\n  hoverInfo?: {\n    hoverProps: Record<string, any>;\n    hoverStatus: MutableRef<{ recentClose: boolean; pendingUnhover: boolean }>;\n  };\n  openSubmenu?: () => void;\n  isSubmenuOpen?: boolean;\n  submenuId?: string;\n  submenuRef?: MutableRef<HTMLDivElement | null>;\n};\n\ntype ExcludedSelectProps = {\n  isChecked?: never;\n};\n\n//TODO: We have to comeback to this and see if we create new components to represent different types on menuItems\n//instead of using type prop. It also includes a new definition on prop types. This also includes the exposing of id\n//that is used by submenus. JET-57191\nexport const BaseMenuItem = forwardRef(\n  (\n    {\n      id,\n      label,\n      onAction,\n      startIcon,\n      endIcon,\n      role,\n      isChecked,\n      isDisabled = false,\n      variant = 'standard',\n      type,\n      hoverInfo,\n      openSubmenu,\n      menuItemLabelWeight = 'normal',\n      isSubmenuOpen,\n      submenuId,\n      submenuRef,\n      itemKey,\n      keyboardShortcut\n    }: BaseMenuItemProps,\n    ref?: ForwardedRef<HTMLAnchorElement>\n  ) => {\n    const { onClose } = useMenuContext();\n    const {\n      currentKey,\n      changeKey,\n      showFocusRing,\n      menuContainerRef,\n      menuContainerGeneralInformation,\n      isContainerFocused\n    } = useMenuContainerContext();\n\n    const menuItemRef = useRef<HTMLAnchorElement | null>(null);\n    useImperativeHandle(ref!, () => menuItemRef.current!, []);\n    const { direction } = useUser();\n\n    const isCurrent = currentKey === id;\n\n    const handleItemSelection = useCallback(\n      (e: Event) => {\n        //We don't want to close the menu if the element is a submenu one\n        if (type !== 'submenu') {\n          onClose?.({ reason: 'itemAction' });\n        }\n        onAction?.(e);\n      },\n      [type, onClose, onAction]\n    );\n\n    /*This hook is not used to just know is something is hover or not. Actual callbacks are run when mouse enter\n    or leave the menu item (to focus items when hovering and open submenus if the item is a submenu).  We don't use\n    useInteractionStyle hook for hovering since \"hovering style\" is more of a \"focus\" style in this context */\n    const { hoverProps } = useSubmenuItemHover({\n      onMouseEnter: (e: MouseEvent) => {\n        if (\n          !(\n            hoverInfo?.hoverStatus.current.recentClose ||\n            hoverInfo?.hoverStatus.current.pendingUnhover\n          )\n        ) {\n          if (hoverInfo && menuContainerGeneralInformation.current.wasMouseMoved) {\n            hoverInfo.hoverStatus.current.pendingUnhover = true;\n          }\n          // Mouse needs to be already moved to trigger mouse enter event\n          if (menuContainerGeneralInformation.current.wasMouseMoved) {\n            hoverInfo?.hoverProps['onMouseEnter'](e);\n            changeKey({\n              key: id,\n              reason: 'mouseEnter'\n            });\n          }\n        }\n      },\n      onMouseLeave: (e: MouseEvent) => {\n        if (hoverInfo) {\n          hoverInfo.hoverStatus.current.pendingUnhover = false;\n        }\n        //We check if new hover element is part of the menuContainer or submenu is there is one\n        if (\n          menuContainerRef.current?.contains(e.relatedTarget as Element) ||\n          // We need to check for submenu parent element (dropdown)\n          submenuRef?.current?.parentElement?.contains(e.relatedTarget as Element)\n        ) {\n          menuContainerGeneralInformation.current.lastMouseLeaveMenuItemdRelatedTarget =\n            e.relatedTarget as HTMLElement;\n        }\n      }\n    });\n\n    // Returning an empty handler instead of disable option since we need to prevent default behavior when using space key\n    const { pressProps } = usePress(isDisabled ? () => {} : handleItemSelection);\n\n    useLayoutEffect(() => {\n      if (isCurrent) {\n        menuItemRef.current?.focus();\n      }\n    }, [isCurrent]);\n\n    const { interactionProps } = useInteractionStyle({ isDisabled });\n\n    const {\n      classes: menuItemContainerClasses,\n      styles: {\n        iconLabelContainer,\n        iconContainer,\n        startIconContainer,\n        labelContainer,\n        endIconContainer\n      }\n    } = useComponentTheme<MenuItemVariantOptions, MenuItemStyles>(MenuItemRedwoodTheme, {\n      current: isCurrent ? 'isCurrent' : 'notCurrent',\n      focusRing: showFocusRing ? 'isFocusRing' : 'notFocusRing',\n      variant: isDisabled ? 'disabled' : variant,\n      containerFocused: isContainerFocused ? 'isContainerFocused' : 'notContainerFocused',\n      submenuOpen: !!isSubmenuOpen ? 'isSubmenuOpen' : 'notSubmenuOpen'\n    });\n\n    const flexItemStyleInterpolations = mergeInterpolations<FlexitemProps>([\n      ...Object.values(flexitemInterpolations)\n    ]);\n    const { class: labelContainerFlexItemClasses, ...labelContainerFlexItemStyles } =\n      flexItemStyleInterpolations({\n        flex: '1 1 auto',\n        alignSelf: 'center'\n      });\n    const { class: iconContainerFlexItemClasses, ...iconContainerFlexItemStyles } =\n      flexItemStyleInterpolations({\n        flex: '0 0 auto',\n        alignSelf: 'center'\n      });\n\n    const startIconContainerClasses = classNames([\n      iconContainerFlexItemClasses,\n      iconLabelContainer,\n      iconContainer,\n      startIconContainer\n    ]);\n\n    const labelContainerClasses = classNames([\n      labelContainerFlexItemClasses,\n      iconLabelContainer,\n      labelContainer\n    ]);\n\n    const endIconContainerClasses = classNames([\n      iconContainerFlexItemClasses,\n      iconLabelContainer,\n      iconContainer,\n      endIconContainer\n    ]);\n\n    return (\n      <div role=\"presentation\">\n        <a\n          {...(submenuId !== undefined && type === 'submenu' && { 'aria-owns': submenuId })}\n          ref={menuItemRef}\n          data-oj-label={label}\n          data-oj-key={itemKey}\n          class={menuItemContainerClasses}\n          {...mergeProps(\n            interactionProps,\n            hoverProps,\n            pressProps,\n            getOpenSubmenuEvent(direction, openSubmenu),\n            getMenuItemClickChangeKey(id, changeKey)\n          )}\n          role={role}\n          data-oj-menu-item-key={id}\n          //For now its ok to have menuItemLabelWeight to check if menuitem is a \"submenu item title\" since this is the only item with a value as bold\n          {...(type === 'submenu' && {\n            'aria-haspopup': true,\n            'aria-expanded': menuItemLabelWeight === 'bold' || !!isSubmenuOpen\n          })}\n          {...(isDisabled && { 'aria-disabled': true })}\n          {...(type === 'select' && { 'aria-checked': !!isChecked })}\n          tabIndex={isCurrent ? 0 : -1}>\n          {startIcon && (\n            <span style={iconContainerFlexItemStyles} class={startIconContainerClasses}>\n              {startIcon}\n            </span>\n          )}\n          <span style={labelContainerFlexItemStyles} class={labelContainerClasses}>\n            <Text variant=\"inherit\" size=\"md\" weight={menuItemLabelWeight}>\n              {label}\n            </Text>\n          </span>\n          {(endIcon || keyboardShortcut) && (\n            <span style={iconContainerFlexItemStyles} class={endIconContainerClasses}>\n              {endIcon || (\n                <Text variant=\"inherit\" size=\"md\" weight=\"normal\">\n                  {keyboardShortcut}\n                </Text>\n              )}\n            </span>\n          )}\n        </a>\n      </div>\n    );\n  }\n);\n","import { useToggle } from '../hooks/UNSAFE_useToggle';\n\nexport type HoverOptions = {\n  onMouseEnter: (e: MouseEvent) => void;\n  onMouseLeave: (e: MouseEvent) => void;\n};\n/**\n * Returns listeners and status for hover\n *\n *\n * @returns\n */\nexport function useSubmenuItemHover(settings: HoverOptions): {\n  hoverProps: Record<string, any>;\n} {\n  const { bool: ignore, setTrue: setIgnoreTrue, setFalse: setIgnoreFalse } = useToggle(false);\n  const startHover = (e: MouseEvent) => {\n    if (ignore) {\n      setIgnoreFalse();\n    } else {\n      settings.onMouseEnter(e);\n    }\n  };\n\n  const hoverProps = {\n    ontouchend: setIgnoreTrue,\n    onMouseEnter: startHover,\n    onMouseLeave: (e: MouseEvent) => {\n      settings.onMouseLeave(e);\n    }\n  };\n  return {\n    hoverProps: hoverProps\n  };\n}\n"],"names":["getKey","item","dataset","keyElemExtractor","element","elem","closest","key","undefined","getOpenSubmenuEvent","direction","openSubmenu","onKeyDown","e","MenuContext","createContext","isMobile","onClose","testId","useMenuContext","useContext","MenuContainerContext","menuContainerRef","current","currentKey","showFocusRing","changeKey","isContainerFocused","menuContainerGeneralInformation","wasMouseMoved","lastMouseLeaveMenuItemdRelatedTarget","useMenuContainerContext","BaseMenuItem","forwardRef","id","label","onAction","startIcon","endIcon","role","isChecked","isDisabled","variant","type","hoverInfo","menuItemLabelWeight","isSubmenuOpen","submenuId","submenuRef","itemKey","keyboardShortcut","ref","menuItemRef","useRef","useImperativeHandle","useUser","isCurrent","handleItemSelection","useCallback","reason","hoverProps","settings","bool","ignore","setTrue","setIgnoreTrue","setFalse","setIgnoreFalse","useToggle","ontouchend","onMouseEnter","onMouseLeave","useSubmenuItemHover","hoverStatus","recentClose","pendingUnhover","contains","relatedTarget","parentElement","pressProps","usePress","useLayoutEffect","focus","interactionProps","useInteractionStyle","classes","menuItemContainerClasses","styles","iconLabelContainer","iconContainer","startIconContainer","labelContainer","endIconContainer","useComponentTheme","MenuItemRedwoodTheme","focusRing","containerFocused","submenuOpen","flexItemStyleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","labelContainerFlexItemClasses","labelContainerFlexItemStyles","flex","alignSelf","iconContainerFlexItemClasses","iconContainerFlexItemStyles","startIconContainerClasses","classNames","labelContainerClasses","endIconContainerClasses","_jsx","jsx","children","_jsxs","jsxs","mergeProps","changeKeyMethod","onClick","tabIndex","style","Text","size","weight","props","uniqueID","useId","useMemo","closeSubmenu","stopPropagation","deviceType","getClientHints","menuLevel","event","preventDefault","root","items","querySelectorAll","lastItem","length","blurFunction","focusFunction","onBlur","setTimeout","onFocus","mouseLeaveFunction","onPointerDown","keyElem","target","positionIndex","positionedItem","isPrev","Array","from","nextIndex","findIndex","itemsLastIndex","isArray"],"mappings":"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"}