{"version":3,"file":"useMenuAction-26df747b.js","sources":["../../src/hooks/UNSAFE_useMenuAction/useMenuAction.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { useState, useCallback } from 'preact/hooks';\nimport { RefObject, ElementRef } from 'preact/compat';\nimport { Menu } from '../../UNSAFE_Menu';\nimport { BaseButton } from '../../UNSAFE_BaseButton';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype InitialFocusType = ComponentProps<typeof Menu>['initialFocus'];\ntype MenuProps = {\n  isOpen?: ComponentProps<typeof Menu>['isOpen'];\n  anchorRef: ComponentProps<typeof Menu>['anchorRef'];\n  initialFocus?: InitialFocusType;\n  onClose: ComponentProps<typeof Menu>['onClose'];\n};\n\nexport type MenuToggleDetail = {\n  value: boolean;\n};\n\nexport type MenuActionOptions = {\n  isDisabled?: boolean;\n  anchorRef: RefObject<ButtonHandle>;\n  onToggleMenu?: (details: MenuToggleDetail) => void;\n  isMenuOpen?: boolean;\n};\n\nexport type MenuActionReturnType = {\n  triggerProps: Record<string, any>;\n  menuProps: MenuProps;\n};\n\n/**\n * Use to associate a popup menu with a target that supports onAction\n *\n * @returns\n */\nexport function useMenuAction({\n  isDisabled,\n  isMenuOpen,\n  onToggleMenu,\n  anchorRef\n}: MenuActionOptions): MenuActionReturnType {\n  const [initialFocus, setInitialFocus] = useState<InitialFocusType>('menu');\n\n  const handleAction = useCallback<Required<ComponentProps<typeof BaseButton>>['onAction']>(\n    (details) => {\n      if (details.reason === 'keyboard') {\n        setInitialFocus('firstItem');\n      } else {\n        setInitialFocus('menu');\n      }\n\n      onToggleMenu?.({\n        value: !isMenuOpen\n      });\n    },\n    [onToggleMenu, isMenuOpen, setInitialFocus]\n  );\n\n  const handleClose = useCallback<Required<ComponentProps<typeof Menu>>['onClose']>(\n    (detail) => {\n      if (detail.reason === 'anchorClick') {\n        return;\n      }\n\n      //Focus has to be set on the launcher when menu is dismissed or\n      //item is \"selected\"\n      if (detail.reason === 'dismissed' || detail.reason === 'itemAction') {\n        anchorRef.current?.focus();\n      }\n\n      onToggleMenu?.({\n        value: false\n      });\n    },\n    [onToggleMenu, anchorRef]\n  );\n\n  // DOWN ARROW invokes menu\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key == 'ArrowDown') {\n        setInitialFocus('firstItem');\n        !isDisabled && onToggleMenu?.({ value: !isMenuOpen });\n        // Prevent page scroll for down arrow, user definitely wanted to show menu in this case.\n        // Don't prevent other keypress defaults, as user may want to hold SPACE down to scroll page.\n        event.preventDefault();\n      }\n    },\n    [isDisabled, isMenuOpen, onToggleMenu]\n  );\n\n  const menuProps = {\n    anchorRef: anchorRef,\n    isOpen: isMenuOpen,\n    onClose: handleClose,\n    initialFocus: initialFocus\n  };\n\n  const triggerProps = isDisabled\n    ? {}\n    : {\n      onAction: handleAction,\n      onKeyDown,\n      'aria-haspopup': 'true',\n      'aria-expanded': isMenuOpen\n    };\n\n  return {\n    triggerProps: triggerProps,\n    menuProps: menuProps\n  };\n}\n"],"names":["isDisabled","isMenuOpen","onToggleMenu","anchorRef","initialFocus","setInitialFocus","useState","handleAction","useCallback","details","reason","value","handleClose","detail","current","focus","onKeyDown","event","key","preventDefault","triggerProps","onAction","menuProps","isOpen","onClose"],"mappings":"8EAqCM,UAAwBA,WAC5BA,EAAUC,WACVA,EAAUC,aACVA,EAAYC,UACZA,IAEA,MAAOC,EAAcC,GAAmBC,EAAQA,SAAmB,QAE7DC,EAAeC,eAClBC,IACwB,aAAnBA,EAAQC,OACVL,EAAgB,aAEhBA,EAAgB,QAGlBH,IAAe,CACbS,OAAQV,GACR,GAEJ,CAACC,EAAcD,EAAYI,IAGvBO,EAAcJ,eACjBK,IACuB,gBAAlBA,EAAOH,SAMW,cAAlBG,EAAOH,QAA4C,eAAlBG,EAAOH,QAC1CP,EAAUW,SAASC,QAGrBb,IAAe,CACbS,OAAO,IACP,GAEJ,CAACT,EAAcC,IAIXa,EAAYR,eACfS,IACkB,aAAbA,EAAMC,MACRb,EAAgB,cACfL,GAAcE,IAAe,CAAES,OAAQV,IAGxCgB,EAAME,iBACP,GAEH,CAACnB,EAAYC,EAAYC,IAmB3B,MAAO,CACLkB,aAVmBpB,EACjB,CAAE,EACF,CACAqB,SAAUd,EACVS,YACA,gBAAiB,OACjB,gBAAiBf,GAKnBqB,UAlBgB,CAChBnB,UAAWA,EACXoB,OAAQtB,EACRuB,QAASZ,EACTR,aAAcA,GAgBlB"}