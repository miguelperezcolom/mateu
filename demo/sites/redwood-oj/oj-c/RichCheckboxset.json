[
  {
    "id": "oj-c.RichCheckboxset",
    "name": "RichCheckboxset",
    "memberof": "oj-c",
    "kind": "class",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "ojcomponent": true,
    "isvcomponent": true,
    "since": "18.1.0",
    "longname": "oj-c.RichCheckboxset",
    "pack": "oj-c",
    "classdesc": "<h3 id=\"richCheckboxsetOverview-section\">\n  JET Rich Checkboxset Component\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#richCheckboxsetOverview-section\"></a>\n</h3>\n\n<p>\nDescription: A JET Rich Checkbox Set allows the user to select one or more options from a set of rich options.\n</p>\n\n<p>The options content can be configured via an array.\nOnce an array is set it should not be mutated. In order to change the data, a new array instance must be set.\n</p>\n\n<pre class=\"prettyprint\">\n<code>\n&lt;oj-c-rich-checkboxset options=\"[[immutableArray]]\">\n&lt;/oj-c-rich-checkboxset>\n</code>\n</pre>\n\n<p>\n You can enable and disable an oj-c-rich-checkboxset,\n which will enable and disable all contained checkboxes.\n</p>\n<p>\n You can also set an oj-c-rich-checkboxset to readonly, \n which will make all the checkbox items readonly.\n</p>\n\n<h3 id=\"validation-section\">\n  Validation and Messaging\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#validation-section\"></a>\n</h3>\n\n<p>\nFor components that support validators, any invalid values entered by the user are not pushed into the value\nif validation fails: the <a href=\"#valid\">valid property</a> will change but the original value will remain unchanged.\nThe same thing applies to required validation: if required is set to true and the user clears the field,\nvalid will change, but empty values will not be pushed so the original value remains unchanged.\n</p>\n<p>\nUse <a href=\"../jetCookbook.html?component=validationGroup&demo=requiredFieldValidation\">\n&lt;oj-validation-group></a> to handle tracking valid across multiple components.\n</p>\n<p>\nAn editable component runs validation (normal or deferred) based on the action performed on it\n(either by end-user or page author), and the state it was in when the action occurred. Examples\nof actions are - creating a component, user changing the value of the component by interacting\nwith it, the app setting a value programmatically, the app calling the validate() method etc. At\nthe time the action occurs, the component could already be showing errors, or can have a deferred\nerror or have no errors.\n</p>\n<p>\nThese factors also determine whether validation errors/messages get shown to the user immediately\nor get deferred. The following sections highlight the kinds of validation that are run and how\nmessages get handled.\n</p>\n\n<h4 id=\"normal-validation-section\">\n  Normal Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#normal-validation-section\"></a>\n</h4>\nNormal validation is run in the following cases on the display value, using the converter and\nvalidators (this includes async-validators) set on the component (for components that support these properties),\n\nand validation errors are reported to user immediately.\n<ul>\n<li>When value changes as a result of user interaction all messages are cleared, including custom\nmessages added by the app, and full validation is run on the UI value. The steps performed are\noutlined below.\n<ol>\n<li>All messages are cleared and <code class=\"prettyprint\">messagesCustom</code> property is cleared</li>\n<li>If no converter is present then processing continues to next step. If a converter is\npresent, the UI value is first converted (i.e., parsed). If there is a parse error then\nthe messages are shown and processing returns.</li>\n<li>If there are no validators setup for the component then the value is set on the component.\nOtherwise all validators are run in sequence using the parsed value from the previous step. The\nimplicit required is run first if the component is marked required. When a validation error is\nencountered it is remembered and the next validator in the sequence is run.\n<ul><li>NOTE: The value is trimmed before required validation is run</li></ul>\n</li>\n<li>At the end of the validation run if there are errors, the messages are shown\nand processing returns. If there are async-validators, those errors are shown as soon as they\ncome in, and not until all validators, sync and async validators, are complete, does processing\nreturn, that is, value and valid are updated. If there are no errors, then the\n<code class=\"prettyprint\">value</code> property is updated and the formatted value displayed on the\nUI.</li>\n</ol>\n</li>\n<li>When the <code class=\"prettyprint\">validate</code> method is called by app, all messages are\ncleared and full validation run using the display value. See <code class=\"prettyprint\">validate</code>\nmethod on the sub-classes for details. Note: JET validation is designed to catch user input errors, and not invalid\ndata passed from the server; this should be caught on the server.</li>\n<li>When certain properties change through programmatic intervention by app, the component\ndetermines whether it needs to run normal validation based on the state the component is in.\nRefer to the <a href=\"#mixed-validation-section\">Mixed Validation</a> section below for details. </li>\n</ul>\n\n<h4 id=\"deferred-validation-section\">\n  Deferred Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-validation-section\"></a>\n</h4>\nDeferred validation is run in the following cases on the component value using the implicit\nrequired validator if required is true, and validation errors are deferred, i.e., not shown to user immediately.\nRefer to the <a href=\"#deferred-messages-section\">Showing Deferred Messages</a> section to\nunderstand how deferred messages can be shown.\n<ul>\n <li>When a component is created and it is required deferred validation is run and no messages are cleared\n prior to running validation.\n Refer to the <a href=\"#deferred-validators-section\">Validators\n Participating in Deferred Validation</a> section for details.</li>\n <li>When the <code class=\"prettyprint\">value</code> property changes due to programmatic\n intervention deferred validation is run, after all messages and messagesCustom property are cleared.</li>\n <li>When the <code class=\"prettyprint\">reset</code> method is called, deferred validation is run\n  after all messages and messagesCustom property are cleared.</li>\n <li>When certain properties change through programmatic intervention by app, the component\n determines whether it needs to run deferred validation based on the state the component is in.\n Refer to the <a href=\"#mixed-validation-section\">Mixed Validation</a> section below for details.</li>\n</ul>\n\n<h4 id=\"mixed-validation-section\">\n  Mixed Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#mixed-validation-section\"></a>\n</h4>\nEither deferred or normal validation is run in the following cases based on the state the\ncomponent is in and any validation errors encountered are either hidden or shown to user.\n<ul>\n <li>when disabled property changes. See <a href=\"#disabled\">disabled</a> property for details.</li>\n <li>when converter property changes (for components that support converters). See <a href=\"#converter\">converter</a> property for details.</li>\n <li>when required property changes. See <a href=\"#required\">required</a> property for details.</li>\n <li>when validators property changes (for components that support validators). See <a href=\"#validators\">validators</a> property for details.</li>\n</ul>\n\n<h4 id=\"selection-limitation-validation-section\">\n Selection Limitation Validation\n <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#selection-limitation-validation-section\"></a>\n</h4>\nSimply tabbing through the component will not trigger any validation messages. Validation occurs during user interaction \nupon each selection change. However, validation errors might not be displayed immediately to avoid disrupting the user experience. \nThese messages may remain hidden until the user blurs the component, calls showMessages(), or calls validate().\nWhile editing, if a user is in a \"valid\" state and then fails validation upon selection, the validation messages will update accordingly. \nIf a user is in an \"invalidShown\" state and then passes validation upon selection, the validation messages will also update accordingly. \nAlso note, that the required indicator appears only when required is set to true. Having a minimum selection does not\nautomatically trigger the required validation or the display of required indicators.\n<ul>\n <li> \n   When the value passes validation, the component provides immediate feedback for any subsequent interactions until the user \n   blurs the component. \n </li> \n <li>\n   When a user focuses back in, validation message display will be handled the same as on initial interaction. \n </li> \n <li> \n   When validate() is called, comprehensive validation is conducted, and all validation messages are displayed to the user.\n </li> \n</ul>\n\n</h4>\n\n<h3 id=\"deferred-messages-section\">\n  Showing Deferred Messages\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-messages-section\"></a>\n</h3>\nDeferred validation messages are displayed only when page author requests for it explicitly in\none of the following ways:\n<ul>\n<li>calls the <a href=\"#showMessages\"><code class=\"prettyprint\">showMessages</code></a> method on the component</li>\n</ul>\n\n<h3 id=\"deferred-validators-section\">\n  Validators Participating in Deferred Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-validators-section\"></a>\n</h3>\nThe required validator is the only validator type that participates in deferred validation.\nThe required property needs to be set to true for the required validator to run.\n\n<h3 id=\"user-assistance-text-section\">\n  User Assistance Text\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#user-assistance-text-section\"></a>\n</h3>\n<p>\nUser assistive text provides guidance to help the user understand what data to enter or select.\n</p>\n<p>\nBy default all user assistance text shows inline at the top of the rich checkboxset and is always displayed if there is any defined for the set.\nSee the user-assistance-density property for other ways the user assistance text can render. \n</p>\n<p>\nThe JET form component properties that are used for user assistance text are help.instruction, and help-hints.\nIn the Redwood theme for clarity only one user assistance text shows to the user.\nThe precedence rules are:\n<ul>\n<li>help.instruction shows;</li>\n<li>if no help.instruction, then help-hints.definition shows;</li>\n<li>help-hints.source always shows along side the above.</li>\n</ul>\n</p>\n<p>\nIf the required property was set to true, this can also be used to guide the user.\nIn this case, the word Required will be rendered under the rich checkboxset when no value was set for the component.\n</p>\n\n<h3 id=\"touch-section\">\nTouch End User Information\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#touch-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Select/unselect the corresponding checkbox</td>\n   </tr>\n  </tbody>\n</table>\n\n<h3 id=\"keyboard-section\">\nKeyboard End User Information\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#keyboard-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Rich Checkboxset</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Set focus to the first focusable card in the rich checkboxset.\n      Disabled checkboxes are not focusable.</td>\n    </tr>\n    <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles the checkbox; If the checkbox is unselected, it will select it and vice versa.</td>\n    </tr>\n   <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Tab</kbd></td>\n      <td>Sets focus to the next focusable checkbox card in the rich checkboxset.\n       Disabled checkboxes are not focusable. If focus is on the last focusable checkbox card in the\n       checkboxset, focus goes to the next focusable element on the page after the `oj-c-rich-checkboxset`</td>\n    </tr>\n   <tr>\n      <td>Rich Checkboxset</td>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>Sets focus to the previous focusable checkbox card in the rich checkboxset.\n       Disabled checkboxes are not focusable. If the focus is currently on the \n       first focusable checkbox card in the set, it will shift to the \"Learn More\" link if \n       help source exists. If no help source is available, the focus will move to the \n       previous focusable element on the page before the `oj-c-rich-checkboxset`</td>\n    </tr>     \n  </tbody>\n</table>\n\n<h3 id=\"a11y-section\">\nAccessibility\n<a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#a11y-section\"></a>\n</h3>\n\n<p>JET Rich Checkboxset takes care of setting <code class=\"prettyprint\">role=\"group\"</code>.\n\n<p>\nFor accessibility, set the label-hint property.\nIf the desire is to not have a visible label, then to make this accessible to screen reader users,\nset label-hint to a value and the label-edge to 'none' which renders an aria-label with the label-hint text.\n\n<p>\nDisabled content: JET supports an accessible luminosity contrast ratio,\nas specified in <a href=\"http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast\">WCAG 2.0 - Section 1.4.3 \"Contrast\"</a>,\nin the themes that are accessible.  (See the \"Theming\" chapter of the JET Developer Guide for more information on which\nthemes are accessible.)  Note that Section 1.4.3 says that text or images of text that are part of an inactive user\ninterface component have no contrast requirement.  Because disabled content may not meet the minimum contrast ratio\nrequired of enabled content, it cannot be used to convey meaningful information.\n</p>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-rich-checkboxset",
    "tagWithBrackets": "<oj-c-rich-checkboxset>",
    "domInterface": "CRichCheckboxsetElement",
    "ojPageTitle": "&lt;oj-c-rich-checkboxset>",
    "camelCaseName": "RichCheckboxset",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CRichCheckboxsetElement<V extends string | number> extends JetElement<RichCheckboxsetElementSettableProperties<V>>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CRichCheckboxsetElement<V extends string | number> extends JetElement<RichCheckboxsetElementSettableProperties<V>>"
      }
    ],
    "tsdeprecated": [
      {
        "type": "production",
        "since": "18.1.0"
      }
    ],
    "ojmodule": "rich-checkboxset"
  },
  {
    "id": "oj-c.RichCheckboxset#containerReadonly",
    "name": "containerReadonly",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#containerReadonly",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.\nThis affects whether a readonly component renders in full or mixed readonly mode."
  },
  {
    "id": "oj-c.RichCheckboxset#columnSpan",
    "name": "columnSpan",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#columnSpan",
    "scope": "instance",
    "type": {
      "names": [
        "number"
      ]
    },
    "optional": true,
    "description": "Specifies how many columns this component should span.\nThis only takes effect when this component is a child of a form layout\nthat has direction 'row'.",
    "defaultvalue": 1
  },
  {
    "id": "oj-c.RichCheckboxset#disabled",
    "name": "disabled",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#disabled",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "Whether the component is disabled. The default is false.\n\n<p>\nWhen the <code class=\"prettyprint\">disabled</code> property changes due to programmatic\nintervention, the component may clear messages and run validation in some cases. </br>\n<ul>\n<li>when a required component is initialized as disabled\n<code class=\"prettyprint\">value=\"{{currentValue}}\" required disabled</code>,\ndeferred validation is skipped.</li>\n<li>when a disabled component is enabled,\n <ul>\n <li>if component is invalid and showing messages then all component messages are cleared,\n and full validation run using the display value.\n<ul>\n <li>if there are validation errors, they are shown.</li>\n <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n property is updated. Page authors can listen to the <code class=\"prettyprint\">valueChanged</code>\n event to clear custom errors.</li>\n</ul>\n </li>\n\n <li>if component is valid and has no errors then deferred validation is run.\n <ul>\n <li>if there is a deferred validation error, then the valid property is updated. </li>\n </ul>\n </li>\n <li>if component is invalid and deferred errors then component messages are cleared and\n deferred validation re-run.\n <ul>\n <li>if there is a deferred validation error, then the valid property is updated.</li>\n </ul>\n </li>\n </ul>\n</li>\n<li>when enabled component is disabled then no validation is run and the component appears\ndisabled.</li>\n</ul>\n</p>",
    "defaultvalue": false
  },
  {
    "id": "oj-c.RichCheckboxset#displayOptions",
    "name": "displayOptions",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#displayOptions",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.RichCheckboxset.DisplayOptionsProps",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#help",
    "name": "help",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#help",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "Form component help information.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.RichCheckboxset.Help",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#helpHints",
    "name": "helpHints",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#helpHints",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.RichCheckboxset.HelpHints",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#labelEdge",
    "name": "labelEdge",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#labelEdge",
    "scope": "instance",
    "type": {
      "names": [
        "\"none\"",
        "\"start\"",
        "\"top\"",
        "\"inside\""
      ]
    },
    "optional": true,
    "description": "Specifies how the label of the component is positioned when the label-hint\nattribute is set on the component.",
    "ojvalues": [
      {
        "name": "inside",
        "description": "The label will be placed on top of the rich checkboxset, but is smaller than 'top' option.",
        "displayName": "Inside",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "none",
        "description": "The rich checkboxset will not create a label, but instead set the aria-label property on the rich checkboxset.",
        "displayName": "None",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "start",
        "description": "The label will be placed before the start of the rich checkboxset.",
        "displayName": "Start",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "top",
        "description": "The label will be placed on top of the rich checkboxset.",
        "displayName": "Top",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#labelHint",
    "name": "labelHint",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#labelHint",
    "scope": "instance",
    "type": {
      "names": [
        "string"
      ]
    },
    "optional": false,
    "description": "Represents a hint for rendering a label on the component.\nThis is used in combination with the label-edge attribute to control how the label should be rendered."
  },
  {
    "id": "oj-c.RichCheckboxset#labelStartWidth",
    "name": "labelStartWidth",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#labelStartWidth",
    "scope": "instance",
    "type": {
      "names": [
        "number|string"
      ]
    },
    "optional": true,
    "description": "<p> The width of the label when labelEdge is 'start'.</p>\n<p> This attribute accepts values of type\n<code>0 | `var(${string})` | `--${string}` | `${number}%` | `${number}x` | `calc(${string})` | `${number}${CssUnits}</code></p>"
  },
  {
    "id": "oj-c.RichCheckboxset#layout",
    "name": "layout",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#layout",
    "scope": "instance",
    "type": {
      "names": [
        "\"sm\"",
        "\"md\"",
        "\"xl\""
      ]
    },
    "optional": false,
    "description": "Specifies the layout of the cards and media."
  },
  {
    "id": "oj-c.RichCheckboxset#maxSelected",
    "name": "maxSelected",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#maxSelected",
    "scope": "instance",
    "type": {
      "names": [
        "number"
      ]
    },
    "optional": true,
    "description": "Specifies the maximum number of selectable options. If defined, it must be greater than or equal to 2.\nIf both \"maxSelected\" and \"minSelected\" are defined, \"maxSelected\" must be greater than or equal to\n\"minSelected\". To require an exact number of options to be selected, set \"maxSelected\" and \"minSelected\"\nto the same value. To require exactly one or a maximum of one item, use \"RichRadioSet."
  },
  {
    "id": "oj-c.RichCheckboxset#messagesCustom",
    "name": "messagesCustom",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#messagesCustom",
    "scope": "instance",
    "type": {
      "names": [
        "Array<object>"
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "description": "List of messages an app would add to the component when it has business/custom validation\nerrors that it wants the component to show. This allows the app to perform further validation\nbefore sending data to the server. When this option is set the message shows to the\nuser right away. To clear the custom message, set <code class=\"prettyprint\">messagesCustom</code>\nback to an empty array.<br/>\n<p>\nSee the <a href=\"#validation-section\">Validation and Messages</a> section\nfor details on when the component clears <code class=\"prettyprint\">messagesCustom</code>;\nfor example, when full validation is run.\n</p>",
    "defaultvalue": "[]",
    "tstype": [
      {
        "target": "Type",
        "value": "Array<oj-c.RichCheckboxset.ComponentMessageItem>",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#minSelected",
    "name": "minSelected",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#minSelected",
    "scope": "instance",
    "type": {
      "names": [
        "number"
      ]
    },
    "optional": true,
    "description": "Specifies the minimum number of selectable options. If defined, it must be greater than or equal to 2.\nIf both \"minSelected\" and \"maxSelected\" are defined, \"minSelected\" must be less than or equal to \"maxSelected\".\nTo require an exact number of options to be selected, set \"minSelected\" and \"maxSelected\" to the same value.\nTo require at least one item to be selected, use \"isRequired.\" To require exactly one item to be selected,\nuse \"RichRadioSet.\" If not required, a value of null will validate to \"valid\" even if \"minSelected\" is set."
  },
  {
    "id": "oj-c.RichCheckboxset#readonly",
    "name": "readonly",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#readonly",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "<p>\nWhether the component is readonly. The readonly property sets or returns whether an element\nis readonly, or not. A readonly element cannot be modified. However, a user can tab to it,\nhighlight it, focus on it, and copy the text from it. If you want to prevent the user from\ninteracting with the element, use the disabled property instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were false.\n</p>"
  },
  {
    "id": "oj-c.RichCheckboxset#readonlyUserAssistanceShown",
    "name": "readonlyUserAssistanceShown",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#readonlyUserAssistanceShown",
    "scope": "instance",
    "type": {
      "names": [
        "\"none\"",
        "\"confirmationAndInfoMessages\""
      ]
    },
    "optional": true,
    "description": "<p>\nSpecifies which user assistance types should be shown when the component is readonly.\n</p>",
    "defaultvalue": "\"none\""
  },
  {
    "id": "oj-c.RichCheckboxset#required",
    "name": "required",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#required",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "<p>\nThis property set to <code class=\"prettyprint\">false</code> implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to <code class=\"prettyprint\">true</code> implies that a value is required to be provided by the user.\n</p>\n<p>\nIn the Redwood theme, by default, a Required text is rendered inline when the field is empty.\n</p>\n<p>The Required error text is based on Redwood UX designs, and it is not recommended that\nit be changed.\nTo override the required error message,\nuse the <code class=\"prettyprint\">required-message-detail</code> attribute.\nThe component's label text is passed in as a token {label} and can be used in the message detail.\n</p>\n<p>When required is set to true, an implicit\nrequired validator is created, i.e.,\n<code class=\"prettyprint\">new RequiredValidator()</code>. The required validator is the only\nvalidator to run during initial render, and its error is not shown to the user at this time;\nthis is called deferred validation. The required validator also runs during normal validation;\nthis is when the errors are shown to the user.\nSee the <a href=\"#validation-section\">Validation and Messaging</a> section for details.\n</p>\n<p>\nWhen the <code class=\"prettyprint\">required</code> property changes due to programmatic intervention,\nthe component may clear component messages and run validation, based on the current state it's in. </br>\n\n<h4>Running Validation when required property changes</h4>\n<ul>\n<li>if component is valid when required is set to true, then it runs deferred validation on\nthe value property. If the field is empty, the valid state is invalidHidden. No errors are\nshown to the user.\n</li>\n<li>if component is valid when required is set from true to false, then no validation is run.\n</li>\n<li>if component is invalid and has deferred messages (invalidHidden) when required is set to false, then\ncomponent messages are cleared (messages-custom messages are not cleared)\nbut no deferred validation is run because required is false.\n</li>\n<li>if component is invalid and currently showing invalid messages (invalidShown) when required is changed\nto either true or false, then\ncomponent messages are cleared and normal validation is run using the current display value.\n<ul>\n<li>if there are validation errors, then <code class=\"prettyprint\">value</code>\nproperty is not updated and the error is shown.\n</li>\n<li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\nproperty is updated; page author can listen to the <code class=\"prettyprint\">valueChanged</code>\nevent on the component to clear custom errors.</li>\n</ul>\n</li>\n</ul>\n\n<h4>Clearing Messages when required property changes</h4>\n<ul>\n<li>Only messages created by the component, like validation messages, are cleared when the required property changes.</li>\n<li><code class=\"prettyprint\">messagesCustom</code> property is not cleared.</li>\n</ul>\n\n</p>",
    "defaultvalue": false
  },
  {
    "id": "oj-c.RichCheckboxset#selectionExactMessageDetail",
    "name": "selectionExactMessageDetail",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#selectionExactMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message detail when the exact selection validation fails when a user's input is not the exact amount.\nIf the component needs an exact selection error message that is different from the default, set this property.\nThe function should return a translated string.\n</p>\nUsage: <br/>\nselectionExactMessageDetail = (p: {exact: number }) => `Select {exact} values.`<br/>\nselectionExactMessageDetail = () => `Select exactly five values.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.RichCheckboxset.ExactMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#selectionOverflowMessageDetail",
    "name": "selectionOverflowMessageDetail",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#selectionOverflowMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message detail when the rich checkboxset validation fails when a user's input is greater than the max.\nIf the component needs an overflow selection error message that is different from the default, set this property.\nThe function should return a translated string.\n</p>\nUsage: <br/>\nselectionOverflowMessageDetail = (p: {max: number }) => `You’ve reached the {max}-selection limit.`<br/>\nselectionOverflowMessageDetail = () => `You’ve reached the limit.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.RichCheckboxset.OverflowMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#selectionRangeMessageDetail",
    "name": "selectionRangeMessageDetail",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#selectionRangeMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message detail when the range selection validation fails when a user's input is not within the range amount.\nIf the component needs a range selection error message that is different from the default, set this property.\nThe function should return a translated string.\n</p>\nUsage: <br/>\nselectionRangeMessageDetail = (p: {min: number, max: number }) => `Select {min} to {max} values.`<br/>\nselectionRangeMessageDetail = () => `Select between two to three values.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.RichCheckboxset.RangeMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#selectionUnderflowMessageDetail",
    "name": "selectionUnderflowMessageDetail",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#selectionUnderflowMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message detail when the underflow selection validation fails when a user's input is less than the min.\nIf the component needs an underflow selection error message that is different from the default, set this property.\nThe function should return a translated string.\n</p>\nUsage: <br/>\nselectionUnderflowMessageDetail = (p: {min: number }) => `Select at least {min} values.`<br/>\nselectionUnderflowMessageDetail = () => `Select a minimum of three values.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.RichCheckboxset.UnderflowMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#userAssistanceDensity",
    "name": "userAssistanceDensity",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#userAssistanceDensity",
    "scope": "instance",
    "type": {
      "names": [
        "\"compact\"",
        "\"reflow\"",
        "\"efficient\""
      ]
    },
    "optional": true,
    "description": "<p>\nSpecifies the density of the form component's user assistance presentation. It can be shown inline with\nreserved rows to prevent reflow if a user assistance text shows up, inline without reserved rows that would\nreflow if a user assistance text shows up, or it can be shown compactly in a popup instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were \"reflow\".\n</p>",
    "ojvalues": [
      {
        "name": "reflow",
        "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with no reserved space.",
        "displayName": "Reflow",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "efficient",
        "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
        "displayName": "Efficient",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "compact",
        "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
        "displayName": "Compact",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#options",
    "name": "options",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#options",
    "scope": "instance",
    "type": {
      "names": [
        "Array<object>"
      ]
    },
    "optional": false,
    "description": "An array of data items that returns the option items for the Rich Checkboxset.",
    "tstype": [
      {
        "target": "Type",
        "value": "Array<oj-c.RichCheckboxset.ItemDataType<V> & oj-c.RichCheckboxset.NoMediaType|oj-c.RichCheckboxset.ItemDataType<V> & oj-c.RichCheckboxset.ThumbnailType|oj-c.RichCheckboxset.ItemDataType<V> & oj-c.RichCheckboxset.IconType|oj-c.RichCheckboxset.ItemDataType<V> & oj-c.RichCheckboxset.AvatarType>",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#requiredMessageDetail",
    "name": "requiredMessageDetail",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#requiredMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "string"
      ]
    },
    "optional": true,
    "description": "<p>\nThe component-specific message detail when the required validation fails.\nIf the component needs a required validation error message that is different from the default,\nset this property. It should be a translated string.\n</p>"
  },
  {
    "id": "oj-c.RichCheckboxset#valid",
    "name": "valid",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#valid",
    "scope": "instance",
    "type": {
      "names": [
        "\"pending\"",
        "\"valid\"",
        "\"invalidHidden\"",
        "\"invalidShown\""
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "readonly": true,
    "description": "<p>\nThe current valid state of the component. It is evaluated on initial render.\nIt is re-evaluated\n<ul>\n<li>when messagesCustom is updated,\nsince messagesCustom can be added by the app developer any time.</li>\n<li>when showMessages() is called. Since showMessages() moves the\nhidden messages into messages shown,\nif the valid state was \"invalidHidden\" then it would become \"invalidShown\".</li>\n<li>when the required property has changed. If a component is empty and has required\nset, the valid state may be \"invalidHidden\" (if no invalid messages are being shown as well).\nIf required property is removed, the valid state would change to \"valid\".</li>\n</ul>\n</p>\n<p>\n Note: New valid states may be added to the list of valid values in future releases.\n Any new values will start with \"invalid\"\n if it is an invalid state, \"pending\" if it is pending state,\n and \"valid\" if it is a valid state.\n</p>",
    "ojvalues": [
      {
        "name": "valid",
        "description": "The component is valid",
        "displayName": "Valid",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "pending",
        "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
        "displayName": "Pending",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidHidden",
        "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Hidden",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidShown",
        "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Shown",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#value",
    "name": "value",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "member",
    "longname": "oj-c.RichCheckboxset#value",
    "scope": "instance",
    "type": {
      "names": [
        "Array<string|number>|null"
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "description": "The value of the component.\n\n<p>\nWhen <code class=\"prettyprint\">value</code> property changes due to programmatic\nintervention, the component always clears all messages\nincluding <code class=\"prettyprint\">messagesCustom</code>, runs deferred validation, and\nalways refreshes UI display value.\n</p>\n\n<p>\nWhen the rich checkboxset is cleared and the value is committed, the <code class=\"prettyprint\">value</code>\nproperty is set to <code>null</code>.\n</p>\n\n<h4>Running Validation</h4>\n<ul>\n<li>component always runs deferred validation; the\n<code class=\"prettyprint\">valid</code> property is updated with the result.</li>\n</ul>",
    "defaultvalue": null,
    "tstype": [
      {
        "target": "Type",
        "value": "Array<V>|null",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#blur",
    "name": "blur",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#blur",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Blurs the rich checkboxset.",
    "ojhidden": true
  },
  {
    "id": "oj-c.RichCheckboxset#focus",
    "name": "focus",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#focus",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Sets focus on the first tabbable checkbox card.",
    "ojhidden": true
  },
  {
    "id": "oj-c.RichCheckboxset#showMessages",
    "name": "showMessages",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#showMessages",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Takes all deferred messages and shows them.\nIt then updates the valid property;\ne.g., if the valid state was \"invalidHidden\" before showMessages(),\nthe valid state will become \"invalidShown\" after showMessages().\nIf there were no deferred messages this method simply returns.\nWhile actively editing the component selections, the valid state may be \"invalidHidden\" until showMessages()."
  },
  {
    "id": "oj-c.RichCheckboxset#reset",
    "name": "reset",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#reset",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Resets the component by clearing all messages as well as the <code class=\"prettyprint\">messagesCustom</code>\nattribute, and also resets the component instance's <code class=\"prettyprint\">value</code> to its default.\nAny user entered value will be erased."
  },
  {
    "id": "oj-c.RichCheckboxset#validate",
    "name": "validate",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#validate",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "Promise"
          ]
        },
        "description": "The Promise resolves to \"valid\" if the component is disabled or readonly.\nThe Promise resolves to \"invalid\" if there were errors."
      }
    ],
    "description": "If enabled, validates the component's display value (or null if display value is empty) and updates the value\noption by performing the following steps.\n<ol>\n<li>All messages are cleared, including custom messages added by the app.</li>\n<li>\n At the end of validation if there are errors, the messages are shown.\n If there were no errors, then the value option is updated.\n</li>\n</ol>\n<p>While actively editing the component selections, the valid state may be \"invalidHidden\" until validate() is called.\nIf the component is readonly or disabled, returns a Promise that resolves to 'valid'\nwithout doing any validation.</p>"
  },
  {
    "id": "oj-c.RichCheckboxset#setProperty",
    "name": "setProperty",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#setProperty",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#getProperty",
    "name": "getProperty",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#getProperty",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "description": "Retrieves the value of a property or a subproperty.",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset#setProperties",
    "name": "setProperties",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "kind": "function",
    "longname": "oj-c.RichCheckboxset#setProperties",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Performs a batch set of properties.",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.touchDoc",
    "name": "touchDoc",
    "kind": "member",
    "longname": "oj-c.RichCheckboxset.touchDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Select/unselect the corresponding checkbox</td>\n   </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "ojfragment": true
  },
  {
    "id": "oj-c.RichCheckboxset.keyboardDoc",
    "name": "keyboardDoc",
    "kind": "member",
    "longname": "oj-c.RichCheckboxset.keyboardDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Rich Checkboxset</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Set focus to the first focusable card in the rich checkboxset.\n      Disabled checkboxes are not focusable.</td>\n    </tr>\n    <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Space</kbd></td>\n      <td>Toggles the checkbox; If the checkbox is unselected, it will select it and vice versa.</td>\n    </tr>\n   <tr>\n      <td>Rich Checkbox Card</td>\n      <td><kbd>Tab</kbd></td>\n      <td>Sets focus to the next focusable checkbox card in the rich checkboxset.\n       Disabled checkboxes are not focusable. If focus is on the last focusable checkbox card in the\n       checkboxset, focus goes to the next focusable element on the page after the `oj-c-rich-checkboxset`</td>\n    </tr>\n   <tr>\n      <td>Rich Checkboxset</td>\n      <td><kbd>Shift+Tab</kbd></td>\n      <td>Sets focus to the previous focusable checkbox card in the rich checkboxset.\n       Disabled checkboxes are not focusable. If the focus is currently on the \n       first focusable checkbox card in the set, it will shift to the \"Learn More\" link if \n       help source exists. If no help source is available, the focus will move to the \n       previous focusable element on the page before the `oj-c-rich-checkboxset`</td>\n    </tr>     \n  </tbody>\n</table>",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "ojfragment": true
  },
  {
    "id": "oj-c.RichCheckboxset.DisplayOptionsProps",
    "name": "DisplayOptionsProps",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.DisplayOptionsProps",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
    "properties": [
      {
        "name": "messages",
        "description": "Display options for auxiliary message text.",
        "optional": true,
        "type": {
          "names": [
            "\"none\"",
            "\"display\""
          ]
        },
        "defaultvalue": "\"display\""
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.Help",
    "name": "Help",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.Help",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Form component help information.",
    "properties": [
      {
        "name": "instruction",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to\nhelp the user understand what data to enter or select.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.HelpHints",
    "name": "HelpHints",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.HelpHints",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "The helpHints object contains a definition property and a source property.",
    "properties": [
      {
        "name": "definition",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to help\nthe user understand what data to enter or select. help-hints could come from a help system.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "source",
        "description": "Help source URL associated with the component.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "sourceText",
        "description": "Custom text to be used for the source link.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.ComponentMessageItem",
    "name": "ComponentMessageItem",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.ComponentMessageItem",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "A type for a single component message",
    "properties": [
      {
        "name": "summary",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "detail",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "severity",
        "optional": true,
        "type": {
          "names": [
            "\"error\"",
            "\"confirmation\"",
            "\"info\"",
            "\"warning\""
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.ExactMessageDetailParameters",
    "name": "ExactMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.ExactMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the selectionExactMessageDetail callback function.",
    "properties": [
      {
        "name": "exact",
        "description": "The exact allowed number of selections.",
        "optional": false,
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.OverflowMessageDetailParameters",
    "name": "OverflowMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.OverflowMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the selectionOverflowMessageDetail callback function.",
    "properties": [
      {
        "name": "max",
        "description": "The maximum allowed number of selections.",
        "optional": false,
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.RangeMessageDetailParameters",
    "name": "RangeMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.RangeMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the selectionRangeMessageDetail callback function.",
    "properties": [
      {
        "name": "max",
        "description": "The maximum allowed number of selections.",
        "optional": false,
        "type": {
          "names": [
            "number"
          ]
        }
      },
      {
        "name": "min",
        "description": "The minimum allowed number of selections.",
        "optional": false,
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.UnderflowMessageDetailParameters",
    "name": "UnderflowMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.UnderflowMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the selectionUnderflowMessageDetail callback function.",
    "properties": [
      {
        "name": "min",
        "description": "The minimum allowed number of selections.",
        "optional": false,
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.ItemDataType",
    "name": "ItemDataType",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.ItemDataType",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "tsgenerictype": {
      "target": "Type",
      "value": "<V>",
      "for": "genericTypeParameters"
    },
    "properties": [
      {
        "name": "label",
        "description": "Considered as label and accessible text for the component.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "secondaryText",
        "description": "Provides concise detail information about the item.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "value",
        "description": "Value of the RichSelectionItem.",
        "optional": false,
        "type": {
          "names": [
            "any"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "V",
            "jsdocOverride": true,
            "for": "value"
          }
        ]
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.NoMediaType",
    "name": "NoMediaType",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.NoMediaType",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "properties": [
      {
        "name": "avatar",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "iconClass",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "mediaAccessibleLabel",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "thumbnailSrc",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.ThumbnailType",
    "name": "ThumbnailType",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.ThumbnailType",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "properties": [
      {
        "name": "mediaAccessibleLabel",
        "description": "This will apply aria-label to Thumbnail. If it's not provided the media would be hidden from screen readers.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "thumbnailSrc",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "iconClass",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "avatar",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.IconType",
    "name": "IconType",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.IconType",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "properties": [
      {
        "name": "mediaAccessibleLabel",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "thumbnailSrc",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "iconClass",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "avatar",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.RichSelectionAvatar",
    "name": "RichSelectionAvatar",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.RichSelectionAvatar",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Partial Avatar Props type utilized for the media.",
    "properties": [
      {
        "name": "shape",
        "optional": true,
        "type": {
          "names": [
            "\"square\"",
            "\"circle\""
          ]
        }
      },
      {
        "name": "src",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "background",
        "optional": true,
        "type": {
          "names": [
            "\"blue\"",
            "\"gray\"",
            "\"green\"",
            "\"orange\"",
            "\"pink\"",
            "\"purple\"",
            "\"teal\"",
            "\"neutral\"",
            "\"slate\"",
            "\"lilac\""
          ]
        }
      },
      {
        "name": "initials",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.RichCheckboxset.AvatarType",
    "name": "AvatarType",
    "kind": "typedef",
    "memberof": "oj-c.RichCheckboxset",
    "meta": {
      "filename": "rich-checkboxset.tsx",
      "path": "web/components/oj-c/rich-checkboxset"
    },
    "longname": "oj-c.RichCheckboxset.AvatarType",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "properties": [
      {
        "name": "mediaAccessibleLabel",
        "description": "This will apply aria-label to Avatar. If it's not provided the media would be hidden from screen readers.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "thumbnailSrc",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "iconClass",
        "optional": true,
        "type": {
          "names": [
            "undefined"
          ]
        }
      },
      {
        "name": "avatar",
        "optional": true,
        "type": {
          "names": [
            "object"
          ]
        },
        "tstype": [
          {
            "target": "Type",
            "value": "oj-c.RichCheckboxset.RichSelectionAvatar",
            "jsdocOverride": true,
            "for": "avatar"
          }
        ]
      }
    ]
  }
]