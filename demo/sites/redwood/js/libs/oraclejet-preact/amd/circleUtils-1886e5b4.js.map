{"version":3,"file":"circleUtils-1886e5b4.js","sources":["../../src/utils/PRIVATE_meterUtils/circleUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type Sector = 'top' | 'bottom' | 'left' | 'right' | 'full';\n\n/**\n * Returns the angle in radians\n * @param angle The angle in degrees.\n * @returns The angle in radians.\n */\nfunction toRad(angle: number): number {\n  return (angle * Math.PI) / 180;\n}\n\n/**\n * Returns equivalent angle between 0 and 360 (exclusive) corresponding to given angle.\n * @param angle The angle in degrees.\n * @returns Returns the posiive angle for a given angle.\n */\nexport function getPositiveAngle(angle: number): number {\n  return (angle + 360) % 360;\n}\n\n/**\n * Returns the polar coordinate of point (x,y) relative to center (cx, cy)\n * @param cx The x coordinate of the center.\n * @param cy The y coordinate of the center.\n * @param x  The x coordinate of the point.\n * @param y  The y coordinate of the point.\n * @returns The polar coordinate of point (x,y) relative to center (cx, cy)\n */\nexport function convertToPolar(\n  cx: number,\n  cy: number,\n  x: number,\n  y: number\n): { radius: number; angle: number } {\n  return {\n    radius: Math.sqrt((x - cx) ** 2 + (y - cy) ** 2),\n    angle: (Math.atan2(cy - y, x - cx) * 180) / Math.PI\n  };\n}\n\n/**\n * Transforms the coordinate x, y in a unit square to the coordinates in given half sector. For eg, (0.5, 0.5) in full\n * unit square will be (0.5, 1) in top half and (0.5, 0) for bottom half.\n * @param x The x coordinate of the point.\n * @param y The y coordinate of the point.\n * @param sector The Sector to trasform\n * @returns The coordinate of point relative to center of the sector.\n */\nfunction transformCoord(x: number, y: number, sector: Sector): { x: number; y: number } {\n  switch (sector) {\n    case 'top':\n      y = 2 * y;\n      break;\n    case 'bottom':\n      y = 2 * y - 1;\n      break;\n    case 'left':\n      x = 2 * x;\n      break;\n    case 'right':\n      x = 2 * x - 1;\n      break;\n  }\n  return { x, y };\n}\n\n/**\n * For a given angle and section, returns the relative coordinate of the point where the radius for\n * the angle intersects the bounding box.\n * @param angle The angle in degrees\n * @param section The section in which the meter circle lies.\n * @returns The relative coordinate of point of intersection of radius and bounding box.\n */\nfunction getPolygonCoord(angle: number, section: Sector): { x: number; y: number } {\n  angle = getPositiveAngle(angle);\n  let x, y;\n  if (angle < 45) {\n    y = 0.5 - 0.5 * Math.tan(toRad(angle));\n    x = 1;\n  } else if (angle < 135) {\n    if (angle < 90) {\n      x = 0.5 + 0.5 * Math.tan(toRad(90 - angle));\n    } else {\n      x = 0.5 - 0.5 * Math.tan(toRad(angle - 90));\n    }\n    y = 0;\n  } else if (angle < 225) {\n    if (angle < 180) {\n      y = 0.5 - 0.5 * Math.tan(toRad(180 - angle));\n    } else {\n      y = 0.5 + 0.5 * Math.tan(toRad(angle - 180));\n    }\n    x = 0;\n  } else if (angle < 315) {\n    if (angle < 270) {\n      x = 0.5 - 0.5 * Math.tan(toRad(270 - angle));\n    } else {\n      x = 0.5 + 0.5 * Math.tan(toRad(angle - 270));\n    }\n    y = 1;\n  } else {\n    x = 1;\n    y = 0.5 + 0.5 * Math.tan(toRad(360 - angle));\n  }\n\n  return transformCoord(x, y, section);\n}\n\n/**\n * Returns the relative coordinate of the center of the half/full circle in which the meter circle lies.\n * @param sector The section in which the meter circle lies.\n * @returns The relative coordinate of the center.\n */\nexport function getCenterCoord(sector: Sector): { x: number; y: number } {\n  return transformCoord(0.5, 0.5, sector);\n}\n\n/**\n * Returns whether the angle lies on top half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on top half of the circle.\n */\nfunction OnTopHalf(angle: number): boolean {\n  return angle <= 180;\n}\n\n/**\n * Returns whether the angle lies on right half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on right half of the circle.\n */\nfunction OnRightHalf(angle: number): boolean {\n  return angle <= 90 || angle >= 270;\n}\n\n/**\n * Returns whether the angle lies on left half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on left half of the circle.\n */\nfunction OnLeftHalf(angle: number): boolean {\n  return angle >= 90 && angle <= 270;\n}\n\n/**\n * Returns whether the angle lies on bottom half of the circle\n * @param angle The angle in degrees\n * @returns Whether the angle lies on bottom half of the circle.\n */\nfunction OnBottomHalf(angle: number): boolean {\n  return angle >= 180 || angle === 0;\n}\n\n/**\n * Returns the Sector the meter circle lies on.\n * @param startAngle The start angle.\n * @param angleExtent The angle extent.\n * @param isRtl If the reading mode is rtl\n * @returns Which half the meter circle lies on.\n */\nexport function getCircleSection(startAngle: number, angleExtent: number, isRtl: boolean): Sector {\n  if (angleExtent > 180) {\n    return 'full';\n  }\n\n  const meanAngle = getPositiveAngle(startAngle + (isRtl ? 0.5 : -0.5) * angleExtent);\n  const endAngle = getPositiveAngle(startAngle + (isRtl ? 1 : -1) * angleExtent);\n\n  if (OnTopHalf(startAngle) && OnTopHalf(meanAngle) && OnTopHalf(endAngle)) {\n    return 'top';\n  } else if (OnRightHalf(startAngle) && OnRightHalf(meanAngle) && OnRightHalf(endAngle)) {\n    return 'right';\n  } else if (OnLeftHalf(startAngle) && OnLeftHalf(meanAngle) && OnLeftHalf(endAngle)) {\n    return 'left';\n  } else if (OnBottomHalf(startAngle) && OnBottomHalf(meanAngle) && OnBottomHalf(endAngle)) {\n    return 'bottom';\n  }\n  return 'full';\n}\n\n/**\n * Returns the clip polygon for given startAngle and angleExtent.\n * @param startAngle The start angle of arc in degrees.\n * @param angleExtent The angle extent of arc in degrees.\n * @param isRtl  The reading mode of the document.\n * @param section The Sector circular meter lies on.\n * @returns The clippath for given startAngle and angleExtent\n */\nexport function getClipPath(\n  startAngle: number,\n  angleExtent: number,\n  isRtl: boolean,\n  section: Sector\n): string {\n  let start = isRtl ? startAngle + angleExtent : startAngle;\n  const firstVertexCoords = getPolygonCoord(start, section);\n  let clipPath = `${firstVertexCoords.x * 100}% ${firstVertexCoords.y * 100}%`;\n  let nextVertex, nextVertexCoords;\n  do {\n    nextVertex = Math.max(start - angleExtent, 45 * (Math.ceil(start / 45) - 1));\n    nextVertexCoords = getPolygonCoord(nextVertex, section);\n    clipPath += `, ${nextVertexCoords.x * 100}% ${nextVertexCoords.y * 100}%`;\n    angleExtent = angleExtent - (start - nextVertex);\n    start = nextVertex;\n  } while (nextVertex > start - angleExtent);\n\n  const centerVertex = getCenterCoord(section);\n  // close the polygon with a vertex in center to get the radial clipping\n  return `polygon(${clipPath}, ${centerVertex.x * 100}% ${centerVertex.y * 100}%)`;\n}\n\n/**\n * Returns the clip polygon for given percentage.\n * @param percentage The percentage of the circle the clipPath covers.\n * @returns The clippath for given percentage it covers\n */\nexport function getProgressClipPath(percentage: number) {\n  let tangent;\n  if (percentage < 0.125) {\n    tangent = _calculateTangent(percentage) + 50;\n    return `polygon(50% 0, ${tangent}% 0, 50% 50%)`;\n  } else if (percentage < 0.375) {\n    if (percentage < 0.25) {\n      tangent = 50 - _calculateTangent(0.25 - percentage);\n    } else {\n      tangent = _calculateTangent(percentage - 0.25) + 50;\n    }\n    return `polygon(50% 0, 100% 0, 100% ${tangent}%, 50% 50%)`;\n  } else if (percentage < 0.625) {\n    if (percentage < 0.5) {\n      tangent = 50 + _calculateTangent(0.5 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.5);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, ${tangent}% 100%, 50% 50%)`;\n  } else if (percentage < 0.875) {\n    if (percentage < 0.75) {\n      tangent = 50 + _calculateTangent(0.75 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.75);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% ${tangent}%, 50% 50%)`;\n  }\n  tangent = 50 - _calculateTangent(1 - percentage);\n  return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% 0%, ${tangent}% 0%, 50% 50%)`;\n}\n\nfunction _calculateTangent(percentage: number) {\n  return 50 * Math.tan(percentage * 2 * Math.PI);\n}\n"],"names":["toRad","angle","Math","PI","getPositiveAngle","transformCoord","x","y","sector","getPolygonCoord","section","tan","getCenterCoord","OnTopHalf","OnRightHalf","OnLeftHalf","OnBottomHalf","_calculateTangent","percentage","cx","cy","radius","sqrt","atan2","startAngle","angleExtent","isRtl","meanAngle","endAngle","start","firstVertexCoords","nextVertex","nextVertexCoords","clipPath","max","ceil","centerVertex","tangent"],"mappings":"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"}