{"version":3,"file":"ColorPicker-31f8e75b.js","sources":["../../src/UNSAFE_ColorPicker/ColorPicker.tsx"],"sourcesContent":["// import { Flex } from '#UNSAFE_Flex';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { colorPickerPropVars } from './themes/ColorPickerContract.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { ColorPickerRedwoodTheme } from './themes/redwood/ColorPickerTheme';\nimport { ColorPalette } from '#UNSAFE_ColorPalette';\nimport { Size } from '#utils/UNSAFE_size';\nimport { ComponentProps } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { type ColorValue } from '#utils/UNSAFE_color';\nimport { Flex } from '#UNSAFE_Flex';\nimport { isMobile } from '#utils/UNSAFE_clientUtils';\n\ntype ColorPaletteProps = ComponentProps<typeof ColorPalette>;\ntype PickedPropsFromColorPalette = Pick<ColorPaletteProps, 'swatchSize' | 'palette'>;\n\ntype Props = TestIdProps &\n  PickedPropsFromColorPalette & {\n    /**\n     * The selected color\n     */\n    value?: ColorValue;\n\n    /**\n     * When property is set to \"auto\", the color picker will automatically adjust to the height of the palette.\n     * This is mainly to be used in conjunction with InputColor.\n     * <p>If not specified, defaults to the theme specified height.<br/>\n     */\n    height?: 'auto';\n\n    /**\n     * Specifies the component style maxWidth.\n     * <p>If not specified, defaults to the theme specified maxWidth.<br/>\n     * This attribute accepts values of type:<br/>\n     * 0 | `${number}${CssUnits}` | `${number}x` | `--${string}` | `var($string})` | `${number}%`</p>\n     * <p>When this component is used in composition and the component should take up 100% of the parent container's\n     * width, set maxWidth to '100%'.<br/>\n     * Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n     * set the maxWidth property to the same value.</p>\n     */\n    maxWidth?: Size;\n\n    /**\n     * Specifies the component style width.\n     * <p>If not specified, defaults to '100%'.</p>\n     * <p>This attribute accepts values of type:</p>\n     * <p>0 | `${number}${CssUnits}` | `${number}x` | `--${string}`  | `var($string})` | `${number}%`</p>\n     * <br/>\n     * <p>Because there is a theme default value for maxWidth, when setting the width property to achieve a fixed width,\n     * set the maxWidth property to the same value.</p>\n     */\n    width?: Size;\n\n    /**\n     * Callback invoked when the user selects a color in the Palette. This callback is called even when the previous\n     * value and the value are the same, that is, when the user selects an already selected color.\n     * The app needs to handle this to write back the controlled 'value' property, or else no color will be shown\n     * to be selected.\n     */\n    onCommit: (detail: ValueUpdateDetail<ColorValue>) => void;\n  };\n\n/**\n * A ColorPicker is a component that allows users to select a single color.\n */\nexport const ColorPicker = forwardRef(\n  (\n    { swatchSize = 'xs', palette, height, maxWidth, value, testId, width, onCommit }: Props,\n    pickerRef?: ForwardedRef<HTMLDivElement>\n  ) => {\n    // we need to render the baseTheme on the root dom element so that the CSS vars in colorPickerPropVars will be defined.\n    const { classes } = useComponentTheme(ColorPickerRedwoodTheme);\n\n    const testIdProps = useTestId(testId);\n\n    return (\n      <div ref={pickerRef} class={classes} {...testIdProps}>\n        <Flex\n          direction=\"column\"\n          height={\n            height === 'auto' ? undefined : isMobile() ? undefined : colorPickerPropVars.maxHeight\n          }\n          maxWidth={\n            maxWidth !== undefined ? maxWidth : isMobile() ? '100%' : colorPickerPropVars.maxWidth\n          }\n          width={width !== undefined ? width : colorPickerPropVars.width}>\n          <ColorPalette\n            palette={palette}\n            swatchSize={swatchSize}\n            value={value}\n            testId={testId ? testId + '_picker' : undefined}\n            onCommit={onCommit}></ColorPalette>\n        </Flex>\n      </div>\n    );\n  }\n);\n"],"names":["ColorPicker","forwardRef","swatchSize","palette","height","maxWidth","value","testId","width","onCommit","pickerRef","classes","useComponentTheme","ColorPickerRedwoodTheme","testIdProps","useTestId","_jsx","jsx","ref","class","children","Flex","direction","isMobile","undefined","colorPickerPropVars","maxHeight","ColorPalette"],"mappings":"4UAkEa,MAAAA,EAAcC,EAAAA,YACzB,EACIC,aAAa,KAAMC,UAASC,SAAQC,WAAUC,QAAOC,SAAQC,QAAOC,YACtEC,KAGA,MAAMC,QAAEA,GAAYC,EAAiBA,kBAACC,EAAuBA,yBAEvDC,EAAcC,YAAUR,GAE9B,OACES,EAAKC,IAAA,MAAA,CAAAC,IAAKR,EAAWS,MAAOR,KAAaG,EACvCM,SAAAJ,EAAAC,IAACI,EAAIA,KAAA,CACHC,UAAU,SACVlB,OACa,SAAXA,GAAgCmB,EAAAA,gBAAZC,EAAqCC,sBAAoBC,UAE/ErB,cACemB,IAAbnB,EAAyBA,EAAWkB,EAAAA,WAAa,OAASE,EAAAA,oBAAoBpB,SAEhFG,WAAiBgB,IAAVhB,EAAsBA,EAAQiB,sBAAoBjB,MAAKY,SAC9DJ,EAAAA,IAACW,EAAAA,aACC,CAAAxB,QAASA,EACTD,WAAYA,EACZI,MAAOA,EACPC,OAAQA,EAASA,EAAS,eAAYiB,EACtCf,SAAUA,OAGhB"}