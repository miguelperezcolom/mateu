{"version":3,"file":"MonthView-03070f25.js","sources":["../../src/PRIVATE_MonthView/useDayCell.ts","../../src/PRIVATE_MonthView/DayCell.tsx","../../src/PRIVATE_MonthView/WeekNumberCell.tsx","../../src/PRIVATE_MonthView/MonthView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { CalendarDateRequired } from '#utils/UNSAFE_calendarDateUtils';\nimport { DateISOStr } from '#UNSAFE_IntlDateTime';\nimport { FormatterFunc } from '#UNSAFE_IntlFormatParse';\nimport { getIsoDateStr, toJSDate } from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps, useCallback } from 'preact/compat';\n\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { useFocusableCell } from '#UNSAFE_DatePicker/useFocusableCell';\nimport { useCellNavigation } from '#UNSAFE_DatePicker/useCellNavigation';\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\n\ntype NavigationDirections =\n  | 'previousDay'\n  | 'nextDay'\n  | 'previousWeek'\n  | 'nextWeek'\n  | 'previousMonth'\n  | 'nextMonth'\n  | 'previousYear'\n  | 'nextYear'\n  | 'firstDayOfMonth'\n  | 'lastDayOfMonth'\n  | 'today';\n\nexport type DayFormatOptions = {\n  state: 'enabled' | 'disabled' | 'restricted';\n};\n\n// These are the properties the useDayCell hook takes.\nexport type UseDayCellProps = {\n  /**\n   * Date of the day cell. This will be formatted as a full date and put in the aria-label.\n   */\n  date: CalendarDateRequired;\n  /**\n   * A function used to format the day cell date as a full date.\n   */\n  dateFormatter: FormatterFunc<DateISOStr>;\n  /**\n   * A function that receives a date and returns an object specifying how to format the provided date.\n   * This function is called for each date that is rendered and this can be used to control how individual\n   * dates are rendered - disabled, restricted, or enabled.\n   * @param date The date to format\n   * @returns The format options\n   */\n  dayFormatter?: (date: CalendarDateRequired) => DayFormatOptions;\n  /**\n   * Whether the day cell is in an adjacent month, not the current month.\n   */\n  isAdjacentMonth: boolean;\n  /**\n   * Whether the day cell is disabled, like if it is out of the min/max range.\n   */\n  isDisabled?: boolean;\n  /**\n   * Whether the day cell is focusable, meaning it will have tabIndex 0.\n   */\n  isFocusable: boolean;\n  /**\n   * Whether the day cell has focus.\n   */\n  isFocused: boolean;\n  /**\n   * Whether the day cell is hidden. For example, days outside of the current month are hidden by default.\n   */\n  isHidden: boolean;\n  /**\n   * Whether the day cell is readonly. It is not activeable.\n   */\n  isReadonly: boolean;\n  /**\n   * Whether the day cell looks selected.\n   */\n  isSelected: boolean;\n  /**\n   * Whether the day cell's date is today.\n   */\n  isToday: boolean;\n  /**\n   * A callback that will be invoked when the user selects the date by clicking on a day cell or selecting the enter or space key on a day cell.\n   * @param payload The payload containing the date represented by this cell.\n   */\n  onAction: (payload: { date: CalendarDateRequired }) => void;\n  /**\n   * A callback that will be invoked when the user performs mousedown on the day cell.\n   * @param payload The payload containing the date represented by this cell.\n   */\n  onDayFocused: (payload: { date: CalendarDateRequired }) => void;\n  /**\n   * A callback that will be invoked when the user navigates.\n   */\n  onNavigation: (detail: { direction: NavigationDirections; date: CalendarDateRequired }) => void;\n};\n\n/**\n * The useDayCell hook returns properties for an individual DayCell. The properties returned should be spread on the StyledDatePickerButton.\n * These include the event handlers for keydown and click.\n */\nexport const useDayCell = ({\n  date,\n  dayFormatter = defaultDayFormatter,\n  dateFormatter,\n  isAdjacentMonth,\n  isDisabled,\n  isFocusable,\n  isFocused,\n  isHidden,\n  isReadonly,\n  isSelected,\n  isToday,\n  onAction,\n  onDayFocused,\n  onNavigation\n}: UseDayCellProps) => {\n  // apply day formatting\n  const { state } = dayFormatter(date);\n  const isDisabledFormat = state === 'disabled';\n  const isRestrictedFormat = state === 'restricted';\n\n  // Focus the day cell with isFocused true when the state updates.\n  const buttonProps = useFocusableCell({ isFocusable, isFocused });\n  // Override onAction to not call it if disabled, readonly or restricted\n  const handleAction: UseDayCellProps['onAction'] = useCallback(\n    (payload) => {\n      if (isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat) return;\n      onAction(payload);\n    },\n    [isDisabled, isDisabledFormat, isReadonly, isRestrictedFormat, onAction]\n  );\n  const buttonEventHandlers = useCellNavigation({\n    navigationMap: {\n      ArrowLeft: { ltr: 'previousDay', rtl: 'nextDay' },\n      ArrowRight: { ltr: 'nextDay', rtl: 'previousDay' },\n      ArrowDown: 'nextWeek',\n      ArrowUp: 'previousWeek',\n      PageDown: 'nextMonth',\n      PageUp: 'previousMonth',\n      Home: 'firstDayOfMonth',\n      End: 'lastDayOfMonth',\n      ShiftPageDown: 'nextYear',\n      ShiftPageUp: 'previousYear',\n      CtrlAltT: 'today'\n    },\n    payload: { date },\n    onAction: handleAction,\n    onNavigation\n  });\n\n  // JET-73067 (can not set value on first click) - when the currently selected cell is not\n  // in the viewport, the first click on any other cell scrolls that selection into view\n  // instead of selecting it. To fix this, we update the focusableDate onmousedown, before\n  // focus is transferred to MonthView, so that it does not try to focus or scroll to\n  // the previously selected cell.\n  const onMouseDown = useCallback(() => {\n    if (isDisabled || isDisabledFormat || isRestrictedFormat) return;\n    onDayFocused({ date });\n  }, [date, isDisabled, isDisabledFormat, isRestrictedFormat, onDayFocused]);\n\n  // For accessibility, we want a full date.\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const today = translations.datePicker_today();\n  const selected = translations.datePicker_selected();\n  const restricted = translations.datePicker_restricted();\n\n  const dateIsoStr = getIsoDateStr(date.year, date.month, date.day);\n  const formattedDate = dateFormatter(dateIsoStr);\n  let ariaLabel = isToday ? `${today}, ${formattedDate}` : formattedDate;\n  ariaLabel = isRestrictedFormat ? `${ariaLabel}, ${restricted}` : ariaLabel;\n  ariaLabel = isSelected ? `${ariaLabel}, ${selected}` : ariaLabel;\n  const dayOfMonth = toJSDate(date.year, date.month, date.day).getDate().toString();\n\n  return {\n    buttonProps: {\n      'aria-label': ariaLabel,\n      ...((isHidden || isDisabled || isDisabledFormat || isRestrictedFormat) && {\n        'aria-disabled': true\n      }),\n      isActivable: !(isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat),\n      isAdjacentMonth,\n      isDimmed: isDisabled || isDisabledFormat,\n      isHidden,\n      isHoverable: !(isDisabled || isReadonly || isDisabledFormat || isRestrictedFormat),\n      isReadonly,\n      isSelected,\n      isRestricted: isRestrictedFormat,\n      isToday,\n      label: dayOfMonth,\n      onMouseDown,\n      ...buttonProps,\n      ...buttonEventHandlers\n    } as ComponentProps<typeof StyledDatePickerButton>\n  };\n};\n\n/**\n * A default day formatter that always formats as enabled state.\n */\nconst defaultDayFormatter = () => ({ state: 'enabled' }) as DayFormatOptions;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { StyledDatePickerButton } from '#PRIVATE_StyledDatePickerButton';\nimport { UseDayCellProps, useDayCell } from './useDayCell';\nimport { dayCellStyles } from './themes/DayCellStyles.css';\n\ntype PickedUseDayCellProps = Pick<\n  UseDayCellProps,\n  | 'date'\n  | 'dateFormatter'\n  | 'dayFormatter'\n  | 'isAdjacentMonth'\n  | 'isDisabled'\n  | 'isFocusable'\n  | 'isFocused'\n  | 'isHidden'\n  | 'isReadonly'\n  | 'isSelected'\n  | 'isToday'\n  | 'onAction'\n  | 'onDayFocused'\n  | 'onNavigation'\n>;\n\ntype DayCellProps = PickedUseDayCellProps;\n\n/**\n * The DayCell is the cell within the DatePicker's month view that contains the day in the month view.\n * This component will format the date for the aria-label.\n * The DayCell components uses the useDayCell hook to handle the user interactions with the day cell.\n */\nexport const DayCell = (props: DayCellProps) => {\n  const { buttonProps } = useDayCell(props);\n  // buttonProps, e.g., tabIndex, aria-label, onclick, onkeydown and visual states\n  return (\n    <div role=\"gridcell\" class={dayCellStyles}>\n      <StyledDatePickerButton {...buttonProps} />\n    </div>\n  );\n};\n","import { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { CalendarDateRequired, toJSDate } from '#utils/UNSAFE_calendarDateUtils';\nimport { weekNumberCellStyles, weekNumberStyles } from './themes/WeekNumberCellStyle.css';\nimport * as Logger from '../utils/UNSAFE_logger';\n\ntype Props = {\n  /**\n   * startDateOfWeek is the first date of the week row\n   */\n  startDateOfWeek: CalendarDateRequired;\n};\n\n/**\n * The ISO 8601 definition for week 01 is the week with the first Thursday of the Gregorian year (i.e. of January) in it.\n * https://en.wikipedia.org/wiki/ISO_week_date\n * @param date The first date of the week row to be used to calculate the week number.\n * The date must be a Saturday, Sunday, or Monday. We assume this because the week for\n * all the locales we support start on one of these days.\n * @returns the number of week in the year\n */\nconst calculateWeekNumber = (date: CalendarDateRequired) => {\n  const checkDate = toJSDate(date.year, date.month, date.day);\n  const dayNumber = checkDate.getUTCDay(); // 0 for Sunday, 1 for Monday, 2 for Tuesday, etc.\n\n  if (dayNumber !== 0 && dayNumber !== 1 && dayNumber !== 6) {\n    // This message is for internal JET developers. We should never see this message. In all locales the day of the\n    // week starts on Sunday, Monday or Saturday.\n    Logger.warn(`calculateWeekNumber's date property's getUTCDay() is assumed to be 0 (Sunday), 1 (Monday) or 6 (Saturday)\n      since that is the first day of the week for the locale's JET supports.`);\n  }\n\n  // For ISO week, we set the start of the week to Monday\n  if (dayNumber !== 1) {\n    // If it is already Monday, do nothing.\n    // If it is Sunday (0), add 1 to move it up to Monday.\n    // If it is Saturday (6), move it up two days to Monday.\n    checkDate.setUTCDate(checkDate.getUTCDate() + (dayNumber === 0 ? 1 : 2));\n  }\n\n  // Find Thursday (day value of 4) of this week. Since we know checkDate at this point is a Monday,\n  // we move it up 3 days.\n  checkDate.setUTCDate(checkDate.getUTCDate() + 3);\n\n  // Create the start of the year date\n  const janFirst = toJSDate(checkDate.getUTCFullYear(), 1, 1);\n\n  return Math.floor(Math.round((checkDate.getTime() - janFirst.getTime()) / 86400000) / 7) + 1;\n};\n\n/**\n * The WeekNumberCell is the cell at the start of a week's row within the DatePicker's\n * month view that contains the week's number within the year. This displays when\n * the DatePicker's 'weekDisplay' prop is set to 'number'.\n * This component will format the week number for the aria-label.\n */\nconst WeekNumberCell = ({ startDateOfWeek }: Props) => {\n  const weekNumber = calculateWeekNumber(startDateOfWeek);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  return (\n    <div\n      aria-label={translations.datePicker_weekNum({ NUM: String(weekNumber) })}\n      class={weekNumberCellStyles}\n      role=\"rowheader\">\n      <span class={weekNumberStyles}>{weekNumber}</span>\n    </div>\n  );\n};\n\nexport { WeekNumberCell };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport {\n  getWeeksInMonth,\n  getDatesInWeek,\n  getStartOfWeek,\n  getDaysOfWeekNames,\n  WeekInMonthIndex\n} from '#utils/PRIVATE_dayUtils';\nimport { ComponentProps } from 'preact/compat';\nimport { useMemo } from 'preact/hooks';\nimport {\n  CalendarDateRequired,\n  checkNoCalendarExtension,\n  formatFullCalendarDate,\n  isDateOutOfRange\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { getFormatParse, NativeDateTimeOptions } from '#UNSAFE_IntlDateTime';\nimport { DayCell } from './DayCell';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { Grid } from '#UNSAFE_Grid';\nimport {\n  MonthViewStyles,\n  MonthViewVariantOptions\n} from '#PRIVATE_MonthView/themes/MonthViewStyles.css';\nimport { MonthViewRedwoodTheme } from '#PRIVATE_MonthView/themes/redwood/MonthViewTheme';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { monthViewScaleVars } from '#PRIVATE_MonthView/themes/MonthViewContract.css';\nimport { WeekNumberCell } from './WeekNumberCell';\n\ntype PickedDayCellProps = Pick<\n  ComponentProps<typeof DayCell>,\n  'dayFormatter' | 'onAction' | 'onDayFocused' | 'onNavigation'\n>;\n\ntype MonthViewProps = TestIdProps &\n  PickedDayCellProps & {\n    /**\n     * The daysOutsideMonth property affects the day cells that are outside of the current month.\n     * If set to 'hidden', then the days outside of the current month will be hidden.\n     * If set to 'selectable', then the days outside of the current month will be visible and selectable.\n     * This defaults to 'hidden'.\n     */\n    daysOutsideMonth?: 'hidden' | 'selectable';\n    /**\n     * The MonthView renders with the month of the focusableDate.\n     * The focusableDate is the only day in the MonthView that has tabIndex: 0 on it.\n     * The focusableDate doesn't have focus until the user tabs in to the Month View.\n     * The focusableDate is never undefined.\n     */\n    focusableDate: CalendarDateRequired;\n    /**\n     * If set to true, the focusableDate will be focused and you will see the focus ring. It will be\n     * false when no date has focus.\n     * @default false\n     */\n    isFocused?: boolean;\n    /**\n     * Specifies whether the component is readonly.\n     */\n    isReadonly?: boolean;\n    /**\n     * The maximum selectable date. The max must be greater than the min if they are both specified.\n     */\n    max?: CalendarDateRequired;\n    /**\n     * The minimum selectable date. The min must be less than the max if they are both specified.\n     */\n    min?: CalendarDateRequired;\n    /**\n     * The selected date of the MonthView, or undefined is there is no selected date. This\n     * is used to highlight the selected day cell if it is within the min/max range.\n     */\n    selectedDate?: CalendarDateRequired;\n    /**\n     * Today's date. This is used to highlight the Today day cell.\n     */\n    todaysDate: CalendarDateRequired;\n    /**\n     * Whether week of the year will be shown in the DatePicker. The default calculation follows the\n     * ISO 8601 definition: the first week of the year contains the first Thursday of the year.\n     * This means that some days from one year may be placed into weeks 'belonging' to another year.\n     */\n    weekDisplay?: 'none' | 'number';\n  };\n\n/**\n * A MonthView is a month interface that allows users to select a single date. The MonthView is the week day header\n * abbreviations and the days of the month. A MonthView is used inside of a DatePicker\n * along with the DatePickerHeader and the MonthGridView and YearGridView.\n */\nexport const MonthView = ({\n  dayFormatter,\n  daysOutsideMonth = 'hidden',\n  isReadonly = false,\n  max,\n  min,\n  onAction,\n  onDayFocused,\n  onNavigation,\n  selectedDate,\n  focusableDate,\n  isFocused = false,\n  testId,\n  todaysDate,\n  weekDisplay = 'none'\n}: MonthViewProps) => {\n  const { locale } = useUser();\n  const weeksInMonth = getWeeksInMonth(focusableDate.year, focusableDate.month, locale);\n  const { baseTheme, styles } = useComponentTheme<MonthViewVariantOptions, MonthViewStyles>(\n    MonthViewRedwoodTheme,\n    {}\n  );\n  const isWeekNumberDisplayed = weekDisplay === 'number';\n  const gridTemplateColumns = `repeat(${isWeekNumberDisplayed ? 8 : 7}, 1fr)`;\n\n  const dateFormatter = useMemo(() => {\n    checkNoCalendarExtension(locale);\n    const dateFormatOptions: NativeDateTimeOptions = {\n      locale,\n      dateStyle: 'full'\n    };\n    const { format } = getFormatParse(dateFormatOptions);\n    return format;\n  }, [locale]);\n\n  const renderMonthViewHeaderRow = () => {\n    const weekDays = getDaysOfWeekNames(locale, 'short');\n\n    return (\n      <div class={styles.sticky}>\n        <Grid\n          role=\"row\"\n          aria-hidden=\"true\"\n          gridTemplateColumns={gridTemplateColumns}\n          gap={monthViewScaleVars.columnGap}>\n          {isWeekNumberDisplayed && <div role=\"presentation\" />}\n          {weekDays.map((day) => (\n            <div role=\"columnheader\" class={styles.dayOfTheWeek}>\n              <span>{day}</span>\n            </div>\n          ))}\n        </Grid>\n      </div>\n    );\n  };\n\n  const renderMonthView = () => {\n    const calendarGrid: JSX.Element[] = [];\n\n    for (let weekIndex = 0; weekIndex < weeksInMonth; weekIndex++) {\n      const startDateOfWeek = getStartOfWeek(focusableDate.year, focusableDate.month, 1, locale);\n\n      const weekDates = getDatesInWeek(\n        weekIndex as WeekInMonthIndex,\n        startDateOfWeek.year,\n        startDateOfWeek.month,\n        startDateOfWeek.day\n      );\n\n      const weekCells = weekDates.map((dayCellDate) => {\n        // This figures out the visual state of the DayCell.\n        const isDisabled = isDateOutOfRange(dayCellDate, min, max);\n\n        // Even if the selected date is out of range, the UX design shows it as selected.\n        const isSelected = selectedDate ? isSameDate(dayCellDate, selectedDate) : false;\n        const isToday = isSameDate(dayCellDate, todaysDate);\n        const isFocusable = isSameDate(dayCellDate, focusableDate);\n        const isAdjacentMonth = isOutOfMonth(dayCellDate, focusableDate);\n        const isHidden = isAdjacentMonth && daysOutsideMonth === 'hidden';\n\n        return (\n          <DayCell\n            key={`${dayCellDate.year}-${dayCellDate.month}-${dayCellDate.day}`}\n            date={dayCellDate}\n            dateFormatter={dateFormatter}\n            dayFormatter={dayFormatter}\n            isAdjacentMonth={isAdjacentMonth}\n            isDisabled={isDisabled}\n            isFocusable={isFocusable}\n            isFocused={isFocusable && isFocused}\n            isHidden={isHidden}\n            isReadonly={isReadonly}\n            isSelected={isSelected}\n            isToday={isToday}\n            onAction={onAction}\n            onDayFocused={onDayFocused}\n            onNavigation={onNavigation}></DayCell>\n        );\n      });\n\n      calendarGrid.push(\n        <Grid\n          key={weekIndex}\n          role=\"row\"\n          gridTemplateColumns={gridTemplateColumns}\n          gap={monthViewScaleVars.columnGap}>\n          {isWeekNumberDisplayed && <WeekNumberCell startDateOfWeek={weekDates[0]} />}\n          {weekCells}\n        </Grid>\n      );\n    }\n\n    return calendarGrid;\n  };\n\n  const monthViewAriaLabel = formatFullCalendarDate(locale, focusableDate, 'month');\n  return (\n    <div class={baseTheme}>\n      <Grid\n        gap={monthViewScaleVars.rowGap}\n        aria-label={monthViewAriaLabel}\n        role=\"grid\"\n        testId={testId}>\n        {renderMonthViewHeaderRow()}\n        {renderMonthView()}\n      </Grid>\n    </div>\n  );\n};\n\nfunction isSameDate(date1: CalendarDateRequired, date2: CalendarDateRequired) {\n  return date1.year === date2.year && date1.month === date2.month && date1.day === date2.day;\n}\n\nfunction isOutOfMonth(date1: CalendarDateRequired, currentMonthDate: CalendarDateRequired) {\n  return date1.month !== currentMonthDate.month;\n}\n"],"names":["defaultDayFormatter","state","DayCell","props","buttonProps","date","dayFormatter","dateFormatter","isAdjacentMonth","isDisabled","isFocusable","isFocused","isHidden","isReadonly","isSelected","isToday","onAction","onDayFocused","onNavigation","isDisabledFormat","isRestrictedFormat","useFocusableCell","handleAction","useCallback","payload","buttonEventHandlers","useCellNavigation","navigationMap","ArrowLeft","ltr","rtl","ArrowRight","ArrowDown","ArrowUp","PageDown","PageUp","Home","End","ShiftPageDown","ShiftPageUp","CtrlAltT","onMouseDown","translations","useTranslationBundle","today","datePicker_today","selected","datePicker_selected","restricted","datePicker_restricted","formattedDate","getIsoDateStr","year","month","day","ariaLabel","dayOfMonth","toJSDate","getDate","toString","isActivable","isDimmed","isHoverable","isRestricted","label","useDayCell","_jsx","jsx","role","class","dayCellStyles","children","StyledDatePickerButton","WeekNumberCell","startDateOfWeek","weekNumber","checkDate","dayNumber","getUTCDay","Logger.warn","setUTCDate","getUTCDate","janFirst","getUTCFullYear","Math","floor","round","getTime","calculateWeekNumber","datePicker_weekNum","NUM","String","weekNumberCellStyles","weekNumberStyles","isSameDate","date1","date2","daysOutsideMonth","max","min","selectedDate","focusableDate","testId","todaysDate","weekDisplay","locale","useUser","weeksInMonth","getWeeksInMonth","baseTheme","styles","useComponentTheme","MonthViewRedwoodTheme","isWeekNumberDisplayed","gridTemplateColumns","useMemo","checkNoCalendarExtension","dateFormatOptions","dateStyle","format","getFormatParse","monthViewAriaLabel","formatFullCalendarDate","_jsxs","jsxs","Grid","gap","monthViewScaleVars","rowGap","weekDays","getDaysOfWeekNames","sticky","columnGap","map","dayOfTheWeek","renderMonthViewHeaderRow","calendarGrid","weekIndex","getStartOfWeek","weekDates","getDatesInWeek","weekCells","dayCellDate","isDateOutOfRange","currentMonthDate","push","renderMonthView"],"mappings":"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"}