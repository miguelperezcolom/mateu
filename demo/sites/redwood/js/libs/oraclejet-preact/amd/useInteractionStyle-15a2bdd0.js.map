{"version":3,"file":"useInteractionStyle-15a2bdd0.js","sources":["../../src/hooks/UNSAFE_useInteractionStyle/useInteractionStyle.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * Hook to standardized patterns when applying style logic for actionable elements.\n */\n\nimport { mergeProps } from '../../utils/UNSAFE_mergeProps';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\nimport { useHover } from '../UNSAFE_useHover';\nimport { useActive } from '../UNSAFE_useActive';\n\nexport type InteractionStyleOptions = {\n  isDisabled?: boolean;\n  disabledKeys?: ('enter' | 'space')[];\n};\n\nconst useInteractionStyle = (\n  { isDisabled, disabledKeys }: InteractionStyleOptions = { isDisabled: false }\n) => {\n  const hints = getClientHints();\n  // :active only works on IOS devices if a touch handler exists\n  const iosProps = hints.platform === 'ios' ? { ontouchstart: function () {} } : {};\n  const isHybrid = hints.hoverSupport === 'events';\n\n  // hook props and state\n  const { activeProps, isActive } = useActive({ disabledKeys });\n  const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n\n  // apply hover styling to element on a device that does not have hoverSupport\n  // events and is not active or disabled\n  const applyPseudoHoverStyle = !isHybrid && !isActive && !isDisabled;\n\n  // apply hover styling to element on a device that has hoverSupport events\n  // and is not active or disabled\n  const applyHoverStyle = isHybrid && isHover && !isActive && !isDisabled;\n\n  // apply active style when element is active and not disabled\n  const applyActiveStyle = isActive && !isDisabled;\n\n  // merge all props\n  const interactionProps = mergeProps(iosProps, activeProps, hoverProps);\n\n  // in the event a component wants to conditionally use base props or hook state,\n  // baseProps, and baseStates are returned\n  return {\n    interactionProps,\n    baseProps: {\n      iosProps,\n      activeProps,\n      hoverProps\n    },\n    applyPseudoHoverStyle,\n    applyHoverStyle,\n    applyActiveStyle,\n    baseStates: {\n      isActive,\n      isHover\n    }\n  };\n};\n\nexport { useInteractionStyle };\n"],"names":["isDisabled","disabledKeys","hints","getClientHints","iosProps","platform","ontouchstart","isHybrid","hoverSupport","activeProps","isActive","useActive","hoverProps","isHover","useHover","applyPseudoHoverStyle","applyHoverStyle","applyActiveStyle","interactionProps","mergeProps","baseProps","baseStates"],"mappings":"yKAsB4B,EACxBA,aAAYC,gBAA0C,CAAED,YAAY,MAEtE,MAAME,EAAQC,EAAAA,iBAERC,EAA8B,QAAnBF,EAAMG,SAAqB,CAAEC,aAAc,cAAmB,GACzEC,EAAkC,WAAvBL,EAAMM,cAGjBC,YAAEA,EAAWC,SAAEA,GAAaC,EAAAA,UAAU,CAAEV,kBACxCW,WAAEA,EAAUC,QAAEA,GAAYC,EAAAA,SAAS,CAAEd,YAAaO,IAIlDQ,GAAyBR,IAAaG,IAAaV,EAInDgB,EAAkBT,GAAYM,IAAYH,IAAaV,EAGvDiB,EAAmBP,IAAaV,EAOtC,MAAO,CACLkB,iBALuBC,EAAUA,WAACf,EAAUK,EAAaG,GAMzDQ,UAAW,CACThB,WACAK,cACAG,cAEFG,wBACAC,kBACAC,mBACAI,WAAY,CACVX,WACAG,WAEH"}