{"version":3,"file":"MessageFormattingUtils-ea0be23e.js","sources":["../../src/PRIVATE_Message/Message.types.ts","../../src/PRIVATE_Message/MessageFormattingUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ItemMetadata } from '../utils/UNSAFE_dataProvider';\n\nexport const variants = ['banner', 'inline', 'toast'] as const;\nexport type MessageVariant = (typeof variants)[number];\n\nexport const severities = ['error', 'warning', 'confirmation', 'info', 'none'] as const;\nexport type MessageSeverity = (typeof severities)[number];\n\n/**\n * Structure of data item passed to the renderer functions\n */\nexport type MessageRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { getLocale } from '../utils/UNSAFE_getLocale';\nimport { isEmptyOrUndefined } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport { severities } from './Message.types';\n\n// Types of properties that can be formatted\ntype PropFormat = 'severity' | 'string' | 'timestamp';\n\n/**\n * Options for creating an Intl.DateTimeFormat instance.\n */\nconst DATE_FORMAT_OPTIONS = Object.freeze({\n  TODAY: {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  },\n  DEFAULT: {\n    day: '2-digit',\n    month: '2-digit',\n    year: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  }\n});\n\n/**\n * Regex for validating ISO timestamp\n */\nconst ISO_DATE_REGEX =\n  /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/;\n\n/**\n * Checks if the provided date is today\n *\n * @param isoDate Date to be tested for today\n *\n * @returns boolean indicating if the provided date is today\n */\nfunction isDateToday(isoDate: string) {\n  const today = new Date();\n  const provided = new Date(isoDate);\n\n  return (\n    today.getUTCFullYear() === provided.getUTCFullYear() &&\n    today.getUTCMonth() === provided.getUTCMonth() &&\n    today.getUTCDate() === provided.getUTCDate()\n  );\n}\n\n/**\n * Creates an instance of Intl.DateTimeFormat\n *\n * @param isToday A boolean to indicate whether a formatter is needed for the date\n *                that is the current day.\n *\n * @returns the formatter instance\n */\nfunction getDateTimeFormatter(isToday: boolean) {\n  const locale = getLocale();\n  const { DateTimeFormat } = Intl;\n  if (isToday) {\n    return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.TODAY as Intl.DateTimeFormatOptions);\n  }\n\n  return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.DEFAULT as Intl.DateTimeFormatOptions);\n}\n\n/**\n * Checks if the provided value is valid for the prop specified.\n * By default, this method just checks for the value to be a valid string.\n *\n * @param value The value to be checked\n * @param prop The property for which the value needs to be evaluated\n *\n * @returns the result of the validation\n */\nfunction isValidValueForProp<T>(\n  value: T | null | undefined,\n  prop: PropFormat = 'string'\n): value is T {\n  switch (prop) {\n    case 'severity':\n      // Should be one of the allowed severity\n      return typeof value === 'string' && severities.includes(value as any);\n\n    case 'timestamp':\n      // Should be a valid ISO Datetime string\n      return typeof value === 'string' && ISO_DATE_REGEX.test(value);\n\n    case 'string':\n    default:\n      // anything other than null, undefined and '' is a valid string\n      return typeof value === 'string' && !isEmptyOrUndefined(value);\n  }\n}\n\n/**\n * Formats the timestamp in the required format based on the current\n * locale.\n *\n * @param isoTime Timestamp in ISO format\n */\nfunction formatTimestamp(isoTime: string) {\n  const isToday = isDateToday(isoTime);\n  const formatter = getDateTimeFormatter(isToday);\n\n  return formatter.format(new Date(isoTime));\n}\n\nexport { formatTimestamp, isValidValueForProp };\n"],"names":["severities","DATE_FORMAT_OPTIONS","Object","freeze","TODAY","hour","minute","hour12","DEFAULT","day","month","year","ISO_DATE_REGEX","isoTime","isToday","locale","getLocale","DateTimeFormat","Intl","getDateTimeFormatter","isoDate","today","Date","provided","getUTCFullYear","getUTCMonth","getUTCDate","isDateToday","format","value","prop","includes","test","isEmptyOrUndefined","c"],"mappings":"iGAYa,MAAAA,EAAa,CAAC,QAAS,UAAW,eAAgB,OAAQ,QCKjEC,EAAsBC,OAAOC,OAAO,CACxCC,MAAO,CACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAEVC,QAAS,CACPC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNN,KAAM,UACNC,OAAQ,UACRC,QAAQ,KAONK,EACJ,uJAyEF,SAAyBC,GAIvB,OAjDF,SAA8BC,GAC5B,MAAMC,EAASC,EAAAA,aACTC,eAAEA,GAAmBC,KAC3B,OACS,IAAID,EAAeF,EADxBD,EACgCb,EAAoBG,MAGtBH,EAAoBO,QACxD,CAuCoBW,CAlEpB,SAAqBC,GACnB,MAAMC,EAAQ,IAAIC,KACZC,EAAW,IAAID,KAAKF,GAE1B,OACEC,EAAMG,mBAAqBD,EAASC,kBACpCH,EAAMI,gBAAkBF,EAASE,eACjCJ,EAAMK,eAAiBH,EAASG,YAEpC,CAwDkBC,CAAYd,IAGXe,OAAO,IAAIN,KAAKT,GACnC,wBA/BA,SACEgB,EACAC,EAAmB,UAEnB,OAAQA,GACN,IAAK,WAEH,MAAwB,iBAAVD,GAAsB7B,EAAW+B,SAASF,GAE1D,IAAK,YAEH,MAAwB,iBAAVA,GAAsBjB,EAAeoB,KAAKH,GAG1D,QAEE,MAAwB,iBAAVA,IAAuBI,EAAkBC,EAACL,GAE9D"}