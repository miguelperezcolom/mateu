{"version":3,"file":"SelectMobileFieldInput-094c2a5e.js","sources":["../../src/PRIVATE_SelectCommon/Dropdown.tsx","../../src/PRIVATE_SelectCommon/MobileDropdown.tsx","../../src/PRIVATE_SelectCommon/SelectMobileFieldInput.tsx","../../src/PRIVATE_SelectCommon/DropdownUserAssistance.tsx","../../src/PRIVATE_SelectCommon/LinkItem.tsx","../../src/PRIVATE_SelectCommon/SelectMobileDropdown.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useState } from 'preact/hooks';\nimport { Floating, PositionData } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport { isControlOrFunctionKey, KEYS } from '../utils/PRIVATE_keyboardUtils';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n//Once Dropdown is consumed this will be removed\nimport { useOutsideMousedown } from '../hooks/PRIVATE_useOutsideMousedown';\n\ntype FloatingProps = ComponentProps<typeof Floating>;\n\ntype Props = {\n  anchorRef: MutableRef<HTMLElement | null>;\n  children?: ComponentChildren;\n  dropdownRef: MutableRef<HTMLElement | null>;\n  id?: string;\n  isOpen?: boolean;\n  onAutoDismiss?: (event?: Event) => void;\n  onPosition?: FloatingProps['onPosition'];\n};\n\nconst DEFAULT_PLACEMENT = 'bottom-start';\n\n//TODO: Start consuming PRIVATE_Dropdown. JET-62565\nexport function Dropdown({\n  anchorRef,\n  children,\n  dropdownRef,\n  id,\n  isOpen,\n  onAutoDismiss,\n  onPosition\n}: Props) {\n  const [placement, setPlacement] = useState<FloatingProps['placement']>(DEFAULT_PLACEMENT);\n\n  const [prevIsOpen, setPrevIsOpen] = useState(isOpen);\n\n  if (prevIsOpen !== isOpen) {\n    // reset the placement to the default when the dropdown closes, not opens, so that it doesn't\n    // initially open in the previous position and then move to the default position on the\n    // rerender after the state is updated\n    if (!isOpen) {\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  }\n\n  const handlePosition = useCallback(\n    (positionData: PositionData) => {\n      // update the placement so that the dropdown stays where it is until there is a collision,\n      // i.e. it no longer fits, instead of letting it try to move back to the default position\n      // on every render\n      setPlacement(positionData.placement);\n\n      // call the callback that was passed in through props\n      onPosition?.(positionData);\n    },\n    [onPosition, setPlacement]\n  );\n\n  const handleAutoDismiss = useCallback(\n    (event: Event) => {\n      onAutoDismiss?.(event);\n    },\n    [onAutoDismiss]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented || isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          handleAutoDismiss(event);\n          break;\n      }\n    },\n    [handleAutoDismiss]\n  );\n\n  // use the mousedown event to be consistent with legacy JET and so that we're hiding the dropdown\n  // on the same event where focus will transfer\n  useOutsideMousedown({\n    isDisabled: !isOpen,\n    ref: [anchorRef, dropdownRef],\n    handler: handleAutoDismiss\n  });\n\n  // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset\n  const offsetValue = { mainAxis: 4, crossAxis: 0 };\n\n  const inlineStyle = isOpen\n    ? {\n        minWidth: `${anchorRef.current?.offsetWidth}px`\n      }\n    : {};\n\n  if (prevIsOpen !== isOpen) {\n    setPrevIsOpen(isOpen);\n  }\n\n  return !isOpen ? null : (\n    <Layer logicalParentRef={anchorRef}>\n      <Floating\n        anchorRef={anchorRef}\n        sizeOptions={{\n          isMaxHeightAdjusted: true,\n          maxHeightCeiling: 400\n        }}\n        ref={dropdownRef}\n        placement={placement}\n        offsetValue={offsetValue}\n        onPosition={handlePosition}>\n        <div\n          class={dropdownStyles.base}\n          id={id}\n          style={inlineStyle}\n          onKeyDown={handleKeyDown}\n          onMouseDown={preventDefaultForCurrentTarget}>\n          {children}\n        </div>\n      </Floating>\n    </Layer>\n  );\n}\n","import type { ComponentChildren, JSX } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Layer } from '../UNSAFE_Layer';\nimport { WindowOverlay } from '../UNSAFE_WindowOverlay';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { mobileDropdownStyles } from './themes/mobileDropdownStyles.css';\n\ntype Props = {\n  /**\n   * Id of the label to associate with the dropdown (e.g. the label of the filter field).\n   */\n  'aria-labelledby'?: UnpackSignals<JSX.AriaAttributes>['aria-labelledby'];\n\n  /**\n   * The dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The id for the top level element\n   */\n  id?: string;\n\n  /**\n   * Specifies whether the dropdown is being shown\n   */\n  isOpen?: boolean;\n};\n\nexport function MobileDropdown({ 'aria-labelledby': ariaLabelledBy, children, id, isOpen }: Props) {\n  return !isOpen ? null : (\n    <Layer>\n      <WindowOverlay>\n        <div\n          id={id}\n          class={mobileDropdownStyles.base}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby={ariaLabelledBy}>\n          <Flex width=\"100%\" height=\"100%\" maxHeight=\"100%\" direction=\"column\">\n            {children}\n          </Flex>\n        </div>\n      </WindowOverlay>\n    </Layer>\n  );\n}\n","import type { ContextType, Ref, JSX } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { merge } from '@oracle/oraclejet-internal-utilities/stringUtils';\n\nimport { Text } from '#UNSAFE_Text';\nimport { isInputPlaceholderShown } from '#UNSAFE_TextField/TextFieldUtils';\nimport { formControlInheritTextAlign } from '#UNSAFE_TextField/themes/FormControlUtilsStyles.css';\nimport type { TextFieldInputVariantOptions } from '#UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { TextFieldInputRedwoodTheme } from '#UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\nimport { useAccessibleContext } from '#hooks/UNSAFE_useAccessibleContext';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { FormVariantContext } from '#hooks/UNSAFE_useFormVariantContext';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { isEmbeddedVariant } from '#utils/PRIVATE_formControlUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { type TextProps, textInterpolations } from '#utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '#utils/UNSAFE_mergeInterpolations';\nimport { selectMobileFieldInputStyles } from './themes/SelectMobileFieldInputStyles.css';\n\ntype AriaProps = Pick<\n  UnpackSignals<JSX.AriaAttributes>,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ntype EventProps = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'onBlur' | 'onFocus'>;\n\ntype Props = AriaProps &\n  EventProps &\n  TextProps & {\n    displayValue?: string;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    isRequired?: boolean;\n    placeholder?: string;\n    variant?: ContextType<typeof FormVariantContext>;\n  };\n\nconst interpolations = [...Object.values(textInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * This component is used for rendering the main field in mobile phones. This is a bit different from the\n * normal main field (TextFieldInput) that we use for desktop & tablet devices in the way that\n * a user will not be able to edit the value of this field. But, one can still have other functionalities\n * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.\n *\n * This also differs from ReadonlyTextFieldInput in the following ways:\n * 1. This will be rendered as div as well, but has a role of combobox set on it\n * 2. This will not be read as readonly input by the screen readers\n * 3. This has the stylings much similar to the TextFieldInput component\n * 4. This supports the use of placeholder and shows it when there is no value present\n * 5. This supports having the variant property and styles accordingly\n *\n * As such, this is very similar to the TextFieldInput except that this does not allow user input.\n * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the\n * behavior we need, it will make the field as readonly and screen readers read the same about this\n * field. This will be an incorrect representation contextually as one can still edit the value by opening\n * the dropdown and changing the selection.\n */\nexport const SelectMobileFieldInput = forwardRef(\n  (\n    {\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': ariaExpanded,\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      displayValue,\n      hasEmptyLabel,\n      hasInsideLabel = false,\n      isRequired,\n      onBlur,\n      onFocus,\n      placeholder,\n      textAlign,\n      variant = 'default'\n    }: Props,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    // consume required contexts\n    const { isDisabled, isFocused, hasValue = false } = useFormFieldContext();\n    const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n    // setup properties\n    const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n      ? placeholder\n      : undefined;\n\n    // Add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n    // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n    // kinds of labels, this helps to ensure we don't override a meaningful label.\n    const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n    const mergedAriaLabelledBy = hasEmptyLabel\n      ? merge([ariaLabelledBy, UNSAFE_ariaLabelledBy])\n      : ariaLabelledBy;\n\n    // setup style classes\n    const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n    const { classes: themeClasses } = useComponentTheme<TextFieldInputVariantOptions>(\n      TextFieldInputRedwoodTheme,\n      {\n        type: 'notPassword',\n        styleVariant: isEmbeddedVariant(variant) ? 'embedded' : 'default',\n        textarea: 'notTextArea',\n        input: 'isInput',\n        prefix: 'noPrefix',\n        suffix: 'noSuffix',\n        startContent: 'noStartContent',\n        endContent: 'hasEndContent',\n        insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n        value: hasValue ? 'hasValue' : 'noValue',\n        focused: isFocused ? 'isFocused' : 'notFocused',\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n      }\n    );\n    const rootDivStyleClasses = classNames([\n      selectMobileFieldInputStyles.base,\n      styleInterpolationClasses,\n      themeClasses,\n      // JET-72775 - Form control alignment in tables\n      // When we are in legacy collection components, we want to inherit the text align\n      // when it is not set explicitly.\n      variant === 'legacyEmbedded' && textAlign === undefined && formControlInheritTextAlign\n    ]);\n\n    return (\n      <div\n        aria-autocomplete=\"list\"\n        aria-controls={ariaControls}\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-invalid={ariaInvalid}\n        aria-label={ariaLabel}\n        aria-labelledby={mergedAriaLabelledBy}\n        aria-required={isRequired ? 'true' : undefined}\n        class={rootDivStyleClasses}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={ref}\n        role=\"combobox\"\n        {...(isTabbable && tabbableModeProps)}>\n        <div class={selectMobileFieldInputStyles.content}>\n          <Text variant={displayValue ? 'inherit' : 'secondary'}>\n            {displayValue || myPlaceholder}\n          </Text>\n        </div>\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype InlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'fieldLabel'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'id'\n  | 'userAssistanceDensity'\n>;\n\nexport function DropdownUserAssistance(props: InlineUserAssistanceProps) {\n  // Prevent the focus from transferring when the user clicks on an empty/non-clickable area\n  // of the user assistance\n  const handleMouseDown = useCallback((event: MouseEvent) => {\n    // Don't call preventDefault when the user clicks on the help source link, so that the\n    // focus is allowed to transfer in that case.\n    if ((event.target as Element)?.tagName !== 'A') {\n      event.preventDefault();\n    }\n  }, []);\n\n  return (\n    <FormFieldContext.Provider value={{ isFocused: true }}>\n      <div class={dropdownStyles.userAssistance} onMouseDown={handleMouseDown}>\n        <InlineUserAssistance {...props} />\n      </div>\n    </FormFieldContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { Link } from '#UNSAFE_Link';\nimport { useFocusWithin } from '#hooks/UNSAFE_useFocusWithin';\nimport { useHover } from '#hooks/UNSAFE_useHover';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype Props = {\n  /**\n   * Child content of the item.\n   */\n  children: string;\n  /**\n   * Specifies whether to highlight the item.\n   */\n  isHighlighted?: boolean;\n  /**\n   * Callback invoked when the user triggers the link, for example by clicking or pressing Enter.\n   */\n  onAction?: () => void;\n};\n\n/**\n * This component renders a link that looks like a list item in a Select* component dropdown.\n * It fires an action when the user triggers it, and is intended to be used for launching\n * external application UI from within the dropdown, for example to provide advanced search or\n * add to list functionality.\n * The LinkItem would typically be shown in a fixed position above or below the list itself.\n */\nconst LinkItem = ({ children, isHighlighted, onAction }: Props) => {\n  const { isHover, hoverProps } = useHover();\n  const { isFocused, focusProps } = useFocusWithin();\n\n  const handleClick = useCallback(\n    (e: Event) => {\n      // prevent the link from actually navigating by preventing default and returning false\n      e.preventDefault();\n      onAction?.();\n      return false;\n    },\n    [onAction]\n  );\n\n  const rootClasses = classNames([\n    dropdownStyles.results.linkItemRoot,\n    isFocused ? dropdownStyles.results.linkItemFocus : undefined\n  ]);\n\n  const linkClasses = classNames([\n    dropdownStyles.results.extraItem,\n    isHover || isFocused || isHighlighted ? dropdownStyles.results.linkItemHighlight : undefined\n  ]);\n\n  return (\n    <div class={rootClasses} {...focusProps}>\n      <Link href=\"#\" onClick={handleClick}>\n        <div class={linkClasses} {...hoverProps}>\n          {children}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport { LinkItem };\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { Separator } from '../UNSAFE_Separator';\nimport { MobileDropdown } from './MobileDropdown';\nimport { selectMobileDropdownStyles } from './themes/selectMobileDropdownStyles.css';\n\ntype MobileDropdownProps = ComponentProps<typeof MobileDropdown>;\ntype PassThroughMobileDropdownProps = Pick<MobileDropdownProps, 'id' | 'isOpen'>;\n\ntype Props = PassThroughMobileDropdownProps & {\n  /**\n   * The main dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The components to be placed in the end of the dropdown\n   */\n  footer?: ComponentChildren;\n\n  /**\n   * The components to be placed in the beginning of the dropdown\n   */\n  header?: ComponentChildren;\n\n  /**\n   * Specifies whether to have a separator between header and content\n   */\n  hasHeaderSeparator?: boolean;\n\n  /**\n   * Id of the label for the filter field.\n   */\n  labelId?: string;\n};\n\nexport function SelectMobileDropdown({\n  children,\n  footer,\n  hasHeaderSeparator = true,\n  header,\n  id,\n  isOpen,\n  labelId\n}: Props) {\n  return (\n    <MobileDropdown id={id} isOpen={isOpen} aria-labelledby={labelId}>\n      {header}\n      {hasHeaderSeparator && <Separator />}\n      {/* TODO: Add overflow support to View and use it here */}\n      {/*  */}\n      <div class={selectMobileDropdownStyles.content}>{children}</div>\n      <Separator />\n      {footer}\n    </MobileDropdown>\n  );\n}\n"],"names":["DEFAULT_PLACEMENT","MobileDropdown","ariaLabelledBy","children","id","isOpen","_jsx","jsx","Layer","WindowOverlay","class","mobileDropdownStyles","base","role","Flex","width","height","maxHeight","direction","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","SelectMobileFieldInput","forwardRef","ariaControls","ariaDescribedBy","ariaExpanded","ariaInvalid","ariaLabel","displayValue","hasEmptyLabel","hasInsideLabel","isRequired","onBlur","onFocus","placeholder","textAlign","variant","ref","isDisabled","isFocused","hasValue","useFormFieldContext","isTabbable","tabbableModeProps","useTabbableMode","myPlaceholder","isInputPlaceholderShown","undefined","UNSAFE_ariaLabelledBy","useAccessibleContext","mergedAriaLabelledBy","merge","styleInterpolationClasses","classes","themeClasses","useComponentTheme","TextFieldInputRedwoodTheme","type","styleVariant","isEmbeddedVariant","textarea","input","prefix","suffix","startContent","endContent","insideLabel","value","focused","disabled","rootDivStyleClasses","classNames","selectMobileFieldInputStyles","formControlInheritTextAlign","content","Text","anchorRef","dropdownRef","onAutoDismiss","onPosition","placement","setPlacement","useState","prevIsOpen","setPrevIsOpen","handlePosition","useCallback","positionData","handleAutoDismiss","event","handleKeyDown","defaultPrevented","isControlOrFunctionKey","code","KEYS","ESC","TAB","useOutsideMousedown","handler","inlineStyle","minWidth","current","offsetWidth","logicalParentRef","Floating","sizeOptions","isMaxHeightAdjusted","maxHeightCeiling","offsetValue","mainAxis","crossAxis","dropdownStyles","style","onKeyDown","onMouseDown","preventDefaultForCurrentTarget","props","handleMouseDown","target","tagName","preventDefault","FormFieldContext","Provider","userAssistance","InlineUserAssistance","isHighlighted","onAction","isHover","hoverProps","useHover","focusProps","useFocusWithin","handleClick","e","rootClasses","results","linkItemRoot","linkItemFocus","linkClasses","extraItem","linkItemHighlight","Link","href","onClick","footer","hasHeaderSeparator","header","labelId","_jsxs","Separator","selectMobileDropdownStyles"],"mappings":"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"}