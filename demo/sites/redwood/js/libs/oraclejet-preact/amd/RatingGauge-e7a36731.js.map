{"version":3,"file":"RatingGauge-e7a36731.js","sources":["../../src/UNSAFE_RatingGauge/ratingUtils.ts","../../src/UNSAFE_RatingGauge/RatingStar.tsx","../../src/UNSAFE_RatingGauge/RatingGaugeItem.tsx","../../src/UNSAFE_RatingGauge/RatingGauge.tsx","../../src/UNSAFE_RatingGauge/useEvents.tsx","../../src/UNSAFE_RatingGauge/useRatingDatatip.ts","../../src/UNSAFE_RatingGauge/useRatingTooltip.ts"],"sourcesContent":["import { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { VisThresholdsColors } from '#utils/UNSAFE_meterUtils';\nimport type { RefObject } from 'preact';\n\nexport type RatingStarColorType = 'neutral' | 'gold' | ColorProps['color'] | VisThresholdsColors;\n\nexport function getValue(\n  pageX: number,\n  max: number,\n  step: number,\n  dimensionsRef: RefObject<{ width: number; x: number }>,\n  isRtl: boolean\n): number {\n  const dimensions = dimensionsRef.current;\n  if (!dimensions || dimensions.width === 0) {\n    return -1;\n  }\n  const width = pageX - dimensions.x;\n  const val = (max * (isRtl ? dimensions.width - width : width)) / dimensions.width;\n  const numSteps = val / step;\n\n  return numSteps < 0.5 ? 0 : Math.min(max, Math.ceil(numSteps) * step);\n}\n\nexport function getDimensions(element: HTMLElement | null) {\n  if (!element) {\n    return {\n      width: 0,\n      x: 0\n    };\n  }\n\n  const rect = element.getBoundingClientRect();\n  return {\n    width: rect.width,\n    x: rect.x + window.scrollX\n  };\n}\n\n/**\n * Returns The color in rating gauge, if the color enum is supported. undefined otherwise.\n * @param color The color in rating gauge.\n * @returns The color in rating gauge, if the color enum is supported. undefined otherwise.\n */\nexport function getColorEnum(color: string | undefined) {\n  return color === 'neutral' ||\n    color === 'gold' ||\n    color === 'danger' ||\n    color === 'warning' ||\n    color === 'success'\n    ? color\n    : undefined;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { getColorEnum } from './ratingUtils';\nimport { ratingGaugeVars } from './themes/RatingGaugeContract.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { RatingGaugeVariantOptions, RatingGaugeStyles } from './themes/RatingGaugeStyles.css';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\nimport { RatingStarColorType } from './ratingUtils';\n\ntype Props = {\n  isSelected: boolean;\n  isDisabled?: boolean;\n  isReadOnly?: boolean;\n  color: RatingStarColorType;\n};\nconst RatingStar = ({ isSelected, isDisabled, isReadOnly, color = 'neutral' }: Props) => {\n  const { forcedColors } = useUser();\n  const isHighContrast = forcedColors === 'active';\n  const needsHighContrastStyle = isHighContrast && isDisabled;\n  const enumColor = getColorEnum(color);\n  const customColors = assignInlineVars({\n    [ratingGaugeVars.colorSelected]: color,\n    [ratingGaugeVars.borderColorSelected]: color,\n    [ratingGaugeVars.colorSelectedReadonly]: color\n  });\n  const {\n    variantClasses,\n    styles: {\n      ratingStarBaseStyle,\n      innerRatingStarColor,\n      outerRatingStarColor,\n      outerDisabledHighContrastBaseStyle,\n      outerDisabledHighContrastSelectedStyle,\n      outerDisabledHighContrastUnselectedStyle\n    }\n  } = useComponentTheme<RatingGaugeVariantOptions, RatingGaugeStyles>(RatingGaugeRedwoodTheme, {\n    color: enumColor,\n    selectionState: isSelected ? 'isSelected' : 'isNotSelected',\n    disabledState: isDisabled ? 'isDisabled' : 'isNotDisabled',\n    readonlyState: isReadOnly ? 'isReadonly' : 'isNotReadonly',\n    highContrastState: isHighContrast ? 'isHighContrast' : 'isNotHighContrast'\n  });\n\n  return (\n    <svg\n      viewBox=\"0 0 36 36\"\n      height=\"100%\"\n      width=\"100%\"\n      style={!enumColor ? customColors : undefined}\n      class={classNames([ratingStarBaseStyle, enumColor ? variantClasses : ''])}>\n      <g>\n        <path\n          class={innerRatingStarColor}\n          d=\"m18 1 5.0061 11.9524 12.9939 1.0344-9.9 8.4215 3.0246 12.5917-11.1246-6.7476-11.12461 6.7476 3.02461-12.5917-9.9-8.4215 12.9939-1.0344z\"\n        />\n        <path\n          class={classNames([\n            outerRatingStarColor,\n            needsHighContrastStyle ? outerDisabledHighContrastBaseStyle : '',\n            needsHighContrastStyle\n              ? isSelected\n                ? outerDisabledHighContrastSelectedStyle\n                : outerDisabledHighContrastUnselectedStyle\n              : ''\n          ])}\n          d=\"m23.0061 12.9524-5.0061-11.9524-5.0061 11.9524-12.9939 1.0344 9.9 8.4215-3.02461 12.5917 11.12461-6.7476 11.1246 6.7476-3.0246-12.5917 9.9-8.4215zm10.5043 1.8394-8.5262 7.2528 2.6077 10.8562-9.5919-5.818-9.59192 5.818 2.60772-10.8562-8.52615-7.2528 11.19115-.891 4.3192-10.31227 4.3192 10.31227z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport { RatingStar };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Fragment } from 'preact';\nimport { RatingStar } from './RatingStar';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { RatingGaugeStyles } from './themes/RatingGaugeStyles.css';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\nimport { RatingStarColorType } from './ratingUtils';\n\ntype Props = {\n  fillRatio: number;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  color: RatingStarColorType;\n};\n\nconst RatingGaugeItem = ({ fillRatio, isDisabled, isReadonly, color }: Props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const {\n    styles: { fractionalStarBaseStyle }\n  } = useComponentTheme<never, RatingGaugeStyles>(RatingGaugeRedwoodTheme);\n\n  if (fillRatio === 1 || fillRatio === 0) {\n    return (\n      <RatingStar\n        isSelected={fillRatio === 1}\n        isDisabled={isDisabled}\n        isReadOnly={isReadonly}\n        color={color}\n      />\n    );\n  }\n\n  // if fillRatio is not 1 or zero, absolutely position selected star above the\n  // unselected star and clip both to form partially selected star.\n  return (\n    <Fragment>\n      <div\n        class={fractionalStarBaseStyle}\n        style={{\n          clipPath: `inset(0% ${isRtl ? (1 - fillRatio) * 100 : 0}% 0% ${\n            isRtl ? 0 : fillRatio * 100\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={false}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n      <div\n        class={fractionalStarBaseStyle}\n        style={{\n          clipPath: `inset(0% ${isRtl ? 0 : (1 - fillRatio) * 100}% 0% ${\n            isRtl ? (1 - fillRatio) * 100 : 0\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={true}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport { RatingGaugeItem };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { RatingGaugeItem } from './RatingGaugeItem';\nimport { useEvents } from './useEvents';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { getDimensions } from './ratingUtils';\nimport { useRatingDatatip } from './useRatingDatatip';\nimport { useRatingTooltip } from './useRatingTooltip';\n\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { Threshold, CommitDetail, InputDetail } from '#utils/UNSAFE_meterUtils';\nimport {\n  getThresholdColorFromValue,\n  getMeterAriaProps,\n  validateRange\n} from '#utils/PRIVATE_meterUtils';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { RatingGaugeStyles, RatingGaugeVariantOptions } from './themes/RatingGaugeStyles.css';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\n/**\n * Props for the RatingGauge\n */\ntype Props = TestIdProps & {\n  /**\n   * Defines whether the rating gauge should be read only. User interaction is prevented if set to true.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Defines whether the rating gauge is disabled or not. User interaction is prevented and the rating gauge is hidden from screen readers if set to true.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * The size of the individual rating gauge items. The default value of this property is theme driven.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * The color of the individual rating gauge items.\n   */\n  color?: 'neutral' | 'gold';\n\n  /**\n   * The value of the rating gauge.\n   */\n  value?: number;\n\n  /**\n   * Specifies the increment by which values can be changed.\n   */\n  step?: number;\n\n  /**\n   * Integer value specifying the maximum value of the rating gauge, which determines the number of items that are displayed\n   */\n  max?: number;\n\n  /**\n   * The callback called in response to hover or focus interactions with the rating gauge items.\n   */\n  onInput?: (detail: InputDetail) => void;\n\n  /**\n   * The callback called when value of rating gauge changes on blur or Enter or click.\n   */\n  onCommit?: (detail: CommitDetail) => void;\n\n  /**\n   * The rating gauge tooltip. Tooltip is only used for read only rating gauges. If aria-label is not specified, tooltip will be used as the aria-label.\n   */\n  tooltip?: string;\n\n  /**\n   * The rating gauge datatip string. Datatip is used for interactive rating gauges.\n   */\n  datatip?: string;\n\n  /**\n   * A label to be used for accessibility purposes. Default label will be used if not provided. This will be used for the aria-label of the DOM element.\n   */\n  'aria-label'?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that label the rating gauge. This will be used for the aria-labelledby of the DOM element.\n   */\n  'aria-labelledby'?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that describe the rating gauge. This will be used for the aria-describedby of the DOM element.\n   */\n  'aria-describedby'?: string;\n\n  /**\n   * An array of Threshold objects.\n   * Applications are required to include information about thresholds for screen readers to make their component accessible by using aria-describedby, aria-labelledby or aria-label.\n   */\n  thresholds?: Threshold[];\n};\n\n/**\n * A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.\n */\nexport function RatingGauge({\n  max = 5,\n  value = 0,\n  size,\n  color = 'neutral',\n  step = 1,\n  isReadonly,\n  isDisabled,\n  testId,\n  ...props\n}: Props) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(0, max, value, step);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n\n  const isInteractive = !isReadonly && !isDisabled;\n\n  // Since the dimension are compute lazily after render, store width and x in ref\n  // This is used to identify hovered and clicked star.\n  // width of the rating gauge depends on size and max so passing them as dependencies for useEffect\n  useEffect(() => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  }, [size, max]);\n\n  const eventProps = useEvents(\n    max,\n    step,\n    value,\n    rootRef,\n    dimensionsRef,\n    isInteractive,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useRatingDatatip({\n    max,\n    value,\n    isDisabled,\n    isReadonly,\n    datatip: props.datatip,\n    thresholds: props.thresholds,\n    width: dimensionsRef.current.width\n  });\n\n  const { tooltipContent, tooltipProps } = useRatingTooltip({\n    isReadonly,\n    isDisabled,\n    tooltip: props.tooltip\n  });\n\n  const ariaProps = getMeterAriaProps(\n    value,\n    0,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds,\n    isReadonly,\n    isDisabled,\n    props.tooltip\n  );\n\n  const { 'aria-describedby': datatipAriaDescribedBy, ...restDatatipProps } = datatipProps;\n  const { 'aria-describedby': tooltipAriaDescribedBy, ...restTooltipProps } = tooltipProps;\n  const mergedEventProps = mergeProps(eventProps, restDatatipProps, restTooltipProps);\n\n  const ariaDescribedBy =\n    [datatipAriaDescribedBy, tooltipAriaDescribedBy, props['aria-describedby']]\n      .filter(Boolean)\n      .join(' ') || undefined;\n  const itemColor = getThresholdColorFromValue(value, color, props.thresholds);\n\n  const { isTabbable } = useTabbableMode();\n  const {\n    classes,\n    styles: { baseStyle, interactiveStyle, itemStyle, sizeStyle }\n  } = useComponentTheme<RatingGaugeVariantOptions, RatingGaugeStyles>(RatingGaugeRedwoodTheme, {\n    size\n  });\n\n  return (\n    <Fragment>\n      <div\n        {...testIdProps}\n        {...ariaProps}\n        ref={rootRef}\n        class={classNames([classes, baseStyle, isInteractive ? interactiveStyle : undefined])}\n        tabIndex={isTabbable && !isDisabled ? 0 : -1}\n        {...mergedEventProps}\n        aria-describedby={ariaDescribedBy}>\n        {[...Array(max)].map((_, index: number) => {\n          const fillRatio = Math.min(Math.max(0, value - index), 1);\n          return (\n            <div className={classNames([sizeStyle, itemStyle])}>\n              <RatingGaugeItem\n                fillRatio={fillRatio}\n                isDisabled={isDisabled}\n                isReadonly={isReadonly}\n                color={itemColor}\n              />\n            </div>\n          );\n        })}\n      </div>\n      {datatipContent}\n      {tooltipContent}\n    </Fragment>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport type { MutableRef } from 'preact/hooks';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getValue, getDimensions } from './ratingUtils';\nimport { CommitDetail, InputDetail } from '#utils/UNSAFE_meterUtils/meterTypes';\nimport { useKeyboardEvents } from '#hooks/PRIVATE_useVisMeterEvents';\n\nexport const useEvents = (\n  max: number,\n  step: number,\n  value: number,\n  rootRef: RefObject<HTMLElement>,\n  dimensionsRef: MutableRef<{ width: number; x: number }>,\n  isInteractive: boolean,\n  onCommit?: (detail: CommitDetail) => void,\n  onInput?: (detail: InputDetail) => void\n) => {\n  const currentInputRef = useRef<number>();\n  const { direction } = useUser();\n\n  const isRtl = direction === 'rtl';\n\n  const handleInput = (inputValue: number | undefined) => {\n    onInput?.({ value: inputValue } as InputDetail);\n    currentInputRef.current = inputValue;\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1) {\n      onCommit?.({ value: val } as CommitDetail);\n    }\n  };\n\n  // When the document or rating gauge parent scrolls, we need to update the dimensionRef.current.x.\n  // Instead of updating it for every scroll event, recalculate the dims the first time mouse enters\n  // so we get fresh dimension value.\n  const pointerEnterHandler = () => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1 && val != currentInputRef.current) {\n      handleInput(val);\n    }\n  };\n\n  const blurHandler = () => {\n    onCommit?.({ value: value } as CommitDetail);\n  };\n\n  const pointerLeaveHandler = () => {\n    handleInput(undefined);\n  };\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    0,\n    max,\n    step,\n    currentInputRef,\n    onCommit,\n    onInput\n  );\n\n  return isInteractive\n    ? {\n        onPointerUp: pointerUpHandler,\n        onBlur: blurHandler,\n        onPointerMove: hoverHandler,\n        onKeyUp: keyboardEventsProps.onKeyUp,\n        onKeyDown: keyboardEventsProps.onKeyDown,\n        onPointerLeave: pointerLeaveHandler,\n        onPointerEnter: pointerEnterHandler\n      }\n    : {};\n};\n","import { findThreshold } from '#utils/PRIVATE_meterUtils';\nimport { Threshold } from '#utils/UNSAFE_meterUtils';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\n\ntype Props = {\n  max: number;\n  value: number;\n  isDisabled?: boolean;\n  datatip?: string;\n  thresholds?: Threshold[];\n  width: number;\n  isReadonly?: boolean;\n};\n\nexport function useRatingDatatip({\n  max,\n  value,\n  isDisabled,\n  isReadonly,\n  datatip,\n  thresholds,\n  width\n}: Props) {\n  const datatipIndex = Math.max(1, Math.ceil(value));\n  const offset = ((datatipIndex - Math.ceil(max / 2)) * width) / max;\n\n  const datatipText =\n    !datatip && thresholds && !isDisabled\n      ? findThreshold(value, thresholds)?.accessibleLabel\n      : datatip;\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: isDisabled || isReadonly ? null : datatipText,\n    anchor: 'element',\n    offset: {\n      mainAxis: 8, // redwood datatip design spec\n      crossAxis: offset\n    },\n    placement: 'bottom',\n    touchResponse: 'touchStart'\n  });\n\n  return {\n    datatipContent,\n    datatipProps:\n      isReadonly && !isDisabled\n        ? {\n            'aria-describedby': undefined\n          }\n        : datatipProps\n  };\n}\n","import { useTooltip } from '#hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  isReadonly?: boolean;\n  isDisabled?: boolean;\n  tooltip?: string;\n};\n\nexport function useRatingTooltip({ isReadonly, isDisabled, tooltip }: Props) {\n  const text = isReadonly && !isDisabled ? tooltip : '';\n\n  const { tooltipContent, tooltipProps } = useTooltip({ text, isDisabled });\n\n  return {\n    tooltipContent,\n    tooltipProps:\n      !isDisabled && isReadonly\n        ? tooltipProps\n        : {\n            'aria-describedby': undefined\n          }\n  };\n}\n"],"names":["getValue","pageX","max","step","dimensionsRef","isRtl","dimensions","current","width","x","numSteps","Math","min","ceil","getDimensions","element","rect","getBoundingClientRect","window","scrollX","RatingStar","isSelected","isDisabled","isReadOnly","color","forcedColors","useUser","isHighContrast","needsHighContrastStyle","enumColor","undefined","getColorEnum","customColors","assignInlineVars","ratingGaugeVars","colorSelected","borderColorSelected","colorSelectedReadonly","variantClasses","styles","ratingStarBaseStyle","innerRatingStarColor","outerRatingStarColor","outerDisabledHighContrastBaseStyle","outerDisabledHighContrastSelectedStyle","outerDisabledHighContrastUnselectedStyle","useComponentTheme","RatingGaugeRedwoodTheme","selectionState","disabledState","readonlyState","highContrastState","_jsx","viewBox","height","style","class","classNames","children","_jsxs","jsx","d","RatingGaugeItem","fillRatio","isReadonly","direction","fractionalStarBaseStyle","jsxs","Fragment","clipPath","value","size","testId","props","testIdProps","useTestId","validateRange","rootRef","useRef","isInteractive","useEffect","eventProps","onCommit","onInput","currentInputRef","handleInput","inputValue","keyboardEventsProps","useKeyboardEvents","onPointerUp","event","val","onBlur","onPointerMove","onKeyUp","onKeyDown","onPointerLeave","onPointerEnter","useEvents","datatipContent","datatipProps","datatip","thresholds","offset","datatipText","findThreshold","accessibleLabel","useDatatip","content","anchor","mainAxis","crossAxis","placement","touchResponse","useRatingDatatip","tooltipContent","tooltipProps","tooltip","text","useTooltip","useRatingTooltip","ariaProps","getMeterAriaProps","datatipAriaDescribedBy","restDatatipProps","tooltipAriaDescribedBy","restTooltipProps","mergedEventProps","mergeProps","ariaDescribedBy","filter","Boolean","join","itemColor","getThresholdColorFromValue","isTabbable","useTabbableMode","classes","baseStyle","interactiveStyle","itemStyle","sizeStyle","ref","tabIndex","Array","map","_","index","className"],"mappings":"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"}