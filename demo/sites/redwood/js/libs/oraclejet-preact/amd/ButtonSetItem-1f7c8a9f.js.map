{"version":3,"file":"ButtonSetItem-1f7c8a9f.js","sources":["../../src/UNSAFE_ButtonSetItem/ButtonSetItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\n\nimport { ButtonSetButton } from '../UNSAFE_ButtonSetButton';\nimport { ButtonSetIconButton } from '../UNSAFE_ButtonSetIconButton';\nimport { useCallback } from 'preact/hooks';\n\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useButtonSetContext } from '../hooks/UNSAFE_useButtonSetContext';\nimport { useButtonSetPositionContext } from '../hooks/UNSAFE_useButtonSetPositionContext';\nimport { toggleButtonSetItem } from '#utils/UNSAFE_buttonUtils';\n\nexport type ButtonSetItemProps = TestIdProps & {\n  /**\n   * Value of the selected buttonSetItem option.\n   */\n  value: string;\n\n  /**\n   * label - label\n   */\n  label?: string;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * Specifies that the ButtonSetSingle element should be disabled.\n   */\n  isDisabled?: boolean;\n};\n\n/**\n * A ButtonSetItem specifies buttons for a buttonset.\n */\nexport const ButtonSetItem = ({ isDisabled: isPropsDisabled, ...props }: ButtonSetItemProps) => {\n  // The buttonSetItem context determines if a buttonset button or icon button rendered\n  // The buttonset context control provides variant, size, isItemDisabled, inputType, inputName. value\n  // The buttonset position control provides position, isSelected,\n  const {\n    display,\n    inputType,\n    isDisabled: isSetDisabled,\n    buttonSetValue,\n    onCommit,\n    ...buttonsetProps\n  } = useButtonSetContext();\n\n  const positionProps = useButtonSetPositionContext();\n  // The property isItemDisabled, if defined, overrides buttonSetItem settings.\n  const isItemDisabled = isPropsDisabled ?? isSetDisabled;\n  const iconProps = {\n    tooltip: props.label,\n    value: props.value\n  };\n\n  const isRadio = inputType === 'radio';\n\n  const onToggleHandlerSingle = useCallback(() => {\n    if (isRadio) {\n      onCommit?.({\n        previousValue: buttonSetValue,\n        value: [props.value]\n      });\n    }\n  }, [buttonSetValue, onCommit, isRadio, props.value]);\n\n  const onToggleHandlerMultiple = useCallback(() => {\n    if (!isRadio) {\n      const newButtonSetValue = toggleButtonSetItem(props.value, buttonSetValue);\n      onCommit?.({\n        previousValue: buttonSetValue,\n        value: newButtonSetValue\n      });\n    }\n  }, [buttonSetValue, onCommit, isRadio, props.value]);\n\n  // When toggled, the button invokes the buttonset commit, which can update the buttonset value, which then\n  // updates the buttonset context buttonSetValue causing this buttonSetItem to render appropriately.\n  return display === 'icons' ? (\n    <ButtonSetIconButton\n      isSelected={isButtonSetItemSelected(props.value, buttonSetValue)}\n      onToggle={isRadio ? onToggleHandlerSingle : onToggleHandlerMultiple}\n      isDisabled={isItemDisabled}\n      {...iconProps}\n      {...positionProps}\n      {...buttonsetProps}>\n      {props.startIcon}\n    </ButtonSetIconButton>\n  ) : (\n    <ButtonSetButton\n      isSelected={isButtonSetItemSelected(props.value, buttonSetValue)}\n      onToggle={isRadio ? onToggleHandlerSingle : onToggleHandlerMultiple}\n      isDisabled={isItemDisabled}\n      {...props}\n      {...positionProps}\n      {...buttonsetProps}></ButtonSetButton>\n  );\n};\n\n/**\n * Check if buttonSetValue contains the buttonSetItem.\n * Note the buttonSetValue can be a set of strings or a string, depending on whether a checkbox or\n * radio type is used.\n * @param buttonSetItemValue\n * @param buttonSetValue\n * @returns\n */\nfunction isButtonSetItemSelected(\n  buttonSetItemValue: string,\n  buttonSetValue: Array<string> | undefined\n): boolean {\n  if (!buttonSetValue) {\n    return false;\n  }\n  return buttonSetValue?.indexOf(buttonSetItemValue) > -1;\n}\n\nButtonSetItem.displayName = 'ButtonSetItem';\n"],"names":["ButtonSetItem","isDisabled","isPropsDisabled","props","display","inputType","isSetDisabled","buttonSetValue","onCommit","buttonsetProps","useButtonSetContext","positionProps","useButtonSetPositionContext","isItemDisabled","iconProps","tooltip","label","value","isRadio","onToggleHandlerSingle","useCallback","previousValue","onToggleHandlerMultiple","newButtonSetValue","toggleButtonSetItem","_jsx","ButtonSetIconButton","isSelected","isButtonSetItemSelected","onToggle","children","startIcon","ButtonSetButton","buttonSetItemValue","indexOf","displayName"],"mappings":"8SAgDa,MAAAA,EAAgB,EAAGC,WAAYC,KAAoBC,MAI9D,MAAMC,QACJA,EAAOC,UACPA,EACAJ,WAAYK,EAAaC,eACzBA,EAAcC,SACdA,KACGC,GACDC,EAAAA,sBAEEC,EAAgBC,EAAAA,8BAEhBC,EAAiBX,GAAmBI,EACpCQ,EAAY,CAChBC,QAASZ,EAAMa,MACfC,MAAOd,EAAMc,OAGTC,EAAwB,UAAdb,EAEVc,EAAwBC,EAAAA,aAAY,KACpCF,GACFV,IAAW,CACTa,cAAed,EACfU,MAAO,CAACd,EAAMc,QAEjB,GACA,CAACV,EAAgBC,EAAUU,EAASf,EAAMc,QAEvCK,EAA0BF,EAAAA,aAAY,KAC1C,IAAKF,EAAS,CACZ,MAAMK,EAAoBC,EAAmBA,oBAACrB,EAAMc,MAAOV,GAC3DC,IAAW,CACTa,cAAed,EACfU,MAAOM,GAEV,IACA,CAAChB,EAAgBC,EAAUU,EAASf,EAAMc,QAI7C,MAAmB,UAAZb,EACLqB,EAAAA,IAACC,EAAmBA,qBAClBC,WAAYC,EAAwBzB,EAAMc,MAAOV,GACjDsB,SAAUX,EAAUC,EAAwBG,EAC5CrB,WAAYY,KACRC,KACAH,KACAF,EACHqB,SAAA3B,EAAM4B,YAGTN,MAACO,kBAAe,CACdL,WAAYC,EAAwBzB,EAAMc,MAAOV,GACjDsB,SAAUX,EAAUC,EAAwBG,EAC5CrB,WAAYY,KACRV,KACAQ,KACAF,GACP,EAWH,SAASmB,EACPK,EACA1B,GAEA,QAAKA,GAGEA,GAAgB2B,QAAQD,IAAuB,CACxD,CAEAjC,EAAcmC,YAAc"}