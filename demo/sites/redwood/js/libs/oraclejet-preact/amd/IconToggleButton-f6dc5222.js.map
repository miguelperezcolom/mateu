{"version":3,"file":"IconToggleButton-f6dc5222.js","sources":["../../src/UNSAFE_IconToggleButton/IconToggleButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef, ElementRef } from 'preact/compat';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useToggleAction, ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { toggleStyling, processGlobals } from '#utils/UNSAFE_buttonUtils';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport type { ButtonIntrinsicProps } from '#utils/UNSAFE_buttonUtils';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type IconToggleButtonProps = ButtonIntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * Specifies the icon for the button.   This should not vary depending on state.\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     */\n    variant?: 'borderless' | 'outlined';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n  };\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * IconToggleButtons direct users to toggle a state with\n * a single tap, click, or keystroke.\n */\nexport const IconToggleButton = forwardRef(\n  (\n    {\n      children,\n      variant = 'outlined',\n      size = 'md',\n      isDisabled = false,\n      tooltip,\n      accessibleLabel,\n      isSelected = false,\n      onToggle,\n      testId,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: IconToggleButtonProps & VariationAccessibleLabelProps & TestIdProps,\n    ref: ForwardedRef<ButtonHandle>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n\n    const { triggerProps } = useToggleAction({\n      isDisabled: isDisabled,\n      onToggle: onToggle\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ?? accessibleLabel,\n      isDisabled: isDisabled\n    });\n\n    const styling = toggleStyling(\n      'auto',\n      isSelected,\n      false,\n      false,\n      variant === 'outlined',\n      undefined,\n      undefined,\n      true,\n      true\n    );\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, triggerProps, globalEventProps, ariaProps)}\n          variant={variant}\n          isDisabled={isDisabled}\n          size={size}\n          width={width}\n          aria-pressed={isSelected}\n          styling={styling}\n          ref={ref}\n          aria-label={accessibleLabel ?? tooltip}\n          testId={testId}>\n          <ToggleButtonLabel\n            onAction={() => onToggle?.({ value: isSelected })}\n            isDisabled={isDisabled}\n            display={'icons'}\n            startIcon={children}></ToggleButtonLabel>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconToggleButton.displayName = 'IconToggleButton';\n"],"names":["IconToggleButton","forwardRef","children","variant","size","isDisabled","tooltip","accessibleLabel","isSelected","onToggle","testId","ariaDescribedBy","width","props","ref","globalEventProps","processGlobals","triggerProps","useToggleAction","tooltipContent","tooltipProps","useTooltip","text","styling","toggleStyling","undefined","ariaProps","_jsxs","Fragment","_jsx","jsx","BaseButton","mergeProps","ToggleButtonLabel","onAction","value","display","startIcon","displayName"],"mappings":"2kBA6FaA,EAAmBC,EAAAA,YAC9B,EAEIC,WACAC,UAAU,WACVC,OAAO,KACPC,cAAa,EACbC,UACAC,kBACAC,cAAa,EACbC,WACAC,SACA,mBAAoBC,EACpBC,WACGC,GAELC,KAEA,MAAMC,iBAAEA,GAAqBC,EAAcA,eAACH,IAEtCI,aAAEA,GAAiBC,kBAAgB,CACvCb,WAAYA,EACZI,SAAUA,KAGNU,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMhB,GAAWC,EACjBF,WAAYA,IAGRkB,EAAUC,EAAaA,cAC3B,OACAhB,GACA,GACA,EACY,aAAZL,OACAsB,OACAA,GACA,GACA,GAGIC,EAAY,CAAE,mBAAoBf,GAExC,OACEgB,OAACC,EAAAA,oBACCC,EAACC,IAAAC,iBACKC,EAAUA,WAACZ,EAAcH,EAAcF,EAAkBW,GAC7DvB,QAASA,EACTE,WAAYA,EACZD,KAAMA,EACNQ,MAAOA,EAAK,eACEJ,EACde,QAASA,EACTT,IAAKA,EACO,aAAAP,GAAmBD,EAC/BI,OAAQA,WACRmB,EAAAA,IAACI,EAAAA,mBACCC,SAAU,IAAMzB,IAAW,CAAE0B,MAAO3B,IACpCH,WAAYA,EACZ+B,QAAS,QACTC,UAAWnC,MAEdiB,IAEH,IAINnB,EAAiBsC,YAAc"}