{"version":3,"file":"Button-29507a64.js","sources":["../../src/UNSAFE_Button/Button.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentChildren, ComponentProps, JSX } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { forwardRef, ForwardedRef, ElementRef } from 'preact/compat';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype IntrinsicProps = Pick<\n  UnpackSignals<JSX.HTMLAttributes<HTMLElement>>,\n  | 'autofocus'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\ntype Props = IntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * The startIcon is the button's start icon.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * The endIcon is the button's end icon.\n     */\n    endIcon?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * label - button label, used for accessibility if no override\n     */\n    label?: string;\n\n    /**\n     * aria-label - override label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variation. Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: ComponentProps<typeof BaseButton>['variant'];\n\n    /**\n     * The size indicates how large the button is rendered.\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right.\n     */\n    edge?: ComponentProps<typeof BaseButton>['edge'];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n\n    /**\n     * Display indicates whether only the label or all elements should be rendered by the button.\n     */\n    display?: 'label' | 'all';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n  };\n/**\n * A button is a pressable element that invokes an action.\n */\nexport const Button = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      isRepeat = false,\n      size = 'md',\n      display = 'all',\n      type: buttonType = 'button',\n      endIcon,\n      startIcon,\n      autofocus,\n      edge,\n      testId,\n      onAction,\n      label = '',\n      'aria-label': accessibleLabel,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart\n    }: Props,\n    ref: ForwardedRef<ButtonHandle>\n  ) => {\n    const labelOnly = (!startIcon && !endIcon) || display === 'label';\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n    const content = labelOnly ? (\n      label\n    ) : (\n      <ButtonLabelLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLabelLayout>\n    );\n\n    return (\n      <BaseButton\n        ref={ref}\n        elementDetails={elementDetails}\n        isDisabled={isDisabled}\n        isRepeat={isRepeat}\n        size={size}\n        width={width}\n        autofocus={autofocus}\n        edge={edge}\n        variant={variant}\n        styling={[labelOnly ? 'default' : 'min']}\n        onAction={onAction}\n        aria-label={accessibleLabel ?? label}\n        aria-describedby={ariaDescribedBy}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onTouchEnd={onTouchEnd}\n        onTouchStart={onTouchStart}\n        testId={testId}>\n        {content}\n      </BaseButton>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n"],"names":["Button","forwardRef","variant","isDisabled","isRepeat","size","display","type","buttonType","endIcon","startIcon","autofocus","edge","testId","onAction","label","accessibleLabel","ariaDescribedBy","width","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","ref","labelOnly","elementDetails","content","_jsx","jsx","ButtonLabelLayout","children","BaseButton","styling","displayName"],"mappings":"iJAmHO,MAAMA,EAASC,EAAUA,YAC9B,EAEIC,UAAU,WACVC,cAAa,EACbC,YAAW,EACXC,OAAO,KACPC,UAAU,MACVC,KAAMC,EAAa,SACnBC,UACAC,YACAC,YACAC,OACAC,SACAC,WACAC,QAAQ,GACR,aAAcC,EACd,mBAAoBC,EACpBC,QACAC,SACAC,UACAC,eACAC,eACAC,aACAC,gBAEFC,KAEA,MAAMC,GAAchB,IAAcD,GAAwB,UAAZH,EACxCqB,EAAiB,CACrBpB,KAAM,SACNC,WAAYA,GAERoB,EAAUF,IAGdG,EAAAC,IAACC,oBAAkB,CAAAzB,QAASA,EAASI,UAAWA,EAAWD,QAASA,EAASJ,KAAMA,EAAI2B,SACpFjB,IAIL,OACEc,MAACI,EAAAA,WAAU,CACTR,IAAKA,EACLE,eAAgBA,EAChBxB,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNa,MAAOA,EACPP,UAAWA,EACXC,KAAMA,EACNV,QAASA,EACTgC,QAAS,CAACR,EAAY,UAAY,OAClCZ,SAAUA,EACE,aAAAE,GAAmBD,EAAK,mBAClBE,EAClBE,OAAQA,EACRC,QAASA,EACTC,aAAcA,EACdC,aAAcA,EACdC,WAAYA,EACZC,aAAcA,EACdX,OAAQA,EACPmB,SAAAJ,GAEH,IAIN5B,EAAOmC,YAAc"}