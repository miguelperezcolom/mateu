{"version":3,"file":"clientHints-6d361eaa.js","sources":["../../src/utils/PRIVATE_clientHints/clientHints.ts"],"sourcesContent":["// Typescript does not support NavigatorUAData in its DOM lib,\n// therefore we declare our own type - see:\n//    https://wicg.github.io/ua-client-hints/#interface\ntype NavigatorUAData = {\n  brands: Array<{ brand: string; version: string }>;\n  mobile: boolean;\n  platform: string;\n};\n\n// Enum types\ntype ClientBrowser = 'chrome' | 'edge' | 'firefox' | 'safari' | 'unknown';\n\ntype ClientDeviceType = 'phone' | 'tablet' | 'unknown';\n\ntype ClientPlatform = 'android' | 'ios' | 'mac' | 'windows' | 'unknown';\n\ntype ClientTouchSupport = 'none' | 'primary' | 'secondary' | 'unknown';\n\ntype ClientHoverSupport = 'none' | 'pseudo-classes' | 'events' | 'unknown';\n\nexport type ClientHints = {\n  browser: ClientBrowser;\n  browserMajorVersion: number;\n  deviceType: ClientDeviceType;\n  platform: ClientPlatform;\n  touchSupport: ClientTouchSupport;\n  hoverSupport: ClientHoverSupport;\n  deviceRenderMode: ClientDeviceType; // app override of component render mode based on device (defaults to 'deviceType')\n};\n\nconst defaultClientHintValues: Partial<ClientHints> = {\n  browser: 'unknown',\n  browserMajorVersion: -1,\n  deviceType: 'unknown',\n  platform: 'unknown',\n  touchSupport: 'unknown',\n  hoverSupport: 'unknown'\n};\n\nfunction createDefaultClientHints(): ClientHints {\n  const hints = { ...defaultClientHintValues };\n  return Object.defineProperty(hints, 'deviceRenderMode', {\n    enumerable: true,\n    get() {\n      return getDeviceTypeOverride() ?? this.deviceType;\n    }\n  }) as ClientHints;\n}\n\nlet cachedClientHints: ClientHints;\n\nexport function getClientHints(uaString?: string): Readonly<ClientHints> {\n  // Compute if there is no cached result, OR if a UserAgent string\n  //  was passed in as an argument\n  if (cachedClientHints === undefined || uaString) {\n    let hints: ClientHints;\n\n    if (uaString) {\n      // Compute hints based upon a one-off UserAgent string\n      // without touching the cache\n      hints = createHintsFromUserAgentString(uaString);\n      return hints;\n    } else {\n      // NOTE:  userAgentData only available from modern Chromium-based browsers\n      //        executing in a secure context - otherwise, fall back to processing\n      //        the system UserAgent string\n      const userAgentData = (navigator as any)?.['userAgentData'] as NavigatorUAData;\n      hints = userAgentData\n        ? createHintsFromUserAgentData(userAgentData)\n        : createHintsFromUserAgentString(navigator?.userAgent ?? '');\n\n      // Since the hints were computed from Navigator properties:\n      //    * determine touchSupport, hoverSupport\n      //    * cache the results\n      // NOTE:  Order is important (determination of hoverSupport depends upon touchSupport)\n      determineTouchSupport(hints);\n      determineHoverSupport(hints);\n      cachedClientHints = hints;\n      Object.freeze(cachedClientHints);\n    }\n  }\n  return cachedClientHints;\n}\n\nfunction createHintsFromUserAgentData(userAgentData: NavigatorUAData): Readonly<ClientHints> {\n  const hints = createDefaultClientHints();\n\n  // Loop through brands => browser, browserMajorVersion\n  for (const item of userAgentData.brands) {\n    const brand = item.brand.toLowerCase();\n    if (brand.indexOf('chrome') > -1) {\n      hints.browser = 'chrome';\n    } else if (brand.indexOf('edge') > -1) {\n      hints.browser = 'edge';\n    }\n    if (hints.browser !== 'unknown') {\n      hints.browserMajorVersion = Number(item.version);\n      break;\n    }\n  }\n\n  // Set deviceType, platform\n  const platform = userAgentData.platform.toLowerCase();\n  if (platform === 'windows') {\n    hints.platform = 'windows';\n  } else if (platform === 'android') {\n    hints.platform = 'android';\n    hints.deviceType = userAgentData.mobile ? 'phone' : 'tablet';\n  } else if (platform === 'macos') {\n    hints.platform = 'mac';\n  }\n  // TODO: Verify userAgentData support in Chrome on iPhone/iPad when available\n  /*\n  else if (platform.indexOf('iphone') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'phone';\n  } else if (platform.indexOf('ipad') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'tablet';\n  } else if (platform.indexOf('ios') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = (userAgentData.mobile ? 'phone' : 'tablet');\n  }\n  */\n  return hints;\n}\n\nfunction createHintsFromUserAgentString(userAgent: string): Readonly<ClientHints> {\n  const hints = createDefaultClientHints();\n\n  // Normalize the userAgent string\n  userAgent = userAgent.toLowerCase();\n\n  // Check platform, deviceType\n  if (userAgent.indexOf('iphone') > -1) {\n    hints.platform = 'ios';\n    hints.deviceType = 'phone';\n  } else if (\n    userAgent.indexOf('ipad') > -1 ||\n    // handle iPad/iPhone safari requesting desktop version of site\n    (userAgent.indexOf('macintosh') > -1 && navigator?.maxTouchPoints > 0)\n  ) {\n    hints.platform = 'ios';\n    hints.deviceType = 'tablet';\n  } else if (userAgent.indexOf('macintosh') > -1) {\n    hints.platform = 'mac';\n  } else if (userAgent.indexOf('android') > -1) {\n    hints.platform = 'android';\n    // add check for device type (based upon legacy AgentUtils logic)\n    hints.deviceType = userAgent.indexOf('mobile') > -1 ? 'phone' : 'tablet';\n  } else if (userAgent.indexOf('windows') > -1) {\n    hints.platform = 'windows';\n  }\n\n  // Now work on browser, browserMajorVersion\n  if (userAgent.indexOf('edg') > -1) {\n    hints.browser = 'edge';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /edg\\/(\\d+)/);\n  } else if (userAgent.indexOf('chrome') > -1) {\n    hints.browser = 'chrome';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /chrome\\/(\\d+)/);\n  } else if (userAgent.indexOf('crios') > -1) {\n    hints.browser = 'chrome';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /crios\\/(\\d+)/);\n  } else if (userAgent.indexOf('fxios') > -1) {\n    hints.browser = 'firefox';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /fxios\\/(\\d+)/);\n  } else if (userAgent.indexOf('firefox') > -1) {\n    hints.browser = 'firefox';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /rv:(\\d+)/);\n  } else if (userAgent.indexOf('safari') > -1) {\n    hints.browser = 'safari';\n    hints.browserMajorVersion = parseMajorVersion(userAgent, /version\\/(\\d+)/);\n  }\n\n  return hints;\n}\n\nfunction parseMajorVersion(userAgent: string, majorVersionPattern: RegExp): number {\n  let majorVer;\n  const matches = userAgent.match(majorVersionPattern);\n  if (matches) {\n    const majorVerString = matches[1];\n    if (majorVerString) {\n      majorVer = parseInt(majorVerString);\n    }\n  }\n  return majorVer ?? -1;\n}\n\nfunction determineTouchSupport(hints: ClientHints): void {\n  // if no global window object, or if ontouchstart handler not supported & no touch points,\n  // then no touch support\n  if (\n    typeof window === 'undefined' ||\n    (!('ontouchstart' in window) && navigator.maxTouchPoints === 0)\n  ) {\n    hints.touchSupport = 'none';\n  }\n  // otherwise if primary input pointer is 'coarse', then touch is the primary input method\n  else if (window.matchMedia?.('(pointer: coarse)').matches) {\n    hints.touchSupport = 'primary';\n  }\n  // otherwise if ANY input pointer is 'coarse', then touch is a secondary input method\n  else if (window.matchMedia?.('(any-pointer: coarse)').matches) {\n    hints.touchSupport = 'secondary';\n  }\n\n  // NOTES:\n  //  - Pixel 7 devices have a bug (https://bugs.chromium.org/p/chromium/issues/detail?id=1384181) whereby\n  //    ALL pointer media queries return 'fine', causing us to report hints.touchSupport as 'unknown'.\n}\n\nfunction determineHoverSupport(hints: ClientHints): void {\n  // if no global window object, or if primary input does not support hover, then specify no hover support\n  if (typeof window === 'undefined' || window.matchMedia?.('(hover: none)').matches) {\n    hints.hoverSupport = 'none';\n  }\n  // otherwise primary input must support hover - if there is some level of touch support and the primary\n  // input pointer is 'fine' (indicating the presence of a hover-able pointer), then component code\n  // should use event listeners to implement hover support\n  else if (hints.touchSupport !== 'none' && window.matchMedia?.('(pointer: fine)').matches) {\n    hints.hoverSupport = 'events';\n  }\n  // otherwise specify that component code can assume native CSS support for hover\n  else {\n    hints.hoverSupport = 'pseudo-classes';\n  }\n}\n\n// Returns an application-level override for getClientHints().deviceType\n//\n// For background, see oj.Config.getDeviceRenderMode() -\n//  https://jet.oraclecorp.com/trunk/jsdocs/oj.Config.html#.getDeviceRenderMode\n//\nfunction getDeviceTypeOverride(): ClientDeviceType | null {\n  // Check whether the application has specified an override attribute on the document body\n  let deviceOverride = document.body.getAttribute('data-oj-device-render-mode');\n  if (deviceOverride && !(deviceOverride === 'phone' || deviceOverride === 'tablet')) {\n    deviceOverride = null;\n  }\n  return deviceOverride as ReturnType<typeof getDeviceTypeOverride>;\n}\n"],"names":["defaultClientHintValues","browser","browserMajorVersion","deviceType","platform","touchSupport","hoverSupport","createDefaultClientHints","hints","Object","defineProperty","enumerable","get","deviceOverride","document","body","getAttribute","getDeviceTypeOverride","this","cachedClientHints","createHintsFromUserAgentString","userAgent","toLowerCase","indexOf","navigator","maxTouchPoints","parseMajorVersion","majorVersionPattern","majorVer","matches","match","majorVerString","parseInt","uaString","undefined","userAgentData","item","brands","brand","Number","version","mobile","createHintsFromUserAgentData","window","matchMedia","determineTouchSupport","determineHoverSupport","freeze"],"mappings":"6CA8BA,MAAMA,EAAgD,CACpDC,QAAS,UACTC,qBAAsB,EACtBC,WAAY,UACZC,SAAU,UACVC,aAAc,UACdC,aAAc,WAGhB,SAASC,IACP,MAAMC,EAAQ,IAAKR,GACnB,OAAOS,OAAOC,eAAeF,EAAO,mBAAoB,CACtDG,YAAY,EACZ,GAAAC,GACE,OA+LN,WAEE,IAAIC,EAAiBC,SAASC,KAAKC,aAAa,8BAC5CH,GAAuC,UAAnBA,GAAiD,WAAnBA,IACpDA,EAAiB,MAEnB,OAAOA,CACT,CAtMaI,IAA2BC,KAAKf,UACxC,GAEL,CAEA,IAAIgB,EA8EJ,SAASC,EAA+BC,GACtC,MAAMb,EAAQD,IA+Cd,OA5CAc,EAAYA,EAAUC,eAGRC,QAAQ,WAAa,GACjCf,EAAMJ,SAAW,MACjBI,EAAML,WAAa,SAEnBkB,EAAUE,QAAQ,SAAW,GAE5BF,EAAUE,QAAQ,cAAgB,GAAKC,WAAWC,eAAiB,GAEpEjB,EAAMJ,SAAW,MACjBI,EAAML,WAAa,UACVkB,EAAUE,QAAQ,cAAgB,EAC3Cf,EAAMJ,SAAW,MACRiB,EAAUE,QAAQ,YAAc,GACzCf,EAAMJ,SAAW,UAEjBI,EAAML,WAAakB,EAAUE,QAAQ,WAAa,EAAI,QAAU,UACvDF,EAAUE,QAAQ,YAAc,IACzCf,EAAMJ,SAAW,WAIfiB,EAAUE,QAAQ,QAAU,GAC9Bf,EAAMP,QAAU,OAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,eAChDA,EAAUE,QAAQ,WAAa,GACxCf,EAAMP,QAAU,SAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,kBAChDA,EAAUE,QAAQ,UAAY,GACvCf,EAAMP,QAAU,SAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,iBAChDA,EAAUE,QAAQ,UAAY,GACvCf,EAAMP,QAAU,UAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,iBAChDA,EAAUE,QAAQ,YAAc,GACzCf,EAAMP,QAAU,UAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,aAChDA,EAAUE,QAAQ,WAAa,IACxCf,EAAMP,QAAU,SAChBO,EAAMN,oBAAsBwB,EAAkBL,EAAW,mBAGpDb,CACT,CAEA,SAASkB,EAAkBL,EAAmBM,GAC5C,IAAIC,EACJ,MAAMC,EAAUR,EAAUS,MAAMH,GAChC,GAAIE,EAAS,CACX,MAAME,EAAiBF,EAAQ,GAC3BE,IACFH,EAAWI,SAASD,GAEvB,CACD,OAAOH,IAAa,CACtB,kBAzIM,SAAyBK,GAG7B,QAA0BC,IAAtBf,GAAmCc,EAAU,CAC/C,IAAIzB,EAEJ,GAAIyB,EAIF,OADAzB,EAAQY,EAA+Ba,GAChCzB,EACF,CAIL,MAAM2B,EAAiBX,WAAmC,cAC1DhB,EAAQ2B,EAiBd,SAAsCA,GACpC,MAAM3B,EAAQD,IAGd,IAAK,MAAM6B,KAAQD,EAAcE,OAAQ,CACvC,MAAMC,EAAQF,EAAKE,MAAMhB,cAMzB,GALIgB,EAAMf,QAAQ,WAAa,EAC7Bf,EAAMP,QAAU,SACPqC,EAAMf,QAAQ,SAAW,IAClCf,EAAMP,QAAU,QAEI,YAAlBO,EAAMP,QAAuB,CAC/BO,EAAMN,oBAAsBqC,OAAOH,EAAKI,SACxC,KACD,CACF,CAGD,MAAMpC,EAAW+B,EAAc/B,SAASkB,cACvB,YAAblB,EACFI,EAAMJ,SAAW,UACK,YAAbA,GACTI,EAAMJ,SAAW,UACjBI,EAAML,WAAagC,EAAcM,OAAS,QAAU,UAC9B,UAAbrC,IACTI,EAAMJ,SAAW,OAenB,OAAOI,CACT,CAzDUkC,CAA6BP,GAC7Bf,EAA+BI,WAAWH,WAAa,IAyHjE,SAA+Bb,GAIT,oBAAXmC,UACJ,iBAAkBA,SAAwC,IAA7BnB,UAAUC,eAE1CjB,EAAMH,aAAe,OAGdsC,OAAOC,aAAa,qBAAqBf,QAChDrB,EAAMH,aAAe,UAGdsC,OAAOC,aAAa,yBAAyBf,UACpDrB,EAAMH,aAAe,YAMzB,CAxIMwC,CAAsBrC,GA0I5B,SAA+BA,GAEP,oBAAXmC,QAA0BA,OAAOC,aAAa,iBAAiBf,QACxErB,EAAMF,aAAe,OAKS,SAAvBE,EAAMH,cAA2BsC,OAAOC,aAAa,mBAAmBf,QAC/ErB,EAAMF,aAAe,SAIrBE,EAAMF,aAAe,gBAEzB,CAxJMwC,CAAsBtC,GACtBW,EAAoBX,EACpBC,OAAOsC,OAAO5B,EACf,CACF,CACD,OAAOA,CACT"}