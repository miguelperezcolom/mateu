{"version":3,"file":"TabBar-fa06f492.js","sources":["../../src/UNSAFE_TabBar/TabBar.tsx"],"sourcesContent":["import type { ComponentChildren, Ref, RefObject } from 'preact';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { TabBarContext, TabBarLayout, TabBarContextMenuConfig } from '../UNSAFE_TabBarCommon';\nimport { styles } from './themes/TabBarStyles.css';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\nimport { forwardRef } from 'preact/compat';\nimport { TabBarContextMenu } from './TabBarContextMenu';\nexport {\n  TabBarItem,\n  RemovableTabBarItem,\n  OverflowTabBarItem,\n  TabBarContext,\n  useTabBarContext,\n  TabBarLayout,\n  useProgressiveTruncation,\n  TabBarLinkItem\n} from '../UNSAFE_TabBarCommon';\n\n/**\n * type for payload of current key change event handler\n */\nexport type CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of remove event handler\n */\ntype RemoveDetail<K> = {\n  value: K;\n};\n\ntype DisplayProps =\n  | {\n      /**\n       * Controls the content layout of the TabBarItem: 'standard' lays out the contents horizontally,\n       *'icons' hides the label,\n       */\n      display?: 'standard' | 'icons';\n      /**\n       *  The size indicates how tall the TabBarItem is rendered.\n       *  Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      size?: 'md' | 'lg';\n    }\n  | {\n      /**\n       *'stacked' stacks the icon on top of the label.\n       * Note: It is not possible to specify 'size' when 'display=\"stacked\".\n       */\n      display?: 'stacked';\n      size?: 'never';\n    };\n\nexport type TabBarProps<K extends string | number> = DisplayProps & {\n  /**\n   * A set of TabBarItem(s) that TabBar will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Whether to stretch the tab bar items to occupy available space or to condense items\n   */\n  layout?: 'stretch' | 'condense';\n  /**\n   * The position of the TabBar. Valid Values: top and bottom.\n   * 'top' is used when TabBar is placed on top of content section and the selection\n   *  indicator would be placed below the TabBarItem.\n   * 'bottom' is used when TabBar is placed on bottom of content section and the selection\n   *  indicator would be placed above the TabBarItem.\n   */\n  edge?: 'top' | 'bottom';\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when user selects a tab.\n   * The callback is also invoked when a user selects a tab that is already selected.\n   */\n  onSelect?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Callback function to handle remove\n   */\n  onRemove?: <K extends string | number>(detail: RemoveDetail<K>) => void;\n  /**\n   * Accepts the ID of an element that provides instructions for interaction with the TabBar.\n   */\n  'aria-describedby'?: string;\n  /**\n   * An aria-label which defines a string value that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBar.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBar accessible.\n   */\n  'aria-labelledby'?: string;\n\n  /**\n   * Configuration used to specify a context menu.\n   */\n  contextMenuConfig?: TabBarContextMenuConfig<K>;\n};\n/**\n * A tab bar allows navigation between different content sections.\n */\nexport const TabBar = forwardRef(\n  <K extends string | number>(\n    {\n      children,\n      layout = 'stretch',\n      display = 'standard',\n      size = 'md',\n      edge = 'top',\n      selection,\n      onSelect,\n      onRemove,\n      'aria-describedby': ariaDescribedBy,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      contextMenuConfig\n    }: TabBarProps<K> & TestIdProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    const rootRef = ref as RefObject<HTMLDivElement>;\n\n    const {\n      rootProps,\n      tabBarContext,\n      menuProps,\n      contextMenuContext,\n      contextMenuDescription,\n      contextMenuDescriptionId,\n      accStatusInfo\n    } = useTabBar({\n      class: styles.tabBarBase,\n      edge: edge,\n      onRemove,\n      onSelect,\n      ref: rootRef,\n      selection,\n      size,\n      children,\n      contextMenuConfig\n    });\n\n    const isContextMenuAvailable = contextMenuConfig != null;\n\n    return (\n      <>\n        <TabBarContext.Provider value={tabBarContext}>\n          <div\n            {...rootProps}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledby}\n            aria-haspopup={contextMenuConfig != null ? true : false}\n            aria-describedby={\n              contextMenuConfig && contextMenuDescriptionId\n                ? ariaDescribedBy\n                  ? `${ariaDescribedBy} ${contextMenuDescriptionId}`\n                  : contextMenuDescriptionId\n                : ariaDescribedBy\n            }>\n            <TabBarLayout layout={layout} display={display}>\n              {children}\n            </TabBarLayout>\n          </div>\n        </TabBarContext.Provider>\n        {isContextMenuAvailable && contextMenuDescriptionId && (\n          <span id={contextMenuDescriptionId}>\n            <HiddenAccessible>{contextMenuDescription}</HiddenAccessible>\n          </span>\n        )}\n        {isContextMenuAvailable && accStatusInfo && <LiveRegion>{accStatusInfo}</LiveRegion>}\n        {isContextMenuAvailable && (\n          <TabBarContextMenu\n            {...menuProps}\n            contextMenuConfig={contextMenuConfig}\n            contextMenuContext={contextMenuContext!}\n          />\n        )}\n      </>\n    );\n  }\n);\n"],"names":["TabBar","forwardRef","children","layout","display","size","edge","selection","onSelect","onRemove","ariaDescribedBy","ariaLabel","ariaLabelledby","contextMenuConfig","ref","rootRef","rootProps","tabBarContext","menuProps","contextMenuContext","contextMenuDescription","contextMenuDescriptionId","accStatusInfo","useTabBar","class","styles","tabBarBase","isContextMenuAvailable","_jsxs","jsxs","_Fragment","Fragment","_jsx","TabBarContext","Provider","value","jsx","TabBarLayout","id","HiddenAccessible","LiveRegion","TabBarContextMenu"],"mappings":"swCAqHa,MAAAA,EAASC,EAAUA,YAC9B,EAEIC,WACAC,SAAS,UACTC,UAAU,WACVC,OAAO,KACPC,OAAO,MACPC,YACAC,WACAC,WACA,mBAAoBC,EACpB,aAAcC,EACd,kBAAmBC,EACnBC,qBAEFC,KAEA,MAAMC,EAAUD,GAEVE,UACJA,EAASC,cACTA,EAAaC,UACbA,EAASC,mBACTA,EAAkBC,uBAClBA,EAAsBC,yBACtBA,EAAwBC,cACxBA,GACEC,YAAU,CACZC,MAAOC,EAAMA,OAACC,WACdpB,KAAMA,EACNG,WACAD,WACAM,IAAKC,EACLR,YACAF,OACAH,WACAW,sBAGIc,EAA8C,MAArBd,EAE/B,OACEe,EAAAC,KAAAC,EAAAC,SAAA,CAAA7B,SAAA,CACE8B,EAAAA,IAACC,EAAAA,cAAcC,SAAQ,CAACC,MAAOlB,EAAaf,SAC1C8B,EACMI,IAAA,MAAA,IAAApB,eACQL,EAAS,kBACJC,EAAc,gBACK,MAArBC,EAEb,mBAAAA,GAAqBQ,EACjBX,EACE,GAAGA,KAAmBW,IACtBA,EACFX,EAENR,SAAA8B,MAACK,EAAAA,aAAY,CAAClC,OAAQA,EAAQC,QAASA,EACpCF,SAAAA,QAINyB,GAA0BN,GACzBW,MAAM,OAAA,CAAAM,GAAIjB,EACRnB,SAAA8B,EAAAA,IAACO,EAAAA,iBAAkB,CAAArC,SAAAkB,MAGtBO,GAA0BL,GAAiBU,EAACI,IAAAI,aAAY,CAAAtC,SAAAoB,IACxDK,GACCK,EAAAA,IAACS,EAAiBA,kBACZ,IAAAvB,EACJL,kBAAmBA,EACnBM,mBAAoBA,MAI1B"}