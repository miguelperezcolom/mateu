{"version":3,"file":"ButtonsetMultipleWebElementBase.js","sourceRoot":"","sources":["ButtonsetMultipleWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,+BAAgC,SAAQ,uBAAY;IAC/D;;;;;OAKG;IACI,WAAW,CAAC,KAAoB;QACrC,OAAO,IAAI,CAAC,WAAW,CAAgB,OAAO,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAgB,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAe,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAU,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAkB,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAkB,UAAU,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;CACF;AApGD,0EAoGC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-buttonset-multiple WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, ButtonsetMultipleWebElement.ts.\n */\nexport class ButtonsetMultipleWebElementBase extends OjWebElement {\n  /**\n   * Sets the value of <code>value</code> property.\n   * Specifies which toggle button is selected\n   * @param value The value to set for <code>value</code>\n   *\n   */\n  public changeValue(value: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('value', value);\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * Specifies which toggle button is selected\n   * @return The value of <code>value</code> property.\n   *\n   */\n  public getValue(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('value');\n  }\n\n  /**\n   * Gets the value of <code>items</code> property.\n   * Specifies the toggle buttons rendered by the buttonset.\n   * @return The value of <code>items</code> property.\n   *\n   */\n  public getItems(): Promise<Array<Items>> {\n    return this.getProperty<Array<Items>>('items');\n  }\n\n  /**\n   * Gets the value of <code>display</code> property.\n   * Display just the label, the icons, or all.\n   * @return The value of <code>display</code> property.\n   *\n   */\n  public getDisplay(): Promise<string> {\n    return this.getProperty<string>('display');\n  }\n\n  /**\n   * Gets the value of <code>disabled</code> property.\n   * Specifies that the buttonset should be disabled.\n   * @return The value of <code>disabled</code> property.\n   *\n   */\n  public getDisabled(): Promise<boolean> {\n    return this.getProperty<boolean>('disabled');\n  }\n\n  /**\n   * Gets the value of <code>size</code> property.\n   * Specifies the size of the toggle buttons\n   * @return The value of <code>size</code> property.\n   *\n   */\n  public getSizeProperty(): Promise<string> {\n    return this.getProperty<string>('size');\n  }\n\n  /**\n   * Gets the value of <code>width</code> property.\n   * Specifies the buttonset width\n   * @return The value of <code>width</code> property.\n   *\n   */\n  public getWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('width');\n  }\n\n  /**\n   * Gets the value of <code>maxWidth</code> property.\n   * Specifies the buttonset max width\n   * @return The value of <code>maxWidth</code> property.\n   *\n   */\n  public getMaxWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('maxWidth');\n  }\n\n  /**\n   * Gets the value of <code>chroming</code> property.\n   * Indicates in what states the button has chromings in background and border.\n   * @return The value of <code>chroming</code> property.\n   *\n   */\n  public getChroming(): Promise<string> {\n    return this.getProperty<string>('chroming');\n  }\n\n  /**\n   * Gets the value of <code>layoutWidth</code> property.\n   * Specifies if button width should be equal or based on contents.\n   * @return The value of <code>layoutWidth</code> property.\n   *\n   */\n  public getLayoutWidth(): Promise<string> {\n    return this.getProperty<string>('layoutWidth');\n  }\n}\nexport interface Items {\n  /**\n   * The toggle item label.\n   */\n  label: string;\n  /**\n   * The toggle item value.\n   */\n  value: string;\n  /**\n   * Specifies if the toggle item is disabled (enabled by default).\n   */\n  disabled: boolean;\n  /**\n   * Optional icon to render at the start of the toggle item.\n   */\n  startIcon: object;\n  /**\n   * Optional icon to render at the end of the toggle item.\n   */\n  endIcon: object;\n}\n"]}