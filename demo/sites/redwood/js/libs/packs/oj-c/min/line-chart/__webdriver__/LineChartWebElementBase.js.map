{"version":3,"file":"LineChartWebElementBase.js","sourceRoot":"","sources":["LineChartWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,uBAAwB,SAAQ,uBAAY;IACvD;;;;;OAKG;IACI,kBAAkB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAO,iBAAiB,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAS,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,aAAa;QAClB,OAAO,IAAI,CAAC,WAAW,CAAS,YAAY,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAS,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAQ,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAQ,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAW,UAAU,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAe,cAAc,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAgB,eAAe,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAO,kBAAkB,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,WAAW,CAAO,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,eAAe,CAAC,SAAiC;QACtD,OAAO,IAAI,CAAC,WAAW,CAAyB,WAAW,EAAE,SAAS,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAyB,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,sBAAsB,CAAC,gBAA+B;QAC3D,OAAO,IAAI,CAAC,WAAW,CAAgB,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAgB,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACI,2BAA2B,CAAC,qBAAoC;QACrE,OAAO,IAAI,CAAC,WAAW,CAAgB,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;IACzF,CAAC;IAED;;;;;OAKG;IACI,wBAAwB;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAgB,uBAAuB,CAAC,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAS,qBAAqB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAS,gBAAgB,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,oBAAoB;QACzB,OAAO,IAAI,CAAC,WAAW,CAAoB,mBAAmB,CAAC,CAAC;IAClE,CAAC;CACF;AAlSD,0DAkSC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-line-chart WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, LineChartWebElement.ts.\n */\nexport class LineChartWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>groupComparator</code> property.\n   * A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.\n   * @return The value of <code>groupComparator</code> property.\n   *\n   */\n  public getGroupComparator(): Promise<null> {\n    return this.getProperty<null>('groupComparator');\n  }\n\n  /**\n   * Gets the value of <code>stack</code> property.\n   * Defines whether the data items are stacked.\n   * @return The value of <code>stack</code> property.\n   *\n   */\n  public getStack(): Promise<string> {\n    return this.getProperty<string>('stack');\n  }\n\n  /**\n   * Gets the value of <code>drilling</code> property.\n   * Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an &lt;code class=\"prettyprint\">ojDrill&lt;/code> event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.\n   * @return The value of <code>drilling</code> property.\n   *\n   */\n  public getDrilling(): Promise<string> {\n    return this.getProperty<string>('drilling');\n  }\n\n  /**\n   * Gets the value of <code>orientation</code> property.\n   * The orientation of the chart.\n   * @return The value of <code>orientation</code> property.\n   *\n   */\n  public getOrientation(): Promise<string> {\n    return this.getProperty<string>('orientation');\n  }\n\n  /**\n   * Gets the value of <code>splitDualY</code> property.\n   * Defines whether the plot area is split into two sections.\n   * @return The value of <code>splitDualY</code> property.\n   *\n   */\n  public getSplitDualY(): Promise<string> {\n    return this.getProperty<string>('splitDualY');\n  }\n\n  /**\n   * Gets the value of <code>splitterPosition</code> property.\n   * Specifies the fraction of the space that is given to the Y-axis subchart.\n   * @return The value of <code>splitterPosition</code> property.\n   *\n   */\n  public getSplitterPosition(): Promise<number> {\n    return this.getProperty<number>('splitterPosition');\n  }\n\n  /**\n   * Gets the value of <code>timeAxisType</code> property.\n   * The time axis type of the chart x axis.\n   * @return The value of <code>timeAxisType</code> property.\n   *\n   */\n  public getTimeAxisType(): Promise<string> {\n    return this.getProperty<string>('timeAxisType');\n  }\n\n  /**\n   * Gets the value of <code>yAxis</code> property.\n   * The yAxis options for the chart.\n   * @return The value of <code>yAxis</code> property.\n   *\n   */\n  public getYAxis(): Promise<YAxis> {\n    return this.getProperty<YAxis>('yAxis');\n  }\n\n  /**\n   * Gets the value of <code>y2Axis</code> property.\n   * The y2Axis options for the chart.\n   * @return The value of <code>y2Axis</code> property.\n   *\n   */\n  public getY2Axis(): Promise<Y2Axis> {\n    return this.getProperty<Y2Axis>('y2Axis');\n  }\n\n  /**\n   * Gets the value of <code>xAxis</code> property.\n   * The xAxis options for the chart.\n   * @return The value of <code>xAxis</code> property.\n   *\n   */\n  public getXAxis(): Promise<XAxis> {\n    return this.getProperty<XAxis>('xAxis');\n  }\n\n  /**\n   * Gets the value of <code>plotArea</code> property.\n   * The plot area of the chart.\n   * @return The value of <code>plotArea</code> property.\n   *\n   */\n  public getPlotArea(): Promise<PlotArea> {\n    return this.getProperty<PlotArea>('plotArea');\n  }\n\n  /**\n   * Gets the value of <code>zoomAndScroll</code> property.\n   * The zoom and scroll behavior.\n   * @return The value of <code>zoomAndScroll</code> property.\n   *\n   */\n  public getZoomAndScroll(): Promise<string> {\n    return this.getProperty<string>('zoomAndScroll');\n  }\n\n  /**\n   * Gets the value of <code>valueFormats</code> property.\n   * An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.\n   * @return The value of <code>valueFormats</code> property.\n   *\n   */\n  public getValueFormats(): Promise<ValueFormats> {\n    return this.getProperty<ValueFormats>('valueFormats');\n  }\n\n  /**\n   * Gets the value of <code>styleDefaults</code> property.\n   * An object specifying default styles for chart style attributes..\n   * @return The value of <code>styleDefaults</code> property.\n   *\n   */\n  public getStyleDefaults(): Promise<StyleDefaults> {\n    return this.getProperty<StyleDefaults>('styleDefaults');\n  }\n\n  /**\n   * Gets the value of <code>seriesComparator</code> property.\n   * A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.\n   * @return The value of <code>seriesComparator</code> property.\n   *\n   */\n  public getSeriesComparator(): Promise<null> {\n    return this.getProperty<null>('seriesComparator');\n  }\n\n  /**\n   * Gets the value of <code>data</code> property.\n   * Specifies the DataProvider for the sections and items of the line-chart.\n   * @return The value of <code>data</code> property.\n   * @deprecated Since 17.1.0. Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead.\n   */\n  public getData(): Promise<null> {\n    return this.getProperty<null>('data');\n  }\n\n  /**\n   * Gets the value of <code>selectionMode</code> property.\n   * Specifies the selection mode.\n   * @return The value of <code>selectionMode</code> property.\n   *\n   */\n  public getSelectionMode(): Promise<string> {\n    return this.getProperty<string>('selectionMode');\n  }\n\n  /**\n   * Sets the value of <code>selection</code> property.\n   * An array containing the ids of the initially selected data items.\n   * @param selection The value to set for <code>selection</code>\n   *\n   */\n  public changeSelection(selection: Array<string | number>): Promise<void> {\n    return this.setProperty<Array<string | number>>('selection', selection);\n  }\n\n  /**\n   * Gets the value of <code>selection</code> property.\n   * An array containing the ids of the initially selected data items.\n   * @return The value of <code>selection</code> property.\n   *\n   */\n  public getSelection(): Promise<Array<string | number>> {\n    return this.getProperty<Array<string | number>>('selection');\n  }\n\n  /**\n   * Gets the value of <code>dragMode</code> property.\n   * The action that is performed when a drag occurs on the chart.\n   * @return The value of <code>dragMode</code> property.\n   *\n   */\n  public getDragMode(): Promise<string> {\n    return this.getProperty<string>('dragMode');\n  }\n\n  /**\n   * Sets the value of <code>hiddenCategories</code> property.\n   * An array of category strings used for filtering.\n   * @param hiddenCategories The value to set for <code>hiddenCategories</code>\n   *\n   */\n  public changeHiddenCategories(hiddenCategories: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('hiddenCategories', hiddenCategories);\n  }\n\n  /**\n   * Gets the value of <code>hiddenCategories</code> property.\n   * An array of category strings used for filtering.\n   * @return The value of <code>hiddenCategories</code> property.\n   *\n   */\n  public getHiddenCategories(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('hiddenCategories');\n  }\n\n  /**\n   * Sets the value of <code>highlightedCategories</code> property.\n   * An array of category strings used for highlighting.\n   * @param highlightedCategories The value to set for <code>highlightedCategories</code>\n   *\n   */\n  public changeHighlightedCategories(highlightedCategories: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('highlightedCategories', highlightedCategories);\n  }\n\n  /**\n   * Gets the value of <code>highlightedCategories</code> property.\n   * An array of category strings used for highlighting.\n   * @return The value of <code>highlightedCategories</code> property.\n   *\n   */\n  public getHighlightedCategories(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('highlightedCategories');\n  }\n\n  /**\n   * Gets the value of <code>hideAndShowBehavior</code> property.\n   * Defines the hide and show behavior that is performed when clicking on a leegnd item.\n   * @return The value of <code>hideAndShowBehavior</code> property.\n   *\n   */\n  public getHideAndShowBehavior(): Promise<string> {\n    return this.getProperty<string>('hideAndShowBehavior');\n  }\n\n  /**\n   * Gets the value of <code>hoverBehavior</code> property.\n   * Defines the behavior applied when hovering over data items.\n   * @return The value of <code>hoverBehavior</code> property.\n   *\n   */\n  public getHoverBehavior(): Promise<string> {\n    return this.getProperty<string>('hoverBehavior');\n  }\n\n  /**\n   * Gets the value of <code>highlightMatch</code> property.\n   * The matching condition for the highlighted property.\n   * @return The value of <code>highlightMatch</code> property.\n   *\n   */\n  public getHighlightMatch(): Promise<string> {\n    return this.getProperty<string>('highlightMatch');\n  }\n\n  /**\n   * Gets the value of <code>legend</code> property.\n   * An object defining the style, positioning, and behavior of the legend.\n   * @return The value of <code>legend</code> property.\n   *\n   */\n  public getLegend(): Promise<Legend> {\n    return this.getProperty<Legend>('legend');\n  }\n\n  /**\n   * Gets the value of <code>contextMenuConfig</code> property.\n   * Specifies a context menu configuration.\n   * @return The value of <code>contextMenuConfig</code> property.\n   *\n   */\n  public getContextMenuConfig(): Promise<ContextMenuConfig> {\n    return this.getProperty<ContextMenuConfig>('contextMenuConfig');\n  }\n}\nexport interface YAxis {\n  /**\n   * The maximum value of the chart data.\n   */\n  dataMax: number;\n  /**\n   * The minimum value of the chart data.\n   */\n  dataMin: number;\n  /**\n   * The maximum value of the y axis.\n   */\n  max: number;\n  /**\n   * The minimum value of the y axis.\n   */\n  min: number;\n  /**\n   * The y axis major tick properties.\n   */\n  majorTick: YAxisMajorTick;\n  /**\n   * The y axis minor tick properties.\n   */\n  minorTick: YAxisMinorTick;\n  /**\n   * The y axis tick label properties.\n   */\n  tickLabel: YAxisTickLabel;\n  /**\n   * The current minimum value of y axis viewport.\n   */\n  viewportMin: number;\n  /**\n   * The current maximum value of y axis viewport.\n   */\n  viewportMax: number;\n  /**\n   * The increment between major tick marks in y axis.\n   */\n  step: number;\n  /**\n   * The size of the axis.\n   */\n  size: number;\n  /**\n   * The scale of the axis.\n   */\n  scale: string;\n  /**\n   * The axis title.\n   */\n  title: string;\n  /**\n   * The axis title style.\n   */\n  titleStyle: object;\n}\nexport interface YAxisMajorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * The color of the line.\n   */\n  rendered: string;\n}\nexport interface YAxisMinorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * Whether the minor tick are rendered.\n   */\n  rendered: string;\n}\nexport interface YAxisTickLabel {\n  /**\n   * The converter to format the axis tick labels.\n   */\n  converter: object;\n  /**\n   * Whether the tick labels are rendered or not.\n   */\n  rendered: string;\n  /**\n   * The style of the tick labels.\n   */\n  style: object;\n}\nexport interface Y2Axis {\n  /**\n   * The maximum value of the chart data.\n   */\n  dataMax: number;\n  /**\n   * The minimum value of the chart data.\n   */\n  dataMin: number;\n  /**\n   * The maximum value of the y axis.\n   */\n  max: number;\n  /**\n   * The minimum value of the y axis.\n   */\n  min: number;\n  /**\n   * The y axis major tick properties.\n   */\n  majorTick: Y2AxisMajorTick;\n  /**\n   * The y axis minor tick properties.\n   */\n  minorTick: Y2AxisMinorTick;\n  /**\n   * The y axis tick label properties.\n   */\n  tickLabel: Y2AxisTickLabel;\n  /**\n   * The current minimum value of y axis viewport.\n   */\n  viewportMin: number;\n  /**\n   * The current maximum value of y axis viewport.\n   */\n  viewportMax: number;\n  /**\n   * The increment between major tick marks in y axis.\n   */\n  step: number;\n  /**\n   * The size of the axis.\n   */\n  size: number;\n  /**\n   * The scale of the axis.\n   */\n  scale: string;\n  /**\n   * The axis title.\n   */\n  title: string;\n  /**\n   * The axis title style.\n   */\n  titleStyle: object;\n}\nexport interface Y2AxisMajorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * The color of the line.\n   */\n  rendered: string;\n}\nexport interface Y2AxisMinorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * Whether the minor tick are rendered.\n   */\n  rendered: string;\n}\nexport interface Y2AxisTickLabel {\n  /**\n   * The converter to format the axis tick labels.\n   */\n  converter: object;\n  /**\n   * Whether the tick labels are rendered or not.\n   */\n  rendered: string;\n  /**\n   * The style of the tick labels.\n   */\n  style: object;\n}\nexport interface XAxis {\n  /**\n   * The x axis major tick properties.\n   */\n  majorTick: XAxisMajorTick;\n  /**\n   * The x axis minor tick properties.\n   */\n  minorTick: XAxisMinorTick;\n  /**\n   * The x axis tick label properties.\n   */\n  tickLabel: XAxisTickLabel;\n  /**\n   * The current minimum value of x axis viewport.\n   */\n  viewportMin: number;\n  /**\n   * The current maximum value of x axis viewport.\n   */\n  viewportMax: number;\n  /**\n   * The increment between major tick marks in x axis.\n   */\n  step: number;\n  /**\n   * The size of the axis.\n   */\n  size: number;\n  /**\n   * The scale of the axis.\n   */\n  scale: string;\n  /**\n   * The axis title.\n   */\n  title: string;\n  /**\n   * The axis title style.\n   */\n  titleStyle: object;\n}\nexport interface XAxisMajorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * The color of the line.\n   */\n  rendered: string;\n}\nexport interface XAxisMinorTick {\n  /**\n   * The color of the line.\n   */\n  lineColor: string;\n  /**\n   * The style of the line.\n   */\n  lineStyle: string;\n  /**\n   * The width of the line.\n   */\n  lineWidth: number;\n  /**\n   * Whether the minor tick are rendered.\n   */\n  rendered: string;\n}\nexport interface XAxisTickLabel {\n  /**\n   * The converter to format the axis tick labels.\n   */\n  converter: object | Array<object>;\n  /**\n   * Whether the tick labels are rendered or not.\n   */\n  rendered: string;\n  /**\n   * Whether the ticklabels can be rotated.\n   */\n  rotation: string;\n  /**\n   * The style of the tick labels.\n   */\n  style: object;\n}\nexport interface PlotArea {\n  /**\n   * The background color of the plot area.\n   */\n  backgroundColor: string;\n}\nexport interface ValueFormats {\n  /**\n   * The object defining formatting and tooltip behavior for the group.\n   */\n  group: ValueFormatsGroup;\n  /**\n   * The object defining formatting and tooltip behavior for the series.\n   */\n  series: ValueFormatsSeries;\n  /**\n   * The object defining formatting and tooltip behavior for the value.\n   */\n  value: ValueFormatsValue;\n}\nexport interface ValueFormatsGroup {\n  /**\n   * A string representing the label that is displayed before the value in the tooltip.\n   */\n  tooltipLabel: string;\n  /**\n   * Whether the value is displayed in the tooltip.\n   */\n  tooltipDisplay: string;\n}\nexport interface ValueFormatsSeries {\n  /**\n   * A string representing the label that is displayed before the value in the tooltip.\n   */\n  tooltipLabel: string;\n  /**\n   * Whether the value is displayed in the tooltip.\n   */\n  tooltipDisplay: string;\n}\nexport interface ValueFormatsValue {\n  /**\n   * The converter to format the numerical value for the tooltip.\n   */\n  converter: object;\n  /**\n   * A string representing the label that is displayed before the value in the tooltip.\n   */\n  tooltipLabel: string;\n  /**\n   * Whether the value is displayed in the tooltip.\n   */\n  tooltipDisplay: string;\n}\nexport interface StyleDefaults {\n  /**\n   *\n   */\n  groupSeparators: StyleDefaultsGroupSeparators;\n}\nexport interface StyleDefaultsGroupSeparators {\n  /**\n   * Whether the group separator lines are rendered.\n   */\n  rendered: string;\n  /**\n   * The color of the group separator lines.\n   */\n  color: string;\n}\nexport interface Legend {\n  /**\n   *\n   */\n  position: string;\n  /**\n   *\n   */\n  rendered: string;\n  /**\n   *\n   */\n  maxSize: number | string;\n  /**\n   *\n   */\n  size: number | string;\n  /**\n   *\n   */\n  symbolHeight: number;\n  /**\n   *\n   */\n  symbolWidth: number;\n}\nexport interface ContextMenuConfig {\n  /**\n   *\n   */\n  accessibleLabel: string;\n}\n"]}