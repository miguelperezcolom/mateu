{
  "name": "buttonset-multiple",
  "version": "19.0.0",
  "jetVersion": "^19.0.0",
  "pack": "oj-c",
  "type": "composite",
  "dependencyScope": "runtime",
  "license": "https://opensource.org/licenses/UPL",
  "implements": [
    "CButtonsetMultipleElement"
  ],
  "description": "A Buttonset Multiple allows a user to select the states of one or more related options.",
  "displayName": "Buttonset Multiple",
  "help": "oj-c.ButtonsetMultiple.html",
  "main": "oj-c/buttonset-multiple",
  "extension": {
    "catalog": {
      "category": "Controls"
    },
    "vbdt": {
      "module": "oj-c/buttonset-multiple"
    },
    "oracle": {
      "icon": "oj-ux-ico-buttonset-multiple",
      "uxSpecs": [
        "Toggle%20Button"
      ]
    },
    "webelement": {
      "package": "@oracle/oraclejet-core-pack",
      "version": "19.0.0",
      "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ButtonsetMultipleWebElement.html",
      "export": "findButtonsetMultiple",
      "main": "@oracle/oraclejet-core-pack/webdriver"
    }
  },
  "since": "17.0.0",
  "status": [
    {
      "type": "supersedes",
      "since": "17.0.0",
      "value": [
        "oj-buttonset-many"
      ]
    }
  ],
  "properties": {
    "value": {
      "type": "Array<string>",
      "description": "Specifies which toggle button is selected",
      "help": "#value",
      "translatable": true,
      "writeback": true
    },
    "items": {
      "type": "Array<object>",
      "description": "Specifies the toggle buttons rendered by the buttonset.",
      "help": "#items",
      "extension": {
        "vbdt": {
          "itemProperties": {
            "label": {
              "type": "string",
              "description": "The toggle item label."
            },
            "value": {
              "type": "string",
              "description": "The toggle item value."
            },
            "disabled": {
              "type": "boolean",
              "description": "Specifies if the toggle item is disabled (enabled by default)."
            },
            "startIcon": {
              "type": "object",
              "description": "Optional icon to render at the start of the toggle item."
            },
            "endIcon": {
              "type": "object",
              "description": "Optional icon to render at the end of the toggle item."
            }
          }
        }
      },
      "value": []
    },
    "display": {
      "type": "string",
      "description": "Display just the label, the icons, or all.",
      "help": "#display",
      "propertyEditorValues": {
        "all": {
          "description": "Display both the label and icons.",
          "displayName": "All"
        },
        "icons": {
          "description": "Display only the icons.",
          "displayName": "Icons"
        },
        "label": {
          "description": "Display only the text label.",
          "displayName": "label"
        }
      },
      "enumValues": [
        "all",
        "label",
        "icons"
      ],
      "value": "all"
    },
    "disabled": {
      "type": "boolean",
      "description": "Specifies that the buttonset should be disabled.",
      "help": "#disabled",
      "value": false
    },
    "size": {
      "type": "string",
      "description": "Specifies the size of the toggle buttons",
      "help": "#size",
      "propertyEditorValues": {
        "sm": {
          "description": "Display a small button.",
          "displayName": "Small"
        },
        "md": {
          "description": "Display a default size button.",
          "displayName": "Medium"
        },
        "lg": {
          "description": "Display a large button.",
          "displayName": "Large"
        }
      },
      "enumValues": [
        "sm",
        "md",
        "lg"
      ],
      "value": "md"
    },
    "width": {
      "type": "number|string",
      "description": "Specifies the buttonset width",
      "help": "#width"
    },
    "maxWidth": {
      "type": "number|string",
      "description": "Specifies the buttonset max width",
      "help": "#maxWidth"
    },
    "chroming": {
      "type": "string",
      "description": "Indicates in what states the button has chromings in background and border.",
      "help": "#chroming",
      "propertyEditorValues": {
        "borderless": {
          "description": "Borderless buttons are a less prominent variation.",
          "displayName": "Borderless"
        },
        "outlined": {
          "description": "Outlined buttons are a more prominent variation.",
          "displayName": "Outlined"
        }
      },
      "enumValues": [
        "borderless",
        "outlined"
      ],
      "binding": {
        "consume": {
          "name": "containerChroming"
        }
      },
      "value": "outlined"
    },
    "layoutWidth": {
      "type": "string",
      "description": "Specifies if button width should be equal or based on contents.",
      "help": "#layoutWidth",
      "enumValues": [
        "auto",
        "equal"
      ]
    }
  },
  "methods": {
    "focus": {
      "return": "void"
    },
    "blur": {
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}