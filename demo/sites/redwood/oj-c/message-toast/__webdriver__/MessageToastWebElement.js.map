{"version":3,"file":"MessageToastWebElement.js","sourceRoot":"","sources":["MessageToastWebElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { SlotProxy, slotProxy } from '@oracle/oraclejet-webdriver';\nimport { By, error } from 'selenium-webdriver';\nimport { MessageToastWebElementBase } from './MessageToastWebElementBase';\n\n/**\n * The component WebElement for [oj-c-message-toast](../../jsdocs/oj-c.MessageToast.html).\n * Do not instantiate this class directly, instead, use\n * [findMessageToast](../functions/findMessageToast.html).\n */\nexport class MessageToastWebElement extends MessageToastWebElementBase {\n  /**\n   * Retrieve a SlotProxy which represents the custom detail content of a single message.\n   * @param messageLocator.key The key within the MessageToast's dataset associated with the individual message.\n   * @throws {Error} when the detail content rendered is not provided by the application\n   * @returns The detail content of the message rendered by the application\n   * @since \"15.0.4\"\n   */\n  async findDetail<K>(messageLocator: { key: K }): Promise<SlotProxy> {\n    const key = messageLocator.key;\n    const layerId = await this.getAttribute('data-oj-messages-layer-id');\n    const messagesContainer = await this.getMessagesContainer(layerId);\n    const messageSelector = this.getMessageSelector(key);\n    const customDetailContentSelector = '[data-oj-message-custom-detail]';\n\n    try {\n      const el = await messagesContainer.findElement(\n        By.css(`${messageSelector} ${customDetailContentSelector}`)\n      );\n      return slotProxy(el, this);\n    } catch (e) {\n      throw new error.NoSuchElementError(\n        'No corresponding detail template or renderer found for the messageLocator.'\n      );\n    }\n  }\n\n  /**\n   * Retrieve a SlotProxy which represents the custom icon content of a single message.\n   * @param messageLocator.key The key within the MessageToast's dataset associated with the individual message.\n   * @throws {Error} when the icon content rendered is not provided by the application\n   * @returns The icon content of the message rendered by the application\n   * @since \"15.0.4\"\n   */\n  async findIcon<K>(messageLocator: { key: K }): Promise<SlotProxy> {\n    const key = messageLocator.key;\n    const layerId = await this.getAttribute('data-oj-messages-layer-id');\n    const messagesContainer = await this.getMessagesContainer(layerId);\n    const messageSelector = this.getMessageSelector(key);\n    const customIconContentSelector = '[data-oj-message-custom-icon]';\n\n    try {\n      const el = await messagesContainer.findElement(\n        By.css(`${messageSelector} ${customIconContentSelector}`)\n      );\n      return slotProxy(el, this);\n    } catch (e) {\n      throw new error.NoSuchElementError(\n        'No corresponding icon template or renderer found for the messageLocator.'\n      );\n    }\n  }\n\n  /**\n   * Closes the message identified by the provided key.\n   * @param messageLocator.key The key within the MessageToast's dataset associated with the individual message.\n   * @throws {Error} when the specified is not closable (closeAffordance set to \"off\")\n   * @since \"15.0.4\"\n   */\n  async doClose<K>(messageLocator: { key: K }): Promise<void> {\n    const key = messageLocator.key;\n    const layerId = await this.getAttribute('data-oj-messages-layer-id');\n    const messagesContainer = await this.getMessagesContainer(layerId);\n    const messageSelector = this.getMessageSelector(key);\n    const closeButtonSelector = '[data-oj-message-close-button] button';\n\n    try {\n      const el = await messagesContainer.findElement(\n        By.css(`${messageSelector} ${closeButtonSelector}`)\n      );\n      await el.click();\n    } catch (e) {\n      throw new error.UnsupportedOperationError(\n        'The close operation is not applicable for the messageLocator.'\n      );\n    }\n  }\n\n  /**\n   * Finds the layered content of this messages instance.\n   *\n   * @param id The layer id for this instance of the message\n   * @returns The layer content\n   */\n  private getMessagesContainer(id: string) {\n    const driver = this.getDriver();\n    return driver.findElement(By.id(id));\n  }\n\n  /**\n   * Creates the CSS selector for the message with the provided key.\n   *\n   * @param key The key of the message\n   * @returns the css selector that can used to fetch the message\n   */\n  private getMessageSelector<K>(key: K) {\n    return typeof key === 'number'\n      ? `[data-oj-key=\"number-${key}\"]`\n      : `[data-oj-key=\"string-${key}\"]`;\n  }\n}\n"]}