{"version":3,"file":"TableWebElementBase.js","sourceRoot":"","sources":["TableWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,mBAAoB,SAAQ,uBAAY;IACnD;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,WAAW,CAAM,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACI,wBAAwB;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAS,uBAAuB,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAS,qBAAqB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,cAAc,CAAC,QAAkB;QACtC,OAAO,IAAI,CAAC,WAAW,CAAW,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAW,UAAU,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAgB,eAAe,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAS,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,WAA0B;QACjD,OAAO,IAAI,CAAC,WAAW,CAAgB,aAAa,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAgB,aAAa,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAS,qBAAqB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,YAAoB;QAC5C,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,EAAE,YAAY,CAAC,CAAC;IAChE,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,sBAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAsB,qBAAqB,CAAC,CAAC;IACtE,CAAC;IAED;;;;;OAKG;IACI,uBAAuB;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAS,sBAAsB,CAAC,CAAC;IAC1D,CAAC;CACF;AA1KD,kDA0KC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-table WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, TableWebElement.ts.\n */\nexport class TableWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>layout</code> property.\n   * The column sizing method used for the Table's columns.\n   * @return The value of <code>layout</code> property.\n   *\n   */\n  public getLayout(): Promise<string> {\n    return this.getProperty<string>('layout');\n  }\n\n  /**\n   * Gets the value of <code>columns</code> property.\n   * The set of columns that can be displayed in the Table.\n   * @return The value of <code>columns</code> property.\n   *\n   */\n  public getColumns(): Promise<object> {\n    return this.getProperty<object>('columns');\n  }\n\n  /**\n   * Gets the value of <code>row</code> property.\n   * A subset of attributes for controlling certain behaviors on a per row basis.\n   * @return The value of <code>row</code> property.\n   *\n   */\n  public getRow(): Promise<Row> {\n    return this.getProperty<Row>('row');\n  }\n\n  /**\n   * Gets the value of <code>horizontalGridVisible</code> property.\n   * Controls the display of the Table's horizontal gridlines.\n   * @return The value of <code>horizontalGridVisible</code> property.\n   *\n   */\n  public getHorizontalGridVisible(): Promise<string> {\n    return this.getProperty<string>('horizontalGridVisible');\n  }\n\n  /**\n   * Gets the value of <code>verticalGridVisible</code> property.\n   * Controls the display of the Table's vertical gridlines.\n   * @return The value of <code>verticalGridVisible</code> property.\n   *\n   */\n  public getVerticalGridVisible(): Promise<string> {\n    return this.getProperty<string>('verticalGridVisible');\n  }\n\n  /**\n   * Sets the value of <code>selected</code> property.\n   * The selected rows and/or columns. See the Help documentation for more information.\n   * @param selected The value to set for <code>selected</code>\n   *\n   */\n  public changeSelected(selected: Selected): Promise<void> {\n    return this.setProperty<Selected>('selected', selected);\n  }\n\n  /**\n   * Gets the value of <code>selected</code> property.\n   * The selected rows and/or columns. See the Help documentation for more information.\n   * @return The value of <code>selected</code> property.\n   *\n   */\n  public getSelected(): Promise<Selected> {\n    return this.getProperty<Selected>('selected');\n  }\n\n  /**\n   * Gets the value of <code>selectionMode</code> property.\n   * Specifies whether row and/or column selection gestures are enabled on the Table, and the cardinality of each (single/multiple/multipleToggle/none).\n   * @return The value of <code>selectionMode</code> property.\n   *\n   */\n  public getSelectionMode(): Promise<SelectionMode> {\n    return this.getProperty<SelectionMode>('selectionMode');\n  }\n\n  /**\n   * Gets the value of <code>selectAllControl</code> property.\n   * Controls the display of the Table's select all control when multiple or multipleToggle row selection is enabled.\n   * @return The value of <code>selectAllControl</code> property.\n   *\n   */\n  public getSelectAllControl(): Promise<string> {\n    return this.getProperty<string>('selectAllControl');\n  }\n\n  /**\n   * Sets the value of <code>columnOrder</code> property.\n   * Display and order of columns. See the Help documentation for more information.\n   * @param columnOrder The value to set for <code>columnOrder</code>\n   *\n   */\n  public changeColumnOrder(columnOrder: Array<string>): Promise<void> {\n    return this.setProperty<Array<string>>('columnOrder', columnOrder);\n  }\n\n  /**\n   * Gets the value of <code>columnOrder</code> property.\n   * Display and order of columns. See the Help documentation for more information.\n   * @return The value of <code>columnOrder</code> property.\n   *\n   */\n  public getColumnOrder(): Promise<Array<string>> {\n    return this.getProperty<Array<string>>('columnOrder');\n  }\n\n  /**\n   * Gets the value of <code>currentCellOverride</code> property.\n   * The cell override to apply to the current cell of the Table. In order for this property to be honored, a new object instance must be set.\n   * @return The value of <code>currentCellOverride</code> property.\n   *\n   */\n  public getCurrentCellOverride(): Promise<object> {\n    return this.getProperty<object>('currentCellOverride');\n  }\n\n  /**\n   * Gets the value of <code>currentCell</code> property.\n   * The cell currently being used as the target for keyboard gestures made on the Table.\n   * @return The value of <code>currentCell</code> property.\n   *\n   */\n  public getCurrentCell(): Promise<object> {\n    return this.getProperty<object>('currentCell');\n  }\n\n  /**\n   * Sets the value of <code>columnWidths</code> property.\n   * The desired widths of table columns. A record mapping column keys to numbers representing pixel widths for each column.\n   * @param columnWidths The value to set for <code>columnWidths</code>\n   *\n   */\n  public changeColumnWidths(columnWidths: object): Promise<void> {\n    return this.setProperty<object>('columnWidths', columnWidths);\n  }\n\n  /**\n   * Gets the value of <code>columnWidths</code> property.\n   * The desired widths of table columns. A record mapping column keys to numbers representing pixel widths for each column.\n   * @return The value of <code>columnWidths</code> property.\n   *\n   */\n  public getColumnWidths(): Promise<object> {\n    return this.getProperty<object>('columnWidths');\n  }\n\n  /**\n   * Gets the value of <code>scrollPolicyOptions</code> property.\n   * Options related to the Table's fetching and scrolling behaviors.\n   * @return The value of <code>scrollPolicyOptions</code> property.\n   *\n   */\n  public getScrollPolicyOptions(): Promise<ScrollPolicyOptions> {\n    return this.getProperty<ScrollPolicyOptions>('scrollPolicyOptions');\n  }\n\n  /**\n   * Gets the value of <code>columnResizeBehavior</code> property.\n   * The column resize behavior this Table will utilize when column resizing is enabled on a given column.\n   * @return The value of <code>columnResizeBehavior</code> property.\n   *\n   */\n  public getColumnResizeBehavior(): Promise<string> {\n    return this.getProperty<string>('columnResizeBehavior');\n  }\n}\nexport interface Row {\n  /**\n   * The column key(s) to be used as the accessible row header(s) for assistive technologies. See the Help documentation for more information.\n   */\n  accessibleRowHeader: string | Array<string> | null;\n}\nexport interface Selected {\n  /**\n   * The selected columns. See the Help documentation for more information.\n   */\n  column: object;\n  /**\n   * The selected rows. See the Help documentation for more information.\n   */\n  row: object;\n}\nexport interface SelectionMode {\n  /**\n   * Specifies whether column selection gestures are enabled on the Table.\n   */\n  column: string;\n  /**\n   * Specifies whether row selection gestures are enabled on the Table.\n   */\n  row: string;\n}\nexport interface ScrollPolicyOptions {\n  /**\n   * The number of records the Table will request during each data fetch.\n   */\n  fetchSize: number;\n}\n"]}