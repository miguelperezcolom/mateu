# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Build and publish

on:
  release:
    types: [published]

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set env
        run: VERSION=${{ github.event.release.tag_name }}; echo "RELEASE_VERSION=${VERSION:1}" >> $GITHUB_ENV
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu
          server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - uses: actions/setup-node@v3
        with:
          node-version: 24

      - name: Build Mateu frontend lib
        run: cd frontend/web/monorepo/libs/mateu && rm -f package-lock.json && npm i
      - name: Build Vaadin front
        run: cd frontend/web/monorepo/apps/vaadin && rm -f package-lock.json && npm i && npm run copy
      - name: Build SAPUI5 front
        run: cd frontend/web/monorepo/apps/sapui5 && rm -f package-lock.json && npm i && npm run copy
      - name: Build Redwood front
        run: cd frontend/web/monorepo/apps/redwood && rm -f package-lock.json && npm i && npm run copy
      - name: Build Red Hat front
        run: cd frontend/web/monorepo/apps/redhat && rm -f package-lock.json && npm i && npm run copy

      - name: fix version
        run: grep -rl '<version>0.0.1-MATEU</version>' --exclude-dir=.git backend | grep pom.xml | xargs sed -i 's/0\.0\.1\-MATEU/${{ env.RELEASE_VERSION }}/g'

      - name: Build backend shared
        run: mvn -Dmaven.test.skip -B install --file backend/pom.xml

      - name: Publish to Maven Central
        run: mvn deploy -f backend/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.CENTRAL_TOKEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.CENTRAL_TOKEN_PASSWORD }}
