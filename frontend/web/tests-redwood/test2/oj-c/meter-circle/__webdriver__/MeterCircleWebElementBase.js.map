{"version":3,"file":"MeterCircleWebElementBase.js","sourceRoot":"","sources":["MeterCircleWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,yBAA0B,SAAQ,uBAAY;IACzD;;;;;OAKG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,WAAW,CAAS,KAAK,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,WAAW,CAAS,KAAK,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAU,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,KAAoB;QACrC,OAAO,IAAI,CAAC,WAAW,CAAgB,OAAO,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAgB,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAS,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAW,UAAU,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAS,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,aAAa;QAClB,OAAO,IAAI,CAAC,WAAW,CAAS,YAAY,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAwB,gBAAgB,CAAC,CAAC;IACnE,CAAC;IAED;;;;;OAKG;IACI,mBAAmB;QACxB,OAAO,IAAI,CAAC,WAAW,CAAS,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,aAAa;QAClB,OAAO,IAAI,CAAC,WAAW,CAAoB,YAAY,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAgB,aAAa,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACI,aAAa;QAClB,OAAO,IAAI,CAAC,WAAW,CAAgB,YAAY,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAO,SAAS,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,iBAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAS,gBAAgB,CAAC,CAAC;IACpD,CAAC;CACF;AAxMD,8DAwMC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-meter-circle WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, MeterCircleWebElement.ts.\n */\nexport class MeterCircleWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>max</code> property.\n   * The maximum value of the meter circle.\n   * @return The value of <code>max</code> property.\n   *\n   */\n  public getMax(): Promise<number> {\n    return this.getProperty<number>('max');\n  }\n\n  /**\n   * Gets the value of <code>min</code> property.\n   * The minimum value of the meter circle.\n   * @return The value of <code>min</code> property.\n   *\n   */\n  public getMin(): Promise<number> {\n    return this.getProperty<number>('min');\n  }\n\n  /**\n   * Gets the value of <code>readonly</code> property.\n   *\n   * @return The value of <code>readonly</code> property.\n   *\n   */\n  public getReadonly(): Promise<boolean> {\n    return this.getProperty<boolean>('readonly');\n  }\n\n  /**\n   * Sets the value of <code>value</code> property.\n   * The value of the meter circle.\n   * @param value The value to set for <code>value</code>\n   *\n   */\n  public changeValue(value: number | null): Promise<void> {\n    return this.setProperty<number | null>('value', value);\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * The value of the meter circle.\n   * @return The value of <code>value</code> property.\n   *\n   */\n  public getValue(): Promise<number | null> {\n    return this.getProperty<number | null>('value');\n  }\n\n  /**\n   * Gets the value of <code>step</code> property.\n   *\n   * @return The value of <code>step</code> property.\n   *\n   */\n  public getStep(): Promise<number> {\n    return this.getProperty<number>('step');\n  }\n\n  /**\n   * Gets the value of <code>color</code> property.\n   *\n   * @return The value of <code>color</code> property.\n   *\n   */\n  public getColor(): Promise<string> {\n    return this.getProperty<string>('color');\n  }\n\n  /**\n   * Gets the value of <code>indicatorSize</code> property.\n   *\n   * @return The value of <code>indicatorSize</code> property.\n   *\n   */\n  public getIndicatorSize(): Promise<number> {\n    return this.getProperty<number>('indicatorSize');\n  }\n\n  /**\n   * Gets the value of <code>innerRadius</code> property.\n   *\n   * @return The value of <code>innerRadius</code> property.\n   *\n   */\n  public getInnerRadius(): Promise<number> {\n    return this.getProperty<number>('innerRadius');\n  }\n\n  /**\n   * Gets the value of <code>plotArea</code> property.\n   *\n   * @return The value of <code>plotArea</code> property.\n   *\n   */\n  public getPlotArea(): Promise<PlotArea> {\n    return this.getProperty<PlotArea>('plotArea');\n  }\n\n  /**\n   * Gets the value of <code>angleExtent</code> property.\n   *\n   * @return The value of <code>angleExtent</code> property.\n   *\n   */\n  public getAngleExtent(): Promise<number> {\n    return this.getProperty<number>('angleExtent');\n  }\n\n  /**\n   * Gets the value of <code>startAngle</code> property.\n   *\n   * @return The value of <code>startAngle</code> property.\n   *\n   */\n  public getStartAngle(): Promise<number> {\n    return this.getProperty<number>('startAngle');\n  }\n\n  /**\n   * Gets the value of <code>referenceLines</code> property.\n   *\n   * @return The value of <code>referenceLines</code> property.\n   *\n   */\n  public getReferenceLines(): Promise<Array<ReferenceLines>> {\n    return this.getProperty<Array<ReferenceLines>>('referenceLines');\n  }\n\n  /**\n   * Gets the value of <code>thresholdDisplay</code> property.\n   *\n   * @return The value of <code>thresholdDisplay</code> property.\n   *\n   */\n  public getThresholdDisplay(): Promise<string> {\n    return this.getProperty<string>('thresholdDisplay');\n  }\n\n  /**\n   * Gets the value of <code>thresholds</code> property.\n   *\n   * @return The value of <code>thresholds</code> property.\n   *\n   */\n  public getThresholds(): Promise<Array<Thresholds>> {\n    return this.getProperty<Array<Thresholds>>('thresholds');\n  }\n\n  /**\n   * Gets the value of <code>describedBy</code> property.\n   *\n   * @return The value of <code>describedBy</code> property.\n   *\n   */\n  public getDescribedBy(): Promise<string | null> {\n    return this.getProperty<string | null>('describedBy');\n  }\n\n  /**\n   * Gets the value of <code>labelledBy</code> property.\n   *\n   * @return The value of <code>labelledBy</code> property.\n   *\n   */\n  public getLabelledBy(): Promise<string | null> {\n    return this.getProperty<string | null>('labelledBy');\n  }\n\n  /**\n   * Gets the value of <code>size</code> property.\n   * Specifies the size of the meter circle.\n   * @return The value of <code>size</code> property.\n   *\n   */\n  public getSizeProperty(): Promise<string> {\n    return this.getProperty<string>('size');\n  }\n\n  /**\n   * Gets the value of <code>datatip</code> property.\n   *\n   * @return The value of <code>datatip</code> property.\n   *\n   */\n  public getDatatip(): Promise<null> {\n    return this.getProperty<null>('datatip');\n  }\n\n  /**\n   * Gets the value of <code>transientValue</code> property.\n   *\n   * @return The value of <code>transientValue</code> property.\n   *\n   */\n  public getTransientValue(): Promise<number> {\n    return this.getProperty<number>('transientValue');\n  }\n}\nexport interface PlotArea {\n  /**\n   *\n   */\n  color: string;\n  /**\n   *\n   */\n  rendered: string;\n}\nexport interface ReferenceLines {\n  /**\n   *\n   */\n  color: string;\n  /**\n   *\n   */\n  value: number;\n  /**\n   *\n   */\n  label: string;\n  /**\n   *\n   */\n  style: ReferenceLinesStyle;\n}\nexport interface ReferenceLinesStyle {\n  /**\n   *\n   */\n  color: string;\n  /**\n   *\n   */\n  fontSize: string;\n  /**\n   *\n   */\n  fontStyle: string;\n  /**\n   *\n   */\n  fontWeight: string;\n}\nexport interface Thresholds {\n  /**\n   *\n   */\n  accessibleLabel: string;\n  /**\n   *\n   */\n  color: string;\n  /**\n   *\n   */\n  max: number;\n}\n"]}