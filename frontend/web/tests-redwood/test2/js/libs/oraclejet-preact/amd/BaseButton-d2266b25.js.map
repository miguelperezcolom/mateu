{"version":3,"file":"BaseButton-d2266b25.js","sources":["../../src/UNSAFE_BaseButton/BaseButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef, ElementRef } from 'preact/compat';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useColorScheme } from '../hooks/UNSAFE_useColorScheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { BaseButtonVariantOptions } from './themes/BaseButtonStyles.css';\nimport { BaseButtonRedwoodTheme } from './themes/redwood/BaseButtonTheme';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { BareButton } from '#/UNSAFE_BareButton';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { processGlobals } from '../utils/UNSAFE_buttonUtils';\nimport type { ButtonIntrinsicProps, ButtonIntrinsicAriaProps } from '../utils/UNSAFE_buttonUtils';\n\nexport type ActionDetail = {\n  reason: 'pointer' | 'keyboard';\n};\n\ntype BaseButtonElementDetails =\n  | {\n      type: 'button';\n      buttonType?: 'button' | 'submit';\n      isFocusable?: never;\n      isLabel?: never;\n      isSwitch?: boolean;\n    }\n  | {\n      type: 'a';\n      buttonType?: never;\n      href: string;\n      target?: string;\n      rel?: string;\n      isFocusable?: never;\n      isLabel?: never;\n      isSwitch?: never;\n    }\n  | {\n      type: 'span';\n      buttonType?: never;\n      isFocusable?: boolean;\n      isLabel?: boolean;\n      isSwitch?: boolean;\n    };\n\nexport type StylingOptions =\n  | 'default'\n  | 'min'\n  | 'embedded'\n  | 'container'\n  | 'unstyled'\n  | 'fill'\n  | 'noBorderRadiusEnd'\n  | 'noBorderRadiusStart'\n  | 'noBorderEnd'\n  | 'noBorderStart'\n  | 'active'\n  | 'selected'\n  | 'buttonSetItem'\n  | 'trailingItem'\n  | 'widthEqual'\n  | 'hiddenLabel'\n  | 'noHoverActive'\n  | 'widthAuto'\n  | 'newStackingContext';\n\nexport type Props = ButtonIntrinsicProps &\n  ButtonIntrinsicAriaProps &\n  DimensionProps &\n  TestIdProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button be read-only.\n     */\n    isReadOnly?: boolean;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifies if Button should use only a click handler, not keyup/down, ptr up/down\n     */\n    isClick?: boolean;\n\n    /**\n     *\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variation.  Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * The size indicates how large the button is rendered: 'xs', \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right: \"bottom\" or \"none\" (default).\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * Styling can be used for customizing buttons by removing label padding (\"min\") or\n     * removing all styling (\"unstyled\").\n     */\n    styling?: StylingOptions[];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: (details: ActionDetail) => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: BaseButtonElementDetails;\n  };\n\ntype ButtonHandle = ElementRef<typeof BareButton>;\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().hoverSupport === 'events';\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant,\n      isReadOnly = false,\n      isDisabled = false,\n      isRepeat = false,\n      isClick,\n      size,\n      onAction,\n      elementDetails = { type: 'button', buttonType: 'button' },\n      styling = ['default'],\n      edge = 'none',\n      testId,\n      ...props\n    }: Props,\n    ref: Ref<ButtonHandle>\n  ) => {\n    const isStyled = (name: StylingOptions) => {\n      return styling.indexOf(name) > -1;\n    };\n    const { globalEventProps, ariaProps } = processGlobals(props);\n    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n    const { activeProps, isActive } = useActive({ isDisabled: isReadOnly });\n    const { class: cls, ...styles } = styleInterpolations({\n      ...props,\n      ...globalEventProps\n    });\n\n    const ElementType = elementDetails.type;\n    const isSpan = ElementType == 'span';\n    const colorScheme = useColorScheme();\n\n    const { variantClasses } = useComponentTheme<BaseButtonVariantOptions>(BaseButtonRedwoodTheme, {\n      size,\n      variant,\n      unstyled: isStyled('unstyled') ? 'isUnstyled' : 'notUnstyled',\n      embedded: isStyled('embedded') ? 'isEmbedded' : 'notEmbedded',\n      container: isStyled('container') ? 'isContainer' : 'notContainer',\n      noBorderRadiusStart: isStyled('noBorderRadiusStart')\n        ? 'isNoBorderRadiusStart'\n        : 'notNoBorderRadiusStart',\n      noBorderRadiusEnd: isStyled('noBorderRadiusEnd')\n        ? 'isNoBorderRadiusEnd'\n        : 'notNoBorderRadiusEnd',\n      noBorderStart: isStyled('noBorderStart') ? 'isNoBorderStart' : 'notNoBorderStart',\n      noBorderEnd: isStyled('noBorderEnd') ? 'isNoBorderEnd' : 'notNoBorderEnd',\n      activeStyle: isStyled('active') ? 'isActiveStyle' : 'notActiveStyle',\n      selectedStyle: isStyled('selected') ? 'isSelectedStyle' : 'notSelectedStyle',\n      buttonSetItem: isStyled('buttonSetItem') ? 'isButtonSetItem' : 'notButtonSetItem',\n      trailingItem: isStyled('trailingItem') ? 'isTrailingItem' : 'notTrailingItem',\n      fill: isStyled('fill') ? 'isFill' : 'notFill',\n      min: isStyled('min') ? 'isMin' : 'notMin',\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      edge,\n      hybrid: isHybrid ? 'isHybrid' : 'notHybrid',\n      active: isActive ? 'isActive' : 'notActive',\n      hover: isHover ? 'isHover' : 'notHover',\n      span: isSpan ? 'isSpan' : 'notSpan',\n      widthEqual: isStyled('widthEqual') ? 'isWidthEqual' : 'notWidthEqual',\n      widthAuto: isStyled('widthAuto') ? 'isWidthAuto' : 'notWidthAuto',\n      hiddenLabel: isStyled('hiddenLabel') ? 'isHidden' : 'notHidden',\n      noHoverActive: isStyled('noHoverActive') ? 'isNoHoverActive' : 'notNoHoverActive',\n      newStackingContext: isStyled('newStackingContext')\n        ? 'isNewStackingContext'\n        : 'notNewStackingContext',\n      colorScheme\n    });\n\n    const legacyGlobals = {\n      autofocus: props.autofocus,\n      title: props.title\n    };\n\n    const mergedProps = mergeProps(\n      iosProps,\n      ariaProps,\n      hoverProps,\n      isStyled('container') ? {} : activeProps,\n      globalEventProps,\n      legacyGlobals\n    );\n\n    const wrapperClasses = classNames([cls, variantClasses]);\n\n    return (\n      <BareButton\n        ref={ref}\n        isDisabled={isDisabled || isReadOnly}\n        isClick={isClick}\n        classNames={wrapperClasses}\n        style={styles}\n        testId={testId}\n        onAction={onAction}\n        autofocus={props['autofocus']}\n        elementDetails={elementDetails}\n        isRepeat={isRepeat}\n        {...ariaProps}\n        {...mergedProps}>\n        {props.children}\n      </BareButton>\n    );\n  }\n);\n\nBaseButton.displayName = 'BaseButton';\n"],"names":["interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","iosProps","getClientHints","platform","ontouchstart","isHybrid","hoverSupport","BaseButton","forwardRef","variant","isReadOnly","isDisabled","isRepeat","isClick","size","onAction","elementDetails","type","buttonType","styling","edge","testId","props","ref","isStyled","name","indexOf","globalEventProps","ariaProps","processGlobals","hoverProps","isHover","useHover","activeProps","isActive","useActive","class","cls","styles","isSpan","colorScheme","useColorScheme","variantClasses","useComponentTheme","BaseButtonRedwoodTheme","unstyled","embedded","container","noBorderRadiusStart","noBorderRadiusEnd","noBorderStart","noBorderEnd","activeStyle","selectedStyle","buttonSetItem","trailingItem","fill","min","disabled","hybrid","active","hover","span","widthEqual","widthAuto","hiddenLabel","noHoverActive","newStackingContext","legacyGlobals","autofocus","title","mergedProps","mergeProps","wrapperClasses","classNames","_jsx","BareButton","style","children","displayName"],"mappings":"8bA0JA,MAAMA,EAAiB,IAAIC,OAAOC,OAAOC,EAAAA,0BACnCC,EAAsBC,EAAAA,oBAA2BL,GAIjDM,EAAoC,QAFtBC,EAAcA,iBAELC,SAAqB,CAAEC,aAAc,cAAmB,GAC/EC,EAA6C,WAAlCH,EAAcA,iBAAGI,aAErBC,EAAaC,EAAAA,YACxB,EAEIC,UACAC,cAAa,EACbC,cAAa,EACbC,YAAW,EACXC,UACAC,OACAC,WACAC,iBAAiB,CAAEC,KAAM,SAAUC,WAAY,UAC/CC,UAAU,CAAC,WACXC,OAAO,OACPC,YACGC,GAELC,KAEA,MAAMC,EAAYC,GACTN,EAAQO,QAAQD,IAAS,GAE5BE,iBAAEA,EAAgBC,UAAEA,GAAcC,EAAcA,eAACP,IACjDQ,WAAEA,EAAUC,QAAEA,GAAYC,EAAAA,SAAS,CAAErB,YAAaN,KAClD4B,YAAEA,EAAWC,SAAEA,GAAaC,EAASA,UAAC,CAAExB,WAAYD,KAClD0B,MAAOC,KAAQC,GAAWvC,EAAoB,IACjDuB,KACAK,IAICY,EAAwB,QADVvB,EAAeC,KAE7BuB,EAAcC,EAAAA,kBAEdC,eAAEA,GAAmBC,EAAiBA,kBAA2BC,yBAAwB,CAC7F9B,OACAL,UACAoC,SAAUrB,EAAS,YAAc,aAAe,cAChDsB,SAAUtB,EAAS,YAAc,aAAe,cAChDuB,UAAWvB,EAAS,aAAe,cAAgB,eACnDwB,oBAAqBxB,EAAS,uBAC1B,wBACA,yBACJyB,kBAAmBzB,EAAS,qBACxB,sBACA,uBACJ0B,cAAe1B,EAAS,iBAAmB,kBAAoB,mBAC/D2B,YAAa3B,EAAS,eAAiB,gBAAkB,iBACzD4B,YAAa5B,EAAS,UAAY,gBAAkB,iBACpD6B,cAAe7B,EAAS,YAAc,kBAAoB,mBAC1D8B,cAAe9B,EAAS,iBAAmB,kBAAoB,mBAC/D+B,aAAc/B,EAAS,gBAAkB,iBAAmB,kBAC5DgC,KAAMhC,EAAS,QAAU,SAAW,UACpCiC,IAAKjC,EAAS,OAAS,QAAU,SACjCkC,SAAU/C,EAAa,aAAe,cACtCS,OACAuC,OAAQtD,EAAW,WAAa,YAChCuD,OAAQ1B,EAAW,WAAa,YAChC2B,MAAO9B,EAAU,UAAY,WAC7B+B,KAAMvB,EAAS,SAAW,UAC1BwB,WAAYvC,EAAS,cAAgB,eAAiB,gBACtDwC,UAAWxC,EAAS,aAAe,cAAgB,eACnDyC,YAAazC,EAAS,eAAiB,WAAa,YACpD0C,cAAe1C,EAAS,iBAAmB,kBAAoB,mBAC/D2C,mBAAoB3C,EAAS,sBACzB,uBACA,wBACJgB,gBAGI4B,EAAgB,CACpBC,UAAW/C,EAAM+C,UACjBC,MAAOhD,EAAMgD,OAGTC,EAAcC,EAAUA,WAC5BvE,EACA2B,EACAE,EACAN,EAAS,aAAe,CAAA,EAAKS,EAC7BN,EACAyC,GAGIK,EAAiBC,EAAUA,WAAC,CAACrC,EAAKK,IAExC,OACEiC,EAAAA,IAACC,EAAAA,WACC,CAAArD,IAAKA,EACLZ,WAAYA,GAAcD,EAC1BG,QAASA,EACT6D,WAAYD,EACZI,MAAOvC,EACPjB,OAAQA,EACRN,SAAUA,EACVsD,UAAW/C,EAAiB,UAC5BN,eAAgBA,EAChBJ,SAAUA,KACNgB,KACA2C,EACHO,SAAAxD,EAAMwD,UAET,IAINvE,EAAWwE,YAAc"}