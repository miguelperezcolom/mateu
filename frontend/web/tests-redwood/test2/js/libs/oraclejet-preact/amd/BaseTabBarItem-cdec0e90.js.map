{"version":3,"file":"BaseTabBarItem-cdec0e90.js","sources":["../../src/UNSAFE_TabBarCommon/useTabBarItemTooltip.ts","../../src/UNSAFE_TabBarCommon/BaseTabBarItem.tsx"],"sourcesContent":["import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  label: string;\n  isDisabled: boolean;\n};\n\nexport const useTabBarItemTooltip = ({\n  label,\n  isDisabled\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipEventHandlerProps: Record<string, any>;\n  onLogicalFocus: (elem: HTMLElement) => void;\n  onLogicalBlur: () => void;\n} => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const { tooltipProps, tooltipContent } = useTooltipControlled({\n    isOpen: isOpen,\n    isDisabled,\n    focusStrategy: 'logical',\n    text: label,\n    onToggle: ({ value }) => {\n      setOpen(value);\n    }\n  });\n  const { onLogicalFocus, onLogicalBlur, ...tooltipEventHandlerProps } = tooltipProps;\n\n  return { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur };\n};\n","import { ComponentChildren, ComponentChild } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Text } from '../UNSAFE_Text';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTabBarContext } from './useTabBarContext';\nimport { Size } from '../utils/UNSAFE_size';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { BoxAlignmentProps } from '../utils/UNSAFE_interpolations/boxalignment';\nimport { boxAlignmentInterpolations } from '../utils/UNSAFE_interpolations/boxalignment';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\nimport { Badge } from '../UNSAFE_Badge';\nimport { useConveyorBeltItem } from '../UNSAFE_ConveyorBelt/useConveyorBeltItem';\nimport { useDetectTruncation } from '../hooks/PRIVATE_useDetectTruncation';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabBarItemTooltip } from './useTabBarItemTooltip';\nimport { tabBarItemVars } from './themes/TabBarItemContract.css';\n\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\n\ntype AriaProps = {\n  /**\n   * Accepts the tabpanel element's ID associated with the tab item\n   **/\n  'aria-controls'?: string;\n  /**\n   * Used by an item that renders an interactive popup\n   */\n  'aria-haspopup'?: boolean;\n};\n\nexport type BaseTabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  itemKey: K;\n  /**\n   * Label of the TabBarItem. For icon only display this label is the content\n   * for aria-label and tooltip text of the Tab.\n   */\n  label: string;\n  /**\n   * The icon before the label in non-stack case, icon above the label in\n   * stacked case or the stand alone icon when no label is specified.\n   */\n  icon?: ComponentChild;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata,\n   * that appears after the label in non stack case only.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label in non stack case only.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n  /**\n   * The control for enabling and disabling focusRing\n   */\n  showFocusRingOverride?: boolean;\n  /**\n   * The control for enabling and disabling selection indicator\n   */\n  selectionOverride?: boolean;\n  /**\n   * The control for overriding display value.\n   */\n  displayOverride?: string;\n  /**\n   * Maximum width tabbar item label can have\n   */\n  labelMaxWidth?: Size;\n  /**\n   * Sets the URL that the hyperlink points to. If there is no valid URL use \"#\" for href value to navigate to the top of the page.\n   */\n  href?: string;\n} & AriaProps;\n\nconst onClickLink = (event: MouseEvent) => {\n  event.preventDefault();\n};\n\nexport function BaseTabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  icon,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon,\n  showFocusRingOverride,\n  selectionOverride,\n  displayOverride,\n  labelMaxWidth,\n  href,\n  'aria-controls': ariaControls,\n  'aria-haspopup': ariaHasPopup\n}: BaseTabBarItemProps<K>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const {\n    onSelect,\n    selection,\n    currentKey,\n    showFocusRing,\n    hideTooltip,\n    layout,\n    display,\n    size,\n    isEdgeBottom,\n    tabItemPrefix\n  } = useTabBarContext();\n\n  const isCurrent = currentKey === itemKey;\n\n  const { ref, ...conveyorBeltProps } = useConveyorBeltItem({ isCurrent });\n\n  //Selection\n  //Dependency on currentKey because upon removal selectionChange does not change hence no re render\n  //and it is still holding the deleted key as selection\n  const handlePress = useCallback(() => {\n    onSelect?.({ value: itemKey as K });\n  }, [itemKey, onSelect]);\n\n  const { pressProps } = usePress(handlePress);\n\n  const isSelected = selection === itemKey;\n\n  const isStacked = display === 'stacked' ? true : false;\n  const isIconOnly =\n    display === 'icons' || (displayOverride && displayOverride === 'icons') ? true : false;\n  const isTall = size === 'lg' ? true : false;\n  const labelRequirement = label && !(label === ' ' && label === undefined);\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        // As per spec acc label is required only for error severity icon.\n        return <ErrorS color=\"danger\" accessibleLabel={translations.tabBar_tabContainsErrors()} />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const { direction } = useUser();\n  const makeFocusRingVisible =\n    showFocusRingOverride !== undefined ? showFocusRingOverride : showFocusRing;\n  const makeSelectionVisible = selectionOverride !== undefined ? selectionOverride : isSelected;\n  const {\n    classes,\n    styles: {\n      tabBarItemIcon,\n      tabBarItemIconStacked,\n      tabBarItemMetadata,\n      tabBarItemStackedBadge,\n      tabBarItemStackedBadgeRtl,\n      tabBarItemRemoveIcon,\n      tabBarItemLabel,\n      tabBarItemLabelTruncated,\n      tabBarItemLink\n    }\n  } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: makeSelectionVisible ? 'isSelected' : 'notSelected',\n    current: isCurrent ? 'isCurrent' : 'notCurrent',\n    focusRing: makeFocusRingVisible ? 'showFocusRing' : 'noFocusRing',\n    edgeBottom: isEdgeBottom ? 'isBottom' : 'notBottom'\n  });\n\n  const tabBarItem = classNames([classes]);\n  const tabBarItemLabelClasses = classNames([\n    tabBarItemLabel,\n    labelMaxWidth !== undefined && tabBarItemLabelTruncated\n  ]);\n  const tabBarItemIconClasses = classNames([\n    tabBarItemIcon,\n    (isStacked || isIconOnly || !labelRequirement) && tabBarItemIconStacked\n  ]);\n  const tabBarItemMetadataClasses = classNames([tabBarItemMetadata]);\n  const tabBarItemStackedBadgeClasses = classNames([\n    tabBarItemStackedBadge,\n    direction === 'rtl' && tabBarItemStackedBadgeRtl\n  ]);\n  const removeClass = classNames([tabBarItemRemoveIcon]);\n  const tabBarItemLinkClasses = classNames([tabBarItemLink]);\n\n  const styleInterpolations = mergeInterpolations<\n    FlexitemProps & DimensionProps & BoxAlignmentProps\n  >([\n    ...Object.values(flexitemInterpolations),\n    ...Object.values(dimensionInterpolations),\n    ...Object.values(boxAlignmentInterpolations)\n  ]);\n\n  //This is for simple item where height and width need to be specified on the main div.\n  const tabDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto',\n    minWidth: '10.5x',\n    height: isTall ? tabBarItemVars.lgHeight : tabBarItemVars.mdHeight,\n    //This is needed for gap between icon/ label and remove icon in labelIconRenderer\n    gap: '2x'\n  });\n\n  //This is for complex item, where only flex dimensions needs to be applied as height and width comes from child Flex component.\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  const maxWithInterpolation = mergeInterpolations<DimensionProps>([\n    ...Object.values(dimensionInterpolations)\n  ]);\n\n  //The threshold for truncation is labelMinWidth: 96px as per spec.\n  const labelMinWidth = '96px';\n  const maxWidthDimensions = maxWithInterpolation({\n    maxWidth: labelMaxWidth !== undefined ? `calc(max(${labelMinWidth},${labelMaxWidth}))` : '100%'\n  });\n\n  const { detectTruncationProps, isTextTruncated } = useDetectTruncation(\n    labelMaxWidth === undefined\n  );\n  const showTooltip = isIconOnly || isTextTruncated;\n  const { tooltipContent, tooltipEventHandlerProps, onLogicalFocus, onLogicalBlur } =\n    useTabBarItemTooltip({ label, isDisabled: !showTooltip });\n  if (showTooltip) {\n    if (isCurrent && showFocusRing && !hideTooltip) {\n      onLogicalFocus(ref.current as HTMLElement);\n    } else if (!isCurrent || (isCurrent && !showFocusRing) || hideTooltip) {\n      onLogicalBlur();\n    }\n  }\n\n  const isComplexItem = badge || metadata || severity !== 'none' || isStacked || isIconOnly;\n  const isLinkItem = href != null;\n\n  const labelIconRenderer = () => {\n    return (\n      <>\n        <Flex align=\"center\" justify=\"center\" flex=\"1 1 auto\" gap=\"2x\">\n          {!isIconOnly && !isStacked && icon && labelRequirement && (\n            <span class={tabBarItemIconClasses} data-oj-tab-icon=\"startIcon\">\n              {icon}\n            </span>\n          )}\n          {!isIconOnly && labelRequirement && (\n            <span\n              class={tabBarItemLabelClasses}\n              style={maxWidthDimensions}\n              {...detectTruncationProps}>\n              {\n                <Text size=\"md\" weight=\"semiBold\">\n                  {label}\n                </Text>\n              }\n            </span>\n          )}\n        </Flex>\n        {!isLinkItem && removeIcon && <span class={removeClass}>{removeIcon}</span>}\n      </>\n    );\n  };\n\n  const complexItemRenderer = () => {\n    return (\n      <Flex flex=\"1 1 auto\">\n        <Flex\n          minWidth=\"10.5x\"\n          minHeight={isTall ? tabBarItemVars.lgHeight : '100%'}\n          height={\n            isStacked && labelRequirement ? tabBarItemVars.stackedHeight : tabBarItemVars.mdHeight\n          }\n          direction={isStacked && labelRequirement ? 'column' : 'row'}\n          gap=\"2x\"\n          align=\"center\"\n          justify=\"center\"\n          alignSelf=\"center\"\n          flex=\"1 1 auto\">\n          {(isStacked || isIconOnly) && (\n            <div aria-label={isIconOnly ? label : undefined} class={tabBarItemIconClasses}>\n              {icon}\n              <span class={tabBarItemStackedBadgeClasses}>\n                {badge ? (\n                  <Badge size=\"xs\" variant=\"neutral\">\n                    {badge}\n                  </Badge>\n                ) : null}\n              </span>\n            </div>\n          )}\n          {!isIconOnly && !isStacked && icon && labelRequirement && (\n            <span class={tabBarItemIconClasses} data-oj-tab-icon=\"startIcon\">\n              {icon}\n            </span>\n          )}\n          {!isIconOnly && labelRequirement && (\n            <span\n              class={tabBarItemLabelClasses}\n              style={maxWidthDimensions}\n              {...detectTruncationProps}>\n              {\n                <Text size=\"md\" weight=\"semiBold\">\n                  {label}\n                </Text>\n              }\n            </span>\n          )}\n          {!isStacked && !isIconOnly && badge && labelRequirement && (\n            <span data-oj-tab-badge={badge}>\n              <Badge size=\"md\" variant=\"neutralSubtle\">\n                {badge}\n              </Badge>\n            </span>\n          )}\n          {metadata && (\n            <span class={tabBarItemMetadataClasses} data-oj-tab-metadata={metadata}>\n              <Text size=\"md\" weight=\"normal\">\n                {'( ' + metadata + ' )'}\n              </Text>\n            </span>\n          )}\n          {severityRequirement && (\n            <span class={tabBarItemIconClasses} data-oj-tab-severity={severity}>\n              {IconComponent(severity)}\n            </span>\n          )}\n        </Flex>\n        {!isLinkItem && removeIcon && <span class={removeClass}>{removeIcon}</span>}\n      </Flex>\n    );\n  };\n\n  const tabBarItemRenderer = () => {\n    return (\n      <div\n        data-oj-key={itemKey}\n        data-oj-removable={removeIcon ? 'true' : undefined}\n        id={tabItemPrefix + itemKey}\n        class={tabBarItem}\n        role=\"tab\"\n        aria-controls={ariaControls}\n        aria-selected={isSelected}\n        aria-haspopup={ariaHasPopup}\n        {...mergeProps(pressProps, tooltipEventHandlerProps, conveyorBeltProps)}\n        ref={ref}\n        style={isComplexItem ? flexDimensions : tabDimensions}>\n        {isComplexItem ? complexItemRenderer() : labelIconRenderer()}\n        {tooltipContent}\n      </div>\n    );\n  };\n\n  const tabBarLinkItemRenderer = () => {\n    return (\n      <div\n        ref={ref}\n        class={tabBarItem}\n        {...mergeProps(pressProps, tooltipEventHandlerProps, conveyorBeltProps)}\n        style={isComplexItem ? flexDimensions : tabDimensions}>\n        <a\n          onClick={onClickLink}\n          class={tabBarItemLinkClasses}\n          href={href}\n          data-oj-key={itemKey}\n          data-oj-removable={removeIcon ? 'true' : undefined}\n          id={tabItemPrefix + itemKey}\n          role=\"tab\"\n          tabindex={-1}\n          aria-controls={ariaControls}\n          aria-selected={isSelected}\n          aria-haspopup={ariaHasPopup}>\n          {isComplexItem ? complexItemRenderer() : labelIconRenderer()}\n        </a>\n        {tooltipContent}\n      </div>\n    );\n  };\n  return isLinkItem ? tabBarLinkItemRenderer() : tabBarItemRenderer();\n}\n"],"names":["onClickLink","event","preventDefault","itemKey","label","icon","badge","metadata","severity","removeIcon","showFocusRingOverride","selectionOverride","displayOverride","labelMaxWidth","href","ariaControls","ariaHasPopup","translations","useTranslationBundle","onSelect","selection","currentKey","showFocusRing","hideTooltip","layout","display","size","isEdgeBottom","tabItemPrefix","useTabBarContext","isCurrent","ref","conveyorBeltProps","useConveyorBeltItem","handlePress","useCallback","value","pressProps","usePress","isSelected","isStacked","isIconOnly","isTall","labelRequirement","undefined","severityRequirement","IconComponent","severityValue","_jsx","jsx","ErrorS","color","accessibleLabel","tabBar_tabContainsErrors","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","direction","useUser","makeFocusRingVisible","makeSelectionVisible","classes","styles","tabBarItemIcon","tabBarItemIconStacked","tabBarItemMetadata","tabBarItemStackedBadge","tabBarItemStackedBadgeRtl","tabBarItemRemoveIcon","tabBarItemLabel","tabBarItemLabelTruncated","tabBarItemLink","useComponentTheme","TabBarItemRedwoodTheme","current","focusRing","edgeBottom","tabBarItem","classNames","tabBarItemLabelClasses","tabBarItemIconClasses","tabBarItemMetadataClasses","tabBarItemStackedBadgeClasses","removeClass","tabBarItemLinkClasses","styleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","dimensionInterpolations","boxAlignmentInterpolations","tabDimensions","flex","minWidth","height","tabBarItemVars","lgHeight","mdHeight","gap","flexDimensions","maxWidthDimensions","maxWithInterpolation","maxWidth","detectTruncationProps","isTextTruncated","useDetectTruncation","showTooltip","tooltipContent","tooltipEventHandlerProps","onLogicalFocus","onLogicalBlur","isDisabled","isOpen","setOpen","useState","tooltipProps","useTooltipControlled","focusStrategy","text","onToggle","useTabBarItemTooltip","isComplexItem","isLinkItem","labelIconRenderer","_jsxs","_Fragment","children","Flex","align","justify","class","style","Text","weight","complexItemRenderer","jsxs","minHeight","stackedHeight","alignSelf","Badge","variant","mergeProps","onClick","id","role","tabindex"],"mappings":"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"}