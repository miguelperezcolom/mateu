{"version":3,"file":"Icon-865b3c78.js","sources":["../../src/UNSAFE_Icon/Icon.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment, type JSX } from 'preact';\nimport { Size, sizeToCSS } from '#utils/UNSAFE_size';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { styles } from './themes/IconStyle.css';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\n\ntype IntrinsicProps = UnpackSignals<JSX.IntrinsicSVGElements['svg']>;\n\ntype Props = {\n  /**\n   * The size of the component. Defaults to '1em', which means the font size of the parent is used.\n   */\n  size?: Size;\n  /**\n   * The color of the component. Defaults to 'currentColor', which behaves like the CSS 'currentColor' value.\n   */\n  color?: keyof typeof styles;\n  /**\n   * A label to be used for accessibility purposes.\n   */\n  accessibleLabel?: string;\n  /**\n   * The viewBox attribute value of the `<svg />` root. This defines the position and dimension, in user space, of the SVG viewport for the children content.\n   */\n  viewBox?: Pick<IntrinsicProps, 'viewBox'>['viewBox'];\n  /**\n   * The content of the icon. This can be any SVG children content.\n   */\n  children?: Pick<IntrinsicProps, 'children'>['children'];\n};\n\n/**\n * The Icon component enables you to define your own custom icon components. It renders as an <svg /> element and accepts SVG children content.\n */\nexport const Icon = ({\n  size = '1em',\n  color = 'currentColor',\n  accessibleLabel = '',\n  viewBox = 'none',\n  children\n}: Props) => {\n  const browser = getClientHints().browser;\n  if (browser === 'safari') {\n    // Due to JET-73917 (i.e. Safari bug https://bugs.webkit.org/show_bug.cgi?id=199236),\n    // height=\"1em\" width=\"1em\" style={{ fontSize: sideLength }}\n    // causes the icon to not scale automatically with browser zoom in Safari.\n    //\n    // The other option is to omit style fontSize, and directly set\n    // height={sideLength} and width={sideLength}. There's no particular reason why\n    // we needed to do 1em height/width + fontSize.\n    // The only difference between this and 1em height/width + fontSize is that\n    // any relative values used or <text> inside the <svg> becomes relative to\n    // the parent (or root for rem) instead of to the fontSize set on the <svg>.\n    // But all of our icons don't and probably never will contain relative values\n    // or <text> elements. So this should effectively be a safe replacement.\n    //\n    // However, all browsers complain that CSS vars are not valid values for\n    // svg height and width attributes.\n    // So set width and height in the style instead.\n    // This solution works for all browsers, but limiting this as a targeted fix\n    // for the Safari issue.\n    const sideLength = size === '1em' ? size : `${sizeToCSS(size)}`;\n    return (\n      <Svg\n        viewBox={viewBox}\n        accessibleLabel={accessibleLabel}\n        class={styles[color]}\n        style={{ width: sideLength, height: sideLength }}>\n        {children}\n      </Svg>\n    );\n  }\n  return (\n    <Svg\n      height=\"1em\"\n      width=\"1em\"\n      viewBox={viewBox}\n      accessibleLabel={accessibleLabel}\n      class={styles[color]}\n      style={{ fontSize: size === '1em' ? size : `${sizeToCSS(size)}` }}>\n      {children}\n    </Svg>\n  );\n};\n\ntype BaseSvgProps = Pick<\n  IntrinsicProps,\n  'height' | 'width' | 'viewBox' | 'class' | 'children' | 'style'\n>;\ntype SvgProps = BaseSvgProps & {\n  accessibleLabel: string;\n};\n\nconst Svg = ({ accessibleLabel, ...otherProps }: SvgProps) =>\n  accessibleLabel ? (\n    <SemanticSvg accessibleLabel={accessibleLabel} {...otherProps} />\n  ) : (\n    <DecorativeSvg {...otherProps} />\n  );\n\nconst DecorativeSvg = (props: BaseSvgProps) => <svg {...props} />;\n\nconst SemanticSvg = ({ accessibleLabel, children, ...props }: SvgProps) => {\n  // See JET-56791.\n  // We want the same effect as specifying a SVG <title> element for showing a tooltip.\n  // When <title> is used, the SVG is not keyboard focusable by default, and the tooltip only shows up\n  // on mouse hover. Typically any accessibility requirements beyond this should be handled by making the parent\n  // element accessible. This was the approved behavior by APO, and is consistent with the behavior of icons\n  // from other libraries.\n  //\n  // We need to use useTooltip for displaying the tooltip, but it appears spreading the onFocus and onBlur event\n  // handlers generated by the useTooltip hook onto the <svg> causes it to become keyboard focusable*.\n  // To fix this we need to omit spreading the onFocus and onBlur event handlers from the tooltipProps.\n  //\n  // *Most browsers implement the SVG 1.1 spec. There's also a SVG 1.2 Tiny spec that's not\n  // fully implemented in most browsers.\n  // The non-draft version of SVG 1.1 doesn't document the focus conditions and behavior AFAICT.\n  // However it appears browsers implemented the same behavior as the focusable=\"auto\" behavior as described\n  // in SVG 1.2 Tiny: https://www.w3.org/TR/SVGTiny12/interact.html#focus\n  // In particular, it states that if the SVG element has focus related event listeners registered on it, then it becomes focusable.\n  // The spec mentions focusin and focusout event handlers, but not focus event handlers. The reality is\n  // that having a focus event handler registered also causes the <svg> to become focusable (tested on Chrome), and that's\n  // probably because a focus event always precedes a focusin event.\n  // Note also setting focusable=\"false\", or setting tabindex=\"-1\" on the <svg> to prevent it from becoming focusable\n  // doesn't work based on my testing, and that's most probably because the focusable and tabindex attributes are not part\n  // of the SVG 1.1 spec.\n  const {\n    tooltipContent,\n    tooltipProps: { onFocus, onBlur, ...restTooltipProps }\n  } = useTooltip({\n    text: accessibleLabel,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    }\n  });\n\n  return (\n    <Fragment>\n      <svg role=\"img\" {...props} {...restTooltipProps} aria-label={accessibleLabel}>\n        {children}\n      </svg>\n      {tooltipContent}\n    </Fragment>\n  );\n};\n"],"names":["Svg","accessibleLabel","otherProps","_jsx","SemanticSvg","jsx","DecorativeSvg","props","children","tooltipContent","tooltipProps","onFocus","onBlur","restTooltipProps","useTooltip","text","anchor","x","y","_jsxs","Fragment","role","size","color","viewBox","getClientHints","browser","sideLength","sizeToCSS","class","styles","style","width","height","fontSize"],"mappings":"2eA0Ca,MA2DPA,EAAM,EAAGC,qBAAoBC,KACjCD,EACEE,EAAAA,IAACC,EAAW,CAACH,gBAAiBA,KAAqBC,IAEnDC,EAACE,IAAAC,MAAkBJ,IAGjBI,EAAiBC,GAAwBJ,EAAAE,IAAA,MAAA,IAASE,IAElDH,EAAc,EAAGH,kBAAiBO,cAAaD,MAwBnD,MAAME,eACJA,EACAC,cAAcC,QAAEA,EAAOC,OAAEA,KAAWC,IAClCC,aAAW,CACbC,KAAMd,EACNe,OAAQ,CACNC,EAAG,UACHC,EAAG,aAIP,OACEC,OAACC,EAAQA,SAAA,CAAAZ,SAAA,CACPL,EAAAA,WAAKkB,KAAK,SAAUd,KAAWM,EAAgB,aAAcZ,EAC1DO,SAAAA,IAEFC,IAEH,SA9GgB,EAACa,KACnBA,EAAO,MACPC,QAAQ,eACRtB,kBAAkB,GAClBuB,UAAU,OACVhB,eAGA,GAAgB,WADAiB,mBAAiBC,QACP,CAmBxB,MAAMC,EAAsB,QAATL,EAAiBA,EAAO,GAAGM,EAASA,UAACN,KACxD,OACEnB,EAAAE,IAACL,EAAG,CACFwB,QAASA,EACTvB,gBAAiBA,EACjB4B,MAAOC,SAAOP,GACdQ,MAAO,CAAEC,MAAOL,EAAYM,OAAQN,GAAYnB,SAC/CA,GAGN,CACD,OACEL,EAACE,IAAAL,EACC,CAAAiC,OAAO,MACPD,MAAM,MACNR,QAASA,EACTvB,gBAAiBA,EACjB4B,MAAOC,EAAAA,OAAOP,GACdQ,MAAO,CAAEG,SAAmB,QAATZ,EAAiBA,EAAO,GAAGM,YAAUN,MACvDd,SAAAA,GAEH"}