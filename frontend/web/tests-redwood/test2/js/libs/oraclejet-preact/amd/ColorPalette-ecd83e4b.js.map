{"version":3,"file":"ColorPalette-ecd83e4b.js","sources":["../../src/UNSAFE_ColorPalette/ColorPalette.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useState, useEffect, forwardRef, useImperativeHandle } from 'preact/compat';\nimport { useRef } from 'preact/hooks';\nimport { Ref } from 'preact';\nimport { SwatchFlexView } from '#PRIVATE_SwatchFlexView';\nimport { ColorSwatch } from '#UNSAFE_ColorSwatch';\nimport { parseColorValue, type ColorValue } from '#utils/UNSAFE_color';\nimport { Flex } from '#UNSAFE_Flex/Flex';\nimport { Keys } from '#utils/UNSAFE_keys';\nimport { ListItemRendererContext } from '#UNSAFE_Collection';\nimport { TestIdProps, useTestId } from '../hooks/UNSAFE_useTestId';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { PaddingProps, paddingInterpolations } from '../utils/UNSAFE_interpolations/padding';\nimport { ColorProps, colorInterpolations } from '../utils/UNSAFE_interpolations/colors';\nimport { AriaProps, ariaInterpolations } from '../utils/UNSAFE_interpolations/aria';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { sortPalette, convertPalette } from '#utils/UNSAFE_color';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport translations from '#resources/nls/en/bundle';\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\n\ntype StyleProps = DimensionProps & PaddingProps & ColorProps & AriaProps;\n\nexport type ColorPaletteProps = StyleProps &\n  TestIdProps & {\n    /**\n     * The selected color of the palette\n     */\n    value?: ColorValue;\n\n    /**\n     * The swatch size indicates how large the color swatches are rendered.\n     */\n    swatchSize?: 'xs' | 'sm';\n\n    /**\n     * An array of colors for the palette\n     */\n    palette?: Array<ColorValue>;\n\n    /**\n     * Invoked when a swatch is toggled\n     */\n    onCommit?: (details: ValueUpdateDetail<ColorValue>) => void;\n  };\n\nconst interpolations = [\n  ...Object.values(dimensionInterpolations),\n  ...Object.values(colorInterpolations),\n  ...Object.values(ariaInterpolations),\n  ...Object.values(paddingInterpolations)\n];\n\nconst mergedInterpolations = mergeInterpolations<ColorPaletteProps>(interpolations);\n\n/**\n * A Color Palette is an interface that displays a variety of color swatches allowing\n * users to select a color value.\n *\n * @param {ColorPaletteProps} props ColorPalette component props.\n * @returns {JSX.Element} ColorPalette component element.\n */\nexport const ColorPalette = forwardRef(\n  (\n    { value, swatchSize = 'sm', palette, onCommit, testId, ...props }: ColorPaletteProps,\n    focusHandleRef?: Ref<FocusableHandle>\n  ) => {\n    const {\n      class: mergedClasses,\n      ariaLabel,\n      ariaLabelledBy,\n      ...mergedStyles\n    } = mergedInterpolations(props);\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const testIdProps = useTestId(testId);\n    const colorPaletteTranslated = translations.accColorPalette();\n\n    const [current, setCurrent] = useState<string | undefined>(undefined);\n    const [selected, setSelected] = useState<Keys<string | number>>({\n      all: false,\n      keys: new Set([(value as string) ?? undefined])\n    });\n\n    useEffect(() => {\n      setSelected({\n        all: false,\n        keys: new Set([parseColorValue(value ?? undefined)])\n      });\n    }, [value]);\n\n    useEffect(() => {}, [selected]); // redraw when selection occurs\n\n    const getRowKey = (data: unknown) => {\n      return data as string;\n    };\n\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(focusHandleRef!, () => ({\n      focus: () => {\n        if (rootRef.current) {\n          rootRef.current.focus();\n        }\n      },\n      blur: () => {\n        if (rootRef.current) {\n          rootRef.current.blur();\n        }\n      }\n    }));\n\n    const dropdownStyle = {\n      width: '100%',\n      height: '100%'\n    };\n\n    return (\n      <div\n        aria-labelledby={ariaLabelledBy}\n        className={mergedClasses}\n        style={dropdownStyle}\n        {...testIdProps}\n        {...mergedStyles}>\n        <Flex align=\"center\">\n          <SwatchFlexView\n            ref={rootRef}\n            aria-label={ariaLabel ? ariaLabel : colorPaletteTranslated}\n            focusBehavior=\"content\"\n            data={palette ? convertPalette(sortPalette(palette)) : null}\n            getRowKey={getRowKey}\n            currentKey={current}\n            onCurrentKeyChange={(detail) => {\n              setCurrent(detail.value as string);\n            }}\n            selectedKeys={selected}>\n            {(context: ListItemRendererContext<string | number, unknown>) => (\n              <ColorSwatch\n                size={swatchSize}\n                testId={testId + '_palette' + '_colorSwatch_' + context.data}\n                aria-hidden={true}\n                value={context.data as ColorValue}\n                onToggle={() => {\n                  onCommit?.({\n                    value: context.data as ColorValue,\n                    previousValue: selected.keys?.values().next().value as ColorValue\n                  });\n                  setSelected({ all: false, keys: new Set([context.data as string]) });\n                }}\n                isSelected={selected.keys?.has(context.data as string)}></ColorSwatch>\n            )}\n          </SwatchFlexView>\n        </Flex>\n      </div>\n    );\n  }\n);\n\nColorPalette.displayName = 'ColorPalette';\n"],"names":["interpolations","Object","values","dimensionInterpolations","colorInterpolations","ariaInterpolations","paddingInterpolations","mergedInterpolations","mergeInterpolations","ColorPalette","forwardRef","value","swatchSize","palette","onCommit","testId","props","focusHandleRef","class","mergedClasses","ariaLabel","ariaLabelledBy","mergedStyles","rootRef","useRef","testIdProps","useTestId","colorPaletteTranslated","translations","accColorPalette","current","setCurrent","useState","undefined","selected","setSelected","all","keys","Set","useEffect","parseColorValue","useImperativeHandle","focus","blur","_jsx","jsx","className","style","width","height","children","Flex","align","SwatchFlexView","ref","focusBehavior","data","convertPalette","sortPalette","getRowKey","currentKey","onCurrentKeyChange","detail","selectedKeys","context","ColorSwatch","size","onToggle","previousValue","next","isSelected","has","displayName"],"mappings":"mYAuDA,MAAMA,EAAiB,IAClBC,OAAOC,OAAOC,8BACdF,OAAOC,OAAOE,0BACdH,OAAOC,OAAOG,yBACdJ,OAAOC,OAAOI,0BAGbC,EAAuBC,EAAAA,oBAAuCR,GASvDS,EAAeC,EAAUA,YACpC,EACIC,QAAOC,aAAa,KAAMC,UAASC,WAAUC,YAAWC,GAC1DC,KAEA,MACEC,MAAOC,EAAaC,UACpBA,EAASC,eACTA,KACGC,GACDf,EAAqBS,GAEnBO,EAAUC,SAAuB,MAEjCC,EAAcC,YAAUX,GACxBY,EAAyBC,UAAaC,mBAErCC,EAASC,GAAcC,EAAQA,cAAqBC,IACpDC,EAAUC,GAAeH,WAAgC,CAC9DI,KAAK,EACLC,KAAM,IAAIC,IAAI,CAAE3B,QAAoBsB,MAGtCM,EAAAA,WAAU,KACRJ,EAAY,CACVC,KAAK,EACLC,KAAM,IAAIC,IAAI,CAACE,EAAeA,gBAAC7B,QAASsB,MACxC,GACD,CAACtB,IAEJ4B,EAAAA,WAAU,QAAU,CAACL,IAOrBO,EAAmBA,oBAACxB,GAAiB,KAAO,CAC1CyB,MAAO,KACDnB,EAAQO,SACVP,EAAQO,QAAQY,OACjB,EAEHC,KAAM,KACApB,EAAQO,SACVP,EAAQO,QAAQa,MACjB,MASL,OACEC,EAAAC,IAAA,MAAA,CAAA,kBACmBxB,EACjByB,UAAW3B,EACX4B,MATkB,CACpBC,MAAO,OACPC,OAAQ,WAQFxB,KACAH,EACJ4B,SAAAN,EAAAC,IAACM,OAAI,CAACC,MAAM,SACVF,SAAAN,EAAAC,IAACQ,iBACC,CAAAC,IAAK/B,eACOH,GAAwBO,EACpC4B,cAAc,UACdC,KAAM3C,EAAU4C,EAAcA,eAACC,EAAWA,YAAC7C,IAAY,KACvD8C,UApCWH,GACVA,EAoCDI,WAAY9B,EACZ+B,mBAAqBC,IACnB/B,EAAW+B,EAAOnD,MAAgB,EAEpCoD,aAAc7B,EACbgB,SAACc,GACApB,MAACqB,cAAW,CACVC,KAAMtD,EACNG,OAAQA,0BAAwCiD,EAAQR,KAC3C,eAAA,EACb7C,MAAOqD,EAAQR,KACfW,SAAU,KACRrD,IAAW,CACTH,MAAOqD,EAAQR,KACfY,cAAelC,EAASG,MAAMnC,SAASmE,OAAO1D,QAEhDwB,EAAY,CAAEC,KAAK,EAAOC,KAAM,IAAIC,IAAI,CAAC0B,EAAQR,QAAmB,EAEtEc,WAAYpC,EAASG,MAAMkC,IAAIP,EAAQR,aAKjD,IAIN/C,EAAa+D,YAAc"}