{"version":3,"file":"TextField-51b63f5f.js","sources":["../../src/UNSAFE_TextField/TextFieldContent.tsx","../../src/UNSAFE_TextField/TextField.tsx"],"sourcesContent":["import type { ComponentChildren, ContextType, Ref, RefObject } from 'preact';\nimport { useCallback, useRef, useState } from 'preact/hooks';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport type { FormVariantContext } from '#hooks/UNSAFE_useFormVariantContext';\nimport { useInputGroupContext } from '#hooks/UNSAFE_useInputGroupContext';\nimport { useTextFieldTooltip } from './useTextFieldTooltip';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { Flex } from '#UNSAFE_Flex';\nimport { isEmbeddedVariant } from '#utils/PRIVATE_formControlUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport type { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\n\ntype VariantProps = {\n  contentVariant?: 'input' | 'textarea';\n  statusVariant?: 'error' | 'none' | 'warning';\n  styleVariant?: ContextType<typeof FormVariantContext>;\n};\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  startContent?: ComponentChildren;\n  endContent?: ComponentChildren;\n  resize?: 'horizontal' | 'vertical' | 'both';\n  rootRef?: Ref<HTMLDivElement>;\n  hasZeroStartMargin?: boolean;\n  labelText?: string;\n};\n\n// Renders the oj-text-field-container dom which includes the\n// start, middle (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const TextFieldContent = ({\n  contentVariant = 'input',\n  insideLabel,\n  labelText,\n  mainContent,\n  startContent,\n  statusVariant = 'none',\n  styleVariant = 'default',\n  endContent,\n  resize,\n  rootRef,\n  hasZeroStartMargin\n}: Props) => {\n  const { hasTruncatedLabel, isDisabled, isFocused, isLoading } = useFormFieldContext();\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const hasInsideLabel = insideLabel !== undefined;\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const {\n    variantClasses,\n    styles: { textFieldContainerBase }\n  } = useComponentTheme<TextFieldVariantOptions, TextFieldStyles>(TextFieldRedwoodTheme, {\n    statusVariant,\n    styleVariant: isEmbeddedVariant(styleVariant) ? 'embedded' : 'default',\n    contentVariant,\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    focused: isFocused ? 'isFocused' : 'notFocused',\n    disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n    loading: isLoading ? 'isLoading' : 'notLoading',\n    resize: resize ?? 'none',\n    withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n    inputGroupPosition\n  });\n\n  const { variantClasses: startContentStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    {\n      startContent: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      startContentMargin: hasZeroStartMargin ? 'noStartMargin' : 'hasStartMargin',\n      startContentDisabled: isDisabled ? 'isDisabled' : 'notDisabled'\n    }\n  );\n\n  const {\n    variantClasses: middleStyles,\n    styles: { textFieldEndContent }\n  } = useComponentTheme<TextFieldVariantOptions, TextFieldStyles>(TextFieldRedwoodTheme, {\n    middleContent: contentVariant,\n    textAreaResizeDirection: resize && contentVariant === 'textarea' ? direction : undefined\n  });\n\n  // Use an onKeyDownCapture handler to set a flag that closes the tooltip when any key is pressed.\n  // Reset the flag when we see the user blur out of the input.\n  const [keyDownCaptureKeyPressed, setKeyDownCaptureKeyPressed] = useState(false);\n  const keyDownCaptureHandler = useCallback(() => {\n    if (!keyDownCaptureKeyPressed && hasTruncatedLabel) {\n      setKeyDownCaptureKeyPressed(true);\n    }\n  }, [hasTruncatedLabel, keyDownCaptureKeyPressed]);\n  const blurHandler = useCallback(\n    (event: FocusEvent) => {\n      if (\n        keyDownCaptureKeyPressed &&\n        (event.relatedTarget == null ||\n          !(event.currentTarget as HTMLElement).contains(event.relatedTarget as HTMLElement))\n      ) {\n        setKeyDownCaptureKeyPressed(false);\n      }\n    },\n    [keyDownCaptureKeyPressed]\n  );\n\n  const fieldRef = useRef(null);\n  const ref = rootRef ?? fieldRef;\n  const { tooltipContent, tooltipEventHandlerProps } = useTextFieldTooltip({\n    hasTruncatedLabel: hasTruncatedLabel && !keyDownCaptureKeyPressed,\n    fieldRef: ref as RefObject<HTMLElement>,\n    isDisabled: !hasInsideLabel || !!isDisabled,\n    label: labelText\n  });\n  const eventHandlers =\n    hasInsideLabel && !isDisabled\n      ? { onBlur: blurHandler, onKeyDownCapture: keyDownCaptureHandler }\n      : {};\n\n  return (\n    <div\n      role=\"presentation\"\n      class={classNames([variantClasses, textFieldContainerBase])}\n      ref={ref}\n      {...tooltipEventHandlerProps}>\n      {startContent && (\n        <span class={startContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {startContent}\n          </Flex>\n        </span>\n      )}\n      <div class={middleStyles} {...eventHandlers}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={textFieldEndContent}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n      {tooltipContent}\n    </div>\n  );\n};\n","import type { ComponentChildren, ComponentProps, Ref, JSX } from 'preact';\n\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { LabelValueLayout } from '#UNSAFE_LabelValueLayout';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { StyledTextField } from './StyledTextField';\nimport { TextFieldContent } from './TextFieldContent';\n\n// TextField takes the inputElem and userAssistanceContainer\n// and renders the form component's root dom, along with the\n// TextFieldContent, and the user assistance container.\n\n// The PickedProps are the ones we pass through to the the TextFieldContent\ntype PickedPropsFromTextFieldContent = Pick<\n  ComponentProps<typeof TextFieldContent>,\n  | 'hasZeroStartMargin'\n  | 'contentVariant'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'mainContent'\n  | 'endContent'\n  | 'resize'\n  | 'labelText'\n>;\ntype PickedPropsFromHTMLElement = Pick<UnpackSignals<JSX.HTMLAttributes<HTMLElement>>, 'id'>;\n// TODO: How should a parent component listen to events for the text field?  The recommendation\n// was to remove event listeners from TextField itself and instead configure the TextFieldInput\n// with them, for example, thus keeping TextField a more pure layout component.  The\n// TextFieldInput renders the focusable input element, and may be a more natural place for\n// listeners.  We would potentially have to add similar listeners for the ReadonlyTextField, but\n// that component renders the focusable element itself;  there is no TextFieldInput or analogous\n// component passed in.  (from review on 3/8/22)\ntype FocusEvents = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'onFocus' | 'onBlur'>;\ntype KeyEvents = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'onKeyDown'>;\ntype MouseEvents = Pick<\n  UnpackSignals<JSX.IntrinsicElements['div']>,\n  'onMouseDown' | 'onMouseEnter' | 'onMouseLeave'\n>;\ntype LabelProps = {\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  labelStartWidth?: Size;\n};\ntype Props = PickedPropsFromTextFieldContent &\n  PickedPropsFromHTMLElement &\n  FocusEvents &\n  KeyEvents &\n  MouseEvents &\n  LabelProps &\n  TestIdProps & {\n    columnSpan?: LayoutColumnSpan;\n    compactUserAssistance?: ComponentChildren;\n    inlineUserAssistance?: ComponentChildren;\n    mainFieldRef?: Ref<HTMLDivElement>;\n    rootRef?: Ref<HTMLElement>;\n  };\n\n// TODO: Do we need named props for start/endContent, or could they just be children that get\n// wrapped in a flex layout?  (from review on 3/8/22)\n\n// TODO: Instead of passing the inputElem, label, and userAssistance as named props here, should we\n// have a separate layout component that lays them out, which could just be passed as a child\n// to the TextField?  (from review on 3/8/22)\n\nexport const TextField = ({\n  contentVariant,\n  id,\n  endContent,\n  mainContent,\n  startContent,\n  columnSpan,\n  compactUserAssistance,\n  inlineUserAssistance,\n  label,\n  labelEdge,\n  labelStartWidth,\n  labelText,\n  mainFieldRef,\n  resize,\n  statusVariant,\n  styleVariant,\n  hasZeroStartMargin,\n  rootRef,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onMouseDown,\n  onMouseEnter,\n  onMouseLeave,\n  testId\n}: Props) => {\n  const testIdProps = useTestId(testId);\n  // TODO: How should a parent form component render component-specific content within TextField,\n  // for example an aria live region?  Instead of a children prop on TextField, could the parent\n  // component pass comp-specific content through other props, like inputElem?   The parent could\n  // have its own component that composes inputElem with additional DOM.  (from review on 3/8/22)\n\n  const isStartTop = label !== undefined && (labelEdge === 'start' || labelEdge === 'top');\n  const textFieldContent = (\n    <TextFieldContent\n      contentVariant={contentVariant}\n      endContent={endContent}\n      labelText={labelText}\n      mainContent={mainContent}\n      resize={resize}\n      rootRef={mainFieldRef}\n      startContent={startContent}\n      statusVariant={statusVariant}\n      styleVariant={styleVariant}\n      hasZeroStartMargin={hasZeroStartMargin}\n      {...(!isStartTop ? { insideLabel: label } : {})}\n    />\n  );\n\n  const innerContent = (\n    <>\n      {compactUserAssistance}\n      {textFieldContent}\n      {inlineUserAssistance}\n    </>\n  );\n\n  const styledTextFieldChildren = isStartTop ? (\n    <LabelValueLayout\n      columnSpan={columnSpan}\n      label={label}\n      labelEdge={labelEdge}\n      labelStartWidth={labelStartWidth}>\n      {innerContent}\n    </LabelValueLayout>\n  ) : (\n    innerContent\n  );\n\n  return (\n    <StyledTextField\n      id={id}\n      columnSpan={columnSpan}\n      onFocusIn={onFocus}\n      onFocusOut={onBlur}\n      onKeyDown={onKeyDown}\n      onMouseDown={onMouseDown}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      ref={rootRef}\n      variant={styleVariant}\n      {...testIdProps}>\n      {styledTextFieldChildren}\n    </StyledTextField>\n  );\n};\n"],"names":["TextFieldContent","contentVariant","insideLabel","labelText","mainContent","startContent","statusVariant","styleVariant","endContent","resize","rootRef","hasZeroStartMargin","hasTruncatedLabel","isDisabled","isFocused","isLoading","useFormFieldContext","direction","useUser","isLtr","hasInsideLabel","undefined","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","variantClasses","styles","textFieldContainerBase","useComponentTheme","TextFieldRedwoodTheme","isEmbeddedVariant","focused","disabled","loading","withinGroup","startContentStyles","startContentMargin","startContentDisabled","middleStyles","textFieldEndContent","middleContent","textAreaResizeDirection","keyDownCaptureKeyPressed","setKeyDownCaptureKeyPressed","useState","keyDownCaptureHandler","useCallback","blurHandler","event","relatedTarget","currentTarget","contains","fieldRef","useRef","ref","tooltipContent","tooltipEventHandlerProps","useTextFieldTooltip","label","eventHandlers","onBlur","onKeyDownCapture","_jsxs","role","class","classNames","_jsx","children","Flex","justify","align","hasZeroMargins","id","columnSpan","compactUserAssistance","inlineUserAssistance","labelEdge","labelStartWidth","mainFieldRef","onFocus","onKeyDown","onMouseDown","onMouseEnter","onMouseLeave","testId","testIdProps","useTestId","isStartTop","textFieldContent","innerContent","_Fragment","Fragment","styledTextFieldChildren","jsx","LabelValueLayout","StyledTextField","onFocusIn","onFocusOut","variant"],"mappings":"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"}