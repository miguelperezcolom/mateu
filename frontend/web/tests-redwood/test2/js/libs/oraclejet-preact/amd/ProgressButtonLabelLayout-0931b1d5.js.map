{"version":3,"file":"ProgressButtonLabelLayout-0931b1d5.js","sources":["../../src/UNSAFE_ProgressButtonLabelLayout/AdjustedProgressCircle.tsx","../../src/UNSAFE_ProgressButtonLabelLayout/ProgressButtonLabelLayout.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ProgressCircle } from '../UNSAFE_ProgressCircle';\nimport { withThemeProps } from '#hoc/UNSAFE_withThemeProps';\nimport { View } from '#UNSAFE_View';\nimport { useColorScheme } from '#hooks/UNSAFE_useColorScheme';\n\nexport type Props = {\n  /**\n   * This indicates that the Loading indicator should be rendered in contrast.\n   */\n  isLoadingContrast?: boolean;\n};\n/**\n * AdjustedProgressCircle provides a Progress Circle that can be rendered on a dark background as needed.\n * @param param0\n * @returns\n */\nexport function AdjustedProgressCircle({ isLoadingContrast = false }: Props) {\n  const ViewWithThemeProps = withThemeProps(View);\n\n  const currentColorScheme = useColorScheme();\n  const newColorScheme = !currentColorScheme || currentColorScheme === 'light' ? 'dark' : 'light';\n\n  return isLoadingContrast ? (\n    <ViewWithThemeProps colorScheme={newColorScheme}>\n      <ProgressCircle size=\"sm\" value=\"indeterminate\" />\n    </ViewWithThemeProps>\n  ) : (\n    <ProgressCircle size=\"sm\" value=\"indeterminate\" />\n  );\n}\n\nAdjustedProgressCircle.displayName = 'AdjustedProgressCircle';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { useProgressButtonLabelLayoutTheme } from '#hooks/PRIVATE_useProgressButtonLabelLayoutTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { AdjustedProgressCircle } from './AdjustedProgressCircle';\nimport { useState } from 'preact/hooks';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\nexport type Props = {\n  /**\n   *The default slot is the button's text label. The oj-c-button element accepts plain text or DOM nodes as children for the default slot.\"\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The startIcon is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * Styling can be used for customizing icon layout by limiting padding (\"embedded\")\n   * The label can fill available width (\"fill\").\n   */\n  styling?: 'default' | 'embedded' | 'fill';\n\n  /**\n   * The size indicates how large the button is rendered.\n   */\n  size?: ComponentProps<typeof BaseButton>['size'];\n\n  /**\n   * Display indicates whether the label, the icons, or all elements should be rendered by the button.\n   */\n  display?: 'icons' | 'label' | 'all';\n\n  /**\n   * Specifies that a quick indeterminate action is taking place, and a progress circle should be rendered.\n   */\n  isLoading?: boolean;\n\n  /**\n   * Specifies a label to be added for accessibility during progress.\n   */\n  accessibleLoadingLabel?: string;\n\n  /**\n   * Specifies a label to be added for accessibility upon completion of progress.\n   */\n  accessibleLoadedLabel?: string;\n\n  /**\n   * This indicates that the Loading indicator should be rendered in contrast.\n   */\n  isLoadingContrast?: boolean;\n};\n/**\n * ProgressButtonLabelLayout provides the layout for progress button labels.\n * @param param0\n * @returns\n */\nexport function ProgressButtonLabelLayout({\n  size = 'md',\n  display = 'all',\n  styling = 'default',\n  isLoadingContrast = false,\n  isLoading = false,\n  children,\n  startIcon,\n  accessibleLoadedLabel,\n  accessibleLoadingLabel\n}: Props) {\n  const {\n    startIconClasses,\n    labelClasses,\n    labelStyles,\n    progressIconClasses,\n    containerClasses,\n    isShowIcons,\n    isShowText,\n    hasTextStartIcon\n  } = useProgressButtonLabelLayoutTheme({\n    display,\n    size,\n    styling,\n    isLoading,\n    startIcon,\n    children\n  });\n\n  const isLabelOnly = display === 'label' || !startIcon;\n  const mergedContainerClasses = classNames([\n    containerClasses,\n    isLoading ? progressIconClasses : undefined\n  ]);\n\n  const [loaded, setLoaded] = useState<boolean | undefined>(false);\n  const [loading, setLoading] = useState<boolean | undefined>(false);\n  if (isLoading && !loaded) {\n    setLoading(true);\n  }\n  if (!isLoading && loading) {\n    setLoaded(true);\n    setLoading(false);\n    setTimeout(() => {\n      setLoaded(false);\n    }, 500);\n  }\n\n  return (\n    <span class={mergedContainerClasses}>\n      {isShowIcons && startIcon && (\n        <span class={startIconClasses} aria-hidden={true}>\n          {isLoading ? <AdjustedProgressCircle isLoadingContrast={isLoadingContrast} /> : startIcon}\n        </span>\n      )}\n      {isShowText && children && (\n        <span aria-hidden={true} class={isLabelOnly ? undefined : labelClasses}>\n          {' '}\n          {children}{' '}\n        </span>\n      )}\n      {isShowText && children && isLoading && !hasTextStartIcon && (\n        <span class={labelStyles['floatingIcon']} aria-hidden={true}>\n          <AdjustedProgressCircle isLoadingContrast={isLoadingContrast} />\n        </span>\n      )}\n      {accessibleLoadedLabel ? (\n        <span aria-live=\"assertive\">\n          <HiddenAccessible>\n            {loaded ? accessibleLoadedLabel : isLoading ? accessibleLoadingLabel : undefined}\n          </HiddenAccessible>\n        </span>\n      ) : undefined}\n    </span>\n  );\n}\n\nProgressButtonLabelLayout.displayName = 'ProgressButtonLabelLayout';\n"],"names":["AdjustedProgressCircle","isLoadingContrast","ViewWithThemeProps","withThemeProps","View","currentColorScheme","useColorScheme","newColorScheme","_jsx","colorScheme","jsx","ProgressCircle","size","value","ProgressButtonLabelLayout","display","styling","isLoading","children","startIcon","accessibleLoadedLabel","accessibleLoadingLabel","startIconClasses","labelClasses","labelStyles","progressIconClasses","containerClasses","isShowIcons","isShowText","hasTextStartIcon","useProgressButtonLabelLayoutTheme","isLabelOnly","mergedContainerClasses","classNames","undefined","loaded","setLoaded","useState","loading","setLoading","setTimeout","_jsxs","jsxs","class","HiddenAccessible","displayName"],"mappings":"uTAuBgBA,GAAuBC,kBAAEA,GAAoB,IAC3D,MAAMC,EAAqBC,iBAAeC,EAAAA,MAEpCC,EAAqBC,EAAAA,iBACrBC,EAAkBF,GAA6C,UAAvBA,EAA0C,QAAT,OAE/E,OAAOJ,EACLO,EAAAA,IAACN,EAAmB,CAAAO,YAAaF,WAC/BC,EAACE,IAAAC,kBAAeC,KAAK,KAAKC,MAAM,oBAGlCL,EAAAA,IAACG,EAAcA,gBAACC,KAAK,KAAKC,MAAM,iBAEpC,CC+BgB,SAAAC,GAA0BF,KACxCA,EAAO,KAAIG,QACXA,EAAU,MAAKC,QACfA,EAAU,UAASf,kBACnBA,GAAoB,EAAKgB,UACzBA,GAAY,EAAKC,SACjBA,EAAQC,UACRA,EAASC,sBACTA,EAAqBC,uBACrBA,IAEA,MAAMC,iBACJA,EAAgBC,aAChBA,EAAYC,YACZA,EAAWC,oBACXA,EAAmBC,iBACnBA,EAAgBC,YAChBA,EAAWC,WACXA,EAAUC,iBACVA,GACEC,oCAAkC,CACpCf,UACAH,OACAI,UACAC,YACAE,YACAD,aAGIa,EAA0B,UAAZhB,IAAwBI,EACtCa,EAAyBC,EAAAA,WAAW,CACxCP,EACAT,EAAYQ,OAAsBS,KAG7BC,EAAQC,GAAaC,EAAQA,UAAsB,IACnDC,EAASC,GAAcF,EAAQA,UAAsB,GAY5D,OAXIpB,IAAckB,GAChBI,GAAW,IAERtB,GAAaqB,IAChBF,GAAU,GACVG,GAAW,GACXC,YAAW,KACTJ,GAAU,EAAM,GACf,MAIHK,EAAAC,KAAA,OAAA,CAAMC,MAAOX,EAAsBd,SAAA,CAChCS,GAAeR,GACdX,EAAAA,IAAA,OAAA,CAAMmC,MAAOrB,EAAgB,eAAe,EAAIJ,SAC7CD,EAAYT,EAACE,IAAAV,EAAuB,CAAAC,kBAAmBA,IAAwBkB,IAGnFS,GAAcV,GACbuB,OAAmB,OAAA,CAAA,eAAA,EAAME,MAAOZ,OAAcG,EAAYX,EAAYL,SAAA,CACnE,IACAA,EAAU,OAGdU,GAAcV,GAAYD,IAAcY,GACvCrB,MAAA,OAAA,CAAMmC,MAAOnB,EAA0B,aAAC,eAAe,EAAIN,SACzDV,EAAAA,IAACR,EAAuB,CAAAC,kBAAmBA,MAG9CmB,EACCZ,EAAAA,IAAgB,OAAA,CAAA,YAAA,YACdU,SAAAV,MAACoC,EAAAA,iBAAgB,CAAA1B,SACdiB,EAASf,EAAwBH,EAAYI,OAAyBa,WAGzEA,IAGV,CDxGAlC,EAAuB6C,YAAc,yBC0GrC/B,EAA0B+B,YAAc"}