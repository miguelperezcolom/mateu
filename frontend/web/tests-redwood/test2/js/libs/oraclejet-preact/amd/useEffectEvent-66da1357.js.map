{"version":3,"file":"useEffectEvent-66da1357.js","sources":["../../src/hooks/PRIVATE_useEffectEvent/useEffectEvent.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef } from 'preact/hooks';\n\n/**\n * A polyfill for react's experimental_useEffectEvent\n * See https://react.dev/reference/react/experimental_useEffectEvent\n *\n * @param callback The event function that needs to be wrapped\n * @returns A non-reactive function that always “sees” the latest values of your props and state.\n */\nexport function useEffectEvent<T extends Function>(callback: T): T {\n  const fnRef = useRef<T>(callback);\n  fnRef.current = callback;\n\n  return useCallback<any>((...args: any[]) => {\n    return fnRef.current.apply(null, args);\n  }, []);\n}\n"],"names":["callback","fnRef","useRef","current","useCallback","args","apply"],"mappings":"+EAgBM,SAA6CA,GACjD,MAAMC,EAAQC,SAAUF,GAGxB,OAFAC,EAAME,QAAUH,EAETI,EAAWA,aAAM,IAAIC,IACnBJ,EAAME,QAAQG,MAAM,KAAMD,IAChC,GACL"}