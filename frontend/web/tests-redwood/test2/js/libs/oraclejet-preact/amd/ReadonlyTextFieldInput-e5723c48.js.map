{"version":3,"file":"ReadonlyTextFieldInput-e5723c48.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldInput.tsx"],"sourcesContent":["import type { ComponentChildren, ContextType, Ref, JSX } from 'preact';\n\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\nimport { useAccessibleContext } from '#hooks/UNSAFE_useAccessibleContext';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport type { FormVariantContext } from '#hooks/UNSAFE_useFormVariantContext';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { textInterpolations, type TextProps } from '#utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '#utils/UNSAFE_mergeInterpolations';\nimport { formControlInheritTextAlign } from './themes/FormControlUtilsStyles.css';\nimport {\n  ReadonlyTextFieldInputStyles,\n  type ReadonlyTextFieldInputVariantOptions\n} from './themes/ReadonlyTextFieldInputStyles.css';\nimport { ReadonlyTextFieldInputRedwoodTheme } from './themes/redwood/ReadonlyTextFieldInputTheme';\n\ntype AutoFocusProp = UnpackSignals<JSX.IntrinsicElements['input']>['autofocus'];\n\ntype FocusProps = Pick<UnpackSignals<JSX.HTMLAttributes<HTMLElement>>, 'onBlur' | 'onFocus'>;\n\ntype ReadonlyAsInputProps = {\n  as: 'input';\n  type: UnpackSignals<JSX.IntrinsicElements['input']>['type'];\n  elementRef?: Ref<HTMLInputElement>;\n  rows?: never;\n};\n\ntype ReadonlyAsTextAreaProps = {\n  as: 'textarea';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: number;\n};\n\ntype ReadonlyAsDivProps = {\n  as?: 'div';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: never;\n};\n\ntype Props = TextProps &\n  (ReadonlyAsDivProps | ReadonlyAsInputProps | ReadonlyAsTextAreaProps) &\n  FocusProps & {\n    'aria-describedby'?: string;\n    'aria-label'?: string;\n    'aria-labelledby'?: string;\n    autoFocus?: AutoFocusProp;\n    formVariant?: ContextType<typeof FormVariantContext>;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    id?: UnpackSignals<JSX.HTMLAttributes<HTMLElement>>['id'];\n    inlineUserAssistance?: ComponentChildren;\n    innerReadonlyField?: ComponentChildren;\n    value?: string;\n    variant?: 'textarea';\n  };\n\n/**\n * Merge multiple ids into a space-separated list\n * @param ids The ids to be merged\n * @returns The space separated string of ids\n */\nfunction mergeIDs(...ids: (string | undefined)[]) {\n  return ids.filter(Boolean).join(' ') || undefined;\n}\n\nexport function ReadonlyTextFieldInput({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  'aria-labelledby': inputLabelledBy,\n  autoFocus,\n  as = 'div',\n  elementRef,\n  formVariant,\n  hasEmptyLabel,\n  hasInsideLabel = false,\n  inlineUserAssistance,\n  innerReadonlyField,\n  onBlur,\n  onFocus,\n  rows,\n  type,\n  value = '',\n  variant,\n  ...props\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const loadingAriaLabel = translations.formControl_loading();\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const ariaLabelForReadonly = isLoading ? loadingAriaLabel : ariaLabel;\n  const focusProps = { onBlur, onFocus };\n\n  // get classes for text align\n  const interpolations = [...Object.values(textInterpolations)];\n  const styleInterpolations = mergeInterpolations<Props>(interpolations);\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n  const { classes: themeClasses } = useComponentTheme<\n    ReadonlyTextFieldInputVariantOptions,\n    ReadonlyTextFieldInputStyles\n  >(ReadonlyTextFieldInputRedwoodTheme, {\n    textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n    formLayout: isFormLayout ? 'isFormLayout' : 'notFormLayout',\n    readonlyForm: isReadonlyForm ? 'isReadonlyForm' : 'notReadonlyForm',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel'\n  });\n\n  const readonlyDivClasses = classNames([\n    themeClasses,\n    styleInterpolationClasses,\n    // JET-72775 - Form control alignment in tables\n    // When we are in legacy collection components, we want to inherit the text align\n    // when it is not set explicitly.\n    formVariant === 'legacyEmbedded' && props.textAlign === undefined && formControlInheritTextAlign\n  ]);\n\n  // JET-52914 - Implement Tabbable mode API contract in InputText\n  // spread tabbableModeProps on component\n  const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n  // JET-52089: add unsafe API for specifying an external label which is added to ariaLabelledBy on the input or div,\n  // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n  // kinds of labels, this helps to ensure we don't override a meaningful label.\n  const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n  const ariaLabelledBy = hasEmptyLabel\n    ? mergeIDs(inputLabelledBy, UNSAFE_ariaLabelledBy)\n    : inputLabelledBy;\n\n  if (as === 'input') {\n    return (\n      <input\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-expect-error TS cannot infer the type correctly for the polymorphed ref\n        ref={elementRef}\n        type={type}\n        value={value}\n        {...(!isTabbable && tabbableModeProps)}\n        {...(hasInsideLabel && focusProps)}\n      />\n    );\n  }\n  if (as === 'textarea') {\n    return (\n      <textarea\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-expect-error TS cannot infer the type correctly for the polymorphed ref\n        ref={elementRef}\n        rows={rows}\n        {...(!isTabbable && tabbableModeProps)}\n        {...(hasInsideLabel && focusProps)}>\n        {value}\n      </textarea>\n    );\n  }\n  return (\n    <div\n      aria-describedby={ariaDescribedBy}\n      aria-label={ariaLabelForReadonly}\n      aria-labelledby={ariaLabelledBy}\n      aria-readonly={true}\n      autofocus={autoFocus}\n      class={readonlyDivClasses}\n      // @ts-expect-error TS cannot infer the type correctly for the polymorphed ref\n      ref={elementRef}\n      role=\"textbox\"\n      {...tabbableModeProps}\n      {...(hasInsideLabel && focusProps)}>\n      {value}\n    </div>\n  );\n}\n"],"names":["ariaDescribedBy","ariaLabel","inputLabelledBy","autoFocus","as","elementRef","formVariant","hasEmptyLabel","hasInsideLabel","inlineUserAssistance","innerReadonlyField","onBlur","onFocus","rows","type","value","variant","props","loadingAriaLabel","useTranslationBundle","formControl_loading","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","ariaLabelForReadonly","focusProps","interpolations","Object","values","textInterpolations","styleInterpolations","mergeInterpolations","class","styleInterpolationClasses","classes","themeClasses","useComponentTheme","ReadonlyTextFieldInputRedwoodTheme","textarea","formLayout","readonlyForm","insideLabel","readonlyDivClasses","classNames","undefined","textAlign","formControlInheritTextAlign","isTabbable","tabbableModeProps","useTabbableMode","UNSAFE_ariaLabelledBy","useAccessibleContext","ariaLabelledBy","ids","filter","Boolean","join","mergeIDs","_jsx","autofocus","readonly","ref","children","role"],"mappings":"qlBAyEM,UACJ,mBAAoBA,EACpB,aAAcC,EACd,kBAAmBC,EAAeC,UAClCA,EAASC,GACTA,EAAK,MAAKC,WACVA,EAAUC,YACVA,EAAWC,cACXA,EAAaC,eACbA,GAAiB,EAAKC,qBACtBA,EAAoBC,mBACpBA,EAAkBC,OAClBA,EAAMC,QACNA,EAAOC,KACPA,EAAIC,KACJA,EAAIC,MACJA,EAAQ,GAAEC,QACVA,KACGC,IAEH,MACMC,EADeC,uBAAiC,4BAChBC,uBAChCC,aAAEA,EAAcC,WAAYC,GAAmBC,EAAcA,kBAC7DC,UAAEA,GAAcC,EAAAA,sBAChBC,EAAuBF,EAAYP,EAAmBjB,EACtD2B,EAAa,CAAEjB,SAAQC,WAGvBiB,EAAiB,IAAIC,OAAOC,OAAOC,EAAAA,qBACnCC,EAAsBC,sBAA2BL,IAC/CM,MAAOC,GAA8BH,EAAoBhB,IACzDoB,QAASC,GAAiBC,EAAAA,kBAGhCC,EAAAA,mCAAoC,CACpCC,SAAsB,aAAZzB,EAAyB,aAAe,cAClD0B,WAAYrB,EAAe,eAAiB,gBAC5CsB,aAAcpB,EAAiB,iBAAmB,kBAClDqB,YAAapC,EAAiB,iBAAmB,kBAG7CqC,EAAqBC,EAAAA,WAAW,CACpCR,EACAF,EAIgB,mBAAhB9B,QAAwDyC,IAApB9B,EAAM+B,WAA2BC,EAA2BA,+BAK5FC,WAAEA,EAAUC,kBAAEA,GAAsBC,EAAeA,mBAKnDC,sBAAEA,GAA0BC,EAAAA,uBAC5BC,EAAiBhD,EA9DzB,YAAqBiD,GACnB,OAAOA,EAAIC,OAAOC,SAASC,KAAK,WAAQZ,CAC1C,CA6DMa,CAAS1D,EAAiBmD,GAC1BnD,EAEJ,MAAW,UAAPE,EAEAyD,EAAAA,IACoB,QAAA,CAAA,mBAAA7D,eACN2B,EAAoB,kBACf4B,EACjBO,UAAW3D,EACXgC,MAAOU,EACPkB,UAAU,EAEVC,IAAK3D,EACLS,KAAMA,EACNC,MAAOA,MACDmC,GAAcC,KACf3C,GAAkBoB,IAIlB,aAAPxB,EAEAyD,EAAAA,IACoB,WAAA,CAAA,mBAAA7D,eACN2B,EAAoB,kBACf4B,EACjBO,UAAW3D,EACXgC,MAAOU,EACPkB,UAAU,EAEVC,IAAK3D,EACLQ,KAAMA,MACAqC,GAAcC,KACf3C,GAAkBoB,EACtBqC,SAAAlD,IAKL8C,EAAAA,IACoB,MAAA,CAAA,mBAAA7D,EACN,aAAA2B,oBACK4B,EAAc,iBAChB,EACfO,UAAW3D,EACXgC,MAAOU,EAEPmB,IAAK3D,EACL6D,KAAK,aACDf,KACC3C,GAAkBoB,WACtBb,GAGP"}