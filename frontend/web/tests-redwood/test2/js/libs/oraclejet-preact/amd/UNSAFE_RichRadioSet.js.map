{"version":3,"file":"UNSAFE_RichRadioSet.js","sources":["../../src/UNSAFE_RichRadioSet/RichRadioSet.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  type ComponentChildren,\n  type ComponentProps,\n  type Ref,\n  type JSX,\n  toChildArray\n} from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { BaseRichSelection } from '#PRIVATE_RichSelectionCommon';\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { RadioSetContext } from '#UNSAFE_RadioSet/RadioSetContext';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { RadioItemContext } from '#UNSAFE_RadioItem/RadioItemContext';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport type { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { Size } from '#utils/UNSAFE_size';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\n// Typing should stay in sync with BaseRichSelection. They cannot be imported directly\n// because BaseRichSelection is in a PRIVATE directory and will be removed in the production build.\ntype Props = TestIdProps &\n  Pick<UnpackSignals<JSX.AriaAttributes>, 'aria-describedby'> & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * Set of RichSelectionItems\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the set is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the set is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the set requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the set.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'inside' | 'start';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Specifies the layout of the item cards and media\n     */\n    layout: 'xl' | 'md' | 'sm';\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n    /**\n     * Callback invoked each time the user changes selected option.\n     */\n    onCommit: (detail: ValueUpdateDetail<string | number | undefined>) => void;\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n    /**\n     * Value of the radio option.\n     */\n    value?: string | number;\n  };\n\n/**\n * A rich radio set allows the user to select one option from a set of mutually exclusive options.\n */\nexport const RichRadioSet = forwardRef(\n  ({ children, onCommit, value, ...otherProps }: Props, ref?: Ref<FocusableHandle>) => {\n    const baseId = useId();\n\n    return (\n      <RadioSetContext.Provider\n        value={{\n          name: baseId,\n          value,\n          onCommit\n        }}>\n        <BaseRichSelection\n          {...otherProps}\n          baseId={baseId}\n          ref={ref}\n          selection=\"single\"\n          value={value}>\n          {toChildArray(children).map((child, index) => (\n            // index is needed for keyboard navigation with radio items\n            <RadioItemContext.Provider value={{ index }}>{child}</RadioItemContext.Provider>\n          ))}\n        </BaseRichSelection>\n      </RadioSetContext.Provider>\n    );\n  }\n);\n"],"names":["RichRadioSet","forwardRef","children","onCommit","value","otherProps","ref","baseId","useId","_jsx","RadioSetContext","Provider","name","jsx","BaseRichSelection","selection","toChildArray","map","child","index","RadioItemContext"],"mappings":"k2TA+GaA,GAAeC,EAAAA,YAC1B,EAAGC,WAAUC,WAAUC,WAAUC,GAAqBC,KACpD,MAAMC,EAASC,EAAAA,QAEf,OACEC,MAACC,EAAAA,gBAAgBC,SAAQ,CACvBP,MAAO,CACLQ,KAAML,EACNH,QACAD,YACDD,SACDO,EAACI,IAAAC,oBACK,IAAAT,EACJE,OAAQA,EACRD,IAAKA,EACLS,UAAU,SACVX,MAAOA,EAAKF,SACXc,EAAAA,aAAad,GAAUe,KAAI,CAACC,EAAOC,IAElCV,EAAAA,IAACW,EAAAA,iBAAiBT,SAAS,CAAAP,MAAO,CAAEe,SAAOjB,SAAGgB,SAIpD"}