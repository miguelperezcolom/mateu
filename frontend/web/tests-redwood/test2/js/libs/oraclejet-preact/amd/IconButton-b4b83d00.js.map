{"version":3,"file":"IconButton-b4b83d00.js","sources":["../../src/UNSAFE_IconButton/IconButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, ComponentProps, Fragment, JSX } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\nimport { forwardRef, ForwardedRef, ElementRef } from 'preact/compat';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { ButtonIntrinsicProps } from '../utils/UNSAFE_buttonUtils';\nimport { processGlobals } from '../utils/UNSAFE_buttonUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.IntrinsicElements['button']>, 'autofocus'>;\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\ntype BaseButtonProps = ComponentProps<typeof BaseButton>;\n\ntype BaseProps = IntrinsicProps &\n  ButtonIntrinsicProps &\n  Pick<BaseButtonProps, 'aria-haspopup'> &\n  WidthInterpolationProps & {\n    /**\n     * Specifies the icon for the button.\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variant. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n    /**\n     * The size indicates how large the button is rendered.\n     */\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n  };\n\n/**\n * Note that either an aria-label or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * aria-label - the aria label\n       */\n      'aria-label': string;\n\n      /**\n       * tooltip - overrides the aria-label for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      'aria-label'?: string;\n\n      tooltip: string;\n    };\n/**\n * Icon buttons are buttons that only show an icon and no label. They direct users to initiate or take actions and work with a single tap, click, or keystroke.\n */\nexport const IconButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      isRepeat = false,\n      size = 'md',\n      type: buttonType = 'button',\n      autofocus,\n      onAction,\n      width,\n      tooltip,\n      testId,\n      ...props\n    }: BaseProps & VariationAccessibleLabelProps & TestIdProps,\n    ref: ForwardedRef<ButtonHandle>\n  ) => {\n    const {\n      globalEventProps,\n      ariaProps: { 'aria-label': accessibleLabel, ...otherAriaProps }\n    } = processGlobals(props);\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ? tooltip : accessibleLabel,\n      isDisabled\n    });\n\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, globalEventProps, otherAriaProps)}\n          ref={ref}\n          elementDetails={elementDetails}\n          isDisabled={isDisabled}\n          isRepeat={isRepeat}\n          size={size}\n          autofocus={autofocus}\n          variant={variant}\n          width={width}\n          styling={['min']}\n          onAction={onAction}\n          aria-label={accessibleLabel ?? tooltip}\n          testId={testId}>\n          <ButtonLabelLayout\n            display={'icons'}\n            startIcon={props.children}\n            size={size}></ButtonLabelLayout>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconButton.displayName = 'IconButton';\n"],"names":["IconButton","forwardRef","variant","isDisabled","isRepeat","size","type","buttonType","autofocus","onAction","width","tooltip","testId","props","ref","globalEventProps","ariaProps","accessibleLabel","otherAriaProps","processGlobals","tooltipContent","tooltipProps","useTooltip","text","elementDetails","_jsxs","Fragment","_jsx","jsx","BaseButton","mergeProps","styling","children","ButtonLabelLayout","display","startIcon","displayName"],"mappings":"2gBAyGaA,EAAaC,EAAAA,YACxB,EAEIC,UAAU,WACVC,cAAa,EACbC,YAAW,EACXC,OAAO,KACPC,KAAMC,EAAa,SACnBC,YACAC,WACAC,QACAC,UACAC,YACGC,GAELC,KAEA,MAAMC,iBACJA,EACAC,WAAa,aAAcC,KAAoBC,IAC7CC,iBAAeN,IAEbO,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMZ,GAAoBM,EAC1Bd,eAGIqB,EAAiB,CACrBlB,KAAM,SACNC,WAAYA,GAGd,OACEkB,OAACC,EAAAA,oBACCC,EAACC,IAAAC,iBACKC,EAAAA,WAAWT,EAAcN,EAAkBG,GAC/CJ,IAAKA,EACLU,eAAgBA,EAChBrB,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNG,UAAWA,EACXN,QAASA,EACTQ,MAAOA,EACPqB,QAAS,CAAC,OACVtB,SAAUA,EAAQ,aACNQ,GAAmBN,EAC/BC,OAAQA,EACRoB,SAAAL,EAAAA,IAACM,EAAiBA,kBAAA,CAChBC,QAAS,QACTC,UAAWtB,EAAMmB,SACjB3B,KAAMA,MAETe,IAEH,IAINpB,EAAWoC,YAAc"}