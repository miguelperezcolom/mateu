{"version":3,"file":"View-5520bcf5.js","sources":["../../../../node_modules/ramda/es/empty.js","../../../../node_modules/ramda/es/internal/_isTypedArray.js","../../../../node_modules/ramda/es/isEmpty.js","../../src/UNSAFE_View/View.tsx"],"sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\nimport _isArguments from \"./internal/_isArguments.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _isString from \"./internal/_isString.js\";\nimport _isTypedArray from \"./internal/_isTypedArray.js\";\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`),\n * TypedArray (`Uint8Array []`, `Float32Array []`, etc), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));               //=> Nothing()\n *      R.empty([1, 2, 3]);              //=> []\n *      R.empty('unicorns');             //=> ''\n *      R.empty({x: 1, y: 2});           //=> {}\n *      R.empty(Uint8Array.from('123')); //=> Uint8Array []\n */\n\nvar empty =\n/*#__PURE__*/\n_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n    return arguments;\n  }() : _isTypedArray(x) ? x.constructor.from('') : void 0 // else\n  ;\n});\n\nexport default empty;","/**\n * Tests whether or not an object is a typed array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is a typed array, `false` otherwise.\n * @example\n *\n *      _isTypedArray(new Uint8Array([])); //=> true\n *      _isTypedArray(new Float32Array([])); //=> true\n *      _isTypedArray([]); //=> false\n *      _isTypedArray(null); //=> false\n *      _isTypedArray({}); //=> false\n */\nexport default function _isTypedArray(val) {\n  var type = Object.prototype.toString.call(val);\n  return type === '[object Uint8ClampedArray]' || type === '[object Int8Array]' || type === '[object Uint8Array]' || type === '[object Int16Array]' || type === '[object Uint16Array]' || type === '[object Int32Array]' || type === '[object Uint32Array]' || type === '[object Float32Array]' || type === '[object Float64Array]' || type === '[object BigInt64Array]' || type === '[object BigUint64Array]';\n}","import _curry1 from \"./internal/_curry1.js\";\nimport empty from \"./empty.js\";\nimport equals from \"./equals.js\";\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);           //=> false\n *      R.isEmpty([]);                  //=> true\n *      R.isEmpty('');                  //=> true\n *      R.isEmpty(null);                //=> false\n *      R.isEmpty({});                  //=> true\n *      R.isEmpty({length: 0});         //=> false\n *      R.isEmpty(Uint8Array.from('')); //=> true\n */\n\nvar isEmpty =\n/*#__PURE__*/\n_curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\n\nexport default isEmpty;","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentChildren, RefCallback, RefObject } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { isEmpty } from 'ramda';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\n\nimport { borderInterpolations } from '../utils/UNSAFE_interpolations/borders';\nimport type { BorderProps } from '../utils/UNSAFE_interpolations/borders';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { colorInterpolations } from '../utils/UNSAFE_interpolations/colors';\nimport type { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { paddingInterpolations } from '../utils/UNSAFE_interpolations/padding';\nimport type { PaddingProps } from '../utils/UNSAFE_interpolations/padding';\nimport { ariaInterpolations } from '../utils/UNSAFE_interpolations/aria';\nimport type { AriaProps } from '../utils/UNSAFE_interpolations/aria';\nimport { themeInterpolations } from '../utils/UNSAFE_interpolations/theme';\nimport type { ThemeProps } from '../utils/UNSAFE_interpolations/theme';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport type { Role } from '../utils/UNSAFE_roles';\nimport { EnvironmentProvider } from '..//UNSAFE_Environment';\nimport type { ThemeModifiers } from '../UNSAFE_Theme';\nimport { globalVars } from '@oracle/oraclejet-internal-theme-contract/themeContract.css';\nimport { useDensity } from '#hooks/UNSAFE_useDensity';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\nconst elementTypes = ['div', 'main', 'article', 'section', 'aside'] as const;\n\ntype ElementType = (typeof elementTypes)[number];\n\ntype StyleProps = BorderProps &\n  DimensionProps &\n  FlexitemProps &\n  ColorProps &\n  PaddingProps &\n  AriaProps &\n  ThemeProps;\n\ntype Props = StyleProps &\n  TestIdProps & {\n    as?: ElementType;\n    role?: Role;\n    children?: ComponentChildren;\n  };\n\nconst interpolations = [\n  ...Object.values(borderInterpolations),\n  ...Object.values(dimensionInterpolations),\n  ...Object.values(flexitemInterpolations),\n  ...Object.values(colorInterpolations),\n  ...Object.values(paddingInterpolations),\n  ...Object.values(ariaInterpolations),\n  ...Object.values(themeInterpolations)\n];\n\nconst mergedInterpolations = mergeInterpolations<Props>(interpolations);\n\ntype RefType = (RefObject<HTMLDivElement> | RefCallback<HTMLDivElement>) &\n  (RefObject<HTMLElement> | RefCallback<HTMLElement>);\n\nconst View = forwardRef<RefType, Props>(\n  (\n    {\n      as,\n      children,\n      colorScheme,\n      color,\n      backgroundColor,\n      scale,\n      density: propDensity,\n      testId,\n      ...rest\n    },\n    ref\n  ) => {\n    /**\n     * JET-66845 Because density unit CSS vars need to be recalculated each time the scale changes, scale\n     * classes can not be a child of density classes. However, we can have the scale and density classes as siblings.\n     * If the scale prop is supplied, we'll set the density class as well. If density is not set in the props,\n     * we will determine it via the Environment.\n     */\n    const themeDensity = useDensity();\n    const density = propDensity ?? (scale ? themeDensity : undefined);\n    const testIdProps = useTestId(testId);\n\n    const {\n      class: className,\n      ariaLabelledBy,\n      ariaLabel,\n      ...styles\n    } = mergedInterpolations({\n      colorScheme,\n      scale,\n      density,\n      backgroundColor,\n      color,\n      ...rest\n    });\n    // We need to update the environment with any theme related props specified\n    const env: Partial<ThemeModifiers> = {\n      ...(colorScheme && { colorScheme }),\n      ...(scale && { scale }),\n      ...(density && { density }),\n      ...(backgroundColor && { currentBgColor: backgroundColor })\n    };\n    const props = {\n      ...testIdProps,\n      ['aria-label']: ariaLabel,\n      ['aria-labelledby']: ariaLabelledBy,\n      children,\n      className,\n      ref: ref as RefType,\n      style: {\n        ...styles,\n        ...(backgroundColor &&\n          assignInlineVars({\n            [globalVars.currentBackgroundColor]: styles['backgroundColor']\n          })),\n        // we hardcode box-sizing: border-box on all of our Preact components.\n        boxSizing: 'border-box'\n      }\n    };\n\n    const Component = as || 'div';\n    return isEmpty(env) ? (\n      <Component {...props} />\n    ) : (\n      <EnvironmentProvider environment={env}>\n        <Component {...props} />\n      </EnvironmentProvider>\n    );\n  }\n);\n\nexport { elementTypes, View };\n"],"names":["empty","_curry1","x","constructor","_isArray","_isString","_isObject","_isArguments","arguments","val","type","Object","prototype","toString","call","from","isEmpty$1","equals","interpolations","values","borderInterpolations","dimensionInterpolations","flexitemInterpolations","colorInterpolations","paddingInterpolations","ariaInterpolations","themeInterpolations","mergedInterpolations","mergeInterpolations","View","forwardRef","as","children","colorScheme","color","backgroundColor","scale","density","propDensity","testId","rest","ref","themeDensity","useDensity","undefined","testIdProps","useTestId","class","className","ariaLabelledBy","ariaLabel","styles","env","currentBgColor","props","style","assignInlineVars","globalVars","currentBackgroundColor","boxSizing","Component","isEmpty","_jsx","jsx","EnvironmentProvider","environment"],"mappings":"0kBAgCA,IAAIA,EAEJC,EAAAA,SAAQ,SAAeC,GACrB,OAAY,MAALA,GAAgD,mBAA5BA,EAAE,sBAAuCA,EAAE,wBAA+B,MAALA,GAA8B,MAAjBA,EAAEC,aAAsE,mBAAxCD,EAAEC,YAAY,sBAAuCD,EAAEC,YAAY,wBAA+B,MAALD,GAAgC,mBAAZA,EAAEF,MAAuBE,EAAEF,QAAe,MAALE,GAA8B,MAAjBA,EAAEC,aAAsD,mBAAxBD,EAAEC,YAAYH,MAAuBE,EAAEC,YAAYH,QAAUI,EAAAA,SAASF,GAAK,GAAKG,EAASA,UAACH,GAAK,GAAKI,EAASA,UAACJ,GAAK,CAAA,EAAKK,EAAAA,aAAaL,GAAK,WACxd,OAAOM,SACX,CAF4d,ICrBtbC,EDuBhBP,ECrBJ,gCADZQ,EAAOC,OAAOC,UAAUC,SAASC,KAAKL,KACe,uBAATC,GAA0C,wBAATA,GAA2C,wBAATA,GAA2C,yBAATA,GAA4C,wBAATA,GAA2C,yBAATA,GAA4C,0BAATA,GAA6C,0BAATA,GAA6C,2BAATA,GAA8C,4BAATA,EDqBjVR,EAAEC,YAAYY,KAAK,SAAM,GCvBrC,IAAuBN,EAChCC,CDwBN,IEPAM,EAJAf,EAAAA,SAAQ,SAAiBC,GACvB,OAAY,MAALA,GAAae,EAAMA,OAACf,EAAGF,EAAME,GACtC,ICIA,MAmBMgB,EAAiB,IAClBP,OAAOQ,OAAOC,2BACdT,OAAOQ,OAAOE,8BACdV,OAAOQ,OAAOG,6BACdX,OAAOQ,OAAOI,0BACdZ,OAAOQ,OAAOK,4BACdb,OAAOQ,OAAOM,yBACdd,OAAOQ,OAAOO,wBAGbC,EAAuBC,EAAAA,oBAA2BV,GAKlDW,EAAOC,EAAUA,YACrB,EAEIC,KACAC,WACAC,cACAC,QACAC,kBACAC,QACAC,QAASC,EACTC,YACGC,GAELC,KAQA,MAAMC,EAAeC,EAAAA,aACfN,EAAUC,IAAgBF,EAAQM,OAAeE,GACjDC,EAAcC,YAAUP,IAG5BQ,MAAOC,EAASC,eAChBA,EAAcC,UACdA,KACGC,GACDxB,EAAqB,CACvBM,cACAG,QACAC,UACAF,kBACAD,WACGM,IAGCY,EAA+B,IAC/BnB,GAAe,CAAEA,kBACjBG,GAAS,CAAEA,YACXC,GAAW,CAAEA,cACbF,GAAmB,CAAEkB,eAAgBlB,IAErCmB,EAAQ,IACTT,EACH,aAAgBK,EAChB,kBAAqBD,EACrBjB,WACAgB,YACAP,IAAKA,EACLc,MAAO,IACFJ,KACChB,GACFqB,mBAAiB,CACf,CAACC,aAAWC,wBAAyBP,EAAwB,kBAGjEQ,UAAW,eAITC,EAAY7B,GAAM,MACxB,OAAO8B,EAAQT,GACbU,EAAAC,IAACH,EAAS,IAAKN,IAEfQ,MAACE,EAAAA,oBAAoB,CAAAC,YAAab,EAAGpB,SACnC8B,MAACF,EAAc,IAAAN,KAElB,4BAxGgB,CAAC,MAAO,OAAQ,UAAW,UAAW"}