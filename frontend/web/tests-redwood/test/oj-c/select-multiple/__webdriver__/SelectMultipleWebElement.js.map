{"version":3,"file":"SelectMultipleWebElement.js","sourceRoot":"","sources":["SelectMultipleWebElement.ts"],"names":[],"mappings":";;;AAAA,iFAA8E;AAE9E;;;;GAIG;AACH,MAAa,wBAAyB,SAAQ,2DAA4B;IACxE,qBAAqB;IAErB;;;;;OAKG;IACM,KAAK,CAAC,WAAW,CAA4B,KAAoB;QACxE,uCAAuC;QACvC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,OAAoB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACtF,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAClC,CAAC,OAAY,EAAE,OAAY,EAAE,EAAE;gBAC7B,6CAA6C;gBAC7C,MAAM,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAE3D,OAAO,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAC5C,CAAC,EACD,IAAI;YACJ,wCAAwC;YACxC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CACnD,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACM,KAAK,CAAC,QAAQ;QACrB,yFAAyF;QACzF,8EAA8E;QAC9E,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAChD,CAAC,EAAkC,EAAE,EAAE;YACrC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChD,CAAC,EACD,IAAI,CACL,CAAC;QACF,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACxC,CAAC;IACD;;;OAGG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CAkCF;AAvFD,4DAuFC","sourcesContent":["import { SelectMultipleWebElementBase } from './SelectMultipleWebElementBase';\n\n/**\n * The component WebElement for [oj-c-select-multiple](../../jsdocs/oj-c.SelectMultiple.html).\n * Do not instantiate this class directly, instead, use\n * [findSelectMultiple](../functions/findSelectMultiple.html).\n */\nexport class SelectMultipleWebElement extends SelectMultipleWebElementBase {\n  // Put overrides here\n\n  /**\n   * Sets the value of the <code>value</code> property.\n   * The value of the component.\n   * @param value The value to set for <code>value</code>\n   * @override\n   */\n  override async changeValue<K extends string | number>(value: Set<K> | null) {\n    // Only mutate if not readonly/disabled\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(readonly || disabled)) {\n      await this.getDriver().executeScript((element: HTMLElement) => element.focus(), this);\n      await this.whenBusyContextReady();\n      await this.getDriver().executeScript(\n        (element: any, arValue: K[]) => {\n          // the value is passed as an array, not a Set\n          const value = arValue != null ? new Set(arValue) : arValue;\n\n          return element._selectItemsByValue(value);\n        },\n        this,\n        // pass the value as an array, not a Set\n        value != null ? Array.from(value.values()) : value\n      );\n    }\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * The value of the component.\n   * @return The value of <code>value</code> property.\n   *\n   */\n  override async getValue(): Promise<Set<string | number> | null> {\n    // since we can't return Set through WebDriver or change the return type of the inherited\n    // method, convert Set -> Array on the client, then Array -> Set to the caller\n    const value = await this.getDriver().executeScript<(string | number)[] | null>(\n      (el: { value: (string | number)[] }) => {\n        return el.value ? Array.from(el.value) : null;\n      },\n      this\n    );\n    return value ? new Set(value) : value;\n  }\n  /**\n   * Clears the value of the component.\n   * @override\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n\n  // /**\n  //  * Triggers the <code>ojAddToListAction</code> event.\n  //  * @param searchText The <code>searchText</code> to include in the\n  //  * <code>ojAddToListAction</code> event.\n  //  */\n  // async doAddToListAction(searchText: string) {\n  //   // Call focus() on the root element\n  //   await this.getDriver().executeScript('arguments[0].focus()', this);\n\n  //   // Only fire event if add to list is on and component is not readonly/disabled\n  //   const readonly = await this.getReadonly();\n  //   const disabled = await this.getDisabled();\n  //   const addToList = await this.getAddToList();\n  //   if (!(readonly || disabled) && addToList === 'on') {\n  //     await this.whenBusyContextReady();\n  //     await this.getDriver().executeAsyncScript(\n  //       `\n  //       var element = arguments[0];\n  //       var searchText = arguments[1];\n\n  //       // Last argument will be the done function\n  //       var doneFunc = arguments[arguments.length - 1];\n\n  //       element._doAddToListAction(searchText)\n  //         .then(doneFunc, doneFunc)\n  //         .catch(doneFunc);\n  //     `,\n  //       this,\n  //       searchText\n  //     );\n  //   }\n  // }\n}\n"]}