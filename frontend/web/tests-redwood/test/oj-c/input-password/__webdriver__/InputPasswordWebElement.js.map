{"version":3,"file":"InputPasswordWebElement.js","sourceRoot":"","sources":["InputPasswordWebElement.ts"],"names":[],"mappings":";;;AAAA,+EAA4E;AAC5E,2DAA6C;AAE7C;;;;GAIG;AACH,MAAa,uBAAwB,SAAQ,yDAA2B;IACtE;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,KAAoB;QAC3C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,EAAe,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YAC5E,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAElC,gFAAgF;YAChF,2EAA2E;YAC3E,yDAAyD;YACzD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YAC3C,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;gBAChF,MAAM,KAAK,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,wBAAG,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC1E,MAAM,KAAK,CAAC,QAAQ,CAAC,wBAAG,CAAC,MAAM,CAAC,CAAC;YACnC,CAAC;YAED,KAAK,IAAI,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAEvC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,EAAO,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AAnCD,0DAmCC","sourcesContent":["import { InputPasswordWebElementBase } from './InputPasswordWebElementBase';\nimport { By, Key } from 'selenium-webdriver';\n\n/**\n * The component WebElement for [oj-c-input-password](../../jsdocs/oj-c.InputPassword.html).\n * Do not instantiate this class directly, instead, use\n * [findInputPassword](../functions/findInputPassword.html).\n */\nexport class InputPasswordWebElement extends InputPasswordWebElementBase {\n  /**\n   * Sets the value of the \"value\" property of the input component.\n   * @param value The value to set for the <code>value</code>\n   */\n  public async changeValue(value: string | null): Promise<void> {\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(disabled || readonly)) {\n      await this.getDriver().executeScript((el: HTMLElement) => el.focus(), this);\n      await this.whenBusyContextReady();\n\n      // Note that using element.clear() will blur, which commits the change and calls\n      // onValueChanged, which we don't want until we're done updating the value.\n      // Instead do select-all, then delete to clear the value.\n      const input = await this.findElement(By.css('input'));\n      const currValue = await this.getRawValue();\n      if (currValue) {\n        const platform = await (await this.getDriver().getCapabilities()).getPlatform();\n        await input.sendKeys(platform === 'mac' ? Key.COMMAND : Key.CONTROL, 'a');\n        await input.sendKeys(Key.DELETE);\n      }\n\n      value && (await input.sendKeys(value));\n\n      return this.getDriver().executeScript((el: any) => el.validate(), this);\n    }\n  }\n\n  /**\n   * Clears the value of the component.\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n}\n"]}