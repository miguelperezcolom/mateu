{"version":3,"file":"ListViewWebElement.js","sourceRoot":"","sources":["ListViewWebElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { ListViewWebElementBase } from './ListViewWebElementBase';\nimport { By, WebElement } from 'selenium-webdriver';\nimport { SlotProxy, slotProxy } from '@oracle/oraclejet-webdriver';\nimport { executeWithModules } from '@oracle/oraclejet-webdriver/lib/oj-module-proxy';\nimport {\n  doContextMenuAction as MenuUtilsDoContextMenuAction,\n  doContextMenuGroupAction as MenuUtilsDoContextMenuGroupAction\n} from './contextMenuUtils';\n/**\n * The component WebElement for [oj-c-list-view](../../jsdocs/oj-c.ListView.html).\n * Do not instantiate this class directly, instead, use\n * [findListView](../functions/findListView.html).\n */\nexport class ListViewWebElement extends ListViewWebElementBase {\n  // Put overrides here\n  /**\n   * Sets the value of \"selected\" property.\n   * Specifies the current selected items in the listview. See the Help documentation for more information.\n   * @param selected The value to set for \"selected\"\n   * @override\n   * @typeparam K Type of keys\n   */\n  async changeSelected<K>(selected: Array<K>) {\n    await this.whenReady();\n    return executeWithModules<K>(\n      this.getDriver(),\n      ['KeySet'],\n      [this, selected],\n      ({ KeySetImpl }, ele, selected) => (ele.selected = new KeySetImpl(selected))\n    );\n  }\n\n  /**\n   * Gets the value of \"selected\" property.\n   * Retrieves the current selected items in the listview. See the Help documentation for more information.\n   * @override\n   * @typeparam K Type of keys\n   * @return The value of \"selected\" property.\n   */\n  async getSelected<K>(): Promise<Array<K>> {\n    await this.whenReady();\n    const selected: Array<K> = await this.getDriver().executeScript(\n      (ele: any) =>\n        ele.selected.isAddAll()\n          ? Array.from(ele.selected.deletedValues())\n          : Array.from(ele.selected.values()),\n      this\n    );\n    return selected;\n  }\n\n  /**\n   * Retrieve a SlotProxy which represents a single listview item.\n   * @param key The key within the Collection's dataset associated with the item.\n   */\n  async findItem<T>(itemLocator: { key: T }): Promise<SlotProxy> {\n    await this.whenReady();\n    try {\n      return slotProxy(\n        await this.findElement(By.css(`[data-oj-key=\"${itemLocator.key}\"] [role=\"gridcell\"]`))\n      );\n    } catch (ex) {\n      throw Error(\n        `No corresponding item found for the itemLocator ${JSON.stringify(itemLocator, null, 2)}`\n      );\n    }\n  }\n\n  /**\n   * Find a listviewitem, trigger a context menu from it and click a menu item.\n   * @param itemLocator The item locator key within the Collection's dataset associated with the item.\n   * @param path Path that consist of the label/key of the menu item and the label/key of the submenu that leads to the menu item.\n   *\n   */\n  public async doContextMenuAction<T>(\n    itemLocator: { key: T },\n    path: Parameters<typeof MenuUtilsDoContextMenuAction>[0]\n  ): Promise<void> {\n    await this.whenReady();\n    let el: WebElement;\n    try {\n      el = await this.findElement(By.css(`[data-oj-key=\"${itemLocator.key}\"] [role=\"gridcell\"]`));\n    } catch (ex) {\n      throw Error(\n        `No corresponding item found for the itemLocator ${JSON.stringify(itemLocator, null, 2)}`\n      );\n    }\n    await MenuUtilsDoContextMenuAction(path, el, this);\n  }\n\n  /**\n   * Find a listviewitem, trigger a context menu from it and click a select menu item.\n   * @param itemLocator The item locator key within the Collection's dataset associated with the item.\n   * @param path Path that consist of the label/key of the menu item and the label/key of the submenu that leads to the menu item. If key is specified it also include item value of the select menu item that is going to be clicked.\n   *\n   */\n  public async doContextMenuGroupAction<T>(\n    itemLocator: { key: T },\n    path: Parameters<typeof MenuUtilsDoContextMenuGroupAction>[0]\n  ): Promise<void> {\n    await this.whenReady();\n    let el: WebElement;\n    try {\n      el = await this.findElement(By.css(`[data-oj-key=\"${itemLocator.key}\"] [role=\"gridcell\"]`));\n    } catch (ex) {\n      throw Error(\n        `No corresponding item found for the itemLocator ${JSON.stringify(itemLocator, null, 2)}`\n      );\n    }\n    await MenuUtilsDoContextMenuGroupAction(path, el, this);\n  }\n}\n"]}