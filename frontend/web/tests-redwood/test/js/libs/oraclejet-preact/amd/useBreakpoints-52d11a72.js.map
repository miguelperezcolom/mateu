{"version":3,"file":"useBreakpoints-52d11a72.js","sources":["../../src/hooks/UNSAFE_useBreakpoints/useBreakpoints.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'preact/hooks';\n\n/*\n * TODO: These default breakpoints are temporary (will be set by Provider in the future)\n *\n * This object defines default breakpoints for screens and containers.\n */\nexport const defaultBreakpoints = {\n  sm: '0px',\n  md: '600px',\n  lg: '1024px',\n  xl: '1440px'\n};\n\nexport type Breakpoints = Record<string, string>;\n\n/*\n * Simple custom hook which returns the current breakpoints based on viewport width.\n * The breakpoints are returned as an object that is a set of boolean values keyed to each breakpoint.\n * The window/viewport min-width is matched against a range of pixel values defined as the breakpoints.\n *\n * TODO: Investigate useBreakpoints scalability if a component that uses useBreakpoints ends up being stamped out in some collection component (JET-49558)\n *\n * TODO: Parameterize this hook type such that we enable type checking on the returned record key; introduce a type parameter that corresponds to the Record key type\n */\nexport function useBreakpoints(breakpoints: Breakpoints = defaultBreakpoints) {\n  // this handler will return current breakpoints as a single object we can watch, rather than looping through each breakpoint key\n  const queryMatches = useCallback(() => {\n    const currentMatches: Record<string, boolean> = {};\n    Object.entries(breakpoints).forEach(([key, value]) => {\n      currentMatches[key] = window.matchMedia(`(min-width: ${value})`).matches;\n    });\n    return currentMatches;\n  }, [breakpoints]);\n\n  const [matches, setMatches] = useState(() => queryMatches());\n\n  useEffect(() => {\n    const onResize = () => {\n      setMatches(queryMatches());\n    };\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [queryMatches]);\n\n  return matches;\n}\n"],"names":["defaultBreakpoints","sm","md","lg","xl","breakpoints","queryMatches","useCallback","currentMatches","Object","entries","forEach","key","value","window","matchMedia","matches","setMatches","useState","useEffect","onResize","addEventListener","removeEventListener"],"mappings":"8DAOa,MAAAA,EAAqB,CAChCC,GAAI,MACJC,GAAI,QACJC,GAAI,SACJC,GAAI,kDAcU,SAAeC,EAA2BL,GAExD,MAAMM,EAAeC,EAAAA,aAAY,KAC/B,MAAMC,EAA0C,CAAA,EAIhD,OAHAC,OAAOC,QAAQL,GAAaM,SAAQ,EAAEC,EAAKC,MACzCL,EAAeI,GAAOE,OAAOC,WAAW,eAAeF,MAAUG,OAAO,IAEnER,CAAc,GACpB,CAACH,KAEGW,EAASC,GAAcC,EAAAA,UAAS,IAAMZ,MAa7C,OAXAa,EAAAA,WAAU,KACR,MAAMC,EAAW,KACfH,EAAWX,IAAe,EAI5B,OADAQ,OAAOO,iBAAiB,SAAUD,GAC3B,KACLN,OAAOQ,oBAAoB,SAAUF,EAAS,CAC/C,GACA,CAACd,IAEGU,CACT"}