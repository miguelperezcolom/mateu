{"version":3,"file":"useVisEvents-3839d74f.js","sources":["../../src/hooks/PRIVATE_useVisEvents/useVisEvents.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport type { gestureTypes } from '#hooks/PRIVATE_useVisContextMenu';\nimport { getRandomId } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { cancelEvent } from '#utils/UNSAFE_visUtils/eventsUtils';\nimport { useVisHover } from '#hooks/PRIVATE_useVisHover';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\ntype ItemInfo = { isCurrent?: boolean; isFocusVisible?: boolean };\n\ntype EventDetail<D> = { data?: D };\n\nexport function useVisEvent<\n  I extends ItemInfo,\n  J extends EventDetail<D>,\n  L extends EventDetail<D>,\n  D\n>(\n  touchResponse: 'touchStart' | 'touchHold',\n  isInteractive: boolean,\n  isItemActionable: (itemInfo: I) => boolean,\n  getKeyUpHandler: (\n    triggerOnAction: () => void,\n    updatefocusedItemInfo: (itemInfo: I) => void,\n    focusedItemInfo: I,\n    isHideShow?: boolean\n  ) => (event: KeyboardEvent) => void,\n  getDetailFromInfo: (info?: I) => J | L,\n  getPrevItemInfo: (info: I) => I,\n  getNextItemInfo: (info: I) => I,\n  onItemAction: ((detail: J) => void) | undefined,\n  onItemHover: ((detail: L) => void) | undefined,\n  onItemFocus: ((detail: L) => void) | undefined,\n  isEqualItem: (item1?: I, item2?: I) => boolean,\n  getItemInfo: (element: HTMLElement) => I | undefined,\n  initItemInfo: I,\n  isHideShow?: boolean\n) {\n  const activeIdRef = useRef<string>();\n\n  const [focusedItemInfo, setfocusedItemInfo] = useState<I>(initItemInfo);\n  const [hoveredItemInfo, sethoveredItemInfo] = useState<I>();\n\n  const onHover = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (!isEqualItem(itemInfo, hoveredItemInfo)) {\n      sethoveredItemInfo(itemInfo && { ...itemInfo, isCurrent: true });\n      activeIdRef.current = getRandomId();\n      if (isInteractive) {\n        focusedItemInfo ? setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false }) : '';\n        onItemHover?.(getDetailFromInfo(itemInfo) as L);\n      }\n    }\n  };\n\n  const onHoverLeave = () => {\n    sethoveredItemInfo(undefined);\n    activeIdRef.current = undefined;\n    if (isInteractive) {\n      onItemHover?.(getDetailFromInfo() as L);\n    }\n  };\n\n  const hoverHandlers = useVisHover(onHover, undefined, onHoverLeave, touchResponse);\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  if (!isInteractive) {\n    return {\n      isInteractive: false,\n      focusedItemInfo,\n      hoveredItemInfo,\n      // include relevant hover handlers for datatip\n      eventsProps: hoverHandlers\n    };\n  }\n\n  const updatefocusedItemInfo = (itemInfo: I) => {\n    onItemFocus?.(getDetailFromInfo(itemInfo) as L);\n    activeIdRef.current = getRandomId();\n    setfocusedItemInfo(itemInfo);\n  };\n\n  const handleKeyboardInput = (item: I) => {\n    if (!isEqualItem(item, focusedItemInfo)) {\n      item.isCurrent = true;\n      item.isFocusVisible = true;\n      if (hoveredItemInfo) {\n        sethoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      updatefocusedItemInfo(item);\n    }\n  };\n\n  const triggerOnAction = () => {\n    const detail = getDetailFromInfo(focusedItemInfo) as J;\n    if (detail && detail.data && isItemActionable(focusedItemInfo)) {\n      onItemAction?.(detail);\n      activeIdRef.current = getRandomId();\n    }\n  };\n\n  const onPointerUp = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (itemInfo != null && isItemActionable(itemInfo)) {\n      setfocusedItemInfo(itemInfo);\n      const detail = getDetailFromInfo(itemInfo);\n      if (detail && isItemActionable(itemInfo)) {\n        onItemAction?.(detail as J);\n        activeIdRef.current = getRandomId();\n      }\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown': {\n        const nextItemInfo = getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowUp': {\n        const nextItemInfo = getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowRight': {\n        const nextItemInfo = isRtl\n          ? getPrevItemInfo(focusedItemInfo)\n          : getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        cancelEvent(event);\n        break;\n      }\n      case 'ArrowLeft': {\n        const nextItemInfo = isRtl\n          ? getNextItemInfo(focusedItemInfo)\n          : getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        cancelEvent(event);\n        break;\n      }\n    }\n  };\n\n  const onKeyUp = getKeyUpHandler(\n    triggerOnAction,\n    updatefocusedItemInfo,\n    focusedItemInfo,\n    isHideShow\n  );\n\n  const onContextMenuDismissed = (gesture: gestureTypes) => {\n    if (gesture === 'keyboard') {\n      updatefocusedItemInfo({\n        ...focusedItemInfo,\n        isCurrent: true,\n        isFocusVisible: true\n      });\n    }\n  };\n\n  const onBlur = () => {\n    const itemInfo = { ...focusedItemInfo, isCurrent: false, isFocusVisible: false } as I;\n    if (hoveredItemInfo != null || focusedItemInfo.isCurrent) {\n      onItemFocus?.(getDetailFromInfo(undefined) as L);\n    }\n    setfocusedItemInfo(itemInfo);\n  };\n\n  return {\n    isInteractive: true,\n    focusedItemInfo,\n    hoveredItemInfo,\n    activeId: activeIdRef.current,\n    triggerOnAction,\n    updatefocusedItemInfo,\n    onContextMenuDismissed,\n    eventsProps: mergeProps(hoverHandlers, {\n      onPointerUp,\n      onKeyUp,\n      onKeyDown,\n      onBlur\n    })\n  };\n}\n"],"names":["touchResponse","isInteractive","isItemActionable","getKeyUpHandler","getDetailFromInfo","getPrevItemInfo","getNextItemInfo","onItemAction","onItemHover","onItemFocus","isEqualItem","getItemInfo","initItemInfo","isHideShow","activeIdRef","useRef","focusedItemInfo","setfocusedItemInfo","useState","hoveredItemInfo","sethoveredItemInfo","hoverHandlers","useVisHover","event","itemInfo","target","isCurrent","current","getRandomId","undefined","direction","useUser","isRtl","eventsProps","updatefocusedItemInfo","handleKeyboardInput","item","isFocusVisible","triggerOnAction","detail","data","onKeyUp","activeId","onContextMenuDismissed","gesture","mergeProps","onPointerUp","onKeyDown","key","nextItemInfo","cancelEvent","onBlur"],"mappings":"8MAoBgB,SAMdA,EACAC,EACAC,EACAC,EAMAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAcC,EAAAA,UAEbC,EAAiBC,GAAsBC,EAAQA,SAAIN,IACnDO,EAAiBC,GAAsBF,EAAQA,WAsBhDG,EAAgBC,EAAAA,aApBLC,IACf,MAAMC,EAAWb,EAAYY,EAAME,QAC9Bf,EAAYc,EAAUL,KACzBC,EAAmBI,GAAY,IAAKA,EAAUE,WAAW,IACzDZ,EAAYa,QAAUC,EAAAA,cAClB3B,IACFe,GAAkBC,EAAmB,IAAKD,EAAiBU,WAAW,IACtElB,IAAcJ,EAAkBoB,KAEnC,QAWwCK,GARtB,KACnBT,OAAmBS,GACnBf,EAAYa,aAAUE,EAClB5B,GACFO,IAAcJ,IACf,GAGiEJ,IAE9D8B,UAAEA,GAAcC,EAAAA,UAChBC,EAAsB,QAAdF,EACd,IAAK7B,EACH,MAAO,CACLA,eAAe,EACfe,kBACAG,kBAEAc,YAAaZ,GAIjB,MAAMa,EAAyBV,IAC7Bf,IAAcL,EAAkBoB,IAChCV,EAAYa,QAAUC,EAAAA,cACtBX,EAAmBO,EAAS,EAGxBW,EAAuBC,IACtB1B,EAAY0B,EAAMpB,KACrBoB,EAAKV,WAAY,EACjBU,EAAKC,gBAAiB,EAClBlB,GACFC,EAAmB,IAAKD,EAAiBO,WAAW,IAEtDQ,EAAsBE,GACvB,EAGGE,EAAkB,KACtB,MAAMC,EAASnC,EAAkBY,GAC7BuB,GAAUA,EAAOC,MAAQtC,EAAiBc,KAC5CT,IAAegC,GACfzB,EAAYa,QAAUC,EAAAA,cACvB,EAmDGa,EAAUtC,EACdmC,EACAJ,EACAlB,EACAH,GAqBF,MAAO,CACLZ,eAAe,EACfe,kBACAG,kBACAuB,SAAU5B,EAAYa,QACtBW,kBACAJ,wBACAS,uBAzB8BC,IACd,aAAZA,GACFV,EAAsB,IACjBlB,EACHU,WAAW,EACXW,gBAAgB,GAEnB,EAmBDJ,YAAaY,EAAUA,WAACxB,EAAe,CACrCyB,YAlFiBvB,IACnB,MAAMC,EAAWb,EAAYY,EAAME,QACnC,GAAgB,MAAZD,GAAoBtB,EAAiBsB,GAAW,CAClDP,EAAmBO,GACnB,MAAMe,EAASnC,EAAkBoB,GAC7Be,GAAUrC,EAAiBsB,KAC7BjB,IAAegC,GACfzB,EAAYa,QAAUC,EAAAA,cAEzB,GA0ECa,UACAM,UAxEexB,IAEjB,OADYA,EAAMyB,KAEhB,IAAK,MACH,OACF,IAAK,YAAa,CAChB,MAAMC,EAAe3C,EAAgBU,GACrCmB,EAAoBc,GACpBC,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,UAAW,CACd,MAAM0B,EAAe5C,EAAgBW,GACrCmB,EAAoBc,GACpBC,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,aAAc,CACjB,MAAM0B,EAAejB,EACjB3B,EAAgBW,GAChBV,EAAgBU,GACpBmB,EAAoBc,GACpBC,EAAWA,YAAC3B,GACZ,KACD,CACD,IAAK,YAAa,CAChB,MAAM0B,EAAejB,EACjB1B,EAAgBU,GAChBX,EAAgBW,GACpBmB,EAAoBc,GACpBC,EAAWA,YAAC3B,GACZ,KACD,EACF,EAwCC4B,OApBW,KACb,MAAM3B,EAAW,IAAKR,EAAiBU,WAAW,EAAOW,gBAAgB,IAClD,MAAnBlB,GAA2BH,EAAgBU,YAC7CjB,IAAcL,OAAkByB,IAElCZ,EAAmBO,EAAS,IAkBhC"}