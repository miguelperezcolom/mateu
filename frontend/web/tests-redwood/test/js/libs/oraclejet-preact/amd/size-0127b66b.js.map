{"version":3,"file":"size-0127b66b.js","sources":["../../src/utils/UNSAFE_size/size.ts"],"sourcesContent":["import { xUnits } from '../../UNSAFE_Theme';\n\n// The Size type is used for gap and dimensions (e.g., width/height) and padding and similar\n// properties. Using the sizeToCSS function below we transform the property of this type into\n// something that is usable in a css style property.\nexport type Size =\n  | 0\n  | `calc(${string})`\n  | `var(${string})`\n  | `--${string}`\n  | `${number}x`\n  | `${number}%`\n  | `${number}${CssUnits}`;\n\ntype CssUnits = (typeof cssUnits)[number];\n\n// list of supported length units https://www.w3schools.com/cssref/css_units.php\nconst cssUnits = [\n  'ch',\n  'cm',\n  'mm',\n  'in',\n  'pc',\n  'pt',\n  'px',\n  'em',\n  'ex',\n  'rem',\n  'vh',\n  'vw',\n  'vmin',\n  'vmax'\n] as const;\n\nconst cssUnitRegex = new RegExp(`^-?\\\\d*\\\\.?\\\\d+(${cssUnits.join('|')})$`);\nconst xUnitRegex = new RegExp(`^-?\\\\d*\\\\.?\\\\d+x$`);\n\nconst isStringZero = (v: string) => parseFloat(v) === 0;\nconst isPercent = (v: string) => v.endsWith('%');\nconst isCalcExpression = (v: string) => v.startsWith('calc(') && v.endsWith(')');\nconst isVarFunction = (v: string) => v.startsWith('var(') && v.endsWith(')');\nconst isCssVar = (v: string) => v.startsWith('--');\nconst isCssUnit = (v: string) => cssUnitRegex.test(v);\nconst isXUnit = (v: string) => xUnitRegex.test(v);\n\n/**\n * This transforms a number + 'x' to a css calc.\n * @param {string } v - a value to transform\n * @returns {string | 0}\n */\nconst xToCSS = (v: string) => {\n  // parse out the 'x'\n  const nStr = v.slice(0, v.length - 1);\n  // nStr should now only contain characters that could be part of a floating number.\n  // I don't want a string with random characters in it to be ignored as it would with\n  // parseFloat, so I'm using Number here. parseFloat('1.2p') -> 1.2. whereas\n  // Number('1.2p') returns NaN.\n  const num = Number(nStr);\n  if (isNaN(num)) return 0;\n\n  // Note: 1x is equal to about 4px\n  return xUnits(num);\n};\n\n/**\n * Given a value that is of type Size, transform the value into\n * something that is usable in a css style property.\n * @param {string | 0 } v - a value to transform\n * @returns {string | 0}\n */\nexport const sizeToCSS = (v: Size) => {\n  return v === 0 || isStringZero(v) // We want 0, '0%' and '0x' to return 0\n    ? 0\n    : isVarFunction(v) || isCalcExpression(v) || isPercent(v) || isCssUnit(v)\n    ? v\n    : isCssVar(v)\n    ? `var(${v})`\n    : isXUnit(v)\n    ? xToCSS(v)\n    : 0; // return 0 for any invalid v.\n};\n"],"names":["cssUnitRegex","RegExp","join","xUnitRegex","v","parseFloat","isStringZero","startsWith","endsWith","isVarFunction","isCalcExpression","isPercent","test","isCssUnit","isCssVar","isXUnit","nStr","slice","length","num","Number","isNaN","xUnits","xToCSS"],"mappings":"kEAiBA,MAiBMA,EAAe,IAAIC,OAAO,mBAjBf,CACf,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,OACA,QAG0DC,KAAK,UAC3DC,EAAa,IAAIF,OAAO,iCAmCJG,GACX,IAANA,GAlCY,CAACA,GAAgC,IAAlBC,WAAWD,GAkC3BE,CAAaF,GAC3B,EAhCgB,CAACA,GAAcA,EAAEG,WAAW,SAAWH,EAAEI,SAAS,KAiClEC,CAAcL,IAlCK,CAACA,GAAcA,EAAEG,WAAW,UAAYH,EAAEI,SAAS,KAkClDE,CAAiBN,IAnCzB,CAACA,GAAcA,EAAEI,SAAS,KAmCKG,CAAUP,IA/BzC,CAACA,GAAcJ,EAAaY,KAAKR,GA+BcS,CAAUT,GACrEA,EAjCW,CAACA,GAAcA,EAAEG,WAAW,MAkCvCO,CAASV,GACT,OAAOA,KAjCG,CAACA,GAAcD,EAAWS,KAAKR,GAkCzCW,CAAQX,GA3BC,CAACA,IAEd,MAAMY,EAAOZ,EAAEa,MAAM,EAAGb,EAAEc,OAAS,GAK7BC,EAAMC,OAAOJ,GACnB,OAAIK,MAAMF,GAAa,EAGhBG,EAAAA,OAAOH,EAAI,EAiBdI,CAAOnB,GACP"}