{"version":3,"file":"useSwatchSelection-fd837ce5.js","sources":["../../src/hooks/PRIVATE_useSwatchSelection/useSwatchSelection.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef } from 'preact/hooks';\nimport { Keys, containsKey, removeKey } from '../../utils/UNSAFE_keys';\nimport { SelectionDetail } from '../../UNSAFE_Collection';\nimport { getIsSelectionPending } from '#utils/PRIVATE_textSelectionUtils';\nimport { SelectionBehavior } from './SwatchSelection.types';\n\nconst handleSelect = <K>(\n  event: MouseEvent | KeyboardEvent,\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionBehavior: SelectionBehavior,\n  isSelectionRequired: boolean,\n  onChange?: (detail: SelectionDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (itemKey == null) {\n    return;\n  }\n\n  const selected = containsKey(selectedKeys, itemKey);\n  let keySet = selectedKeys;\n  if (!selected) {\n    // should only contains this item key\n    keySet = { all: false, keys: new Set([itemKey]) };\n  } else if ((event as KeyboardEvent).key !== 'Enter') {\n    // no de-select for enter key\n    if (\n      selectionBehavior === 'toggle' ||\n      event.ctrlKey ||\n      event.metaKey ||\n      (event as KeyboardEvent).key === ' '\n    ) {\n      // de-select only when ctrl/meta key is pressed or selectionBehavior is\n      // explicitly set to toggle\n      keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n    }\n  }\n\n  // only invoke callback if there is really a change\n  // note onSelectionChange should never be null here\n  if (selectedKeys != keySet && onChange) {\n    onChange({ value: keySet, target: event.target });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n\n/**\n * Hook for handling various selection mode.  Customized for color swatch support.\n * @param keyExtractor function to extract the key based on provided element\n * @param selectedKeys the currently selected keys\n * @param isSelectionRequired true if empty selected key is not allowed, false otherwise\n * @param selectionBehavior the selection behavior.  If the value is 'toggle', then the key is\n *                          added/removed from the current selected keys.  If the value is 'replace',\n *                          then the current selected keys are cleared first before the key is added\n *                          unless the ctrl/shift/meta key is pressed.\n * @param onChange callback function that is invoked when selection has changed.\n * @returns an event map that the consumer can register as event listeners\n */\nexport function useSwatchSelection<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  isSelectionRequired: boolean,\n  selectionBehavior: SelectionBehavior,\n  onChange?: (detail: SelectionDetail<K>) => void\n) {\n  const isTouchPointerRef = useRef<boolean>(false);\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      if (!getIsSelectionPending()) {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          isTouchPointerRef.current ? 'toggle' : selectionBehavior,\n          isSelectionRequired,\n          onChange\n        );\n      }\n    },\n    [keyExtractor, selectedKeys, isSelectionRequired, selectionBehavior, onChange]\n  );\n\n  // general keyboard events listen to keyUp for a11y\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // older browser that we don't support returns 'Spacebar' for space key\n      if (event.key === ' ' || event.key === 'Enter') {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionBehavior,\n          isSelectionRequired,\n          onChange\n        );\n      }\n    },\n    [keyExtractor, selectedKeys, selectionBehavior, isSelectionRequired, onChange]\n  );\n\n  const selectionProps = onChange == null ? {} : { onClick, onKeyUp };\n  return { selectionProps };\n}\n"],"names":["handleSelect","event","keyExtractor","selectedKeys","selectionBehavior","isSelectionRequired","onChange","itemKey","target","keySet","containsKey","key","ctrlKey","metaKey","removeKey","all","keys","Set","value","type","stopPropagation","isTouchPointerRef","useRef","onClick","useCallback","getIsSelectionPending","current","onKeyUp","selectionProps"],"mappings":"oHAaA,MAAMA,EAAe,CACnBC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAUL,EAAaD,EAAMO,QACnC,GAAe,MAAXD,EACF,OAIF,IAAIE,EAASN,EADIO,EAAAA,YAAYP,EAAcI,GAKC,UAAhCN,EAAwBU,MAGV,WAAtBP,GACAH,EAAMW,SACNX,EAAMY,SAC2B,MAAhCZ,EAAwBU,OAIzBF,EAASK,EAAAA,UAAUX,EAAcI,EAASF,IAX5CI,EAAS,CAAEM,KAAK,EAAOC,KAAM,IAAIC,IAAI,CAACV,KAiBpCJ,GAAgBM,GAAUH,IAC5BA,EAAS,CAAEY,MAAOT,EAAQD,OAAQP,EAAMO,SACrB,UAAfP,EAAMkB,MACRlB,EAAMmB,kBAET,uBAeG,SACJlB,EACAC,EACAE,EACAD,EACAE,GAEA,MAAMe,EAAoBC,UAAgB,GAEpCC,EAAUC,eACbvB,IACMwB,EAAqBA,yBACxBzB,EACEC,EACAC,EACAC,EACAkB,EAAkBK,QAAU,SAAWtB,EACvCC,EACAC,EAEH,GAEH,CAACJ,EAAcC,EAAcE,EAAqBD,EAAmBE,IAIjEqB,EAAUH,eACbvB,IAEmB,MAAdA,EAAMU,KAA6B,UAAdV,EAAMU,KAC7BX,EACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEH,GAEH,CAACJ,EAAcC,EAAcC,EAAmBC,EAAqBC,IAIvE,MAAO,CAAEsB,eAD0B,MAAZtB,EAAmB,CAAE,EAAG,CAAEiB,UAASI,WAE5D"}