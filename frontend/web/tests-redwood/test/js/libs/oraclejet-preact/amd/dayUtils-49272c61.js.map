{"version":3,"file":"dayUtils-49272c61.js","sources":["../../src/utils/PRIVATE_dayUtils/dayUtils.ts"],"sourcesContent":["import { CalendarUtils, DateTimeUtils } from '../../UNSAFE_IntlDateTime';\nimport type { BCP47Locale, CalendarWidthNames } from '../../UNSAFE_IntlDateTime';\nimport { FirstDayNum, weekData } from '../PRIVATE_supplementalData';\nimport type { CalendarDateRequired, IsoDay, IsoMonth } from '#utils/UNSAFE_calendarDateUtils';\nimport { checkNoCalendarExtension, toJSDate } from '#utils/UNSAFE_calendarDateUtils';\nimport { WeekInMonthIndex } from './types';\n\n// Utilities for the calendar grid\n// -------------------------------\n\n/**\n * Given the locale and the week name type format (e.g., 'short'), return an array of the localized day of the week\n * names, in order where index 0 is the first day of the week for that locale, index 1 is the second day of the week, etc.\n *\n * For example, if the locale is 'en-US', the region is 'US' and the first day of the week for 'US' is Sunday, and this\n * will return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].\n * Another example, if the locale is 'es', its default region is 'ES', and the first day of the week is Monday. This\n * will return ['lun', 'mar', 'mié', 'jue', 'vie', 'sáb', 'dom'].\n * And if the region is not found in our supplemental data, we return the week day names for the locale starting on Monday.\n * For example, VA is not in our supplemental data, so for locale 'it-VA', this returns\n * ['lun', 'mar', 'mer', 'gio', 'ven', 'sab', 'dom'].\n * @param locale\n * @param type 'long', 'short', or 'narrow'\n * @returns an array of the localized day of the week\n * names, in order where index 0 is the first day of the week for that locale, index 1 is the second day of the week for that locale, etc.\n */\nexport function getDaysOfWeekNames(\n  locale: BCP47Locale,\n  type: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) {\n  checkNoCalendarExtension(locale);\n  const dayOfWeekNames = getDaysOfWeekNamesSunThroughSat(locale, type);\n  const firstDay = getWeekStart(locale); // 1 is Monday, 7 is Sunday.\n  return [...new Array(7).keys()].map((dow) => {\n    // days of the week\n    const day = (dow + firstDay) % 7;\n    return dayOfWeekNames[day];\n  });\n}\n\n/*\n * Returns an array of the day of the week names for the locale in the type format (e.g., 'short')\n * where sunday is the index 0, monday is index 1.\n */\nfunction getDaysOfWeekNamesSunThroughSat(\n  locale: BCP47Locale,\n  type: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) {\n  const cal = CalendarUtils.getCalendar(locale, 'gregory');\n  // convert to type that the cal days takes. These options do not match Intl.DateTimeFormat so I do not use those in\n  // getDaysOfWeekNamesSunThroughSat api.\n  const _monthNamesFormatMap = {\n    short: 'abbreviated',\n    narrow: 'narrow',\n    long: 'wide'\n  } as const;\n  const calType: NonNullable<CalendarWidthNames> = _monthNamesFormatMap[type];\n  const days = cal.days['stand-alone'][calType];\n  // this is the translated days of the week for the locale.\n  return [days.sun, days.mon, days.tue, days.wed, days.thu, days.fri, days.sat];\n}\n\n/**\n * Given the locale, return the first day of the week number (1-7) for that locale's region or default region.\n * 1 for Monday, 7 for Sunday.\n * <p>\n * From the intl locale proposal it says Monday is 1 and Sunday is 7, as defined by ISO-8861 and followed by Temporal proposal\n * and this follows the same.\n * </p>\n * @param locale\n * @returns {FirstDayNum} the first day of the week for the locale's region or\n * 1 if no first day of week for the region is found in our supplemental data. 1 is for Monday, and this\n * is the international standard for first day of the week.\n */\nexport function getWeekStart(locale: BCP47Locale): FirstDayNum {\n  checkNoCalendarExtension(locale);\n  // 1. given locale, get the region\n  // 2. given the region, get the first day of the week from the supplemental data.\n  // TODO: When Intl.Locale's weekInfo supports all browsers, we can switch to using that.\n  const region = getRegion(locale);\n  // We default to 1 like we do in legacy jet's supplementalData.\n  // Monday is the first day of the week according to the international standard ISO 8601.\n  const FIRST_DAY_OF_WEEK_DEFAULT = 1;\n  return weekData.firstDay[region] ?? FIRST_DAY_OF_WEEK_DEFAULT;\n}\n\nconst cachedRegions = new Map<string, string>();\n/**\n * Given the locale, return its region or its default region or '001'. Internally it\n * delegates to new Intl.Locale(locale).maximize().region and caches the result.\n * Examples:\n * new Intl.Locale('en-US').maximize().region returns 'US'.\n * new Intl.Locale('es').maximize().region returns 'ES'.\n * new Intl.Locale('ar').maximize().region returns 'EG'.\n * new Intl.Locale('pseudo').maximize().region returns undefined, so this method returns '001'.\n * @param locale\n * @returns the locale's region or default region or '001' if the region is undefined.\n */\nexport function getRegion(locale: BCP47Locale) {\n  checkNoCalendarExtension(locale);\n  // Constructing an Intl.Locale is expensive, so cache the result.\n  let region = cachedRegions.get(locale);\n  if (!region) {\n    // Legacy JET defaults the region to '001'.\n    const JET_SUPPLEMENTAL_DATA_REGION_DEFAULT = '001';\n    region = getIntlLocaleRegion(locale) ?? JET_SUPPLEMENTAL_DATA_REGION_DEFAULT;\n    cachedRegions.set(locale, region); // cache our default if region is not found.\n  }\n  return region;\n}\n\n/**\n * Given a locale, return the region of the world (usually a country) associated with the locale. Possible values are region codes as defined by ISO 3166-1.\n * @param locale\n * @returns\n */\nfunction getIntlLocaleRegion(locale: BCP47Locale) {\n  try {\n    // Starting in Chrome v125, new Intl.Locale('pseudo').maximize().region throws a RangeError.\n    // Other browsers and earlier versions of Chrome return undefined.\n    return new Intl.Locale(locale).maximize().region;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * Given a date (a year, month, day) and a locale, return the day of the week by index\n * as it would be rendered in a CalendarGrid, 0 if the date goes into the first day of the week column and 6 is the last column for the week.\n *\n * This is useful in determining the number of weeks in the month and the number\n * of lead days in the first week in a month in a CalendarGrid.\n *\n * For example, if the date is a Thursday and the locale is 'en_US' which has a weekStart of Sunday,\n * then the CalendarGrid's week is displayed Sun Mon Tue Wed Thu Fri Sat, and we will return 4, meaning\n * the date would go into index 4 of the week array that starts at 0.\n *\n * This is different than getDayOfWeek.\n * @param year\n * @param month\n * @param day\n * @param locale\n * @returns 0-6, the day of the week number for the calendar grid as an index number.\n * 0 will be the first day of the week (this date belongs in the  first column in the calendar grid)\n *  and 6 will be the last day of the week (this date belongs in the last column in the calendar grid)\n */\nexport function getDayOfWeekForCalendarGrid(\n  year: number,\n  month: IsoMonth,\n  day: IsoDay,\n  locale: BCP47Locale\n) {\n  checkNoCalendarExtension(locale);\n  const weekStart = getWeekStart(locale); // 1 for Monday, 6 for Saturday, 7 for Sunday.\n  const weekdayNumberForDate = getDayOfWeek(year, month, day); // 1 for Monday, 7 for Sunday as well.\n  // Calculate the day of the week relative to the locale's week start.\n  // Examples:\n  // if weekStart is 1 (Monday) and weekdayNumberForDate is 1, getDayOfWeekForCalendarGrid for calendar grid is 0.\n  // if weekStart is 7 (Sunday) and weekdayNumberForDate is 1 (Monday), getDayOfWeekForCalendarGrid for calendar grid is 1.\n  // if weekStart is 6 (Saturday) and weekdayNumberForDate is 1 (Monday), getDayOfWeekForCalendarGrid for calendar grid is 2.\n  const dayOfWeekDiff = weekdayNumberForDate - weekStart;\n  // constrain the number to between 0 and 7.\n  // E.g., if weekStart is Saturday (6) and weekdayNumberForDate is Monday (1), dayOfWeekDiff is 1-6 = -5.\n  // so we them make it 2 % 7 which is 2.\n  const getDayOfWeekForCalendarGrid = (dayOfWeekDiff + 7) % 7;\n  return getDayOfWeekForCalendarGrid;\n}\n\n/**\n * Returns the weekday number that the date falls on.\n * For the ISO 8601 calendar, the weekday number is defined as in the ISO 8601 standard:\n * a value between 1 and 7, inclusive, with Monday being 1, and Sunday 7. For an overview, see ISO 8601 on Wikipedia.\n * When we have Temporal, we can use temporalDate.dayOfWeek as the implementation.\n *\n * @param year\n * @param month\n * @param day\n * @returns A value between 1 and 7, inclusive, with Monday being 1, and Sunday 7.\n */\nexport function getDayOfWeek(year: number, month: IsoMonth, day: IsoDay) {\n  const jsDate = toJSDate(year, month, day);\n\n  // date.getDay() returns an integer between 0 and 6, representing the day of the week for the given date according to local time.\n  const dateDay = jsDate.getDay();\n  // Instead of 0 for Sunday, we want 7 for Sunday so that it matches what Temporal does for temporalDate.dayOfWeek.\n  const dayOfWeekNum = dateDay === 0 ? 7 : dateDay;\n  return dayOfWeekNum;\n}\n\n// returns year/month/day object that is the start of the month.\n// startOfMonth(2022, 2, 3); // {year: 2022, month:2, day:1}\nfunction startOfMonth(year: number, month: IsoMonth): CalendarDateRequired {\n  return {\n    year,\n    month,\n    day: 1\n  };\n}\n\n/**\n * Given a year, a month, and a locale, return the number of weeks in the month. This is useful for CalendarGrid.\n * @param year\n * @param month\n * @param locale\n * @returns the number of weeks in the month. Typically 4, 5, or 6.\n */\nexport function getWeeksInMonth(year: number, month: IsoMonth, locale: BCP47Locale): number {\n  checkNoCalendarExtension(locale);\n  // DateTimeUtils.getDaysInMonth uses a 0-based index for month.\n  const daysInMonth = DateTimeUtils.getDaysInMonth(year, month - 1);\n  const som = startOfMonth(year, month); // e.g., som is {year: 2023, month: 9, day: 1} for September 1, 2023.\n  return Math.ceil(\n    (getDayOfWeekForCalendarGrid(som.year, som.month, som.day, locale) + daysInMonth) / 7\n  );\n}\n\n/**\n * Helper function for getDatesInWeek. Given a date (as year, month, day), return an array of length 7 that\n * contains the the date in index 0, and then the next day in index 1, etc.\n * @param year\n * @param month\n * @param day\n * @returns\n */\nfunction getDatesInOneWeek(year: number, month: IsoMonth, day: IsoDay) {\n  const weekArray: Array<CalendarDateRequired> = [];\n  const jsStartDate = toJSDate(year, month, day);\n  const daysInWeek = 7;\n  for (let i = 0; i < daysInWeek; i++) {\n    const yearMonthDay = toIsoCalendarDateRequired(jsStartDate);\n    weekArray.push(yearMonthDay);\n    // When we have Temporal, we could do startDate.add({days: 1});\n    const day = jsStartDate.getDate();\n    jsStartDate.setDate(day + 1);\n  }\n  return weekArray;\n}\n\n/**\n * This function is used to generate a calendar grid for a month.\n * For a given date (a year, month, and day) that is the start of the calendar month, return an array with the dates for that week index.\n * For example,in a calendar that starts on Sunday, the start of the calendar for Feb, 2023 is Jan 29. So you should\n * pass in year: 2023, month: 1, day: 29 weekIndex 0 (call getStartOfWeek to get this)\n * when you want the dates for the first week of February, and weekIndex 1\n * if you want the dates for the second week of February.\n *\n *       February 2023\n * Sun Mon Tue Wed Thu Fri Sat\n *\n * 29  30  31  1   2   3   4\n *\n * You can use this in conjunction with getStartOfWeek(year, month, 1, locale) and getWeeksInMonth(weekIndex, startDateOfWeek.year,\n * startDateOfWeek.month, startDateOfWeek.day) to build a calendar month.\n *\n * @param weekIndex\n * @param year the year\n * @param month the startOfWeek month for the first week in the calendar month.\n * @param day the startOfWeek day for the first week in the calendar month.\n * @returns\n */\nexport function getDatesInWeek(\n  weekIndex: WeekInMonthIndex,\n  year: number,\n  month: IsoMonth,\n  day: IsoDay\n) {\n  const jsStartDate = toJSDate(year, month, day);\n  if (weekIndex === 0) {\n    return getDatesInOneWeek(year, month, day);\n  }\n\n  // Temporal would do startDate.add({weeks: 1});\n  // It is ok to setDate to a date > 31. setDate takes you into the next month or year if it has to.\n  jsStartDate.setDate(day + 7 * weekIndex);\n  const yearMonthDay = toIsoCalendarDateRequired(jsStartDate);\n  return getDatesInOneWeek(yearMonthDay.year, yearMonthDay.month, yearMonthDay.day);\n}\n\n/**\n * Given a date (a year, month, and day) and a locale, return the start of the week date as an object with year, month and day keys.\n * @param year\n * @param month\n * @param day\n * @param locale\n * @returns the start of the week date as an object with type CalendarDateRequired.\n */\nexport function getStartOfWeek(\n  year: number,\n  month: IsoMonth,\n  day: IsoDay,\n  locale: BCP47Locale\n): CalendarDateRequired {\n  const dayOfWeekInGrid = getDayOfWeekForCalendarGrid(year, month, day, locale);\n  const jsDateInWeek = toJSDate(year, month, day);\n  // Temporal would do this: date.subtract({days: dayOfWeekInGrid});\n  jsDateInWeek.setDate(day - dayOfWeekInGrid);\n  return toIsoCalendarDateRequired(jsDateInWeek);\n}\n\nexport function toIsoCalendarDateRequired(jsDate: Date) {\n  const year = jsDate.getFullYear();\n  const month = jsDate.getMonth() + 1;\n  const day = jsDate.getDate();\n  return { year, month: month as IsoMonth, day: day as IsoDay };\n}\n"],"names":["getWeekStart","locale","checkNoCalendarExtension","region","getRegion","weekData","firstDay","cachedRegions","Map","get","JET_SUPPLEMENTAL_DATA_REGION_DEFAULT","Intl","Locale","maximize","_","getIntlLocaleRegion","set","getDayOfWeekForCalendarGrid","year","month","day","weekStart","getDayOfWeek","dateDay","toJSDate","getDay","getDatesInOneWeek","weekArray","jsStartDate","i","yearMonthDay","toIsoCalendarDateRequired","push","getDate","setDate","jsDate","getFullYear","getMonth","weekIndex","type","dayOfWeekNames","cal","CalendarUtils","getCalendar","calType","short","narrow","long","days","sun","mon","tue","wed","thu","fri","sat","getDaysOfWeekNamesSunThroughSat","Array","keys","map","dow","dayOfWeekInGrid","jsDateInWeek","daysInMonth","DateTimeUtils.getDaysInMonth","getDaysInMonth","som","startOfMonth","Math","ceil"],"mappings":"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"}