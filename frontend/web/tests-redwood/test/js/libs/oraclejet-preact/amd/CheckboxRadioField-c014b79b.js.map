{"version":3,"file":"CheckboxRadioField-c014b79b.js","sources":["../../src/PRIVATE_CheckboxRadioField/CheckboxRadioField.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentChildren, ComponentProps, Ref, JSX } from 'preact';\nimport { forwardRef, useImperativeHandle, useRef } from 'preact/compat';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '#hooks/PRIVATE_useCollectionFocusRing';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { FlexboxProps } from '#utils/UNSAFE_interpolations/flexbox';\nimport { Size } from '#utils/UNSAFE_size';\nimport { BundleType } from '#resources/nls/bundle';\nimport { Flex } from '#UNSAFE_Flex';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { useCheckboxRadioField } from './useCheckboxRadioField';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { xUnits } from '#UNSAFE_Theme';\nimport { topUAContainerStyles } from './CheckboxRadioFieldStyles.css';\nimport { CheckboxRadioContext } from './CheckboxRadioContext';\nimport { layoutSpanStyles, LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { CheckboxRadioLabelValueLayout } from '#UNSAFE_CheckboxRadioField/CheckboxRadioLabelValueLayout';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype AriaProps = Pick<UnpackSignals<JSX.AriaAttributes>, 'aria-describedby'>;\n\ntype Props = TestIdProps &\n  AriaProps & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * baseId, used to generate other element IDs.\n     */\n    baseId: string;\n    /**\n     * <RadioItem /> or <CheckboxItem />\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * layout direction of the children elements\n     */\n    direction?: FlexboxProps['direction'];\n    /**\n     * Value of the radio option.\n     */\n    hasValue?: boolean;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the radio group is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the radio group is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the radio group requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the group of radio buttons.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'start' | 'inside';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n\n    role?: 'radiogroup' | 'group';\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n\n    parentComponentVariant: 'radioSet' | 'checkboxSet';\n  };\n\nexport const CheckboxRadioField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      direction = 'column',\n      columnSpan = 1,\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      labelStartWidth = '33%',\n      parentComponentVariant,\n      messages,\n      userAssistanceDensity,\n      role,\n      children,\n      testId\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const testIdProps = useTestId(testId);\n    const UAtestId = `${testId}-inline-user-assistance`;\n    const UAtestIdTop = testId ? `${UAtestId}-top` : undefined;\n    const UAtestIdBottom = testId ? `${UAtestId}-bottom` : undefined;\n    const hasTopUserAssistance =\n      !isDisabled && !isReadonly && (!!assistiveText || !!helpSourceLink);\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled fields\n    const hasBottomUserAssistance = !isDisabled;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const {\n      groupProps,\n      labelProps,\n      topUserAssistanceProps,\n      bottomUserAssistanceProps,\n      readonlyId\n    } = useCheckboxRadioField({\n      ariaDescribedBy,\n      baseId,\n      isRequired,\n      isReadonly,\n      isDisabled,\n      label,\n      labelEdge,\n      messages,\n      hasValue,\n      hasTopUserAssistance,\n      hasBottomUserAssistance,\n      parentComponentVariant\n    });\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const readonlyLabel = translations.formControl_readOnly();\n    const isRadioSet = parentComponentVariant === 'radioSet';\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    // the props from the hook are used for focus management on the radioset variant to allow for arrow navigation\n    // while checkboxset uses tabbing\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      groupRef,\n      isRadioSet ? ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'] : ['Tab']\n    );\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div\n            id={`${baseId}-top-ua-container`}\n            class={labelEdge === 'start' ? topUAContainerStyles.start : topUAContainerStyles.top}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps} testId={UAtestIdTop}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <Flex\n          direction={direction}\n          {...(direction === 'row' && { gap: [0, xUnits(8) as Size], wrap: 'wrap' })}>\n          <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n            {children}\n          </CheckboxRadioContext.Provider>\n        </Flex>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestIdBottom}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled fields */\n          <InlineUserAssistance\n            id={bottomUserAssistanceProps?.id}\n            userAssistanceDensity=\"efficient\"\n            testId={UAtestIdBottom}\n          />\n        )}\n      </>\n    );\n    // The top level element needs the column span class on it.\n    const classes = layoutSpanStyles.layoutSpanColumn[columnSpan];\n\n    return (\n      <div\n        role={role}\n        ref={groupRef}\n        class={classes}\n        {...groupProps}\n        {...focusRingProps}\n        {...testIdProps}>\n        {labelEdge === 'none' ? (\n          content\n        ) : (\n          <CheckboxRadioLabelValueLayout\n            columnSpan={columnSpan}\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge}\n            labelStartWidth={labelStartWidth}>\n            {content}\n          </CheckboxRadioLabelValueLayout>\n        )}\n        {isReadonly && (\n          <HiddenAccessible id={readonlyId} isHidden={true}>\n            {readonlyLabel}\n          </HiddenAccessible>\n        )}\n      </div>\n    );\n  }\n);\n"],"names":["CheckboxRadioField","forwardRef","ariaDescribedBy","assistiveText","baseId","direction","columnSpan","hasValue","helpSourceLink","helpSourceText","isDisabled","isReadonly","isRequired","label","labelEdge","labelStartWidth","parentComponentVariant","messages","userAssistanceDensity","role","children","testId","ref","testIdProps","useTestId","UAtestId","UAtestIdTop","undefined","UAtestIdBottom","hasTopUserAssistance","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","readonlyId","useCheckboxRadioField","readonlyLabel","useTranslationBundle","formControl_readOnly","isRadioSet","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","content","_jsxs","_Fragment","_jsx","id","class","topUAContainerStyles","start","top","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","Flex","gap","xUnits","wrap","jsx","CheckboxRadioContext","Provider","value","InlineUserAssistance","requiredAlignment","classes","layoutSpanStyles","layoutSpanColumn","CheckboxRadioLabelValueLayout","Label","variant","HiddenAccessible","isHidden"],"mappings":"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"}