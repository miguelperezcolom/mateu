{"version":3,"file":"InputColor-ba95f9f3.js","sources":["../../src/UNSAFE_InputColor/InputColorPickerDropdown.tsx","../../src/UNSAFE_InputColor/useInputColorState.ts","../../src/UNSAFE_InputColor/useInputColor.ts","../../src/UNSAFE_InputColor/InputColor.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { BundleType } from '../resources/nls/bundle';\nimport { ColorPicker } from '#UNSAFE_ColorPicker';\nimport { type CloseDetail as DropdownCloseDetail } from '#UNSAFE_Dropdown';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { dropdownStyles, userAssistanceStyles } from './themes/InputColorPickerDropdownStyles.css';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { StickyPositioningDropdown } from '#PRIVATE_FormControls';\nimport { SectionedContent } from '#PRIVATE_FormControls';\nimport { type CloseDetail as SheetCloseDetail, Sheet } from '#UNSAFE_Sheet';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { SizeOptions } from '#UNSAFE_Floating/Floating';\nimport { InputColorPublicProps as InputColorProps } from './InputColor.types';\n\ntype StickyPositioningDropdownProps = ComponentProps<typeof StickyPositioningDropdown>;\ntype ColorPickerProps = ComponentProps<typeof ColorPicker>;\ntype PickedPropsFromColorPicker = Pick<ColorPickerProps, 'value' | 'onCommit'>;\ntype PickedPropsFromDropdown = Omit<StickyPositioningDropdownProps, 'onClose'>;\ntype CloseDetail = SheetCloseDetail | DropdownCloseDetail;\ntype PickedPropsFromInputColor = Pick<\n  InputColorProps,\n  | 'swatchSize'\n  | 'palette'\n  | 'value'\n  | 'aria-describedby'\n  | 'assistiveText'\n  | 'columnSpan'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'isRequired'\n  | 'isRequiredShown'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'messages'\n  | 'textAlign'\n  | 'testId'\n  | 'userAssistanceDensity'\n  | 'variant'\n>;\n\ntype Props = PickedPropsFromColorPicker &\n  PickedPropsFromInputColor &\n  PickedPropsFromDropdown &\n  TestIdProps & {\n    /**\n     * Called when the dropdown or sheet is supposed to be closed.\n     */\n    onClose?: (detail: CloseDetail) => void;\n  };\n\n/**\n * Component that renders ColorPicker either inside a dropdown or sheet; in mobile,\n * it renders inside a sheet. Additionally, when a dropdown is being shown beneath\n * the component, we also show any user assistance text or messages below the picker\n * because otherwise that information would be obscured from view. When a sheet is being\n * shown, it will always display UA and messages at the bottom of the sheet.\n */\nconst InputColorPickerDropdown = ({\n  anchorRef,\n  assistiveText,\n  swatchSize,\n  palette,\n  helpSourceLink,\n  helpSourceText,\n  isDisabled,\n  isOpen,\n  isReadonly,\n  label,\n  onClose,\n  onCommit,\n  messages,\n  testId,\n  userAssistanceDensity,\n  value\n}: Props) => {\n  // If the dropdown opens above the component, we don't want to show UA or messages.\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n  const [prevIsOpen, setPrevIsOpen] = useState(isOpen);\n  const handleDropdownPosition = useCallback<\n    NonNullable<StickyPositioningDropdownProps['onPosition']>\n  >((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n  // Reset the flag when the dropdown is closed.\n  if (prevIsOpen !== isOpen) {\n    setPrevIsOpen(isOpen);\n    if (!isOpen) {\n      setDropdownAbove(false);\n    }\n  }\n\n  const sizeOptions: SizeOptions = {\n    isMaxWidthAdjusted: false,\n    isMaxHeightAdjusted: true\n  };\n\n  // On mobile phones, the dropdown becomes a sheet.\n  const shouldShowSheet = isPhone();\n\n  const { colorPicker_label } = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const colorPickerAriaLabel = colorPicker_label();\n\n  const colorPickerMainContent = (\n    <ColorPicker\n      height={!shouldShowSheet ? 'auto' : undefined}\n      onCommit={onCommit}\n      // for sheet, we want the width to grow to the width of the sheet, otherwise it will use the theme default.\n      maxWidth={shouldShowSheet ? '100%' : undefined}\n      width=\"100%\"\n      swatchSize={swatchSize}\n      palette={palette}\n      testId={testId}\n      value={value}\n    />\n  );\n\n  const inlineUserAssistanceFooter =\n    isOpen &&\n    (!isDropdownAbove || shouldShowSheet) &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink || (messages && messages.length > 0)) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <FormFieldContext.Provider value={{ isFocused: true }}>\n        <div class={userAssistanceStyles}>\n          <InlineUserAssistance\n            assistiveText={assistiveText}\n            fieldLabel={label}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity}\n          />\n        </div>\n      </FormFieldContext.Provider>\n    ) : undefined;\n\n  const contentTestId = testId ? testId + (shouldShowSheet ? '_sheet' : '_dropdown') : undefined;\n\n  // The same content is displayed either in a dropdown or sheet: color picker and inline UA.\n  // Add styling to the dropdown to enforce a fixed width.\n  const dropdownContent = (\n    <div class={dropdownStyles}>\n      <SectionedContent\n        paddingBlockEnd=\"3.5x\"\n        paddingBlockStart=\"3.5x\"\n        paddingInlineEnd=\"3.5x\"\n        paddingInlineStart=\"3.5x\"\n        aria-label={colorPickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={colorPickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </div>\n  );\n\n  const dropdown = shouldShowSheet ? (\n    <Sheet isOpen={isOpen} onClose={onClose}>\n      <SectionedContent\n        aria-label={colorPickerAriaLabel}\n        footer={inlineUserAssistanceFooter}\n        hasFocusTrap={true}\n        main={colorPickerMainContent}\n        role=\"dialog\"\n        testId={contentTestId}\n      />\n    </Sheet>\n  ) : (\n    <StickyPositioningDropdown\n      anchorRef={anchorRef}\n      isOpen={isOpen}\n      onClose={onClose}\n      onPosition={handleDropdownPosition}\n      sizeOptions={sizeOptions}>\n      {dropdownContent}\n    </StickyPositioningDropdown>\n  );\n\n  return dropdown;\n};\n\nconst isPhone = () => {\n  return getClientHints().deviceType === 'phone';\n};\n\nexport { InputColorPickerDropdown, type CloseDetail };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useReducer } from 'preact/hooks';\nimport { type ColorValue } from '#utils/UNSAFE_color';\n\ntype InputColorState = {\n  /**\n   * Represents the current color value of the component. The user either selected\n   * the color in the picker, or typed it into the color field.\n   */\n  colorValue?: ColorValue;\n};\n\ntype ColorChangedAction = { type: 'colorChanged'; data?: ColorValue };\ntype ColorResetAction = { type: 'reset'; data?: ColorValue };\ntype ColorSelectedAction = { type: 'colorSelected'; data?: ColorValue };\ntype InputColorReducerAction = ColorChangedAction | ColorResetAction | ColorSelectedAction;\n\n// Use a reducer function to manage InputColorState.\nconst inputColorReducer = (\n  state: InputColorState,\n  action: InputColorReducerAction\n): InputColorState => {\n  switch (action.type) {\n    case 'colorChanged': {\n      return {\n        ...state,\n        colorValue: action.data\n      };\n    }\n    case 'colorSelected': {\n      return { ...state, colorValue: action.data };\n    }\n    case 'reset': {\n      return {\n        colorValue: action.data\n      };\n    }\n    default:\n      return state;\n  }\n};\n\ntype Props = {\n  /**\n   * The value of the InputColor, or undefined.\n   */\n  value?: ColorValue;\n};\n\n/**\n * useInputColorState calls useReducer to determine the initial state. Any changes to that state\n * are managed by dispatching actions to the reducer function.\n */\nconst useInputColorState = ({ value }: Props) => {\n  const [state, dispatch] = useReducer(inputColorReducer, {\n    colorValue: value\n  });\n\n  return { state, dispatch };\n};\n\nexport { useInputColorState };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { ElementRef } from 'preact/compat';\nimport { colorsAreDifferent, type ColorValue } from '#utils/UNSAFE_color';\nimport { ColorPicker } from '#UNSAFE_ColorPicker';\nimport { ColorSwatch } from '#UNSAFE_ColorSwatch';\nimport { CloseDetail, InputColorPickerDropdown } from './InputColorPickerDropdown';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { useInputColorState } from './useInputColorState';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { useDownToggle } from '#hooks/UNSAFE_useDownToggle';\nimport { InputColorPublicProps as InputColorProps } from './InputColor.types';\n\ntype SwatchHandle = ElementRef<typeof ColorSwatch>;\n\ntype ColorPickerProps = ComponentProps<typeof ColorPicker>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype DropdownProps = ComponentProps<typeof InputColorPickerDropdown>;\n\ntype Props = {\n  onCommit: InputColorProps['onCommit'];\n  onInput: InputColorProps['onInput'];\n  value: InputColorProps['value'];\n};\n\n/**\n * Hook that provides handlers and other functionality for InputColor.\n */\nconst useInputColor = ({ onCommit, onInput, value: currentValue }: Props) => {\n  // Whether the dropdown is open.\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  // Ref to the swatch icon button.\n  const iconRef: RefObject<SwatchHandle> = useRef<SwatchHandle>(null);\n\n  // Ref to the text input which holds color value\n  const colorRef: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);\n\n  // Keep track of whether the dropdown was just dismissed from an outside mousedown event.\n  const outsideMousedownRef = useRef<boolean>(false);\n  const outsideMousedownTimerRef = useRef<ReturnType<typeof setTimeout> | undefined>();\n\n  // Keep track of the last color values passed to onInput and onCommit.\n  const lastCommittedColorRef = useRef<ColorValue | undefined>(currentValue);\n  const lastColorRef = useRef<ColorValue | undefined>(currentValue);\n\n  // Keep track of the last controlled value passed from the parent, so we can detect a programmatic change.\n  const lastValueFromParentRef = useRef<ColorValue | undefined>(currentValue);\n\n  // Keep track of whether a color was selected in the color picker.\n  const colorSelectedRef = useRef<boolean>(false);\n\n  const { state, dispatch } = useInputColorState({ value: currentValue });\n\n  // If a new value is being pushed from the parent, and that value differs from\n  // the current value of the reducer, then this is a programmatic update\n  // and we need to call 'reset' to update the reducer state. Otherwise, the only\n  // time the reducer state is updated from the value is on mount.\n  if (colorsAreDifferent(lastValueFromParentRef.current, currentValue)) {\n    lastValueFromParentRef.current = currentValue;\n    if (colorsAreDifferent(currentValue, state.colorValue)) {\n      dispatch({ type: 'reset', data: currentValue });\n      lastColorRef.current = currentValue;\n      lastCommittedColorRef.current = currentValue;\n    }\n  }\n\n  // Reducer updates are async, so wait until the state updates and then call our callbacks.\n  useEffect(() => {\n    if (colorsAreDifferent(state.colorValue, lastColorRef.current)) {\n      onInput({ previousValue: lastColorRef.current, value: state.colorValue });\n      lastColorRef.current = state.colorValue;\n    }\n    if (\n      colorSelectedRef.current &&\n      colorsAreDifferent(state.colorValue, lastCommittedColorRef.current)\n    ) {\n      onCommit?.({ previousValue: lastCommittedColorRef.current, value: state.colorValue });\n      lastCommittedColorRef.current = state.colorValue;\n      colorSelectedRef.current = false;\n    }\n  }, [onCommit, onInput, state.colorValue]);\n\n  // Handle onInput from InputColor as values are entered in the input field.\n  // We wait for the state to update before calling onInput.\n  const colorInputHandler = useCallback<InputColorProps['onInput']>(\n    (detail: ValueUpdateDetail<ColorValue>) => {\n      dispatch({ type: 'colorChanged', data: detail.value });\n    },\n    [dispatch]\n  );\n\n  // Handle onCommit from InputColor, which is called when the user presses Enter or the field is blurred.\n  const colorCommitHandler = useCallback<NonNullable<InputColorProps['onCommit']>>(() => {\n    // If the current color value differs from the last committed value, then call onCommit.\n    if (colorsAreDifferent(lastCommittedColorRef.current, state.colorValue)) {\n      onCommit?.({ value: state.colorValue, previousValue: lastCommittedColorRef.current });\n      lastCommittedColorRef.current = state.colorValue;\n    }\n  }, [onCommit, state.colorValue]);\n\n  // Respond to onAction event from the swatch icon button. Toggles the color picker dropdown.\n  const colorIconActionHandler = useCallback<NonNullable<IconButtonProps['onAction']>>(() => {\n    // Only toggle the value of isOpen if we didn't just dismiss the dropdown.\n    if (!outsideMousedownRef.current) {\n      setIsOpen((prevIsOpen) => !prevIsOpen);\n    }\n    outsideMousedownRef.current = false;\n  }, []);\n\n  const dropdownCloseHandler = useCallback<NonNullable<DropdownProps['onClose']>>(\n    (detail: CloseDetail) => {\n      // Keep track of when the dropdown is closed via outside mousedown, including when the swatch icon\n      // is clicked. We need this in order to toggle visibility of the picker and dropdown.\n      if (detail.reason === 'outsideMousedown') {\n        outsideMousedownRef.current = true;\n        clearTimeout(outsideMousedownTimerRef.current);\n\n        // Clear the flag after a short delay to ensure the dropdown can be opened again.\n        outsideMousedownTimerRef.current = setTimeout(() => {\n          outsideMousedownRef.current = false;\n        }, 200);\n      } else if (detail.reason === 'dismissed' || detail.reason === 'keyboardDismissed') {\n        // Focus the swatch icon when the dropdown is closed.\n        iconRef.current?.focus();\n      }\n      setIsOpen(false);\n    },\n    []\n  );\n\n  // Handle color selection in the picker.\n  //   - Updates the value in state.\n  //   - Closes the dropdown.\n  //   - Sets focus to the color field.\n  const colorPickerCommitHandler = useCallback<ColorPickerProps['onCommit']>(\n    (detail: ValueUpdateDetail<ColorValue>) => {\n      // Set focus to the swatch when a color is selected.\n      iconRef.current?.focus();\n\n      // Set a ref indicating a color was selected.\n      colorSelectedRef.current = true;\n      dispatch({ type: 'colorSelected', data: detail.value });\n      setIsOpen(false);\n    },\n    [dispatch]\n  );\n\n  // The Redwood UX design calls for the dropdown to open when the down arrow is pressed.\n  // Handle opening the dropdown when the down arrow is pressed in the text edit field.\n  const colorPickerDownHandler = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const { triggerProps: containerDropdownProps } = useDownToggle({\n    isOpen,\n    onToggle: colorPickerDownHandler\n  });\n\n  return {\n    colorIconActionHandler,\n    colorPickerCommitHandler,\n    dropdownCloseHandler,\n    containerDropdownProps,\n    colorValue: state.colorValue,\n    iconRef,\n    isOpen,\n    colorCommitHandler,\n    colorInputHandler,\n    colorRef\n  };\n};\n\nexport { useInputColor };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Ref } from 'preact';\nimport { forwardRef, ElementRef } from 'preact/compat';\nimport { useCallback, useImperativeHandle, useRef } from 'preact/hooks';\nimport { type BundleType } from '../resources/nls/bundle';\nimport { type ColorValue, isValidColorValue } from '#utils/UNSAFE_color';\nimport { InputColorPickerDropdown } from './InputColorPickerDropdown';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { ColorSwatch } from '#UNSAFE_ColorSwatch';\nimport { useInputColor } from './useInputColor';\n\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { CompactUserAssistance, InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { ClearIcon } from '../PRIVATE_ClearIcon/ClearIcon';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { InputColorPublicProps as Props } from './InputColor.types';\n\ntype SwatchHandle = ElementRef<typeof ColorSwatch>;\n\ntype FocusSelectHandle = FocusableHandle & SelectableHandle;\n\n/**\n * An Input Color is a form field that allows users to select or input a color value,\n * using a color picker or by enterihg a HEX code.\n */\nexport const InputColor = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      swatchSize,\n      palette,\n      value,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      isRequiredShown = false,\n      isRequired = false,\n      placeholder,\n      hasClearIcon,\n      columnSpan,\n      textAlign: propTextAlign,\n      autoComplete,\n      messages,\n      assistiveText,\n      helpSourceLink,\n      helpSourceText,\n      label,\n      onCommit,\n      onInput,\n      testId,\n      variant,\n      userAssistanceDensity: propUserAssistanceDensity\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const {\n      colorIconActionHandler,\n      colorPickerCommitHandler,\n      dropdownCloseHandler,\n      colorValue,\n      containerDropdownProps,\n      iconRef,\n      isOpen,\n      colorCommitHandler,\n      colorInputHandler,\n      colorRef: enabledElementRef\n    } = useInputColor({\n      onCommit,\n      onInput,\n      value\n    });\n\n    const mainFieldRef = useRef<HTMLDivElement>(null);\n    const { inputColor_selectColor } = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const colorIconAriaLabel = inputColor_selectColor();\n    const { onKeyDown, ...inputContainerAriaProps } = containerDropdownProps;\n\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value: colorValue });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<ColorValue>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        colorInputHandler?.(detail);\n      },\n      [colorInputHandler, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<ColorValue>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        colorCommitHandler?.(detail);\n      },\n      [colorCommitHandler, dispatch]\n    );\n\n    const startContent = () => (\n      <ColorSwatch\n        size=\"xs\"\n        aria-haspopup={palette ? 'grid' : undefined} // with only palette, grid is a better choice than dialog for now.\n        aria-label={palette ? colorIconAriaLabel : undefined}\n        isDisabled={isDisabled}\n        isButton={true}\n        isTooltipDisabled={isOpen}\n        ref={iconRef as Ref<SwatchHandle>}\n        testId={testId ? testId + '_colorIcon' : undefined}\n        value={currentCommitValue as ColorValue}\n        onToggle={isDisabled || !palette ? undefined : colorIconActionHandler}\n      />\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const readonlyElementRef = useRef<HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    const { methods: selectMethods } = useSelectableTextField<HTMLInputElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused: isFocused || isOpen,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value: colorValue\n      });\n\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: colorValue, value: undefined });\n    }, [onInputAndDispatch, colorValue, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} testId={`${testId}_clearicon`} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n\n    const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const aRef = useRef<HTMLDivElement>(null);\n    const anchorRef = mainFieldRef ?? aRef;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const mainContent = isReadonly ? (\n      <ReadonlyTextFieldInput\n        aria-describedby={inputProps['aria-describedby']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        as=\"div\"\n        elementRef={readonlyElementRef}\n        textAlign={textAlign}\n        value={colorValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={hasInsideLabel}\n      />\n    ) : (\n      <TextFieldInput\n        aria-labelledby={labelProps.id}\n        aria-label={ariaLabel}\n        autoComplete={autoComplete}\n        currentCommitValue={currentCommitValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasEndContent={false}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        hasStartContent={true}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        type={isMobile() ? 'text' : undefined}\n        value={colorValue}\n        onCommit={\n          onCommitAndDispatch as (detail: ValueUpdateDetail<string>) => {\n            value: string;\n          }\n        }\n        onInput={\n          onInputAndDispatch as (detail: ValueUpdateDetail<string>) => {\n            value: string;\n          }\n        }\n        onKeyDown={onKeyDown}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <>\n        <FormFieldContext.Provider value={formFieldContext}>\n          {isReadonly ? (\n            <ReadonlyTextField\n              role=\"presentation\"\n              columnSpan={columnSpan}\n              compactUserAssistance={compactUserAssistance}\n              inlineUserAssistance={inlineUserAssistance}\n              onBlur={focusProps.onFocusOut}\n              onFocus={focusProps.onFocusIn}\n              ref={anchorRef}\n              mainContent={mainContent}\n              testId={testId}\n              {...fieldLabelProps}></ReadonlyTextField>\n          ) : (\n            <TextField\n              endContent={maybeClearIcon}\n              columnSpan={columnSpan}\n              compactUserAssistance={compactUserAssistance}\n              inlineUserAssistance={inlineUserAssistance}\n              mainContent={mainContent}\n              onBlur={focusProps.onFocusOut}\n              onFocus={focusProps.onFocusIn}\n              startContent={startContent()}\n              mainFieldRef={anchorRef}\n              hasZeroStartMargin={true}\n              testId={testId}\n              {...textFieldProps}\n              {...fieldLabelProps}\n              {...hoverProps}\n              {...inputContainerAriaProps}\n            />\n          )}\n        </FormFieldContext.Provider>\n\n        {isOpen && !isReadonly && !isDisabled && (\n          <InputColorPickerDropdown\n            anchorRef={mainFieldRef}\n            assistiveText={assistiveText}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isOpen={isOpen}\n            label={label}\n            onClose={dropdownCloseHandler}\n            onCommit={colorPickerCommitHandler}\n            messages={messages}\n            testId={testId ? testId + '_colorPicker' : undefined}\n            userAssistanceDensity={userAssistanceDensity}\n            // memoize this for performance\n            value={colorValue && isValidColorValue(colorValue) ? colorValue : undefined}\n            palette={palette}\n            swatchSize={swatchSize}\n          />\n        )}\n      </>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\nInputColor.displayName = 'InputColor';\n"],"names":["InputColorPickerDropdown","anchorRef","assistiveText","swatchSize","palette","helpSourceLink","helpSourceText","isDisabled","isOpen","isReadonly","label","onClose","onCommit","messages","testId","userAssistanceDensity","value","isDropdownAbove","setDropdownAbove","useState","prevIsOpen","setPrevIsOpen","handleDropdownPosition","useCallback","data","placement","startsWith","shouldShowSheet","isPhone","colorPicker_label","useTranslationBundle","colorPickerAriaLabel","colorPickerMainContent","_jsx","ColorPicker","height","undefined","maxWidth","width","inlineUserAssistanceFooter","length","FormFieldContext","Provider","isFocused","children","jsx","class","userAssistanceStyles","InlineUserAssistance","fieldLabel","contentTestId","dropdownContent","dropdownStyles","SectionedContent","paddingBlockEnd","paddingBlockStart","paddingInlineEnd","paddingInlineStart","footer","hasFocusTrap","main","role","Sheet","StickyPositioningDropdown","onPosition","sizeOptions","isMaxWidthAdjusted","isMaxHeightAdjusted","getClientHints","deviceType","inputColorReducer","state","action","type","colorValue","useInputColor","onInput","currentValue","setIsOpen","iconRef","useRef","colorRef","outsideMousedownRef","outsideMousedownTimerRef","lastCommittedColorRef","lastColorRef","lastValueFromParentRef","colorSelectedRef","dispatch","useReducer","useInputColorState","colorsAreDifferent","current","useEffect","previousValue","colorInputHandler","detail","colorCommitHandler","colorIconActionHandler","dropdownCloseHandler","reason","clearTimeout","setTimeout","focus","colorPickerCommitHandler","colorPickerDownHandler","triggerProps","containerDropdownProps","useDownToggle","onToggle","InputColor","forwardRef","ariaDescribedBy","propIsDisabled","propIsReadonly","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","isRequiredShown","isRequired","placeholder","hasClearIcon","columnSpan","textAlign","propTextAlign","autoComplete","variant","propUserAssistanceDensity","ref","enabledElementRef","mainFieldRef","inputColor_selectColor","colorIconAriaLabel","onKeyDown","inputContainerAriaProps","currentCommitValue","useCurrentValueReducer","onInputAndDispatch","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","readonlyElementRef","focusProps","methods","focusMethods","useFocusableTextField","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onClickClearIcon","maybeClearIcon","useClearIcon","clearIcon","ClearIcon","onClick","display","hasValue","isEnabled","hasInsideLabel","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","aRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","id","as","elementRef","hasEmptyLabel","TextFieldInput","hasEndContent","hasStartContent","inputRef","isMobile","_jsxs","ReadonlyTextField","onBlur","onFocusOut","onFocus","onFocusIn","TextField","endContent","startContent","ColorSwatch","size","isButton","isTooltipDisabled","hasZeroStartMargin","isValidColorValue","displayName"],"mappings":"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"}