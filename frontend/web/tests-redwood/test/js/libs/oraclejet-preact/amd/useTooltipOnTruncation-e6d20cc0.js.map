{"version":3,"file":"useTooltipOnTruncation-e6d20cc0.js","sources":["../../src/hooks/PRIVATE_useTooltipOnTruncation/useTooltipOnTruncation.tsx"],"sourcesContent":["import { useDetectTruncation } from '#hooks/PRIVATE_useDetectTruncation';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\n\nconst useTooltipOnTruncation = (tooltipText?: string, isDisabled = false) => {\n  const { detectTruncationProps, isTextTruncated } = useDetectTruncation(isDisabled);\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text: tooltipText,\n    isDisabled: !isTextTruncated || isDisabled\n  });\n\n  const { 'aria-describedby': notNeeded, ...validTooltipProps } = tooltipProps; //remove aria-describedby to prevent screen readers from reading the same text multiple times\n\n  const tooltipOnTruncationProps = mergeProps(detectTruncationProps, validTooltipProps);\n\n  return { tooltipOnTruncationProps, tooltipContent, isTextTruncated };\n};\n\nexport { useTooltipOnTruncation };\n"],"names":["tooltipText","isDisabled","detectTruncationProps","isTextTruncated","useDetectTruncation","tooltipContent","tooltipProps","useTooltip","text","notNeeded","validTooltipProps","tooltipOnTruncationProps","mergeProps"],"mappings":"geAI+B,CAACA,EAAsBC,GAAa,KACjE,MAAMC,sBAAEA,EAAqBC,gBAAEA,GAAoBC,EAAmBA,oBAACH,IACjEI,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMR,EACNC,YAAaE,GAAmBF,KAG1B,mBAAoBQ,KAAcC,GAAsBJ,EAIhE,MAAO,CAAEK,yBAFwBC,EAAAA,WAAWV,EAAuBQ,GAEhCL,iBAAgBF,kBAAiB"}