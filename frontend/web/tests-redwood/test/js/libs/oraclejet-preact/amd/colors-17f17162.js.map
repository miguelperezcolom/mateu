{"version":3,"file":"colors-17f17162.js","sources":["../../src/utils/UNSAFE_interpolations/colors/colors.ts"],"sourcesContent":["import { Property } from 'csstype';\nimport { colorSchemeVars } from '@oracle/oraclejet-internal-theme-contract/themeContract.css';\n\ntype Props = {\n  color?: Property.Color;\n  backgroundColor?: Property.BackgroundColor;\n};\n\n// Take a string in the form of \"rgb(palette.token.str)\" and return the \"palette.token.str\"\nconst parsePaletteTokenFromRGB = (rgbStr: string) => {\n  const tokenArg = rgbStr.split('(')[1].split(')')[0];\n  return tokenArg ? tokenArg : ''; // return the matched palette token\n};\n// Take a string in the form of \"rgba(palette.token.str,opacity)\" and return the token and opacity\nconst parsePaletteTokenAndOpacityFromRGBA = (rgbaStr: string) => {\n  const tokenArgs = rgbaStr.split('(')[1].split(')')[0];\n  const argArray = tokenArgs.split(',');\n  // should have two arguments\n  if (argArray.length === 2) {\n    return [argArray[0], argArray[1]];\n  }\n  return ['', '']; // return empty string values on no match\n};\n// This will either return the interpolated token, or the original value if the token isn't found.\n// Any colorSchemeVars token can be referenced, but the palette tokens need to be wrapped with rgb(token)\n// or rgba(token,opacity).\nconst tokenInterpolate = (color: string) => {\n  const evaluateToken = (tokenStr: string) => {\n    const tokenKeys = tokenStr.split('.');\n    let evaluatedToken: any = colorSchemeVars;\n    tokenKeys.every((key) => {\n      if (evaluatedToken && typeof evaluatedToken === 'object' && evaluatedToken[key]) {\n        evaluatedToken = evaluatedToken[key];\n        return evaluatedToken;\n      } else {\n        evaluatedToken = tokenStr; // bad evaluation, return the original string;\n        return false;\n      }\n    });\n    return evaluatedToken;\n  };\n  let interpolatedColor = color.replace(/\\s/g, ''); // remove all whitespace before parsing\n  if (interpolatedColor.startsWith('rgb(palette.')) {\n    const evaluatedToken = evaluateToken(parsePaletteTokenFromRGB(interpolatedColor));\n    if (evaluatedToken) {\n      interpolatedColor = `rgb(${evaluatedToken})`;\n    }\n  } else if (interpolatedColor.startsWith('rgba(palette.')) {\n    const [token, opacity] = parsePaletteTokenAndOpacityFromRGBA(interpolatedColor);\n    const evaluatedToken = evaluateToken(token);\n    if (evaluatedToken) {\n      interpolatedColor = `rgba(${evaluatedToken},${opacity})`;\n    }\n  } else if (!interpolatedColor.startsWith('palette.') && interpolatedColor.includes('.')) {\n    // Don't allow palette tokens without the rbg() or rbga() wrapper.\n    interpolatedColor = evaluateToken(interpolatedColor);\n  }\n  // TWe want to pass the original value through, even if it was an unsuccessfully interploated token.\n  // An app developer will be able to see when a specified token is not parsed correctly and can fix\n  // any typoes, etc.\n  return interpolatedColor;\n};\n\nconst colorInterpolations = {\n  color: ({ color }: Pick<Props, 'color'>) =>\n    color === undefined\n      ? {}\n      : {\n          color: tokenInterpolate(color)\n        },\n  backgroundColor: ({ backgroundColor }: Pick<Props, 'backgroundColor'>) =>\n    backgroundColor === undefined\n      ? {}\n      : {\n          backgroundColor: tokenInterpolate(backgroundColor)\n        }\n};\n\nexport { colorInterpolations };\nexport type ColorProps = Props;\n"],"names":["tokenInterpolate","color","evaluateToken","tokenStr","tokenKeys","split","evaluatedToken","colorSchemeVars","every","key","interpolatedColor","replace","startsWith","token","opacity","rgbaStr","argArray","length","parsePaletteTokenAndOpacityFromRGBA","includes","colorInterpolations","undefined","backgroundColor"],"mappings":"8EASA,MAiBMA,EAAoBC,IACxB,MAAMC,EAAiBC,IACrB,MAAMC,EAAYD,EAASE,MAAM,KACjC,IAAIC,EAAsBC,EAAAA,gBAU1B,OATAH,EAAUI,OAAOC,GACXH,GAA4C,iBAAnBA,GAA+BA,EAAeG,IACzEH,EAAiBA,EAAeG,GACzBH,IAEPA,EAAiBH,GACV,KAGJG,CAAc,EAEvB,IAAII,EAAoBT,EAAMU,QAAQ,MAAO,IAC7C,GAAID,EAAkBE,WAAW,gBAAiB,CAChD,MAAMN,EAAiBJ,EAAuCQ,EAjCxCL,MAAM,KAAK,GAAGA,MAAM,KAAK,IACpB,IAiCvBC,IACFI,EAAoB,OAAOJ,KAE9B,MAAM,GAAII,EAAkBE,WAAW,iBAAkB,CACxD,MAAOC,EAAOC,GAlC0B,CAACC,IAC3C,MACMC,EADYD,EAAQV,MAAM,KAAK,GAAGA,MAAM,KAAK,GACxBA,MAAM,KAEjC,OAAwB,IAApBW,EAASC,OACJ,CAACD,EAAS,GAAIA,EAAS,IAEzB,CAAC,GAAI,GAAG,EA2BYE,CAAoCR,GACvDJ,EAAiBJ,EAAcW,GACjCP,IACFI,EAAoB,QAAQJ,KAAkBQ,KAEjD,MAAWJ,EAAkBE,WAAW,aAAeF,EAAkBS,SAAS,OAEjFT,EAAoBR,EAAcQ,IAKpC,OAAOA,CAAiB,EAGpBU,EAAsB,CAC1BnB,MAAO,EAAGA,gBACEoB,IAAVpB,EACI,CAAE,EACF,CACEA,MAAOD,EAAiBC,IAEhCqB,gBAAiB,EAAGA,0BACED,IAApBC,EACI,CAAE,EACF,CACEA,gBAAiBtB,EAAiBsB"}