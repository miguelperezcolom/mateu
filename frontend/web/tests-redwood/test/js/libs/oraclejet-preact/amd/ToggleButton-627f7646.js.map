{"version":3,"file":"ToggleButton-627f7646.js","sources":["../../src/UNSAFE_ToggleButton/ToggleButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef, ElementRef } from 'preact/compat';\n\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useToggleAction, ToggleDetail } from '#hooks/UNSAFE_useToggleAction';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { toggleStyling, processGlobals } from '#utils/UNSAFE_buttonUtils';\nimport { ToggleButtonLabel } from '#UNSAFE_ToggleButtonLabel';\nimport type { ButtonIntrinsicProps } from '#utils/UNSAFE_buttonUtils';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type ToggleButtonProps = ButtonIntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * The startIcon is the button's start icon. This should not vary depending on state.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * The endIcon is the button's end icon. This should not vary depending on state.\n     */\n    endIcon?: ComponentChildren;\n\n    /**\n     * Specifies that the togglebutton element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * label - togglebutton label, used for accessibility if no override\n     */\n    label: string;\n\n    /**\n     * aria-label - override label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * Indicates in what states the togglebutton has chrome (background and border).\n     *     \"borderless\"': \"Borderless togglebuttons are a more prominent variation. Borderless\n     * togglebuttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined togglebuttons are salient, but lighter weight than\n     * solid togglebuttons. Outlined togglebuttons are useful for secondary actions.\",\n     */\n    variant?: 'outlined' | 'borderless';\n\n    /**\n     * The size indicates how large the togglebutton is rendered.\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Specifies if the toggle button is selected\n     */\n    isSelected?: boolean;\n\n    /**\n     * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n     */\n    onToggle?: (details: ToggleDetail) => void;\n\n    /**\n     * Display indicates whether only the label or all elements should be rendered by the togglebutton.\n     */\n    display?: 'label' | 'all';\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the togglebutton.\n     */\n    'aria-describedby'?: string;\n  };\n\n/**\n * ToggleButtons direct users to toggle a state with a single tap, click, or keystroke.\n */\nexport const ToggleButton = forwardRef(\n  (\n    {\n      startIcon,\n      endIcon,\n      variant = 'outlined',\n      size = 'md',\n      isDisabled = false,\n      isSelected = false,\n      onToggle,\n      display = 'all',\n      autofocus,\n      testId,\n      label,\n      'aria-label': accessibleLabel,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: ToggleButtonProps,\n    ref: ForwardedRef<ButtonHandle>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n\n    const labelOnly = (!startIcon && !endIcon) || display === 'label';\n    const { triggerProps } = useToggleAction({\n      isDisabled: isDisabled,\n      onToggle: onToggle\n    });\n\n    const styling = toggleStyling(\n      'auto',\n      isSelected,\n      false,\n      false,\n      variant === 'outlined',\n      undefined,\n      labelOnly,\n      false,\n      true\n    );\n\n    const ariaProps = { 'aria-describedby': ariaDescribedBy };\n\n    return (\n      <BaseButton\n        {...mergeProps(triggerProps, globalEventProps, ariaProps)}\n        ref={ref}\n        variant={variant}\n        isDisabled={isDisabled}\n        size={size}\n        width={width}\n        aria-pressed={isSelected}\n        autofocus={autofocus}\n        styling={styling}\n        aria-label={accessibleLabel ?? label}\n        testId={testId}\n        {...globalEventProps}>\n        <ToggleButtonLabel\n          onAction={() => onToggle?.({ value: isSelected })}\n          label={label}\n          isDisabled={isDisabled}\n          display={display}\n          startIcon={startIcon}\n          endIcon={endIcon}></ToggleButtonLabel>\n      </BaseButton>\n    );\n  }\n);\n\nToggleButton.displayName = 'ToggleButton';\n"],"names":["ToggleButton","forwardRef","startIcon","endIcon","variant","size","isDisabled","isSelected","onToggle","display","autofocus","testId","label","accessibleLabel","ariaDescribedBy","width","props","ref","globalEventProps","processGlobals","labelOnly","triggerProps","useToggleAction","styling","toggleStyling","undefined","ariaProps","_jsx","BaseButton","mergeProps","ToggleButtonLabel","onAction","value","displayName"],"mappings":"sQA0Fa,MAAAA,EAAeC,EAAAA,YAC1B,EAEIC,YACAC,UACAC,UAAU,WACVC,OAAO,KACPC,cAAa,EACbC,cAAa,EACbC,WACAC,UAAU,MACVC,YACAC,SACAC,QACA,aAAcC,EACd,mBAAoBC,EACpBC,WACGC,GAELC,KAEA,MAAMC,iBAAEA,GAAqBC,EAAcA,eAACH,GAEtCI,GAAclB,IAAcC,GAAwB,UAAZM,GACxCY,aAAEA,GAAiBC,kBAAgB,CACvChB,WAAYA,EACZE,SAAUA,IAGNe,EAAUC,EAAaA,cAC3B,OACAjB,GACA,GACA,EACY,aAAZH,OACAqB,EACAL,GACA,GACA,GAGIM,EAAY,CAAE,mBAAoBZ,GAExC,OACEa,MAACC,EAAAA,WAAU,IACLC,EAAUA,WAACR,EAAcH,EAAkBQ,GAC/CT,IAAKA,EACLb,QAASA,EACTE,WAAYA,EACZD,KAAMA,EACNU,MAAOA,EACO,eAAAR,EACdG,UAAWA,EACXa,QAASA,EAAO,aACJV,GAAmBD,EAC/BD,OAAQA,KACJO,WACJS,EAAAA,IAACG,EAAiBA,mBAChBC,SAAU,IAAMvB,IAAW,CAAEwB,MAAOzB,IACpCK,MAAOA,EACPN,WAAYA,EACZG,QAASA,EACTP,UAAWA,EACXC,QAASA,KAEb,IAINH,EAAaiC,YAAc"}