{"version":3,"file":"ComponentMessageContainer-4d5cfe71.js","sources":["../../src/UNSAFE_ComponentMessage/ComponentMessage.tsx","../../src/UNSAFE_ComponentMessage/ComponentMessageContainer.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { isSeverityIconNeeded, MessageStartIcon, MessageSummary } from '../PRIVATE_Message';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { ComponentMessageVariantOptions } from './themes/ComponentMessageStyles.css';\nimport { ComponentMessageRedwoodTheme } from './themes/redwood/ComponentMessageTheme';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { UserAssistanceRedwoodTheme } from '#UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\n/**\n * A type for a single component message\n */\nexport type ComponentMessageItem = {\n  summary?: string;\n  detail?: string;\n  severity?: 'confirmation' | 'error' | 'info' | 'warning';\n};\n\n/**\n * Props for the Message Component\n */\ntype Props = TestIdProps & {\n  /**\n   * The error detail text for the component message\n   */\n  detail?: ComponentMessageItem['detail'];\n\n  /**\n   * The label of the field which is showing this error\n   */\n  fieldLabel?: string;\n\n  /**\n   * The severity of the component message\n   */\n  severity?: ComponentMessageItem['severity'];\n};\n\n/**\n * The component that renders an individual message for inline component messaging.\n */\nexport function ComponentMessage({ detail, fieldLabel, severity = 'error', testId }: Props) {\n  const { classes } = useComponentTheme<ComponentMessageVariantOptions>(\n    ComponentMessageRedwoodTheme,\n    {\n      severity: severity ?? 'none'\n    }\n  );\n\n  const { baseTheme } = useComponentTheme(UserAssistanceRedwoodTheme);\n  const styleClasses = classNames([classes, baseTheme]);\n  const testIdProps = useTestId(testId);\n\n  // aria-live assertive works on ios VoiceOver, but not on Jaws for our non-input-element form components like checkbox-set and input-date-mask,\n  // and role='alert' works on Jaws but not ios Voiceover due to VO bug.\n  // JET-65574 error message is not read on focus in voiceover due to VoiceOver bug with role: 'alert'.\n  // JET-72375 Accessibility - Checkbox, Error message is not read by JAWS due to aria-live: 'assertive'.\n\n  return (\n    <div\n      class={styleClasses}\n      {...(isIosSafari() ? { 'aria-live': 'assertive' } : { role: 'alert' })}\n      aria-atomic=\"true\"\n      {...testIdProps}>\n      {fieldLabel && <HiddenAccessible>{fieldLabel}</HiddenAccessible>}\n      {isSeverityIconNeeded(severity) && (\n        <MessageStartIcon\n          severity={severity}\n          testId={testId ? `${testId}-icon` : undefined}\n          variant=\"inline\"\n        />\n      )}\n      {/* We will be using the MessageSummary component, as this aligns with the style required */}\n      <MessageSummary\n        testId={testId ? `${testId}-summary` : undefined}\n        text={detail}\n        variant=\"inline\"\n      />\n    </div>\n  );\n}\n\n/**\n * Helper function to determine if the platform is iOS and the Browser is Safari.\n * Exported for usage in local tests.\n * @returns true if the platform is iOS, false otherwise\n */\nexport function isIosSafari() {\n  return getClientHints().platform === 'ios' && getClientHints().browser === 'safari';\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MessagesManager } from '../PRIVATE_Message';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ComponentMessage, ComponentMessageItem } from './ComponentMessage';\nimport { componentMessageContainerBase } from './themes/ComponentMessageStyles.css';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\n/**\n * Converts the messages data into Item\n *\n * @param messages The messages data passed down as prop\n * @returns The messages data as Item\n */\nfunction generateMessagesData(messages: ComponentMessageItem[]) {\n  return messages.map<Item<number, ComponentMessageItem>>((message, index) => {\n    return {\n      key: index,\n      data: {\n        closeAffordance: 'off',\n        severity: message.severity || 'error',\n        detail: message.detail\n      }\n    };\n  });\n}\n\n/**\n * Props for the ComponentMessaging component\n */\ntype Props = TestIdProps & {\n  /**\n   * The label of the field which is showing this error\n   */\n  fieldLabel?: string;\n\n  /**\n   * Data for the messages. This data is used for rendering each message.\n   */\n  messages?: ComponentMessageItem[];\n};\n\nexport function ComponentMessageContainer({ fieldLabel, messages = [], testId }: Props) {\n  const testIdProps = useTestId(testId);\n  return (\n    <div class={componentMessageContainerBase} {...testIdProps}>\n      <MessagesManager data={generateMessagesData(messages)}>\n        {({ item }) => (\n          <ComponentMessage\n            key={item.key}\n            detail={item.data.detail}\n            fieldLabel={fieldLabel}\n            severity={item.data.severity}\n            testId={testId ? `${testId}-message-${item.key}` : undefined}\n          />\n        )}\n      </MessagesManager>\n    </div>\n  );\n}\n"],"names":["ComponentMessage","detail","fieldLabel","severity","testId","classes","useComponentTheme","ComponentMessageRedwoodTheme","baseTheme","UserAssistanceRedwoodTheme","styleClasses","classNames","testIdProps","useTestId","_jsxs","class","getClientHints","platform","browser","role","children","_jsx","HiddenAccessible","isSeverityIconNeeded","jsx","MessageStartIcon","undefined","variant","MessageSummary","text","generateMessagesData","messages","map","message","index","key","data","closeAffordance","componentMessageContainerBase","MessagesManager","item"],"mappings":"4mCAiDgB,SAAAA,GAAiBC,OAAEA,EAAMC,WAAEA,EAAUC,SAAEA,EAAW,QAAOC,OAAEA,IACzE,MAAMC,QAAEA,GAAYC,EAAiBA,kBACnCC,+BACA,CACEJ,SAAUA,GAAY,UAIpBK,UAAEA,GAAcF,EAAiBA,kBAACG,EAA0BA,4BAC5DC,EAAeC,EAAUA,WAAC,CAACN,EAASG,IACpCI,EAAcC,YAAUT,GAO9B,OACEU,cACEC,MAAOL,KA4B0B,QAA9BM,EAAAA,iBAAiBC,UAAmD,WAA7BD,EAAAA,iBAAiBE,QA3BtC,CAAE,YAAa,aAAgB,CAAEC,KAAM,uBAChD,UACRP,EACHQ,SAAA,CAAAlB,GAAcmB,EAAAA,IAACC,EAAAA,iBAAgB,CAAAF,SAAElB,IACjCqB,EAAAA,qBAAqBpB,IACpBkB,EAACG,IAAAC,mBACC,CAAAtB,SAAUA,EACVC,OAAQA,EAAS,GAAGA,cAAgBsB,EACpCC,QAAQ,WAIZN,EAAAG,IAACI,iBAAc,CACbxB,OAAQA,EAAS,GAAGA,iBAAmBsB,EACvCG,KAAM5B,EACN0B,QAAQ,aAIhB,CCpEA,SAASG,EAAqBC,GAC5B,OAAOA,EAASC,KAAwC,CAACC,EAASC,KACzD,CACLC,IAAKD,EACLE,KAAM,CACJC,gBAAiB,MACjBlC,SAAU8B,EAAQ9B,UAAY,QAC9BF,OAAQgC,EAAQhC,WAIxB,kDAiBM,UAAoCC,WAAEA,EAAU6B,SAAEA,EAAW,GAAE3B,OAAEA,IACrE,MAAMQ,EAAcC,YAAUT,GAC9B,OACEiB,EAAAG,IAAA,MAAA,CAAKT,MAAOuB,EAAAA,iCAAmC1B,EAC7CQ,SAAAC,EAAAG,IAACe,kBAAgB,CAAAH,KAAMN,EAAqBC,GACzCX,SAAA,EAAGoB,UACFnB,MAACrB,EAAgB,CAEfC,OAAQuC,EAAKJ,KAAKnC,OAClBC,WAAYA,EACZC,SAAUqC,EAAKJ,KAAKjC,SACpBC,OAAQA,EAAS,GAAGA,aAAkBoC,EAAKL,WAAQT,GAJ9Cc,EAAKL,QAUtB"}