{"version":3,"file":"PRIVATE_visTestUtils.js","sources":["../../../src/utils/PRIVATE_visTestUtils/contextMenuUtils.ts"],"sourcesContent":["import userEvent from '@testing-library/user-event';\nimport { waitFor, fireEvent, screen } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport {\n  getAllMenuItemsByRole,\n  getLabel,\n  getMenuItemByRole\n} from '#UNSAFE_Menu/__tests__/menuTestsUtils';\n\nexport const getTestContextMenuForNoData = (renderedElement: HTMLElement) => async () => {\n  await userEvent.tab();\n  await userEvent.keyboard('[ENTER]');\n  fireEvent.keyDown(renderedElement, { key: 'F10', shiftKey: true });\n  const menu = screen.queryByRole('menu');\n  expect(menu).to.be.null;\n};\n\nexport const getTestContextMenuViaKeyboard =\n  (renderedElement: HTMLElement, menuContext: any, type: string | undefined) => async () => {\n    expect(renderedElement).not.null;\n    await userEvent.tab();\n    await userEvent.keyboard('[ENTER]');\n    fireEvent.keyDown(renderedElement, { key: 'F10', shiftKey: true });\n\n    const menu = getMenuItemByRole('menu');\n    const menuItems = getAllMenuItemsByRole('menuitem');\n    //With this we check context menu context was set correctly\n    const menuItemGotByLabel = getLabel('MenuItem1');\n    expect(menu).not.null;\n    expect(menuItems.length).equals(3);\n    expect(menuItemGotByLabel).not.null;\n\n    await waitFor(() => {\n      expect(menuContext).not.null;\n    });\n    await waitFor(() => {\n      expect(type).equals('item');\n    });\n    if (menuContext.type === 'item') {\n      await waitFor(() => {\n        expect(menuContext?.data).not.null;\n      });\n    }\n  };\n\nexport const getTestContextMenuViaMouse = (renderedElement: Element) => async () => {\n  const firstElement = renderedElement as HTMLElement;\n\n  fireEvent.contextMenu(firstElement, {\n    clientX: 50,\n    clientY: 50,\n    currentTarget: firstElement\n  });\n  const menu = getMenuItemByRole('menu');\n  const menuItems = getAllMenuItemsByRole('menuitem');\n  //With this we check context menu context was set correctly\n  const menuItemGotByLabel = getLabel('MenuItem1');\n\n  expect(menu).not.null;\n  expect(menuItems.length).equals(3);\n  expect(menuItemGotByLabel).not.null;\n};\n"],"names":["renderedElement","async","userEvent","tab","keyboard","fireEvent","keyDown","key","shiftKey","menu","screen","queryByRole","expect","to","be","null","menuContext","type","not","getMenuItemByRole","menuItems","getAllMenuItemsByRole","menuItemGotByLabel","getLabel","length","equals","waitFor","data","firstElement","contextMenu","clientX","clientY","currentTarget"],"mappings":"m8BAS4CA,GAAiCC,gBACrEC,EAAAA,QAAUC,YACVD,EAAS,QAACE,SAAS,WACzBC,YAAUC,QAAQN,EAAiB,CAAEO,IAAK,MAAOC,UAAU,IAC3D,MAAMC,EAAOC,EAAAA,OAAOC,YAAY,QAChCC,EAAAA,OAAOH,GAAMI,GAAGC,GAAGC,IAAI,kCAIvB,CAACf,EAA8BgB,EAAkBC,IAA6BhB,UAC5EW,EAAAA,OAAOZ,GAAiBkB,IAAIH,WACtBb,EAAAA,QAAUC,YACVD,EAAS,QAACE,SAAS,WACzBC,YAAUC,QAAQN,EAAiB,CAAEO,IAAK,MAAOC,UAAU,IAE3D,MAAMC,EAAOU,oBAAkB,QACzBC,EAAYC,wBAAsB,YAElCC,EAAqBC,WAAS,aACpCX,EAAAA,OAAOH,GAAMS,IAAIH,KACjBH,EAAAA,OAAOQ,EAAUI,QAAQC,OAAO,GAChCb,EAAAA,OAAOU,GAAoBJ,IAAIH,WAEzBW,EAAOA,SAAC,KACZd,EAAAA,OAAOI,GAAaE,IAAIH,IAAI,UAExBW,EAAOA,SAAC,KACZd,EAAAA,OAAOK,GAAMQ,OAAO,OAAO,IAEJ,SAArBT,EAAYC,YACRS,EAAOA,SAAC,KACZd,EAAAA,OAAOI,GAAaW,MAAMT,IAAIH,IAAI,GAErC,+BAGsCf,GAA6BC,UACtE,MAAM2B,EAAe5B,EAErBK,EAASA,UAACwB,YAAYD,EAAc,CAClCE,QAAS,GACTC,QAAS,GACTC,cAAeJ,IAEjB,MAAMnB,EAAOU,oBAAkB,QACzBC,EAAYC,wBAAsB,YAElCC,EAAqBC,WAAS,aAEpCX,EAAAA,OAAOH,GAAMS,IAAIH,KACjBH,EAAAA,OAAOQ,EAAUI,QAAQC,OAAO,GAChCb,EAAAA,OAAOU,GAAoBJ,IAAIH,IAAI"}