{"version":3,"file":"useDebounce-8b4d8cfb.js","sources":["../../src/hooks/UNSAFE_useDebounce/useDebounce.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useEffect, useState } from 'preact/hooks';\n\n/**\n * A custom hook that debounces a value and only returns the latest value\n * if there is no interaction for the specified delay\n *\n * @param value The value to be debounced\n * @param delay The delay for the debouncing\n */\nexport function useDebounce<V>(value: V, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    // update value after the specified delay\n    const timeoutId = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if the value or delay changes (also on unmount)\n    // so that the debounced value will not be updated if the value is changed\n    // within the delay period.\n    return () => clearTimeout(timeoutId);\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n"],"names":["value","delay","debouncedValue","setDebouncedValue","useState","useEffect","timeoutId","setTimeout","clearTimeout"],"mappings":"4EAgBgB,SAAeA,EAAUC,GACvC,MAAOC,EAAgBC,GAAqBC,EAAQA,SAACJ,GAcrD,OAZAK,EAAAA,WAAU,KAER,MAAMC,EAAYC,YAAW,KAC3BJ,EAAkBH,EAAM,GACvBC,GAKH,MAAO,IAAMO,aAAaF,EAAU,GACnC,CAACN,EAAOC,IAEJC,CACT"}