{"version":3,"file":"RichCheckboxsetWebElement.js","sourceRoot":"","sources":["RichCheckboxsetWebElement.ts"],"names":[],"mappings":";;;AAAA,mFAAgF;AAChF,2DAA2D;AAO3D;;;;GAIG;AACH,MAAa,yBAA0B,SAAQ,6DAA6B;IAC1E;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,KAAoC;QAC3D,uCAAuC;QACvC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC;YACnC,2DAA2D;YAC3D,MAAM,IAAI,0BAAK,CAAC,2BAA2B,CACzC,yFAAyF,CAC1F,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC;IACrC,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAE,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACzE,MAAM,cAAc,GAAsB,EAAE,CAAC;QAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACxC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,cAAc,CAAC,IAAI,CAAC;gBAClB,IAAI;gBACJ,KAAK;aACN,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,YAAY,CAAC,MAAqC;QAC9D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE/C,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;YACpD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;YAC5C,MAAM,UAAU,GAAG,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE3C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,EAAE,CAAC;gBAC/D,kBAAkB;gBAClB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACF;AA9DD,8DA8DC","sourcesContent":["import { RichCheckboxsetWebElementBase } from './RichCheckboxsetWebElementBase';\nimport { By, error, WebElement } from 'selenium-webdriver';\n\ntype CardInputs = {\n  card: WebElement;\n  input: WebElement;\n};\n\n/**\n * The component WebElement for [oj-c-rich-checkboxset](../../jsdocs/oj-c.RichCheckboxset.html).\n * Do not instantiate this class directly, instead, use\n * [findRichCheckboxset](../functions/findRichCheckboxset.html).\n */\nexport class RichCheckboxsetWebElement extends RichCheckboxsetWebElementBase {\n  /**\n   * Sets the value of \"value\" property for the RichCheckboxset component\n   * @param value The value to set for \"value\"\n   * @throws {ElementNotInteractableError} if the API is called when the control is readonly or disabled\n   */\n  public async changeValue(value: Array<string | number> | null): Promise<void> {\n    // Check if the control is interactable\n    if (!(await this.isInteractable())) {\n      // Cannot interact when the control is disabled or readonly\n      throw new error.ElementNotInteractableError(\n        'oj-c-rich-checkboxset: Value cannot be changed when the control is disabled or readonly'\n      );\n    }\n\n    await this.whenBusyContextReady();\n    await this.toggleValues(value);\n  }\n\n  /**\n   * Checks if the Checkboxset is in interactable state\n   */\n  private async isInteractable(): Promise<boolean> {\n    const isReadonly = await this.getReadonly();\n    const isDisabled = await this.getDisabled();\n    return !(isReadonly || isDisabled);\n  }\n\n  private async getInputsWithCards() {\n    const cards = await this.findElements(By.xpath('//*[@role=\"listitem\"]'));\n    const cardsAndInputs: Array<CardInputs> = [];\n    const promises = cards.map(async (card) => {\n      const input = await card.findElement(By.css('input'));\n      cardsAndInputs.push({\n        card,\n        input\n      });\n    });\n\n    await Promise.all(promises);\n    return cardsAndInputs;\n  }\n\n  /**\n   * Check checkboxes that have value within values array\n   */\n  private async toggleValues(values: Array<string | number> | null) {\n    const inputs = await this.getInputsWithCards();\n\n    const promises = inputs.map(async ({ card, input }) => {\n      const value = await input.getAttribute('value');\n      const isSelected = await input.isSelected();\n      const isInValues = values?.includes(value);\n\n      if ((isInValues && !isSelected) || (!isInValues && isSelected)) {\n        // toggle checkbox\n        await card.click();\n      }\n    });\n\n    await Promise.all(promises);\n  }\n}\n"]}