{"version":3,"file":"RichCheckboxsetWebElementBase.js","sourceRoot":"","sources":["RichCheckboxsetWebElementBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-rich-checkboxset WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, RichCheckboxsetWebElement.ts.\n */\nexport class RichCheckboxsetWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>containerReadonly</code> property.\n   * Specifies whether an ancestor container, like oj-c-form-layout, is readonly.\n   * @return The value of <code>containerReadonly</code> property.\n   *\n   */\n  public getContainerReadonly(): Promise<boolean> {\n    return this.getProperty<boolean>('containerReadonly');\n  }\n\n  /**\n   * Gets the value of <code>columnSpan</code> property.\n   * Specifies how many columns this component should span.\n   * @return The value of <code>columnSpan</code> property.\n   *\n   */\n  public getColumnSpan(): Promise<number> {\n    return this.getProperty<number>('columnSpan');\n  }\n\n  /**\n   * Gets the value of <code>disabled</code> property.\n   * Specifies whether the component is disabled.\n   * @return The value of <code>disabled</code> property.\n   *\n   */\n  public getDisabled(): Promise<boolean> {\n    return this.getProperty<boolean>('disabled');\n  }\n\n  /**\n   * Gets the value of <code>displayOptions</code> property.\n   * Display options for auxiliary content that describes whether or not it should be displayed.\n   * @return The value of <code>displayOptions</code> property.\n   *\n   */\n  public getDisplayOptions(): Promise<DisplayOptions> {\n    return this.getProperty<DisplayOptions>('displayOptions');\n  }\n\n  /**\n   * Gets the value of <code>help</code> property.\n   * Form component help information.\n   * @return The value of <code>help</code> property.\n   *\n   */\n  public getHelp(): Promise<Help> {\n    return this.getProperty<Help>('help');\n  }\n\n  /**\n   * Gets the value of <code>helpHints</code> property.\n   * The helpHints object contains a definition property, sourceText property, and a source property.\n   * @return The value of <code>helpHints</code> property.\n   *\n   */\n  public getHelpHints(): Promise<HelpHints> {\n    return this.getProperty<HelpHints>('helpHints');\n  }\n\n  /**\n   * Gets the value of <code>labelEdge</code> property.\n   * Specifies how the label is positioned for the component\n   * @return The value of <code>labelEdge</code> property.\n   *\n   */\n  public getLabelEdge(): Promise<string> {\n    return this.getProperty<string>('labelEdge');\n  }\n\n  /**\n   * Gets the value of <code>labelHint</code> property.\n   * Represents a hint for rendering a label on the component.\n   * @return The value of <code>labelHint</code> property.\n   *\n   */\n  public getLabelHint(): Promise<string> {\n    return this.getProperty<string>('labelHint');\n  }\n\n  /**\n   * Gets the value of <code>labelStartWidth</code> property.\n   * The width of the label when labelEdge is 'start'.\n   * @return The value of <code>labelStartWidth</code> property.\n   *\n   */\n  public getLabelStartWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('labelStartWidth');\n  }\n\n  /**\n   * Gets the value of <code>layout</code> property.\n   * Specifies the layout of the cards and media.\n   * @return The value of <code>layout</code> property.\n   *\n   */\n  public getLayout(): Promise<string> {\n    return this.getProperty<string>('layout');\n  }\n\n  /**\n   * Gets the value of <code>maxSelected</code> property.\n   * The maximum number of items to select. If defined, it must be greater than or equal to 2.\n   * @return The value of <code>maxSelected</code> property.\n   *\n   */\n  public getMaxSelected(): Promise<number> {\n    return this.getProperty<number>('maxSelected');\n  }\n\n  /**\n   * Sets the value of <code>messagesCustom</code> property.\n   * List of custom component messages\n   * @param messagesCustom The value to set for <code>messagesCustom</code>\n   *\n   */\n  public changeMessagesCustom(messagesCustom: Array<MessagesCustom>): Promise<void> {\n    return this.setProperty<Array<MessagesCustom>>('messagesCustom', messagesCustom);\n  }\n\n  /**\n   * Gets the value of <code>messagesCustom</code> property.\n   * List of custom component messages\n   * @return The value of <code>messagesCustom</code> property.\n   *\n   */\n  public getMessagesCustom(): Promise<Array<MessagesCustom>> {\n    return this.getProperty<Array<MessagesCustom>>('messagesCustom');\n  }\n\n  /**\n   * Gets the value of <code>minSelected</code> property.\n   * The minimal number of items to select. If defined, it must be greater than or equal to 2.\n   * @return The value of <code>minSelected</code> property.\n   *\n   */\n  public getMinSelected(): Promise<number> {\n    return this.getProperty<number>('minSelected');\n  }\n\n  /**\n   * Gets the value of <code>readonly</code> property.\n   * Whether the component is readonly\n   * @return The value of <code>readonly</code> property.\n   *\n   */\n  public getReadonly(): Promise<boolean> {\n    return this.getProperty<boolean>('readonly');\n  }\n\n  /**\n   * Gets the value of <code>readonlyUserAssistanceShown</code> property.\n   * Specifies which user assistance types should be shown when the component is readonly.\n   * @return The value of <code>readonlyUserAssistanceShown</code> property.\n   *\n   */\n  public getReadonlyUserAssistanceShown(): Promise<string> {\n    return this.getProperty<string>('readonlyUserAssistanceShown');\n  }\n\n  /**\n   * Gets the value of <code>required</code> property.\n   * Specifies whether or not the component is required.\n   * @return The value of <code>required</code> property.\n   *\n   */\n  public getRequired(): Promise<boolean> {\n    return this.getProperty<boolean>('required');\n  }\n\n  /**\n   * Gets the value of <code>selectionExactMessageDetail</code> property.\n   * Overrides the default Selection Exact message.\n   * @return The value of <code>selectionExactMessageDetail</code> property.\n   *\n   */\n  public getSelectionExactMessageDetail(): Promise<null> {\n    return this.getProperty<null>('selectionExactMessageDetail');\n  }\n\n  /**\n   * Gets the value of <code>selectionOverflowMessageDetail</code> property.\n   * Overrides the default Selection Overflow message.\n   * @return The value of <code>selectionOverflowMessageDetail</code> property.\n   *\n   */\n  public getSelectionOverflowMessageDetail(): Promise<null> {\n    return this.getProperty<null>('selectionOverflowMessageDetail');\n  }\n\n  /**\n   * Gets the value of <code>selectionRangeMessageDetail</code> property.\n   * Overrides the default Selection Range message.\n   * @return The value of <code>selectionRangeMessageDetail</code> property.\n   *\n   */\n  public getSelectionRangeMessageDetail(): Promise<null> {\n    return this.getProperty<null>('selectionRangeMessageDetail');\n  }\n\n  /**\n   * Gets the value of <code>selectionUnderflowMessageDetail</code> property.\n   * Overrides the default Selection Underflow message.\n   * @return The value of <code>selectionUnderflowMessageDetail</code> property.\n   *\n   */\n  public getSelectionUnderflowMessageDetail(): Promise<null> {\n    return this.getProperty<null>('selectionUnderflowMessageDetail');\n  }\n\n  /**\n   * Gets the value of <code>userAssistanceDensity</code> property.\n   * Specifies the density of the form component's user assistance presentation.\n   * @return The value of <code>userAssistanceDensity</code> property.\n   *\n   */\n  public getUserAssistanceDensity(): Promise<string> {\n    return this.getProperty<string>('userAssistanceDensity');\n  }\n\n  /**\n   * Gets the value of <code>options</code> property.\n   * An array of data items that returns the option items for the Rich Checkboxset.\n   * @return The value of <code>options</code> property.\n   *\n   */\n  public getOptions(): Promise<Array<object>> {\n    return this.getProperty<Array<object>>('options');\n  }\n\n  /**\n   * Gets the value of <code>requiredMessageDetail</code> property.\n   * Overrides the default Required error message.\n   * @return The value of <code>requiredMessageDetail</code> property.\n   *\n   */\n  public getRequiredMessageDetail(): Promise<string> {\n    return this.getProperty<string>('requiredMessageDetail');\n  }\n\n  /**\n   * Gets the value of <code>valid</code> property.\n   * Specifies whether the component is in a valid state\n   * @return The value of <code>valid</code> property.\n   *\n   */\n  public getValid(): Promise<string> {\n    return this.getProperty<string>('valid');\n  }\n\n  /**\n   * Sets the value of <code>value</code> property.\n   * The value of the component.\n   * @param value The value to set for <code>value</code>\n   *\n   */\n  public changeValue(value: Array<string | number> | null): Promise<void> {\n    return this.setProperty<Array<string | number> | null>('value', value);\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * The value of the component.\n   * @return The value of <code>value</code> property.\n   *\n   */\n  public getValue(): Promise<Array<string | number> | null> {\n    return this.getProperty<Array<string | number> | null>('value');\n  }\n}\nexport interface DisplayOptions {\n  /**\n   *\n   */\n  messages: string;\n}\nexport interface Help {\n  /**\n   *\n   */\n  instruction: string;\n}\nexport interface HelpHints {\n  /**\n   *\n   */\n  definition: string;\n  /**\n   *\n   */\n  source: string;\n  /**\n   *\n   */\n  sourceText: string;\n}\nexport interface MessagesCustom {\n  /**\n   *\n   */\n  summary: string;\n  /**\n   *\n   */\n  detail: string;\n  /**\n   *\n   */\n  severity: string;\n}\n"]}