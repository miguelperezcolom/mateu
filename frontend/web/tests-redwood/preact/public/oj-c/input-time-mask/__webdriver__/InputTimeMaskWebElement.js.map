{"version":3,"file":"InputTimeMaskWebElement.js","sourceRoot":"","sources":["InputTimeMaskWebElement.ts"],"names":[],"mappings":";;;AAAA,+EAA4E;AAC5E,0FAA6E;AAC7E,mFAA0F;AAC1F,+EAAkE;AAElE,sFAA6E;AAC7E,sFAA+F;AAE/F;;;;GAIG;AACH,MAAa,uBAAwB,SAAQ,yDAA2B;IACtE,qBAAqB;IACrB;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,KAAoB;QAC3C,IAAI,CAAC,mCAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9C,MAAM,IAAI,KAAK,CAAC,mEAAmE,KAAK,EAAE,CAAC,CAAC;QAC9F,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,SAAS,GAAG,IAAA,+CAA4B,EAAC,KAAK,CAAC,CAAC;YACtD,mGAAmG;YACnG,8GAA8G;YAC9G,OAAO,IAAA,2BAAiB,EAAC,IAAA,uBAAK,EAAC,GAAG,CAAC,EAAE,IAAA,yCAAc,EAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpF,CAAC;QAED,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AA7BD,0DA6BC","sourcesContent":["import { InputTimeMaskWebElementBase } from './InputTimeMaskWebElementBase';\nimport { getTestElement } from '../../../webdriver/PRIVATE_preact-webdriver';\nimport { findInputTimeMask } from '@oracle/oraclejet-preact/UNSAFE_InputTimeMask/testing';\nimport { byCss } from '@oracle/oraclejet-testing/UNSAFE_Locators';\n\nimport { DateTimeUtils } from '@oracle/oraclejet-preact/UNSAFE_IntlDateTime';\nimport { getTimeObjFromTimeOnlyISOStr } from '@oracle/oraclejet-preact/utils/UNSAFE_timeUtils';\n\n/**\n * The component WebElement for [oj-c-input-time-mask](../../jsdocs/oj-c.InputTimeMask.html).\n * Do not instantiate this class directly, instead, use\n * [findInputTimeMask](../functions/findInputTimeMask.html).\n */\nexport class InputTimeMaskWebElement extends InputTimeMaskWebElementBase {\n  // Put overrides here\n  /**\n   * Sets the value of the \"value\" property of the input component.\n   * @param value The value to set for the <code>value</code>\n   */\n  public async changeValue(value: string | null): Promise<void> {\n    if (!DateTimeUtils.isTimeOnlyIsoString(value)) {\n      throw new Error(`InputTimeMaskWebElement - value must be a time-only ISO string: ${value}`);\n    }\n\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(disabled || readonly)) {\n      const timeValue = getTimeObjFromTimeOnlyISOStr(value);\n      // the getTestElement(this) locates the root of the corepack custom element (oj-c-input-time-mask),\n      // and byCss('*') finds the first child element underneath the root which is the root of the preact component.\n      return findInputTimeMask(byCss('*'), getTestElement(this)).changeValue(timeValue);\n    }\n\n    return this.whenBusyContextReady();\n  }\n\n  /**\n   * Clears the value of the component.\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n}\n"]}