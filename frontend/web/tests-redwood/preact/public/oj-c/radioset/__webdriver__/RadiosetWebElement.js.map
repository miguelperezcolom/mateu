{"version":3,"file":"RadiosetWebElement.js","sourceRoot":"","sources":["RadiosetWebElement.ts"],"names":[],"mappings":";;;AAAA,qEAAkE;AAClE,2DAAuD;AAEvD;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,+CAAsB;IAC5D;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,KAAU;QAC1B,uCAAuC;QACvC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC;YACnC,2DAA2D;YAC3D,MAAM,IAAI,0BAAK,CAAC,2BAA2B,CACzC,iFAAiF,CAClF,CAAC;QACJ,CAAC;QACD,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,yDAAyD;QACzD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAClD,0FAA0F;QAC1F,wBAAwB;QACxB,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YAClB,MAAM,IAAI,0BAAK,CAAC,oBAAoB,CAAC,kBAAkB,KAAK,wBAAwB,CAAC,CAAC;QACxF,CAAC;QACD,MAAM,KAAK,EAAE,KAAK,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,iBAAiB,CAAC,KAAU;QACxC,OAAO,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CACzC,CAAC,OAAoB,EAAE,WAAmB,EAAE,EAAE;YAC5C,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,8BAA8B,WAAW,IAAI,CAAC,CAAC;YACpF,OAAO,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC,EACD,IAAI,EACJ,KAAK,CACN,CAAC;IACJ,CAAC;CACF;AAnDD,gDAmDC","sourcesContent":["import { RadiosetWebElementBase } from './RadiosetWebElementBase';\nimport { error, WebElement } from 'selenium-webdriver';\n\n/**\n * The component WebElement for [oj-c-radioset](../../jsdocs/oj-c.Radioset.html).\n * Do not instantiate this class directly, instead, use\n * [findRadioset](../functions/findRadioset.html).\n */\nexport class RadiosetWebElement extends RadiosetWebElementBase {\n  /**\n   * Sets the value of \"value\" property for the Radioset component\n   * @param value The value to set for \"value\"\n   * @throws {ElementNotInteractableError} if the API is called when the control is readonly or disabled\n   * @throws {InvalidArgumentError} if the value is non-existent\n   */\n  async changeValue(value: any) {\n    // Check if the control is interactable\n    if (!(await this.isInteractable())) {\n      // Cannot interact when the control is disabled or readonly\n      throw new error.ElementNotInteractableError(\n        'oj-c-radioset: Value cannot be changed when the control is disabled or readonly'\n      );\n    }\n    await this.whenBusyContextReady();\n    // Get the oj-c-radioset element using the value property\n    const label = await this.getRadioItemLabel(value);\n    // If the label for the input was not found, then the provided value does not exist in the\n    // oj-c-radioset element\n    if (label == null) {\n      throw new error.InvalidArgumentError(`oj-c-radioset: ${value} is not a valid value.`);\n    }\n    await label?.click();\n  }\n\n  /**\n   * Checks if the Radioset is in interactable state\n   */\n  private async isInteractable(): Promise<boolean> {\n    const isReadonly = await this.getReadonly();\n    const isDisabled = await this.getDisabled();\n    return !(isReadonly || isDisabled);\n  }\n\n  /**\n   * Finds the label of the input element for the provided value if it exists\n   *\n   * @param value The value for which the radio element has to be fetched\n   * @returns The corresponding label of the input element if it exists, null otherwise\n   */\n  private async getRadioItemLabel(value: any): Promise<WebElement | null> {\n    return await this.getDriver().executeScript<WebElement | null>(\n      (element: HTMLElement, searchValue: string) => {\n        const result = element.querySelector(`input[type=\"radio\"][value=\"${searchValue}\"]`);\n        return result?.closest('label');\n      },\n      this,\n      value\n    );\n  }\n}\n"]}