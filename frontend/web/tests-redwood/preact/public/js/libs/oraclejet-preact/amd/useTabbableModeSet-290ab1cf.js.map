{"version":3,"file":"useTabbableModeSet-290ab1cf.js","sources":["../../src/hooks/PRIVATE_useTabbableModeSet/useTabbableModeSet.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { isKeyDefined } from '../../utils/UNSAFE_keys';\nimport { getElementContainsFunc } from '../../utils/PRIVATE_collectionUtils';\n\n/**\n * Hook for handling Tabbable mode set provider components.\n *\n * @param rootRef - a Ref to the root element of the consuming component\n * @param keyExtractor - function to extract the key based on provided element\n * @param currentKey - current key navigation \"cursor\" is on\n * @param onCurrentKeyChange - optional callback to notify when the currentKey should change\n * @param keySupportsTabbable - optional callback to prevent tabbable mode from being entered on non-tabbable keys\n * @param keyComparator - optional callback to compare the equality of two keys\n * @returns isCurrentTabbableKey - callback for parent to check if key is in interactive mode\n * @returns tabbableSetProps - event handlers mode relies on\n * @returns getCurrentTabbableKey - callback to get the current tabbable key\n * @returns setCurrentTabbableKey - callback to set the current tabbable key\n */\nexport function useTabbableModeSet<K>(\n  rootRef: RefObject<HTMLElement>,\n  keyExtractor: (element: HTMLElement) => K | null,\n  currentKey?: K,\n  onCurrentKeyChange?: ({ value }: { value: K }) => void,\n  keySupportsTabbable?: (key: K) => boolean,\n  keyComparator?: (key1?: K, key2?: K) => boolean,\n  allowEnterKey?: boolean\n): [\n  (key?: K) => boolean,\n  {\n    onFocus: (event: FocusEvent) => void;\n    onBlur: (event: FocusEvent) => void;\n    onKeyDown: (event: KeyboardEvent) => void;\n  },\n  () => K | undefined,\n  (key?: K) => void\n] {\n  // Track which row is in actionable in state\n  const [currentTabbableKey, setCurrentTabbableKey] = useState<K>();\n\n  const keyEquals = useCallback(\n    (key1?: K, key2?: K) => {\n      if (keyComparator) {\n        return keyComparator(key1, key2);\n      }\n      return key1 === key2;\n    },\n    [keyComparator]\n  );\n\n  const disableTabbableMode = useCallback(\n    (target: EventTarget | null, isKeyboardEvent = false) => {\n      setCurrentTabbableKey(undefined);\n      // handle clean-up on disabling of the mode\n      if (getElementContainsFunc(rootRef.current, true)(target as Element) && isKeyboardEvent) {\n        rootRef.current?.focus();\n      }\n    },\n    [rootRef, setCurrentTabbableKey]\n  );\n  const enableTabbableMode = useCallback(\n    (key: K) => {\n      setCurrentTabbableKey(key);\n      if (onCurrentKeyChange && !keyEquals(key, currentKey)) {\n        onCurrentKeyChange({ value: key });\n      }\n    },\n    [currentKey, keyEquals, onCurrentKeyChange, setCurrentTabbableKey]\n  );\n  const isCurrentTabbableKey = useCallback(\n    (key?: K) => {\n      return keyEquals(key as K, currentTabbableKey as K);\n    },\n    [currentTabbableKey, keyEquals]\n  );\n  const getCurrentTabbableKey = useCallback(() => {\n    return currentTabbableKey;\n  }, [currentTabbableKey]);\n\n  const onFocus = (event: FocusEvent) => {\n    // if the root is focused while tabbable, exit tabbable mode\n    if (event.target === rootRef.current) {\n      if (!isCurrentTabbableKey(undefined)) {\n        disableTabbableMode(event.target);\n      }\n    } else {\n      const key = keyExtractor(event.target as HTMLElement) as K;\n      if (isKeyDefined(key) && !isCurrentTabbableKey(key)) {\n        enableTabbableMode(key);\n      }\n    }\n  };\n\n  const onBlur = (event: FocusEvent) => {\n    if (\n      !event.relatedTarget ||\n      !getElementContainsFunc(rootRef.current, true)(event.relatedTarget as Element)\n    ) {\n      disableTabbableMode(event.relatedTarget);\n    }\n  };\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (currentKey != null && (keySupportsTabbable == null || keySupportsTabbable(currentKey))) {\n        if (event.key === 'F2') {\n          isCurrentTabbableKey(currentKey)\n            ? disableTabbableMode(event.target, true)\n            : enableTabbableMode(currentKey);\n        } else if (event.key === 'Enter' && allowEnterKey) {\n          enableTabbableMode(currentKey);\n        } else if (event.key === 'Esc' || event.key === 'Escape') {\n          disableTabbableMode(event.target, true);\n        }\n      }\n    },\n    [\n      currentKey,\n      disableTabbableMode,\n      enableTabbableMode,\n      keySupportsTabbable,\n      isCurrentTabbableKey,\n      allowEnterKey\n    ]\n  );\n\n  const tabbableSetProps = {\n    onFocus,\n    onBlur,\n    onKeyDown\n  };\n\n  return [isCurrentTabbableKey, tabbableSetProps, getCurrentTabbableKey, setCurrentTabbableKey];\n}\n"],"names":["rootRef","keyExtractor","currentKey","onCurrentKeyChange","keySupportsTabbable","keyComparator","allowEnterKey","currentTabbableKey","setCurrentTabbableKey","useState","keyEquals","useCallback","key1","key2","disableTabbableMode","target","isKeyboardEvent","undefined","getElementContainsFunc","current","focus","enableTabbableMode","key","value","isCurrentTabbableKey","getCurrentTabbableKey","tabbableSetProps","onFocus","event","isKeyDefined","onBlur","relatedTarget","onKeyDown"],"mappings":"sIA0BgB,SACdA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAYA,MAAOC,EAAoBC,GAAyBC,EAAQA,WAEtDC,EAAYC,EAAAA,aAChB,CAACC,EAAUC,IACLR,EACKA,EAAcO,EAAMC,GAEtBD,IAASC,GAElB,CAACR,IAGGS,EAAsBH,EAAWA,aACrC,CAACI,EAA4BC,GAAkB,KAC7CR,OAAsBS,GAElBC,EAAAA,uBAAuBlB,EAAQmB,SAAS,EAAxCD,CAA8CH,IAAsBC,GACtEhB,EAAQmB,SAASC,OAClB,GAEH,CAACpB,EAASQ,IAENa,EAAqBV,eACxBW,IACCd,EAAsBc,GAClBnB,IAAuBO,EAAUY,EAAKpB,IACxCC,EAAmB,CAAEoB,MAAOD,GAC7B,GAEH,CAACpB,EAAYQ,EAAWP,EAAoBK,IAExCgB,EAAuBb,eAC1BW,GACQZ,EAAUY,EAAUf,IAE7B,CAACA,EAAoBG,IAEjBe,EAAwBd,EAAAA,aAAY,IACjCJ,GACN,CAACA,IAiDEmB,EAAmB,CACvBC,QAhDeC,IAEf,GAAIA,EAAMb,SAAWf,EAAQmB,QACtBK,OAAqBP,IACxBH,EAAoBc,EAAMb,YAEvB,CACL,MAAMO,EAAMrB,EAAa2B,EAAMb,QAC3Bc,EAAYA,aAACP,KAASE,EAAqBF,IAC7CD,EAAmBC,EAEtB,GAsCDQ,OAnCcF,IAEXA,EAAMG,eACNb,EAAAA,uBAAuBlB,EAAQmB,SAAS,EAAxCD,CAA8CU,EAAMG,gBAErDjB,EAAoBc,EAAMG,cAC3B,EA8BDC,UA3BgBrB,eACfiB,IACmB,MAAd1B,GAA8C,MAAvBE,IAA+BA,EAAoBF,KAC1D,OAAd0B,EAAMN,IACRE,EAAqBtB,GACjBY,EAAoBc,EAAMb,QAAQ,GAClCM,EAAmBnB,GACA,UAAd0B,EAAMN,KAAmBhB,EAClCe,EAAmBnB,GACI,QAAd0B,EAAMN,KAA+B,WAAdM,EAAMN,KACtCR,EAAoBc,EAAMb,QAAQ,GAErC,GAEH,CACEb,EACAY,EACAO,EACAjB,EACAoB,EACAlB,KAUJ,MAAO,CAACkB,EAAsBE,EAAkBD,EAAuBjB,EACzE"}