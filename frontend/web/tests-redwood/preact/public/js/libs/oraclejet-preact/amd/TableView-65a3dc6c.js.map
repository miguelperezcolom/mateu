{"version":3,"file":"TableView-65a3dc6c.js","sources":["../../src/UNSAFE_TableView/TableView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Table } from '../PRIVATE_Table';\nimport { tableViewStyles } from './themes/TableViewStyles.css';\nimport { TableProps, TableViewHandle } from './Table.types';\nimport { useCollectionInteractionContext } from '../hooks/UNSAFE_useCollectionInteractionContext';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\n/**\n * Props specific to non-virtualized TableView\n */\ntype NonVirtualizedTableProps<K, D> = {\n  /**\n   * The data that is used to render each item in TableView.  If the value is null, then TableView will show nothing\n   * if hasMore is false, or loading indicator if hasMore is true.\n   */\n  data?: D[];\n  /**\n   * A callback function to extract the key which is used to identify the item.\n   */\n  getRowKey: (data: D) => K;\n  /**\n   * Whether there is more data available to load.  By default this returns false.\n   */\n  hasMore?: boolean;\n  /**\n   * An optional callback function which is invoked when the user scrolls to the end of the table.\n   */\n  onLoadMore?: () => void;\n};\n\n/**\n * Props for the TableView Component\n */\nexport type Props<K, D, C extends string> = TableProps<K, D, C> &\n  NonVirtualizedTableProps<K, D> &\n  DimensionProps &\n  TestIdProps;\n\nconst mergedInterpolations = mergeInterpolations<DimensionProps>([\n  ...Object.values(dimensionInterpolations)\n]);\n\n/**\n * Component that renders data in rows of columns.\n * This component is non-virtualized and renders all rows provided in the data prop.\n */\nexport const TableView = forwardRef(\n  <K extends string | number, D, C extends string>(\n    {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      getAccessibleRowHeaders,\n      children,\n      columns,\n      columnOrder,\n      columnWidths,\n      contextMenuConfig,\n      viewportConfig,\n      layout = 'contents',\n      data,\n      getRowKey,\n      hasMore = false,\n      onLoadMore,\n      currentCellOverride,\n      onPersistCurrentCell,\n      currentRowVariant,\n      gridlines = { horizontal: 'visible', vertical: 'hidden' },\n      selectionMode = { row: 'none', column: 'none' },\n      selected,\n      onSelectionChange,\n      onRowAction,\n      sortCriterion = [],\n      onSortCriterionChange,\n      horizontalScrollPositionOverride,\n      verticalScrollPositionOverride,\n      columnResizingIndicator,\n      onColumnResizing,\n      onColumnResize,\n      noDataRenderer,\n      scrollerRef,\n      testId,\n      ...dimensions\n    }: Props<K, D, C>,\n    ref?: ForwardedRef<TableViewHandle<K, C>>\n  ) => {\n    const isEmbedded = useCollectionInteractionContext() === 'embedded';\n    const rowVariant =\n      currentRowVariant != null ? currentRowVariant : isEmbedded ? 'highlight' : 'none';\n\n    const { ...mergedStyles } = mergedInterpolations(dimensions);\n    const isExternalScroller = viewportConfig?.scroller() != null;\n    const classArray = [tableViewStyles.base];\n    classArray.push(\n      isExternalScroller ? tableViewStyles.externalScroller : tableViewStyles.internalScroller\n    );\n    const tableViewClasses = classNames(classArray);\n\n    return (\n      <div class={tableViewClasses} style={mergedStyles}>\n        <Table<K, D, C>\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          getAccessibleRowHeaders={getAccessibleRowHeaders}\n          children={children}\n          columns={columns}\n          columnOrder={columnOrder}\n          columnWidths={columnWidths}\n          contextMenuConfig={contextMenuConfig}\n          viewportConfig={viewportConfig}\n          layout={layout}\n          data={data}\n          getRowKey={getRowKey}\n          hasMore={hasMore}\n          onLoadMore={onLoadMore}\n          currentCellOverride={currentCellOverride}\n          onPersistCurrentCell={onPersistCurrentCell}\n          currentRowVariant={rowVariant}\n          gridlines={gridlines}\n          selectionMode={selectionMode}\n          selected={selected}\n          onSelectionChange={onSelectionChange}\n          onRowAction={onRowAction}\n          horizontalScrollPositionOverride={horizontalScrollPositionOverride}\n          verticalScrollPositionOverride={verticalScrollPositionOverride}\n          sortCriterion={sortCriterion}\n          onSortCriterionChange={onSortCriterionChange}\n          columnResizingIndicator={columnResizingIndicator}\n          onColumnResizing={onColumnResizing}\n          onColumnResize={onColumnResize}\n          noDataRenderer={noDataRenderer}\n          scrollerRef={scrollerRef}\n          testId={testId}\n          ref={ref}\n        />\n      </div>\n    );\n  }\n) as <K extends string | number, D, C extends string>(\n  p: Props<K, D, C> & { ref?: ForwardedRef<TableViewHandle<K, C>> }\n) => JSXInternal.Element;\n"],"names":["mergedInterpolations","mergeInterpolations","Object","values","dimensionInterpolations","TableView","forwardRef","ariaLabel","ariaLabelledBy","getAccessibleRowHeaders","children","columns","columnOrder","columnWidths","contextMenuConfig","viewportConfig","layout","data","getRowKey","hasMore","onLoadMore","currentCellOverride","onPersistCurrentCell","currentRowVariant","gridlines","horizontal","vertical","selectionMode","row","column","selected","onSelectionChange","onRowAction","sortCriterion","onSortCriterionChange","horizontalScrollPositionOverride","verticalScrollPositionOverride","columnResizingIndicator","onColumnResizing","onColumnResize","noDataRenderer","scrollerRef","testId","dimensions","ref","isEmbedded","useCollectionInteractionContext","rowVariant","mergedStyles","isExternalScroller","scroller","classArray","tableViewStyles","base","push","externalScroller","internalScroller","tableViewClasses","classNames","_jsx","jsx","class","style","Table"],"mappings":"+UAiDA,MAAMA,EAAuBC,EAAAA,oBAAoC,IAC5DC,OAAOC,OAAOC,6BAONC,EAAYC,EAAUA,YACjC,EAEI,aAAcC,EACd,kBAAmBC,EACnBC,0BACAC,WACAC,UACAC,cACAC,eACAC,oBACAC,iBACAC,SAAS,WACTC,OACAC,YACAC,WAAU,EACVC,aACAC,sBACAC,uBACAC,oBACAC,YAAY,CAAEC,WAAY,UAAWC,SAAU,UAC/CC,gBAAgB,CAAEC,IAAK,OAAQC,OAAQ,QACvCC,WACAC,oBACAC,cACAC,gBAAgB,GAChBC,wBACAC,mCACAC,iCACAC,0BACAC,mBACAC,iBACAC,iBACAC,cACAC,YACGC,GAELC,KAEA,MAAMC,EAAmD,aAAtCC,oCACbC,EACiB,MAArBxB,EAA4BA,EAAoBsB,EAAa,YAAc,WAElEG,GAAiBhD,EAAqB2C,GAC3CM,EAAmD,MAA9BlC,GAAgBmC,WACrCC,EAAa,CAACC,kBAAgBC,MACpCF,EAAWG,KACTL,EAAqBG,EAAAA,gBAAgBG,iBAAmBH,EAAAA,gBAAgBI,kBAE1E,MAAMC,EAAmBC,aAAWP,GAEpC,OACEQ,EAAAC,IAAA,MAAA,CAAKC,MAAOJ,EAAkBK,MAAOd,EACnCtC,SAAAiD,EAAAC,IAACG,EAAKA,MAAA,CAAA,aACQxD,EACK,kBAAAC,EACjBC,wBAAyBA,EACzBC,SAAUA,EACVC,QAASA,EACTC,YAAaA,EACbC,aAAcA,EACdC,kBAAmBA,EACnBC,eAAgBA,EAChBC,OAAQA,EACRC,KAAMA,EACNC,UAAWA,EACXC,QAASA,EACTC,WAAYA,EACZC,oBAAqBA,EACrBC,qBAAsBA,EACtBC,kBAAmBwB,EACnBvB,UAAWA,EACXG,cAAeA,EACfG,SAAUA,EACVC,kBAAmBA,EACnBC,YAAaA,EACbG,iCAAkCA,EAClCC,+BAAgCA,EAChCH,cAAeA,EACfC,sBAAuBA,EACvBG,wBAAyBA,EACzBC,iBAAkBA,EAClBC,eAAgBA,EAChBC,eAAgBA,EAChBC,YAAaA,EACbC,OAAQA,EACRE,IAAKA,KAGT"}