{"version":3,"file":"CheckboxRadioLabelValueLayout-073b18d4.js","sources":["../../src/UNSAFE_CheckboxRadioField/CheckboxRadioLabelValueLayout.tsx"],"sourcesContent":["import { ComponentChildren, JSX } from 'preact';\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { Size } from '#utils/UNSAFE_size';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { RadioRedwoodTheme } from '#UNSAFE_RadioItem/themes/redwood/RadioTheme';\nimport { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from '#UNSAFE_TextField/themes/redwood/FormLayoutTheme';\nimport { CheckboxRedwoodTheme } from '#UNSAFE_Checkbox/themes/redwood/CheckboxTheme';\nimport {\n  labelSlotStyles,\n  labelInnerStyles\n} from '#UNSAFE_LabelValueLayout/LabelValueLayoutStyles.css';\nimport { StyledLabelValueLayout } from '#UNSAFE_LabelValueLayout/StyledLabelValueLayout';\nimport { checkboxRadioLabelInnerStyles } from './CheckboxRadioLabelValueLayoutStyles.css';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { computeStartLabelWidth } from '#utils/UNSAFE_formControlUtils';\n\ntype Props = {\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Defines how the label is going to be positioned. For CheckboxSet or RadioSet the start, top and inside values are supported.\n   */\n  labelEdge?: 'start' | 'top' | 'inside';\n  /**\n   * Specifies if the parent component is a CheckboxSet or RadioSet\n   */\n  parentComponentVariant: 'radioSet' | 'checkboxSet';\n  /**\n   * Specifies if there is assistive text or links at the top of the component below the label\n   */\n  hasTopUserAssistance?: boolean;\n  /**\n   * Label content of the layout\n   */\n  label?: ComponentChildren;\n  /**\n   * Defines the label width for labelEdge 'start' ('top' is always 100%)\n   */\n  labelStartWidth?: Size;\n  /**\n   * Value content of the layout\n   */\n  children: ComponentChildren;\n};\n\n/**\n * A layout component for rendering a label and value pair, used in form components\n * such as CheckboxSet and RadioSet.\n */\nexport const CheckboxRadioLabelValueLayout = ({\n  columnSpan = 1,\n  label,\n  labelEdge,\n  children,\n  parentComponentVariant,\n  labelStartWidth = '33%',\n  hasTopUserAssistance = false\n}: Props) => {\n  const { baseTheme: radioTheme } = useComponentTheme(RadioRedwoodTheme);\n  const { baseTheme: checkboxTheme } = useComponentTheme(CheckboxRedwoodTheme);\n  const { baseTheme: labelTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n  const isRadio = parentComponentVariant === 'radioSet';\n  const isCheckbox = parentComponentVariant === 'checkboxSet';\n  const isStart = labelEdge === 'start';\n  const isTop = labelEdge === 'top' || labelEdge === 'inside'; // 'inside' needs to pick up all 'top' styles.\n  const isInside = labelEdge === 'inside';\n\n  // JET-68190 - labelStartWidth needs to take columnSpan into account\n  const width = computeStartLabelWidth(labelStartWidth, columnSpan);\n  const valueWidth = `calc(100% - ${width})`;\n\n  const labelStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: width, width: width, maxWidth: width }\n    : {};\n\n  const valueStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: valueWidth, width: valueWidth, maxWidth: valueWidth }\n    : {};\n\n  const { isFormLayout, isReadonly: isFormReadonly, labelWrapping } = useFormContext();\n  const { isReadonly } = useFormFieldContext();\n  const isPureReadonly = (isFormLayout && isFormReadonly) || (!isFormLayout && isReadonly);\n\n  const labelStyleClasses = classNames([\n    formLayoutTheme,\n    labelSlotStyles.base,\n    isStart && labelSlotStyles.start,\n    isTop && labelSlotStyles.top,\n    isTop && hasTopUserAssistance && labelSlotStyles.topAndTopUA,\n    isTop && isPureReadonly && labelSlotStyles.topPureReadonly\n  ]);\n\n  const labelInnerClasses = classNames([\n    isRadio && radioTheme,\n    isCheckbox && checkboxTheme,\n    labelTheme,\n    formLayoutTheme,\n    labelInnerStyles.base,\n    isStart && labelInnerStyles.start,\n    isRadio && isInside && checkboxRadioLabelInnerStyles.insideRadioSet,\n    isCheckbox && isInside && checkboxRadioLabelInnerStyles.insideCheckboxSet,\n    isRadio &&\n      isStart &&\n      !hasTopUserAssistance &&\n      checkboxRadioLabelInnerStyles.startRadioSetWithoutTopUA,\n    isCheckbox &&\n      isStart &&\n      !hasTopUserAssistance &&\n      checkboxRadioLabelInnerStyles.startCheckboxSetWithoutTopUA,\n    labelWrapping === 'truncate' && labelInnerStyles.noWrap\n  ]);\n\n  return (\n    <StyledLabelValueLayout\n      // For readonly start aligned labels, we want the div that is the parent of the label to\n      // stretch to the height of the value content, including the end content (InputSensitiveText)\n      flexAlign={isReadonly && isStart ? 'stretch' : 'start'}\n      labelStyleClasses={labelStyleClasses}\n      labelStyles={labelStyles}\n      labelInnerClasses={labelInnerClasses}\n      label={label}\n      valueStyles={valueStyles}>\n      {children}\n    </StyledLabelValueLayout>\n  );\n};\n"],"names":["columnSpan","label","labelEdge","children","parentComponentVariant","labelStartWidth","hasTopUserAssistance","baseTheme","radioTheme","useComponentTheme","RadioRedwoodTheme","checkboxTheme","CheckboxRedwoodTheme","labelTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","isRadio","isCheckbox","isStart","isTop","isInside","width","computeStartLabelWidth","valueWidth","labelStyles","flexBasis","maxWidth","valueStyles","isFormLayout","isReadonly","isFormReadonly","labelWrapping","useFormContext","useFormFieldContext","isPureReadonly","labelStyleClasses","classNames","labelSlotStyles","base","start","top","topAndTopUA","topPureReadonly","labelInnerClasses","labelInnerStyles","checkboxRadioLabelInnerStyles","noWrap","_jsx","StyledLabelValueLayout","flexAlign"],"mappings":"q/BAuD6C,EAC3CA,aAAa,EACbC,QACAC,YACAC,WACAC,yBACAC,kBAAkB,MAClBC,wBAAuB,MAEvB,MAAQC,UAAWC,GAAeC,EAAiBA,kBAACC,EAAiBA,oBAC7DH,UAAWI,GAAkBF,EAAiBA,kBAACG,EAAoBA,uBACnEL,UAAWM,GAAeJ,EAAiBA,kBAACK,EAAiBA,oBAC7DP,UAAWQ,GAAoBN,EAAiBA,kBAACO,EAAsBA,wBAEzEC,EAAqC,aAA3Bb,EACVc,EAAwC,gBAA3Bd,EACbe,EAAwB,UAAdjB,EACVkB,EAAsB,QAAdlB,GAAqC,WAAdA,EAC/BmB,EAAyB,WAAdnB,EAGXoB,EAAQC,EAAAA,uBAAuBlB,EAAiBL,GAChDwB,EAAa,eAAeF,KAE5BG,EAAiCN,EACnC,CAAEO,UAAWJ,EAAOA,MAAOA,EAAOK,SAAUL,GAC5C,GAEEM,EAAiCT,EACnC,CAAEO,UAAWF,EAAYF,MAAOE,EAAYG,SAAUH,GACtD,IAEEK,aAAEA,EAAcC,WAAYC,EAAcC,cAAEA,GAAkBC,EAAAA,kBAC9DH,WAAEA,GAAeI,EAAAA,sBACjBC,EAAkBN,GAAgBE,IAAqBF,GAAgBC,EAEvEM,EAAoBC,EAAAA,WAAW,CACnCtB,EACAuB,EAAAA,gBAAgBC,KAChBpB,GAAWmB,EAAeA,gBAACE,MAC3BpB,GAASkB,EAAeA,gBAACG,IACzBrB,GAASd,GAAwBgC,EAAAA,gBAAgBI,YACjDtB,GAASe,GAAkBG,EAAAA,gBAAgBK,kBAGvCC,EAAoBP,EAAAA,WAAW,CACnCpB,GAAWT,EACXU,GAAcP,EACdE,EACAE,EACA8B,EAAAA,iBAAiBN,KACjBpB,GAAW0B,EAAgBA,iBAACL,MAC5BvB,GAAWI,GAAYyB,EACvB5B,GAAcG,GAAYyB,EAC1B7B,GACEE,IACCb,GACDwC,EACF5B,GACEC,IACCb,GACDwC,EACgB,aAAlBd,GAAgCa,EAAAA,iBAAiBE,SAGnD,OACEC,MAACC,EAAsBA,wBAGrBC,UAAWpB,GAAcX,EAAU,UAAY,QAC/CiB,kBAAmBA,EACnBX,YAAaA,EACbmB,kBAAmBA,EACnB3C,MAAOA,EACP2B,YAAaA,EAAWzB,SACvBA,GAEH"}