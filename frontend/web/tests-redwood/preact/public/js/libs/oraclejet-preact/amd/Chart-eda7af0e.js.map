{"version":3,"file":"Chart-eda7af0e.js","sources":["../../src/PRIVATE_Axis/utils/axisNavUtils.ts","../../src/PRIVATE_VisOverview/OverviewBackground.tsx","../../src/PRIVATE_Chart/ChartWithDimensions.tsx","../../src/PRIVATE_VisSVGText/useTextTruncation.ts","../../src/PRIVATE_VisOverview/utils.ts","../../src/PRIVATE_Chart/overviewUtils.tsx","../../src/PRIVATE_Chart/Chart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\nimport { ChartGroupInfo } from '#utils/UNSAFE_visTypes/chart';\n\ntype isGroupNavigableType = (levelIndex: number, groupIndex: number) => boolean;\n\n/**\n * Returns the parent group for the navigable item.\n * @param levelsArray The levels array.\n * @param levelIndex The levelIndex of current naviable group..\n * @param groupIndex The groupIndex of current navigable group.\n * @returns\n */\nexport function getParentGroup(\n  levelsArray: GroupLevelItem[][],\n  levelIndex: number,\n  groupIndex: number,\n  isGroupNavigable: isGroupNavigableType\n) {\n  const path = levelsArray[levelIndex][groupIndex].path;\n  if (path.length === 1) {\n    return {\n      levelIndex,\n      groupIndex\n    };\n  }\n\n  let lIndex = Math.max(0, levelIndex - 1);\n  const groupItem = levelsArray[levelIndex][groupIndex];\n  const { start, end } = groupItem;\n\n  while (lIndex >= 0) {\n    for (let i = 0; i < levelsArray[lIndex].length; i++) {\n      const { start: s, end: e } = levelsArray[lIndex][i];\n      if (s <= start && end <= e) {\n        if (isGroupNavigable(lIndex, i)) {\n          return { groupIndex: i, levelIndex: lIndex };\n        }\n      }\n    }\n    lIndex -= 1;\n  }\n\n  return {\n    levelIndex,\n    groupIndex\n  };\n}\n\n/**\n * @param levelsArray The levels array.\n * @param levelIndex The levelIndex of current navigable item.\n * @param groupIndex The groupIndex of current navigable item.\n * @returns\n */\nexport function getChildGroup(\n  levelsArray: GroupLevelItem[][],\n  levelIndex: number,\n  groupIndex: number,\n  isGroupNavigable: isGroupNavigableType\n) {\n  if (levelIndex === levelsArray.length - 1) {\n    return { levelIndex, groupIndex };\n  }\n\n  const lIndex = Math.min(levelsArray.length - 1, levelIndex + 1);\n\n  const groupItem = levelsArray[levelIndex][groupIndex];\n  const { start, end } = groupItem;\n\n  while (lIndex <= levelsArray.length - 1) {\n    for (let i = 0; i < levelsArray[lIndex].length; i++) {\n      const { start: s, end: e } = levelsArray[lIndex][i];\n      if (start <= s && e <= end) {\n        if (isGroupNavigable(lIndex, i)) {\n          return { groupIndex: i, levelIndex: lIndex };\n        }\n      }\n    }\n  }\n  return {\n    levelIndex,\n    groupIndex\n  };\n}\n\nexport function getNextGroup(\n  levelsArray: GroupLevelItem[][],\n  info: ChartGroupInfo,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex! + 1;\n  const levelIndex = info.levelIndex!;\n\n  const maxgroup = levelsArray[levelIndex].length - 1;\n\n  if (groupIndex > maxgroup) {\n    return;\n  }\n\n  if (isGroupNavigable(levelIndex!, groupIndex)) {\n    return { groupIndex, levelIndex };\n  }\n  return getNextGroup(levelsArray, { groupIndex, levelIndex }, isGroupNavigable);\n}\n\nexport function getPreviousGroup(\n  info: ChartGroupInfo,\n  isGroupNavigable: isGroupNavigableType\n): ChartGroupInfo | undefined {\n  const groupIndex = info.groupIndex! - 1;\n  const levelIndex = info.levelIndex;\n  if (groupIndex < 0) {\n    return;\n  }\n  if (isGroupNavigable(levelIndex!, groupIndex)) {\n    return { groupIndex, levelIndex };\n  }\n  return getPreviousGroup({ groupIndex, levelIndex }, isGroupNavigable);\n}\n\nexport function getGroupNavUtil(\n  levelsArray: GroupLevelItem[][],\n  drilling: 'on' | 'off' | 'groupsOnly',\n  isRtl: boolean,\n  isHoriz: boolean,\n  isGroupLabelRendered?: (levelIndex: number, groupIndex: number) => boolean\n) {\n  const isGroupNavigable = (levelIndex: number, groupIndex: number) => {\n    const group = levelsArray[levelIndex][groupIndex].item;\n    const groupName = group.name || group.id;\n    const groupsDrilling = group.drilling;\n    const isLabelRendered = !!isGroupLabelRendered?.(levelIndex, groupIndex);\n    return (\n      isLabelRendered &&\n      groupName != null &&\n      (drilling === 'on' || drilling === 'groupsOnly') &&\n      groupsDrilling != 'off'\n    );\n  };\n\n  const getDefaultNavGroup = () => {\n    for (let levelIndex = 0; levelIndex < levelsArray.length; levelIndex++) {\n      const numGroups = levelsArray[levelIndex].length;\n      for (let groupIndex = 0; groupIndex < numGroups; groupIndex++) {\n        if (isGroupNavigable(levelIndex, groupIndex)) {\n          return { groupIndex, levelIndex };\n        }\n      }\n    }\n    return { groupIndex: 0, levelIndex: 0 };\n  };\n\n  const getNextNavGroup = (\n    info: ChartGroupInfo,\n    arrow: 'ArrowRight' | 'ArrowLeft' | 'ArrowUp' | 'ArrowDown'\n  ) => {\n    let nextGroup;\n\n    if (arrow === 'ArrowRight') {\n      if (isHoriz) {\n        nextGroup = !isRtl\n          ? getChildGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable)\n          : getParentGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable);\n      } else {\n        nextGroup = isRtl\n          ? getPreviousGroup(info, isGroupNavigable)\n          : getNextGroup(levelsArray, info, isGroupNavigable);\n      }\n    } else if (arrow === 'ArrowLeft') {\n      if (isHoriz) {\n        nextGroup = isRtl\n          ? getChildGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable)\n          : getParentGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable);\n      } else {\n        nextGroup = isRtl\n          ? getNextGroup(levelsArray, info, isGroupNavigable)\n          : getPreviousGroup(info, isGroupNavigable);\n      }\n    } else if (arrow === 'ArrowDown') {\n      nextGroup = isHoriz\n        ? getNextGroup(levelsArray, info, isGroupNavigable)\n        : getParentGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable);\n    } else if (arrow === 'ArrowUp') {\n      nextGroup = isHoriz\n        ? getPreviousGroup(info, isGroupNavigable)\n        : getChildGroup(levelsArray, info.levelIndex!, info.groupIndex!, isGroupNavigable);\n    }\n    return nextGroup || info;\n  };\n\n  return { getNextNavGroup, getDefaultNavGroup };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { OverviewProps } from './overview.types';\nimport { styles } from './themes/VisOverview.css';\n\nexport function OverviewBackground({\n  x,\n  width,\n  height,\n  y,\n  windowX,\n  windowHeight,\n  windowWidth,\n  windowY\n}: OverviewProps) {\n  return (\n    <>\n      <rect\n        x={x}\n        y={y}\n        width={Math.max(0, windowX - x)}\n        height={height}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX + windowWidth}\n        width={Math.max(0, x + width - windowX - windowWidth)}\n        y={y}\n        height={height}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX}\n        y={y}\n        height={Math.max(0, windowY - y)}\n        width={windowWidth}\n        class={styles.overviewBackground}></rect>\n\n      <rect\n        x={windowX}\n        y={windowY + windowHeight}\n        width={windowWidth}\n        class={styles.overviewBackground}\n        height={Math.max(y + height - windowY - windowHeight, 0)}></rect>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { useCssVars } from '#hooks/PRIVATE_useCssVars/useCssVars';\nimport { styles } from './themes/ChartStyles.css';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { PlotArea } from '#PRIVATE_PlotArea';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { Axis } from '#PRIVATE_Axis/Axis';\nimport { useChartViewport } from '#hooks/PRIVATE_useChartViewport';\nimport {\n  getAvailSpace,\n  getLayoutInfo,\n  getOuterGaps,\n  getScrollBarSpace,\n  updateScrollBarSpace\n} from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { useChartNav } from '#hooks/PRIVATE_useChartNav/useChartNav';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { getAxesPosition } from '#PRIVATE_Axis/utils/axisUtils';\nimport { ScrollBar } from '#PRIVATE_ChartScrollBar';\nimport { useSelectDrill } from '#hooks/PRIVATE_useChartEvents/useSelectDrill';\nimport { useChartDatatipAndCursor } from '#hooks/PRIVATE_useChartEvents/useDatatipAndCursor';\nimport { getGroupNavUtil } from '#PRIVATE_Axis/utils/axisNavUtils';\nimport { GroupAxisProps, DataAxisProps, TimeAxisProps } from '#utils/UNSAFE_visTypes/chart';\nimport { Gridlines } from '#PRIVATE_PlotArea/Gridlines';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { useTestId } from '#hooks/UNSAFE_useTestId';\nimport { getChartVars } from '#utils/PRIVATE_chartUtils';\nimport { useChartContextMenu } from '#hooks/PRIVATE_useChartContextMenu';\nimport { useChartDnd } from '#hooks/PRIVATE_useChartDnd';\nimport { getElementData } from '#utils/UNSAFE_visUtils';\nimport { useTextTruncation } from '#PRIVATE_VisSVGText/useTextTruncation';\nimport { useChartMarquee } from '#hooks/PRIVATE_useChartMarquee';\nimport { ChartProps } from './Chart';\nimport type { gestureTypes } from '#hooks/PRIVATE_useVisContextMenu';\nimport { useVisTouchResponse } from '#hooks/PRIVATE_useVisTouchResponse';\nimport { merge } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { OverviewContext } from '#hooks/PRIVATE_useOverviewContext';\nimport { getWindowCoords } from '#PRIVATE_VisOverview/utils';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { getRenderer } from './overviewUtils';\nimport { ComponentChildren } from 'preact';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { getAriaLabelGenerator } from '#utils/PRIVATE_chartUtils/dataTipUtils';\n\ntype ChartWithDimensionsProps<K, D> = Omit<ChartProps<K, D>, 'width' | 'height'> & {\n  width: number;\n  height: number;\n  overviewRenderer: (props: Dimension) => {\n    background: ComponentChildren;\n    slidingWindow: ComponentChildren;\n  };\n  yAxisSize: number;\n  isOverview: boolean;\n};\n\nconst OVERVIEW_GAP = 10;\n\nconst chartVars = getChartVars();\n\nexport function ChartWithDimensions<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({\n  width,\n  height,\n  selectedIds,\n  hiddenIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  xAxis,\n  yAxis,\n  y2Axis,\n  plotArea,\n  dragMode = 'user',\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataCursorPosition,\n  onSelectionChange,\n  isDataCursorEnabled,\n  dataCursorStyle,\n  onViewportChange,\n  onDataCursorPositionChange,\n  onItemDrill,\n  onGroupDrill,\n  onItemHover,\n  onItemFocus,\n  datatip,\n  zoomAndScroll = 'off',\n  getNavUtil,\n  getDataItemPos,\n  getGapRatio,\n  valueFormats,\n  findNearest,\n  getMarkerInfo,\n  isRtl,\n  children,\n  testId,\n  renderGridLinesInFront,\n  isDataXAxis,\n  contextMenuConfig,\n  overview = 'off',\n  getStartAndEndAxesOffset,\n  defaultOverviewContentRenderer,\n  isOverview,\n  yAxisSize,\n  overviewRenderer,\n  ...props\n}: ChartWithDimensionsProps<K, D>) {\n  const testIdProps = useTestId(testId);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isTestEnv = testIdProps['data-testid'] !== undefined;\n  const isHoriz = orientation === 'horizontal';\n  const { xAxisPosition, yAxisPosition, y2AxisPosition } = getAxesPosition(\n    yAxis,\n    y2Axis,\n    isHoriz,\n    isRtl\n  );\n  const { resolvedVars, cssContent } = useCssVars(chartVars);\n  const colors = Array.from(Array(12)).map((_, index) => {\n    return resolvedVars[`color${index + 1}`];\n  });\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  let availSpace = getAvailSpace(width, height);\n\n  if (isOverview && yAxisSize) {\n    const w = availSpace.width - yAxisSize;\n    const gaps = getOuterGaps(w, height);\n    availSpace.width -= yAxisSize - 2 * gaps.width;\n    availSpace.x += yAxisSize - gaps.width;\n  }\n  const isTimeAxis = (xAxis as TimeAxisProps)?.timeAxisType != null;\n\n  const updatedSpace = getScrollBarSpace(\n    isTimeAxis,\n    availSpace,\n    zoomAndScroll,\n    xAxisPosition,\n    overview\n  );\n  let scrollDims = updatedSpace.scrollDims;\n  availSpace = updatedSpace.availSpace;\n  const { locale } = useUser();\n  const { x, y, width: _width, height: _height } = availSpace;\n  const labelFontSize = resolvedVars['labelFontSize'];\n\n  const split = y2Axis?.split ?? 'off';\n  const isSplitDualY = split !== 'off';\n  const splitterPosition = split !== 'off' ? split : 0.5;\n\n  const layoutInfo = useMemo(() => {\n    const hiddenSet = new Set(hiddenIds);\n    return getLayoutInfo<K, D>(\n      series,\n      groups,\n      getDataItem,\n      xAxis,\n      yAxis,\n      y2Axis,\n      { x, y, width: _width, height: _height }, // availSpace\n      hiddenSet,\n      hideAndShowBehavior,\n      isHoriz,\n      isRtl,\n      isStacked,\n      labelFontSize,\n      getStartAndEndAxesOffset,\n      locale,\n      isSplitDualY,\n      splitterPosition,\n      getTextDimensions,\n      isTestEnv,\n      isDataXAxis\n    );\n  }, [\n    x,\n    y,\n    _width,\n    _height,\n    getDataItem,\n    getTextDimensions,\n    groups,\n    hiddenIds,\n    hideAndShowBehavior,\n    isDataXAxis,\n    isHoriz,\n    isRtl,\n    isStacked,\n    isTestEnv,\n    locale,\n    getStartAndEndAxesOffset,\n    labelFontSize,\n    series,\n    xAxis,\n    yAxis,\n    y2Axis,\n    splitterPosition,\n    isSplitDualY\n  ]);\n\n  const {\n    getGroupFromPath,\n    levelsArray,\n    xAxisInfo,\n    xProps,\n    xScale,\n    yProps,\n    y2Props,\n    yScale,\n    y2Scale,\n    yMaxDim,\n    yAxisInfo,\n    plotAreaSpace,\n    xSpace,\n    ySpace,\n    y2Space,\n    idToDataMap,\n    y2AxisInfo\n  } = layoutInfo;\n\n  const leafGroupsInfo = levelsArray.length > 0 ? levelsArray[levelsArray.length - 1] : [];\n\n  scrollDims = updateScrollBarSpace(scrollDims, xAxisPosition === 'bottom', isRtl, yMaxDim);\n\n  const gapRatio = getGapRatio(xAxisInfo.startIndex!, xAxisInfo.endIndex!);\n\n  const getNextChartItem = getNavUtil(xAxisInfo.startIndex!, xAxisInfo.endIndex!);\n\n  const { getNextNavGroup, getDefaultNavGroup } = getGroupNavUtil(\n    levelsArray,\n    drilling,\n    isRtl,\n    isHoriz,\n    xProps.isGroupLabelRendered\n  );\n\n  const {\n    ignoreSelectPointerUp,\n    cursor,\n    yAxisCursor,\n    marqueeProps,\n    marqueeContent,\n    toggleButtonContent,\n    isPointInsideMarquee,\n    dragMode: mode\n  } = useChartMarquee<K, D>({\n    rootRef,\n    plotAreaSpace,\n    xSpace,\n    ySpace,\n    dragMode,\n    chartWidth: width,\n    isMultiSelection: selectionMode === 'multiple',\n    onViewportChange,\n    isZoomScroll: zoomAndScroll === 'live',\n    xScale,\n    selectedIds,\n    getDataById: (id) => idToDataMap.get(id),\n    onSelectionChange,\n    isRtl,\n    xAxisInfo\n  });\n\n  const { touchResponse, touchResponseStyle } = useVisTouchResponse({\n    type: 'auto',\n    supportsTouchDragGestures: mode !== 'off',\n    rootRef\n  });\n\n  const { activeId, focusedItemInfo, hoveredItemInfo, focusedGroupInfo, navProps, onFocusUpdate } =\n    useChartNav({\n      rootRef,\n      getNextChartItem,\n      getNextNavGroup,\n      getDefaultNavGroup,\n      touchResponse,\n      onItemHover,\n      onItemFocus,\n      drilling,\n      xAxisInfo\n    });\n\n  const onContextMenuDismissed = (gesture: gestureTypes) => {\n    if (gesture === 'keyboard') {\n      onFocusUpdate();\n    }\n  };\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const getTextAndBounds = (target: EventTarget | null) => {\n    if (target != rootRef.current) {\n      const dataSet = getElementData(rootRef, target as HTMLElement);\n      const text = dataSet?.['ojPrivateText']!;\n\n      if (!text) {\n        return;\n      }\n\n      if (text === xAxis?.title) {\n        return {\n          text,\n          bounds: xProps.titleProps?.dims\n        };\n      } else if (text === yAxis?.title) {\n        return {\n          text,\n          bounds: yProps.titleProps?.dims\n        };\n      } else if (text === y2Axis?.title) {\n        return {\n          text,\n          bounds: y2Props.titleProps?.dims\n        };\n      } else if (dataSet?.['ojPrivateGroupIndex'] && dataSet?.['ojPrivateLevelIndex']) {\n        return {\n          // @ts-ignore\n          bounds: xProps.tickLabels.find(\n            ({ dataProps }) =>\n              dataProps['data-oj-private-level-index'] === dataSet['ojPrivateLevelIndex'] &&\n              dataProps['data-oj-private-group-index'] === dataSet['ojPrivateGroupIndex']\n          ).dims,\n          text: text!\n        };\n      }\n    }\n\n    if (target === rootRef.current && focusedGroupInfo.isFocusVisible) {\n      const group = groups[focusedGroupInfo.groupIndex || 0];\n      return {\n        bounds: xProps.tickLabels[focusedGroupInfo?.groupIndex || 0].dims,\n        text: group.name || group.id\n      };\n    }\n    return;\n  };\n\n  const { tooltipContent, tooltipProps } = useTextTruncation({\n    getTextAndBounds,\n    width,\n    isRtl\n  });\n\n  const viewportProps = useChartViewport({\n    rootRef,\n    width,\n    height,\n    xAxisInfo,\n    yAxisInfo,\n    y2AxisInfo,\n    xScale,\n    yScale,\n    y2Scale,\n    plotAreaSpace,\n    isRtl,\n    isHoriz,\n    zoomAndScroll,\n    onViewportChange\n  });\n\n  const ignoreAsTrigger = (target: EventTarget | null) => {\n    if (!target) {\n      return false;\n    }\n\n    const dataset = getElementData(rootRef, target as HTMLElement);\n    if (\n      (dataset &&\n        (dataset['ojPrivateObject'] === 'marquee' ||\n          dataset['ojPrivateObject'] === 'dragModeControls' ||\n          dataset['ojPrivateObject'] === 'scrollBar')) ||\n      ignoreSelectPointerUp\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const { selectDrillProps, selectionContent } = useSelectDrill<K, D>({\n    selectionMode,\n    selection: [...selectedIds],\n    onChange: onSelectionChange,\n    rootRef,\n    drilling,\n    onItemDrill,\n    onGroupDrill,\n    focusedGroupInfo,\n    focusedItemInfo,\n    levelsArray,\n    getDataItem,\n    getDataById: (id) => idToDataMap.get(id),\n    ignoreAsTrigger\n  });\n\n  const findNearestData = findNearest(\n    xScale as any,\n    yScale,\n    y2Scale,\n    xProps.axisStepWidth!,\n    xProps.averageGroupZ!,\n    gapRatio\n  );\n  const getDataItemPosition = getDataItemPos(\n    xScale as any,\n    yScale,\n    y2Scale,\n    xProps.axisStepWidth!,\n    xProps.averageGroupZ!,\n    gapRatio\n  );\n  const [datatipDisabled, setDatatipDisabled] = useState(false);\n\n  const getItemAriaLabel = getAriaLabelGenerator(\n    series,\n    translations,\n    valueFormats,\n    leafGroupsInfo,\n    xAxis,\n    !!isDataXAxis,\n    getGroupFromPath,\n    xProps.defaultLabelFormatter,\n    yProps.defaultLabelFormatter,\n    y2Props.defaultLabelFormatter\n  );\n\n  const {\n    datatipContent,\n    dataCursorContent,\n    datatipProps: { 'aria-describedby': datatipAriaDescribedby, ...datatipProps }\n  } = useChartDatatipAndCursor<K, D>({\n    series,\n    leafGroupsInfo,\n    width,\n    height,\n    findNearest: findNearestData,\n    plotAreaSpace,\n    onDataCursorPositionChange,\n    isDataCursorEnabled,\n    dataCursorPosition,\n    dataCursorStyle,\n    hoveredItemInfo,\n    focusedItemInfo,\n    getDataItem,\n    getMarkerInfo,\n    getDataItemPos: getDataItemPosition,\n    datatip,\n    valueFormats,\n    isHoriz,\n    touchResponse,\n    isDisabled: datatipDisabled,\n    xScale: xScale as any,\n    yScale,\n    y2Scale,\n    timeAxisType: (xAxis as TimeAxisProps)?.timeAxisType,\n    defaultXFormatter: xProps.defaultLabelFormatter,\n    defaultYFormatter: yProps.defaultLabelFormatter,\n    defaultY2Formatter: y2Props.defaultLabelFormatter,\n    hasXYValues: isDataXAxis,\n    getGroupFromPath,\n    translations\n  });\n\n  const isGroupInteractive = (index: number) => {\n    if ((xAxis as TimeAxisProps)?.timeAxisType != null) {\n      return false;\n    }\n    const groupDrill = groups[index]?.drilling;\n    if (groupDrill === 'on') {\n      return true;\n    }\n\n    if (groupDrill != 'off' && (drilling === 'on' || drilling === 'groupsOnly')) {\n      return true;\n    }\n    return false;\n  };\n\n  const plotAreaClipPathId = useId();\n\n  //  const { yTicks, y2Ticks } = getYY2Ticks(yAxisInfo.ticks, y2AxisInfo.ticks, isHoriz, isSplitDualY);\n  const gridLines = (\n    <Gridlines\n      plotArea={plotArea}\n      availSpace={plotAreaSpace}\n      xAxisPosition={xAxisPosition}\n      isRtl={isRtl}\n      yMinorTicks={yAxisInfo.minorTicks}\n      xMinorTicks={xAxisInfo.minorTicks}\n      xScale={xScale}\n      yScale={yScale}\n      y2Scale={y2Scale}\n      isLog={yAxis?.scale === 'log'}\n      yAxisPosition={yAxisPosition}\n      isDataXAxis={isDataXAxis}\n      xAxis={xAxis as DataAxisProps}\n      yAxis={yAxis}\n      y2Axis={y2Axis}\n      hasAxisLine={!isOverview}\n      y2MinorTicks={y2AxisInfo?.minorTicks}\n      y2Ticks={y2AxisInfo.ticks}\n      yTicks={yAxisInfo.ticks}\n      xTicks={xAxisInfo.ticks}\n      isSplitDualY={isSplitDualY}\n    />\n  );\n  const hasData = series.length > 0 && groups.length > 0;\n\n  const { contextMenuContent, contextMenuProps } = useChartContextMenu<K, D>({\n    isRtl,\n    width,\n    height,\n    getDataItemPosition,\n    series,\n    levelsArray,\n    focusedGroupInfo,\n    getDataItem,\n    focusedItemInfo,\n    rootRef,\n    xAxisTitle: xAxis?.title,\n    yAxisTitle: yAxis?.title,\n    contextMenuConfig: hasData ? contextMenuConfig : undefined,\n    onContextMenuDismissed\n  });\n\n  const [dragOver, setDragOver] = useState<{ accepted: boolean | undefined; type: string }>({\n    accepted: undefined,\n    type: ''\n  });\n\n  const { draggable, dndProps, dndContent } = useChartDnd<K, D>({\n    onDrag: props.onDrag,\n    onDragStart: props.onDragStart,\n    onDragEnd: props.onDragEnd,\n    onDragEnter: props.onDragEnter,\n    onDragLeave: props.onDragLeave,\n    onDragOver: props.onDragOver,\n    onDrop: props.onDrop,\n    itemsDraggable: props.itemsDraggable,\n    groupDraggable: props.groupDraggable,\n    rootRef,\n    levelsArray,\n    series,\n    selectedIds,\n    getDataItem,\n    xSpace,\n    ySpace,\n    plotAreaSpace,\n    setDragOver,\n    setDatatipDisabled,\n    onSelectionChange\n  });\n\n  const eventsProps = mergeProps(\n    navProps,\n    selectDrillProps,\n    viewportProps,\n    datatipProps,\n    marqueeProps,\n    tooltipProps,\n    contextMenuProps,\n    dndProps\n  );\n\n  const overviewContentRenderer =\n    overview != 'off' && (overview === 'on' || !overview.renderer)\n      ? defaultOverviewContentRenderer\n      : undefined;\n\n  const { background, slidingWindow } = overviewRenderer(plotAreaSpace);\n  return (\n    <>\n      {getTextDimensions && resolvedVars['labelFontSize'] != undefined && (\n        <div\n          tabIndex={isOverview ? undefined : 0}\n          draggable={draggable}\n          ref={rootRef}\n          aria-activedescendant={activeId}\n          aria-label={props['aria-label']}\n          aria-labelledby={props['aria-labelledby']}\n          aria-describedby={merge([props['aria-describedby'], datatipAriaDescribedby])}\n          style={{ ...touchResponseStyle }}\n          role={isOverview ? undefined : 'application'}\n          className={styles.baseChartStyle}\n          data-oj-private-selection-mode={isTestEnv ? selectionMode : undefined}\n          {...testIdProps}\n          {...(isOverview ? {} : eventsProps)}>\n          <svg\n            width=\"100%\"\n            height={\n              scrollDims.height != 0 && overview != 'off'\n                ? `${Math.ceil((updatedSpace.availSpace.height + OVERVIEW_GAP) * 100) / height}%`\n                : '100%'\n            }>\n            <clipPath id={`${plotAreaClipPathId}`}>\n              <rect {...plotAreaSpace}></rect>\n            </clipPath>\n            {background}\n            <PlotArea\n              color={plotArea?.color}\n              dragOverStyle={\n                dragOver.type !== 'plotArea' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n              cursor={cursor}\n              availSpace={plotAreaSpace}\n            />\n            {!renderGridLinesInFront && gridLines}\n            <Axis\n              {...(yProps as any)}\n              axisPosition={yAxisPosition}\n              isRtl={isRtl}\n              cursor={yAxisCursor}\n              availSpace={ySpace}\n              dragOverStyle={\n                dragOver.type !== 'yAxis' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n            />\n            <Axis\n              {...(y2Props as any)}\n              axisPosition={y2AxisPosition}\n              isRtl={isRtl}\n              cursor={yAxisCursor}\n              availSpace={y2Space}\n              dragOverStyle={\n                dragOver.type !== 'y2Axis' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n            />\n            <Axis\n              {...xProps}\n              isRtl={isRtl}\n              axisPosition={xAxisPosition}\n              isTextInteractive={isGroupInteractive}\n              activeId={activeId}\n              cursor={cursor}\n              focusedGroupIndex={\n                focusedGroupInfo.isFocusVisible ? focusedGroupInfo.groupIndex : undefined\n              }\n              focusedGroupLevelIndex={\n                focusedGroupInfo.isFocusVisible ? focusedGroupInfo.levelIndex : undefined\n              }\n              availSpace={xSpace}\n              dragOverStyle={\n                dragOver.type !== 'xAxis' ? 'none' : dragOver.accepted ? 'accept' : 'reject'\n              }\n              separatorColor={(xAxis as GroupAxisProps)?.groupSeparators?.color}\n            />\n            <g>\n              {children({\n                xStartIndex: xAxisInfo.startIndex!,\n                xEndIndex: xAxisInfo.endIndex!,\n                getItemAriaLabel,\n                groupsInfo: leafGroupsInfo,\n                colors,\n                xScale: xScale as any,\n                yScale,\n                y2Scale,\n                isPointInsideMarquee,\n                defaultFontSize: resolvedVars['labelFontSize'],\n                gapRatio,\n                activeId,\n                focusedItemInfo,\n                hoveredItemInfo,\n                getTextDimensions,\n                axisStepWidth: xProps.axisStepWidth!,\n                averageGroupZ: xProps.averageGroupZ!,\n                plotAreaClipPathId\n              })}\n              {renderGridLinesInFront && gridLines}\n              {dataCursorContent}\n            </g>\n            {slidingWindow}\n            {zoomAndScroll === 'live' && !isOverview && (\n              <ScrollBar\n                availSpace={scrollDims}\n                isRtl={isRtl}\n                viewport={xAxisInfo}\n                axisExtent={xAxisInfo}\n                isHoriz={xAxisPosition === 'bottom'}\n              />\n            )}\n            {marqueeContent}\n          </svg>\n          <OverviewContext.Provider\n            value={{\n              yAxisSize: ySpace.width,\n              isOverview: true,\n              width,\n              height: scrollDims.height,\n              overviewRenderer: (overviewChartPlotArea: Dimension) => {\n                const { xScale: overviewXScale, ...windowCoords } = getWindowCoords(\n                  isRtl,\n                  xAxisInfo,\n                  xAxisInfo,\n                  yAxisInfo,\n                  yAxisInfo,\n                  overviewChartPlotArea\n                );\n                return getRenderer(\n                  xAxisInfo,\n                  isRtl,\n                  overviewXScale,\n                  overviewChartPlotArea,\n                  windowCoords,\n                  true,\n                  onViewportChange\n                );\n              }\n            }}>\n            {!isOverview && overview !== 'off' && overviewContentRenderer && (\n              <div style={{ width, height: scrollDims.height }}>{overviewContentRenderer()}</div>\n            )}\n          </OverviewContext.Provider>\n          {toggleButtonContent}\n          {datatipContent}\n          {tooltipContent}\n          {contextMenuContent}\n          {selectionContent}\n          {dndContent}\n        </div>\n      )}\n      {textMeasureContent}\n      {cssContent}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { calculateOffset } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useRef, useState } from 'preact/hooks';\n\ntype Props = {\n  getTextAndBounds: (target: EventTarget | null) =>\n    | {\n        text?: string;\n        bounds?: Dimension;\n      }\n    | undefined;\n  isRtl: boolean;\n  width: number;\n};\n\nexport function useTextTruncation({ getTextAndBounds, width, isRtl }: Props) {\n  const [text, setText] = useState<string>();\n  const bounds = useRef<Dimension>();\n\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text,\n    position: 'top-start',\n    offset: calculateOffset(isRtl, width, bounds.current)\n  });\n\n  const onPointerMove = (event: Event) => {\n    const textAndBounds = getTextAndBounds(event.target);\n\n    if (textAndBounds) {\n      bounds.current = textAndBounds.bounds;\n      setText(textAndBounds.text);\n    } else {\n      setText(undefined);\n    }\n  };\n\n  return {\n    tooltipContent,\n    tooltipProps: mergeProps({ onPointerMove }, tooltipProps)\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ScaleLinear } from '#utils/PRIVATE_chartUtils';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nexport function getWindowCoords(\n  isRtl: boolean,\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  yViewportExtent: { viewportMin: number; viewportMax: number },\n  yAxisExtent: { min: number; max: number },\n  plotAreaSpace: Dimension\n) {\n  const xDomain = [xAxisExtent.min, xAxisExtent.max] as [number, number];\n  const xRange = (\n    isRtl\n      ? [plotAreaSpace.x + plotAreaSpace.width, plotAreaSpace.x]\n      : [plotAreaSpace.x, plotAreaSpace.x + plotAreaSpace.width]\n  ) as [number, number];\n  const xScale = new ScaleLinear(xDomain, xRange);\n\n  const yDomain = [yAxisExtent.min, yAxisExtent.max] as [number, number];\n  const yRange = [plotAreaSpace.y + plotAreaSpace.height, plotAreaSpace.y] as [number, number];\n\n  const yScale = new ScaleLinear(yDomain, yRange);\n\n  const windowX = xScale.transform(xViewportExtent.viewportMin);\n  const windowWidth = Math.abs(\n    xScale.transform(xViewportExtent.viewportMax) - xScale.transform(xViewportExtent.viewportMin)\n  );\n\n  return {\n    windowX: isRtl ? windowX - windowWidth : windowX,\n    windowWidth: windowWidth,\n    windowY: yScale.transform(yViewportExtent.viewportMax),\n    windowHeight: Math.abs(\n      yScale.transform(yViewportExtent.viewportMax) - yScale.transform(yViewportExtent.viewportMin)\n    ),\n    xScale,\n    yScale\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { OverviewSlidingWindow } from '#PRIVATE_VisOverview';\nimport { OverviewBackground } from '#PRIVATE_VisOverview/OverviewBackground';\nimport { updateViewportFromOverview } from '#utils/PRIVATE_chartUtils/overviewUtils';\nimport { Scale } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nexport function getRenderer(\n  xAxisExtent: { min: number; max: number },\n  isRtl: boolean,\n  overviewXScale: Scale,\n  plotAreaSpace: Dimension,\n  windowCoords: { windowX: number; windowY: number; windowHeight: number; windowWidth: number },\n  hasHandles: boolean,\n  onViewportChange?: (detail: {\n    xMin?: number;\n    xMax?: number;\n    yMin?: number;\n    yMax?: number;\n  }) => void\n) {\n  return {\n    slidingWindow: (\n      <OverviewSlidingWindow\n        {...plotAreaSpace}\n        {...windowCoords}\n        hasHandles={hasHandles}\n        onWindowDimsChange={(props: { deltaX: number; deltaWidth: number }) => {\n          updateViewportFromOverview(\n            xAxisExtent,\n            isRtl,\n            windowCoords.windowX,\n            windowCoords.windowWidth,\n            props.deltaX,\n            props.deltaWidth,\n            overviewXScale,\n            onViewportChange\n          );\n        }}\n      />\n    ),\n    background: <OverviewBackground {...plotAreaSpace} {...windowCoords} />\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { dimensionStyle } from './themes/ChartStyles.css';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { ChartWithDimensions } from './ChartWithDimensions';\nimport {\n  ChartCommonProps,\n  ChartSeriesData,\n  GetNextChartItemType,\n  Info,\n  Scale,\n  getDataPosType\n} from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension, MarkerShapes } from '#utils/UNSAFE_visTypes/common';\nimport { ComponentChildren } from 'preact';\nimport { Property } from 'csstype';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { useOverviewContext } from '#hooks/PRIVATE_useOverviewContext';\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\n\nexport type ChartProps<K, D> = {\n  selectedIds: Set<K>;\n  getGapRatio: (startIndex: number, endIndex: number) => number;\n  getNavUtil: (startIndex: number, endIndex: number) => GetNextChartItemType;\n  getDataItemPos: (\n    xScale: Scale,\n    yScale: Scale,\n    y2Scale: Scale,\n    axisStepWidth: number,\n    averageGroupZ: number,\n    gapRatio: number\n  ) => getDataPosType;\n  findNearest: (\n    xScale: Scale,\n    yScale: Scale,\n    y2Scale: Scale,\n    axisStepWidth: number,\n    averageGroupZ: number,\n    gapRatio: number\n  ) => (\n    x: number,\n    y?: number,\n    y2?: number\n  ) =>\n    | {\n        seriesIndex: number;\n        groupIndex: number;\n        y: number | undefined;\n        y2: number | undefined;\n        x: number;\n      }\n    | undefined;\n  children: (context: {\n    getItemAriaLabel: (\n      data: D,\n      seriesIndex: number,\n      groupIndex: number,\n      isSelectionEnabled: boolean,\n      isSelected: boolean,\n      isDrillable: boolean\n    ) => string;\n    xStartIndex: number;\n    xEndIndex: number;\n    xScale: Scale;\n    yScale: Scale;\n    y2Scale: Scale;\n    gapRatio: number;\n    activeId?: string;\n    focusedItemInfo: Info;\n    hoveredItemInfo?: Info;\n    axisStepWidth: number;\n    averageGroupZ: number;\n    isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n    getTextDimensions?: (text: string, style: Record<string, any>) => Dimension;\n    defaultFontSize: string;\n    colors: string[];\n    groupsInfo: GroupLevelItem[];\n    plotAreaClipPathId: string;\n  }) => ComponentChildren;\n  getStartAndEndAxesOffset: (groupCount: number) => { startOffset: number; endOffset: number };\n  series: ChartSeriesData<K, D>[];\n  isRtl: boolean;\n  renderGridLinesInFront: boolean;\n  isDataXAxis?: boolean;\n  getMarkerInfo: (\n    seriesIndex: number,\n    groupIndex: number\n  ) => { color: Property.Color | undefined; type?: MarkerShapes };\n  defaultOverviewContentRenderer: () => ComponentChildren;\n} & Omit<ChartCommonProps<K, D>, 'highlightedIds' | 'hoverBehavior' | 'selectedIds'>;\n\nexport function Chart<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({ width, height, ...props }: ChartProps<K, D>) {\n  // TODO: reevaluate how we handle empty data\n  const {\n    isOverview,\n    overviewRenderer,\n    yAxisSize,\n    width: overviewWidth,\n    height: overviewHeight\n  } = useOverviewContext();\n\n  let chartWidth = width;\n  let chartHeight = height;\n\n  if (chartWidth === undefined && isOverview && overviewWidth !== undefined) {\n    chartWidth = `${overviewWidth}px`;\n  }\n\n  if (chartHeight === undefined && isOverview && overviewHeight !== undefined) {\n    chartHeight = `${overviewHeight}px`;\n  }\n\n  return (\n    <TrackResizeContainer width={chartWidth} height={chartHeight} class={dimensionStyle}>\n      {(width, height) =>\n        width || height ? (\n          <ChartWithDimensions\n            width={width}\n            height={height}\n            {...props}\n            yAxisSize={yAxisSize}\n            isOverview={isOverview}\n            overviewRenderer={overviewRenderer}\n          />\n        ) : undefined\n      }\n    </TrackResizeContainer>\n  );\n}\n"],"names":["getParentGroup","levelsArray","levelIndex","groupIndex","isGroupNavigable","path","length","lIndex","Math","max","groupItem","start","end","i","s","e","getChildGroup","min","getNextGroup","info","getPreviousGroup","OverviewBackground","x","width","height","y","windowX","windowHeight","windowWidth","windowY","_jsxs","jsxs","_Fragment","children","_jsx","jsx","class","styles","overviewBackground","chartVars","getChartVars","ChartWithDimensions","selectedIds","hiddenIds","hideAndShowBehavior","orientation","xAxis","yAxis","y2Axis","plotArea","dragMode","series","groups","isStacked","getDataItem","selectionMode","drilling","dataCursorPosition","onSelectionChange","isDataCursorEnabled","dataCursorStyle","onViewportChange","onDataCursorPositionChange","onItemDrill","onGroupDrill","onItemHover","onItemFocus","datatip","zoomAndScroll","getNavUtil","getDataItemPos","getGapRatio","valueFormats","findNearest","getMarkerInfo","isRtl","testId","renderGridLinesInFront","isDataXAxis","contextMenuConfig","overview","getStartAndEndAxesOffset","defaultOverviewContentRenderer","isOverview","yAxisSize","overviewRenderer","props","testIdProps","useTestId","rootRef","useRef","isTestEnv","undefined","isHoriz","xAxisPosition","yAxisPosition","y2AxisPosition","getAxesPosition","resolvedVars","cssContent","useCssVars","colors","Array","from","map","_","index","textMeasureContent","getTextDimensions","useTextDimensions","availSpace","getAvailSpace","w","gaps","getOuterGaps","isTimeAxis","timeAxisType","updatedSpace","getScrollBarSpace","scrollDims","locale","useUser","_width","_height","labelFontSize","split","isSplitDualY","splitterPosition","layoutInfo","useMemo","hiddenSet","Set","getLayoutInfo","getGroupFromPath","xAxisInfo","xProps","xScale","yProps","y2Props","yScale","y2Scale","yMaxDim","yAxisInfo","plotAreaSpace","xSpace","ySpace","y2Space","idToDataMap","y2AxisInfo","leafGroupsInfo","updateScrollBarSpace","gapRatio","startIndex","endIndex","getNextChartItem","getNextNavGroup","getDefaultNavGroup","isGroupLabelRendered","group","item","groupName","name","id","groupsDrilling","arrow","nextGroup","numGroups","getGroupNavUtil","ignoreSelectPointerUp","cursor","yAxisCursor","marqueeProps","marqueeContent","toggleButtonContent","isPointInsideMarquee","mode","useChartMarquee","chartWidth","isMultiSelection","isZoomScroll","getDataById","get","touchResponse","touchResponseStyle","useVisTouchResponse","type","supportsTouchDragGestures","activeId","focusedItemInfo","hoveredItemInfo","focusedGroupInfo","navProps","onFocusUpdate","useChartNav","translations","useTranslationBundle","tooltipContent","tooltipProps","getTextAndBounds","text","setText","useState","bounds","useTooltip","position","offset","calculateOffset","current","mergeProps","onPointerMove","event","textAndBounds","target","useTextTruncation","dataSet","getElementData","title","titleProps","dims","tickLabels","find","dataProps","isFocusVisible","viewportProps","useChartViewport","selectDrillProps","selectionContent","useSelectDrill","selection","onChange","ignoreAsTrigger","dataset","findNearestData","axisStepWidth","averageGroupZ","getDataItemPosition","datatipDisabled","setDatatipDisabled","getItemAriaLabel","getAriaLabelGenerator","defaultLabelFormatter","datatipContent","dataCursorContent","datatipProps","datatipAriaDescribedby","useChartDatatipAndCursor","isDisabled","defaultXFormatter","defaultYFormatter","defaultY2Formatter","hasXYValues","plotAreaClipPathId","useId","gridLines","Gridlines","yMinorTicks","minorTicks","xMinorTicks","isLog","scale","hasAxisLine","y2MinorTicks","y2Ticks","ticks","yTicks","xTicks","hasData","contextMenuContent","contextMenuProps","useChartContextMenu","xAxisTitle","yAxisTitle","onContextMenuDismissed","gesture","dragOver","setDragOver","accepted","draggable","dndProps","dndContent","useChartDnd","onDrag","onDragStart","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDrop","itemsDraggable","groupDraggable","eventsProps","overviewContentRenderer","renderer","background","slidingWindow","tabIndex","ref","merge","l","style","role","className","baseChartStyle","ceil","PlotArea","color","dragOverStyle","Axis","axisPosition","isTextInteractive","groupDrill","focusedGroupIndex","focusedGroupLevelIndex","separatorColor","groupSeparators","xStartIndex","xEndIndex","groupsInfo","defaultFontSize","ScrollBar","viewport","axisExtent","OverviewContext","Provider","value","overviewChartPlotArea","overviewXScale","windowCoords","xViewportExtent","xAxisExtent","yViewportExtent","yAxisExtent","xDomain","xRange","ScaleLinear","yDomain","yRange","transform","viewportMin","abs","viewportMax","getWindowCoords","hasHandles","OverviewSlidingWindow","onWindowDimsChange","updateViewportFromOverview","deltaX","deltaWidth","getRenderer","overviewWidth","overviewHeight","useOverviewContext","chartHeight","TrackResizeContainer","dimensionStyle"],"mappings":"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"}