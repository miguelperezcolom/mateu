{"version":3,"file":"useModal-536cb7ff.js","sources":["../../src/UNSAFE_Modal/hooks/useModal.ts"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'preact/compat';\n\nexport const MODAL_OVERLAY = Symbol.for('oj-modal-overlay');\n\nexport type BackdropElement = HTMLDivElement & {\n  [MODAL_OVERLAY]?: boolean;\n};\n\nexport type UseModalProps = Readonly<{\n  /**\n   * Determines whether the Modal is open.\n   */\n  isOpen: boolean;\n  /**\n   * On backdrop click callback.\n   */\n  onBackdropClick?: (event: MouseEvent) => void;\n}>;\n\n/**\n *\n * @param props\n */\nexport const useModal = (props: UseModalProps) => {\n  const { isOpen, onBackdropClick: onBackdropClickProp } = props;\n\n  const backdropRef = useRef<HTMLDivElement>(null);\n\n  const mouseDownTarget = useRef<EventTarget | null>(null);\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    if (backdropRef.current === event.target) {\n      mouseDownTarget.current = event.target;\n    }\n  }, []);\n\n  const onBackdropClick = useCallback(\n    (event: MouseEvent) => {\n      if (backdropRef.current === event.target) {\n        event.stopPropagation();\n        // event should originate on the same target\n        if (mouseDownTarget.current === event.target) {\n          onBackdropClickProp?.(event);\n        }\n      }\n    },\n    [onBackdropClickProp]\n  );\n\n  useEffect(() => {\n    const modal = backdropRef.current as BackdropElement;\n\n    if (modal) {\n      modal.addEventListener('mousedown', onMouseDown);\n      modal.addEventListener('click', onBackdropClick);\n      modal[MODAL_OVERLAY] = true;\n\n      return () => {\n        modal.removeEventListener('mousedown', onMouseDown);\n        modal.removeEventListener('click', onBackdropClick);\n        delete modal[MODAL_OVERLAY];\n      };\n    }\n\n    return () => {};\n  }, [isOpen, onMouseDown, onBackdropClick]);\n\n  return {\n    backdropRef\n  };\n};\n\nexport default useModal;\n"],"names":["MODAL_OVERLAY","Symbol","for","props","isOpen","onBackdropClick","onBackdropClickProp","backdropRef","useRef","mouseDownTarget","onMouseDown","useCallback","event","current","target","stopPropagation","useEffect","modal","addEventListener","removeEventListener"],"mappings":"+DAEa,MAAAA,EAAgBC,OAAOC,IAAI,iDAqBfC,IACvB,MAAMC,OAAEA,EAAQC,gBAAiBC,GAAwBH,EAEnDI,EAAcC,SAAuB,MAErCC,EAAkBD,SAA2B,MAE7CE,EAAcC,eAAaC,IAC3BL,EAAYM,UAAYD,EAAME,SAChCL,EAAgBI,QAAUD,EAAME,OACjC,GACA,IAEGT,EAAkBM,eACrBC,IACKL,EAAYM,UAAYD,EAAME,SAChCF,EAAMG,kBAEFN,EAAgBI,UAAYD,EAAME,QACpCR,IAAsBM,GAEzB,GAEH,CAACN,IAqBH,OAlBAU,EAAAA,WAAU,KACR,MAAMC,EAAQV,EAAYM,QAE1B,OAAII,GACFA,EAAMC,iBAAiB,YAAaR,GACpCO,EAAMC,iBAAiB,QAASb,GAChCY,EAAMjB,IAAiB,EAEhB,KACLiB,EAAME,oBAAoB,YAAaT,GACvCO,EAAME,oBAAoB,QAASd,UAC5BY,EAAMjB,EAAc,GAIxB,MAAQ,GACd,CAACI,EAAQM,EAAaL,IAElB,CACLE,cACD"}