{"version":3,"file":"useLegendContextMenu-acabb503.js","sources":["../../src/PRIVATE_BaseLegend/LegendImageMarker.tsx","../../src/PRIVATE_BaseLegend/LegendSymbol.tsx","../../src/PRIVATE_BaseLegend/LegendText.tsx","../../src/PRIVATE_BaseLegend/BaseLegendItem.tsx","../../src/UNSAFE_Legend/useLegendDatatip.ts","../../src/PRIVATE_BaseLegend/BaseLegend.tsx","../../src/PRIVATE_BaseLegend/useLegendContextMenu.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from '#PRIVATE_BaseLegend/themes/LegendStyles.css';\n\ntype ImageMarkerProps = {\n  source: string;\n};\n\nexport function ImageMarker(props: ImageMarkerProps) {\n  const { imageMarkerStyle } = styles;\n  return <img class={imageMarkerStyle} src={props.source} role=\"none\" />;\n}\n","import { SvgSymbol } from '#PRIVATE_SvgShapes';\nimport { ImageMarker } from './LegendImageMarker';\nimport { Property } from 'csstype';\nimport { styles } from '#PRIVATE_BaseLegend/themes/LegendStyles.css';\nimport { SymbolProps } from '#utils/UNSAFE_visTypes/legend';\n\ntype LegendSymbolProps = {\n  isHidden?: boolean;\n  lineLength?: number;\n  width?: Property.Width;\n  height?: Property.Height;\n  borderColor?: Property.Color;\n} & SymbolProps;\n\nexport const LegendSymbol = ({\n  // The default color is not in the redwood pallete.\n  // TODO: replace default legend color with UX approved pallete color when available.\n  markerColor = '#a6acb1',\n  lineColor = '#a6acb1',\n  markerShape = 'square',\n  isHidden = false,\n  lineStyle = 'none',\n  ...props\n}: LegendSymbolProps) => {\n  const { legendSymbolBaseStyle } = styles;\n  const dimensionsNotSet = props.width == null && props.height == null;\n  const setAspectRatioNone =\n    !dimensionsNotSet && (markerShape === 'rectangle' || markerShape === 'ellipse');\n  const defaultLineWidth = lineStyle != 'none' && markerShape != 'none' ? 2 : 3;\n  return (\n    <div className={legendSymbolBaseStyle} style={{ width: props.width, height: props.height }}>\n      {props.source ? (\n        <ImageMarker source={props.source} />\n      ) : (\n        <SvgSymbol\n          setAspectRatioNone={setAspectRatioNone}\n          markerShape={isHidden ? 'square' : markerShape}\n          lineStyle={isHidden ? 'none' : lineStyle}\n          lineColor={lineColor}\n          lineLength={props.lineLength}\n          lineWidth={props.lineWidth != null ? props.lineWidth : defaultLineWidth}\n          markerColor={isHidden ? 'transparent' : markerColor}\n          borderColor={isHidden ? markerColor || lineColor : props.borderColor}\n          setAbsolutePos={true}\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Text } from '#UNSAFE_Text';\nimport { Property } from 'csstype';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from '#PRIVATE_BaseLegend/themes/LegendStyles.css';\n\ntype LegendTextProps = {\n  text: string;\n  type: 'label' | 'title';\n  fontStyle?: Property.FontStyle;\n  fontSize?: Property.FontSize;\n  fontWeight?: Property.FontWeight;\n  textDecoration?: Property.TextDecoration;\n  color?: Property.Color;\n  fontFamily?: Property.FontFamily;\n  id?: string;\n  align?: 'start' | 'center' | 'end';\n};\n\n/**\n * Returns the legend text component.\n */\nexport const LegendText = ({\n  text,\n  type = 'label',\n  id,\n  align = 'start',\n  ...props\n}: LegendTextProps) => {\n  const {\n    legendTextBaseStyle,\n    legendTextTitle,\n    legendTitleStartAlign,\n    legendTitleCenterAlign,\n    legendTitleEndAlign\n  } = styles;\n  const isTitle = type === 'title';\n  return (\n    <div\n      class={classNames([\n        legendTextBaseStyle,\n        isTitle ? legendTextTitle : '',\n        isTitle && align === 'start' ? legendTitleStartAlign : '',\n        isTitle && align === 'center' ? legendTitleCenterAlign : '',\n        isTitle && align === 'end' ? legendTitleEndAlign : ''\n      ])}\n      style={{\n        ...props\n      }}>\n      <Text size=\"inherit\" variant=\"inherit\" weight=\"inherit\" truncation={'ellipsis'} id={id}>\n        {text}\n      </Text>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { JSX } from 'preact';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { styles } from './themes/LegendStyles.css';\nimport { getLegendCurrentItemStyle } from '#utils/PRIVATE_legendUtils/legendUtils';\nimport { SymbolProps, TextStylesProps } from '#utils/UNSAFE_visTypes/legend';\nimport { LegendSymbol } from './LegendSymbol';\nimport { LegendText } from './LegendText';\n\ntype BaseLegendItemProps = {\n  text: string;\n  itemIdx: number;\n  sectionIdx: number;\n  itemId?: number | string;\n  isCurrent: boolean;\n  isFocused: boolean;\n  isHighlighted?: boolean;\n  isHidden?: boolean;\n  symbolWidth?: number;\n  symbolHeight?: number;\n  id?: string;\n  'aria-label'?: UnpackSignals<JSX.AriaAttributes>['aria-label'];\n  class?: string;\n  minWidth?: number;\n  gridCol?: number;\n  gridRow?: number;\n  hideAndShowBehavior?: 'on' | 'off';\n  actionable?: 'off' | 'inherit';\n  hoverBehavior?: 'dim' | 'none';\n} & SymbolProps &\n  TextStylesProps;\n\nexport const BaseLegendItem = forwardRef(\n  (\n    {\n      id,\n      text,\n      sectionIdx,\n      itemIdx,\n      itemId,\n      isHighlighted,\n      symbolHeight,\n      symbolWidth,\n      isFocused,\n      isCurrent,\n      isHidden,\n      actionable = 'inherit',\n      hoverBehavior = 'none',\n      hideAndShowBehavior = 'off',\n      ...props\n    }: BaseLegendItemProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const textStyles = {\n      fontFamily: props.textFontFamily,\n      fontSize: props.textFontSize,\n      color: props.textColor,\n      fontStyle: props.textFontStyle,\n      fontWeight: props.textFontWeight,\n      textDecoration: props.textTextDecoration\n    };\n\n    const symbolProps = {\n      lineStyle: props.lineStyle,\n      lineWidth: props.lineWidth,\n      markerShape: props.markerShape,\n      markerColor: props.markerColor,\n      source: props.source,\n      borderColor: props.borderColor,\n      lineColor: props.lineColor\n    };\n\n    const isNotDimmed = isHighlighted || isHighlighted == null;\n    const { legendItemBaseStyle, legendItemOpacity, legendItemFocusRing } = styles;\n\n    return (\n      <div\n        class={classNames([\n          legendItemBaseStyle,\n          getLegendCurrentItemStyle(\n            isCurrent,\n            isHighlighted,\n            hideAndShowBehavior,\n            hoverBehavior,\n            isHidden,\n            actionable\n          ),\n          !isNotDimmed ? legendItemOpacity : '',\n          isFocused ? legendItemFocusRing : '',\n          props.class\n        ])}\n        style={{\n          gridRow: props.gridRow,\n          gridColumn: props.gridCol,\n          minWidth: props.minWidth !== undefined ? `${props.minWidth}px` : undefined\n        }}\n        id={id}\n        ref={ref}\n        data-oj-private-section={sectionIdx}\n        data-oj-private-item={itemIdx}\n        data-oj-private-item-id={itemId}\n        role={isHidden != null ? 'menuitemcheckbox' : 'img'}\n        aria-checked={isHidden != null ? !isHidden : undefined}\n        aria-label={props['aria-label'] || text}>\n        <LegendSymbol\n          {...symbolProps}\n          isHidden={isHidden}\n          lineLength={symbolWidth}\n          width={symbolWidth != null ? `${symbolWidth}px` : undefined}\n          height={symbolHeight != null ? `${symbolHeight}px` : undefined}\n        />\n        <LegendText {...textStyles} text={text} type=\"label\" />\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { MutableRef, useLayoutEffect, useState } from 'preact/hooks';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { ItemInfo } from '#utils/UNSAFE_visTypes/legend';\nimport { DATATIP_OFFSET } from '#utils/UNSAFE_visUtils/datatipUtils';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\n\ntype props = {\n  text?: string;\n  rootDimsRef: MutableRef<DOMRect | undefined>;\n  focusedItemRef: RefObject<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n  touchResponse: 'touchStart' | 'touchHold';\n  isDisabled: boolean;\n};\n\n/**\n * Calculate the datatip offset for datatip when keyboard focus is active.\n * @param focusedItemRef The ref for currentItem node.\n * @param rootRef The ref for root of the legend.\n * @param currentItem The ItemInfo of the current keyboard focused item.\n * @returns\n */\nconst calculateOffset = (\n  focusedItemRef: RefObject<HTMLDivElement>,\n  rootDimsRef: MutableRef<DOMRect | undefined>,\n  currentItem: ItemInfo,\n  isRtl: boolean\n) => {\n  let crossAxis = 0;\n  let mainAxisOffset = DATATIP_OFFSET;\n  if (focusedItemRef.current && currentItem.isCurrent && rootDimsRef.current) {\n    const rootDim = rootDimsRef.current;\n    const itemDim = focusedItemRef.current.getBoundingClientRect();\n    crossAxis = itemDim.x + itemDim.width / 2 - (rootDim.x + rootDim.width / 2);\n    crossAxis = isRtl ? -1 * crossAxis : crossAxis;\n    mainAxisOffset += rootDim.y - itemDim.y;\n    mainAxisOffset = Math.min(\n      DATATIP_OFFSET,\n      Math.max(mainAxisOffset, itemDim.height - rootDim.height + DATATIP_OFFSET)\n    );\n  }\n  return { crossAxis, mainAxis: mainAxisOffset };\n};\n\nexport const useLegendDatatip = ({\n  text,\n  rootDimsRef,\n  focusedItemRef,\n  focusedItemInfo,\n  touchResponse,\n  isDisabled\n}: props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const [offset, setOffset] = useState<{ mainAxis?: number; crossAxis?: number }>(\n    calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl)\n  );\n\n  useLayoutEffect(() => {\n    setOffset(calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl));\n  }, [focusedItemInfo, focusedItemRef, isRtl, rootDimsRef]);\n\n  const anchor = focusedItemInfo?.isCurrent ? 'element' : 'pointer';\n\n  return useDatatip({\n    content: text,\n    placement: 'top',\n    anchor,\n    offset,\n    touchResponse,\n    isDisabled\n  });\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BaseLegendItem } from './BaseLegendItem';\nimport { getItemProps, getGridCellIndices } from '#utils/PRIVATE_legendUtils/legendUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\nimport { BaseLegendProps, LegendItemData } from '#utils/UNSAFE_visTypes/legend';\n\n/**\n * The controlled legend reponsible only for rendering the legend items.\n */\nexport const BaseLegend = <\n  K extends string | number,\n  D extends LegendItemData<K> = LegendItemData<K>\n>({\n  orientation = 'horizontal',\n  highlightedIds,\n  hiddenIds,\n  focusedItemInfo,\n  hoveredItemInfo,\n  sectionIdx,\n  activeId,\n  isReadOnly,\n  items,\n  symbolHeight,\n  symbolWidth,\n  hideAndShowBehavior = 'off',\n  hoverBehavior = 'none',\n  isTestEnv,\n  ...props\n}: BaseLegendProps<K, D>) => {\n  const isHoriz = orientation === 'horizontal';\n  const columTemplates = isHoriz ? `repeat(${props.itemsPerRow}, ${props.itemWidth})` : undefined;\n  const {\n    baseLegendStyles,\n    baseLegendHorizontal,\n    baseLegendVertical,\n    baseLegendVerticalItem,\n    baseLegendPaddingBottom,\n    baseLegendPaddingTop,\n    baseLegendPaddingEnd\n  } = styles;\n\n  return (\n    <div\n      className={classNames([\n        baseLegendStyles,\n        isHoriz ? baseLegendHorizontal : baseLegendVertical\n      ])}\n      style={{\n        gridTemplateColumns: columTemplates,\n        // set maxWidth to 100% on second render for text truncation to work.\n        maxWidth: '100%'\n      }}>\n      {items.map((item: LegendItemData<K>, index: number) => {\n        const {\n          markerColor,\n          markerShape,\n          source,\n          borderColor,\n          lineColor,\n          isCurrent,\n          isFocused,\n          isHidden,\n          isHighlighted,\n          key,\n          actionable,\n          text,\n          lineStyle,\n          lineWidth\n        } = getItemProps<K>(\n          item,\n          index,\n          sectionIdx,\n          focusedItemInfo,\n          isReadOnly,\n          hoveredItemInfo,\n          hiddenIds,\n          highlightedIds\n        );\n        const isFocusedItem =\n          focusedItemInfo.sectionIdx === sectionIdx && focusedItemInfo.itemIdx === index;\n        const { gridRow, gridCol } = getGridCellIndices(\n          items.length,\n          index,\n          props.itemsPerRow,\n          props.itemsPerCol\n        );\n        const needsBottomSpace = gridRow != null && gridRow != props.itemsPerCol;\n        const needsTopSpace = gridRow != null && gridRow != 1;\n        return (\n          <BaseLegendItem\n            ref={isFocusedItem ? props.focusedItemRef : undefined}\n            text={text}\n            itemIdx={index}\n            sectionIdx={sectionIdx}\n            itemId={isTestEnv ? item.id : undefined}\n            symbolHeight={symbolHeight}\n            symbolWidth={symbolWidth}\n            markerColor={markerColor}\n            markerShape={markerShape}\n            lineStyle={lineStyle}\n            lineWidth={lineWidth}\n            source={source}\n            borderColor={borderColor}\n            aria-label={item['aria-label']}\n            lineColor={lineColor}\n            isCurrent={isCurrent}\n            isFocused={isFocused}\n            isHidden={isHidden}\n            isHighlighted={isHighlighted}\n            key={key}\n            gridRow={gridRow}\n            gridCol={gridCol}\n            minWidth={props.itemWidth}\n            id={isCurrent ? activeId : ''}\n            textColor={props.textColor}\n            textFontFamily={props.textFontFamily}\n            textFontSize={props.textFontSize}\n            textFontStyle={props.textFontStyle}\n            textFontWeight={props.textFontWeight}\n            textTextDecoration={props.textTextDecoration}\n            class={classNames([\n              isHoriz ? '' : baseLegendVerticalItem,\n              needsTopSpace ? baseLegendPaddingTop : '',\n              needsBottomSpace ? baseLegendPaddingBottom : '',\n              baseLegendPaddingEnd\n            ])}\n            hideAndShowBehavior={hideAndShowBehavior}\n            hoverBehavior={hoverBehavior}\n            actionable={actionable}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport {\n  LegendContextMenuContext,\n  SectionalLegendContextMenuContext,\n  ItemInfo,\n  LegendSectionData\n} from '#utils/UNSAFE_visTypes/legend';\nimport { type gestureTypes, useContextMenu } from '#hooks/PRIVATE_useVisContextMenu';\nimport { getItemInfo } from '#utils/PRIVATE_legendUtils/legendUtils';\nimport { ContextMenuConfig } from '#utils/UNSAFE_visTypes/common';\n\ntype BaseProps = {\n  isReadOnly: boolean;\n  rootRef: RefObject<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n  onContextMenuDismissed?: (gesture: gestureTypes) => void;\n};\n\ntype LegendUseContextMenuProps<D> = BaseProps & {\n  items: D[];\n  contextMenuConfig?: ContextMenuConfig<LegendContextMenuContext<D>>;\n};\n\ntype SectionalLegendUseContextMenuProps<D, S> = BaseProps & {\n  sections: S[];\n  contextMenuConfig?: ContextMenuConfig<SectionalLegendContextMenuContext<D>>;\n};\n\nexport const useLegendContextMenu = <D>({\n  rootRef,\n  contextMenuConfig,\n  focusedItemInfo,\n  items,\n  isReadOnly,\n  onContextMenuDismissed\n}: LegendUseContextMenuProps<D>) => {\n  const { contextMenuProps, contextMenuContent } = useContextMenu<LegendContextMenuContext<D>>({\n    onContextMenuHandler: ({ gesture, target }) => {\n      if (gesture === 'keyboard') {\n        const itemIdx = focusedItemInfo.itemIdx;\n        const elem = rootRef.current?.querySelector(`[data-oj-private-item=\"${itemIdx}\"]`) || null;\n        const data = items[itemIdx];\n        const context = { type: 'item' as const, data };\n        return {\n          type: 'element',\n          context,\n          elem\n        };\n      }\n      const itemIdx = getItemInfo(target as HTMLElement)?.itemIdx;\n      const data = itemIdx !== undefined ? items[itemIdx] : null;\n      const context = data ? { type: 'item' as const, data } : { type: 'background' as const };\n      return {\n        type: 'pointer',\n        context\n      };\n    },\n    contextMenuOptions: {\n      isDisabled: !contextMenuConfig || isReadOnly //If there is no context menu renderer or if isReadOnly is true, we disable the hook\n    },\n    rootRef,\n    contextMenuConfig,\n    onContextMenuDismissed\n  });\n\n  return { contextMenuContent, contextMenuProps };\n};\n\nexport const useSectionalLegendContextMenu = <K, D, S extends LegendSectionData<K, D>>({\n  rootRef,\n  contextMenuConfig,\n  focusedItemInfo,\n  sections,\n  isReadOnly,\n  onContextMenuDismissed\n}: SectionalLegendUseContextMenuProps<D, S>) => {\n  const { contextMenuProps, contextMenuContent } = useContextMenu<\n    SectionalLegendContextMenuContext<D>\n  >({\n    onContextMenuHandler: ({ gesture, target }) => {\n      if (gesture === 'keyboard') {\n        const itemIdx = focusedItemInfo.itemIdx;\n        const sectionIdx = focusedItemInfo.sectionIdx;\n        const data = sections[sectionIdx]?.items[itemIdx];\n        if (data) {\n          const elem =\n            rootRef.current?.querySelector(\n              `[data-oj-private-item=\"${itemIdx}\"][data-oj-private-section=\"${sectionIdx}\"]`\n            ) || null;\n          const context = { type: 'item' as const, itemIndexPath: [sectionIdx, itemIdx], data };\n          return {\n            type: 'element',\n            context,\n            elem\n          };\n        }\n      }\n      const itemIdx = getItemInfo(target as HTMLElement)?.itemIdx;\n      const sectionIdx = getItemInfo(target as HTMLElement)?.sectionIdx;\n      const data =\n        sectionIdx !== undefined && itemIdx !== undefined\n          ? sections[sectionIdx]?.items[itemIdx]\n          : null;\n      const itemIndexPath = [sectionIdx!, itemIdx!];\n      const context = data\n        ? { type: 'item' as const, data, itemIndexPath }\n        : { type: 'background' as const };\n      return {\n        type: 'pointer',\n        context\n      };\n    },\n    contextMenuOptions: {\n      isDisabled: !contextMenuConfig || isReadOnly //If there is no context menu renderer or if isReadOnly is true, we disable the hook\n    },\n    rootRef,\n    contextMenuConfig,\n    onContextMenuDismissed\n  });\n\n  return { contextMenuContent, contextMenuProps };\n};\n"],"names":["ImageMarker","props","imageMarkerStyle","styles","_jsx","class","src","source","role","LegendSymbol","markerColor","lineColor","markerShape","isHidden","lineStyle","legendSymbolBaseStyle","setAspectRatioNone","width","height","defaultLineWidth","jsx","className","style","SvgSymbol","lineLength","lineWidth","borderColor","setAbsolutePos","LegendText","text","type","id","align","legendTextBaseStyle","legendTextTitle","legendTitleStartAlign","legendTitleCenterAlign","legendTitleEndAlign","isTitle","classNames","children","Text","size","variant","weight","truncation","BaseLegendItem","forwardRef","sectionIdx","itemIdx","itemId","isHighlighted","symbolHeight","symbolWidth","isFocused","isCurrent","actionable","hoverBehavior","hideAndShowBehavior","ref","textStyles","fontFamily","textFontFamily","fontSize","textFontSize","color","textColor","fontStyle","textFontStyle","fontWeight","textFontWeight","textDecoration","textTextDecoration","symbolProps","isNotDimmed","legendItemBaseStyle","legendItemOpacity","legendItemFocusRing","_jsxs","getLegendCurrentItemStyle","gridRow","gridColumn","gridCol","minWidth","undefined","calculateOffset","focusedItemRef","rootDimsRef","currentItem","isRtl","crossAxis","mainAxisOffset","DATATIP_OFFSET","current","rootDim","itemDim","getBoundingClientRect","x","y","Math","min","max","mainAxis","orientation","highlightedIds","hiddenIds","focusedItemInfo","hoveredItemInfo","activeId","isReadOnly","items","isTestEnv","isHoriz","columTemplates","itemsPerRow","itemWidth","baseLegendStyles","baseLegendHorizontal","baseLegendVertical","baseLegendVerticalItem","baseLegendPaddingBottom","baseLegendPaddingTop","baseLegendPaddingEnd","gridTemplateColumns","maxWidth","map","item","index","key","getItemProps","isFocusedItem","getGridCellIndices","length","itemsPerCol","needsBottomSpace","needsTopSpace","rootRef","contextMenuConfig","onContextMenuDismissed","contextMenuProps","contextMenuContent","useContextMenu","onContextMenuHandler","gesture","target","elem","querySelector","context","data","getItemInfo","contextMenuOptions","isDisabled","touchResponse","direction","useUser","offset","setOffset","useState","useLayoutEffect","anchor","useDatatip","content","placement","sections","itemIndexPath"],"mappings":"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"}