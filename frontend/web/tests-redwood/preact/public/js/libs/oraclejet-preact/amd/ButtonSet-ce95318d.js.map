{"version":3,"file":"ButtonSet-ce95318d.js","sources":["../../src/UNSAFE_ButtonSet/ButtonSetItems.tsx","../../src/UNSAFE_ButtonSet/ButtonSet.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentChild, toChildArray, isValidElement, Fragment } from 'preact';\nimport { ButtonSetPositionContext } from '../hooks/UNSAFE_useButtonSetPositionContext';\nimport { indexToPosition } from '../utils/UNSAFE_buttonUtils';\n\ntype ButtonSetItemsProps = {\n  /**\n   * The children are an array of buttonsetitems\n   */\n  children: ComponentChildren;\n};\n\n/**\n * ButtonSetItems renders the ButtonSet children\n */\nexport function ButtonSetItems({ children }: ButtonSetItemsProps) {\n  const childrenArray: ComponentChild[] = toChildArray(children);\n\n  return (\n    <Fragment>\n      {childrenArray.map((value, index) => {\n        if (!isValidElement(value)) return null;\n        else\n          return (\n            <ButtonSetPositionContext.Provider\n              value={{\n                position: indexToPosition(index, childrenArray.length)\n              }}>\n              {value}\n            </ButtonSetPositionContext.Provider>\n          );\n      })}\n    </Fragment>\n  );\n}\n\nButtonSetItems.displayName = 'ButtonSetItems';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/ButtonSetStyles.css';\nimport { useButtonSetContext } from '../hooks/UNSAFE_useButtonSetContext';\nimport { ButtonSetItems } from './ButtonSetItems';\nimport { useContext } from 'preact/hooks';\n\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useRovingTabIndexContainer } from '../hooks/PRIVATE_useRovingTabIndexContainer';\nimport { TabbableModeContext, useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { mergeRefs } from '../utils/PRIVATE_refUtils';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type ButtonSetProps = WidthProps &\n  TestIdProps & {\n    /**\n     * The children are an array of buttonsetitems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * aria-label - label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * aria-labelledby - label for accessibility\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * aria-controls - specifies what this buttonset control controls.\n     */\n    'aria-controls'?: string;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the buttonsetsingle.\n     */\n    'aria-describedby'?: string;\n  };\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * ButtonSet allow users to select the state of one or more related options.\n */\nexport const ButtonSet = forwardRef(\n  (\n    {\n      children,\n      testId,\n      'aria-label': accessibleLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      width\n    }: ButtonSetProps,\n    ref?: Ref<HTMLSpanElement>\n  ) => {\n    const { layoutWidth, isDisabled } = useButtonSetContext();\n    const testIdProps = useTestId(testId);\n\n    const { isTabbable } = useTabbableMode(isDisabled);\n    const { isRoving } = useContext(TabbableModeContext);\n\n    const {\n      focusedId,\n      rovingTabIndexContainerProps: { ref: rovingRef, tabIndex, ...rovingProps }\n    } = useRovingTabIndexContainer(!isTabbable);\n\n    const { class: cls, ...intStyles } = styleInterpolations({ width });\n    const rootStyles = classNames([\n      styles.base,\n      cls,\n      layoutWidth === 'equal' ? styles.fullWidth : undefined\n    ]);\n\n    return (\n      <span\n        role=\"toolbar\"\n        class={rootStyles}\n        style={intStyles}\n        ref={isRoving ? ref : mergeRefs(ref, rovingRef)}\n        aria-label={accessibleLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        aria-controls={ariaControls}\n        tabIndex={!isDisabled && !isRoving ? tabIndex : undefined}\n        {...testIdProps}\n        {...rovingProps}>\n        {isRoving ? (\n          <ButtonSetItems>{children}</ButtonSetItems>\n        ) : (\n          <TabbableModeContext.Provider\n            value={{ isTabbable: isTabbable, isRoving: true, focusedId: focusedId }}>\n            <ButtonSetItems>{children}</ButtonSetItems>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n    );\n  }\n);\n\nButtonSet.displayName = 'ButtonSet';\n"],"names":["ButtonSetItems","children","childrenArray","toChildArray","_jsx","jsx","Fragment","map","value","index","isValidElement","ButtonSetPositionContext","Provider","position","indexToPosition","length","displayName","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","ButtonSet","forwardRef","testId","accessibleLabel","ariaLabelledBy","ariaControls","ariaDescribedBy","width","ref","layoutWidth","isDisabled","useButtonSetContext","testIdProps","useTestId","isTabbable","useTabbableMode","isRoving","useContext","TabbableModeContext","focusedId","rovingTabIndexContainerProps","rovingRef","tabIndex","rovingProps","useRovingTabIndexContainer","class","cls","intStyles","rootStyles","classNames","styles","base","fullWidth","undefined","role","style","mergeRefs"],"mappings":"ogBAqBgB,SAAAA,GAAeC,SAAEA,IAC/B,MAAMC,EAAkCC,eAAaF,GAErD,OACEG,EAAAC,IAACC,EAAQA,SAAA,CAAAL,SACNC,EAAcK,KAAI,CAACC,EAAOC,IACpBC,EAAcA,eAACF,GAGhBJ,MAACO,EAAAA,yBAAyBC,SAAQ,CAChCJ,MAAO,CACLK,SAAUC,EAAeA,gBAACL,EAAOP,EAAca,SAEhDd,SAAAO,IAP4B,QAa3C,CAEAR,EAAegB,YAAc,iBCY7B,MAAMC,EAAiB,IAAIC,OAAOC,OAAOC,EAAAA,0BACnCC,EAAsBC,EAAAA,oBAAoCL,GAKnDM,EAAYC,EAAUA,YACjC,EAEIvB,WACAwB,SACA,aAAcC,EACd,kBAAmBC,EACnB,gBAAiBC,EACjB,mBAAoBC,EACpBC,SAEFC,KAEA,MAAMC,YAAEA,EAAWC,WAAEA,GAAeC,EAAmBA,sBACjDC,EAAcC,YAAUX,IAExBY,WAAEA,GAAeC,EAAeA,gBAACL,IACjCM,SAAEA,GAAaC,EAAUA,WAACC,EAAmBA,sBAE7CC,UACJA,EACAC,8BAAgCZ,IAAKa,EAASC,SAAEA,KAAaC,IAC3DC,8BAA4BV,IAExBW,MAAOC,KAAQC,GAAc7B,EAAoB,CAAES,UACrDqB,EAAaC,EAAAA,WAAW,CAC5BC,EAAAA,OAAOC,KACPL,EACgB,UAAhBjB,EAA0BqB,SAAOE,eAAYC,IAG/C,OACEpD,cACEqD,KAAK,UACLT,MAAOG,EACPO,MAAOR,EACPnB,IAAKQ,EAAWR,EAAM4B,EAAAA,UAAU5B,EAAKa,GAAU,aACnClB,EACK,kBAAAC,EACC,mBAAAE,EACH,gBAAAD,EACfiB,SAAWZ,GAAeM,OAAsBiB,EAAXX,KACjCV,KACAW,WACHP,EACCnC,EAAAC,IAACL,EAAgB,CAAAC,SAAAA,IAEjBG,EAAAA,IAACqC,EAAAA,oBAAoB7B,SAAQ,CAC3BJ,MAAO,CAAE6B,WAAYA,EAAYE,UAAU,EAAMG,UAAWA,GAAWzC,SACvEG,EAAAA,IAACJ,EAAgB,CAAAC,SAAAA,OAIvB,IAINsB,EAAUP,YAAc"}