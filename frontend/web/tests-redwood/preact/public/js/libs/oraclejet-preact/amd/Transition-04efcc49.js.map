{"version":3,"file":"Transition-04efcc49.js","sources":["../../src/PRIVATE_TransitionGroup/Transition.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Component, ComponentChild, RenderableProps } from 'preact';\n\n/**\n * Supported transitions\n */\ntype TransitionCompleteStatus = 'entered' | 'exited';\ntype TransitionIntermediateStatus = 'entering' | 'exiting' | null;\ntype TransitionStatus = TransitionCompleteStatus | TransitionIntermediateStatus;\n\n/**\n * A function wrapper that when cancelled, will not call the\n * original function when invoked.\n */\ntype CancellableFunction = {\n  (): void;\n  cancel?: () => void;\n};\n\n/**\n * State for the Transition component\n */\ntype State = {\n  status: TransitionStatus;\n};\n\n/**\n * Props for the Transition Component\n */\nexport type TransitionProps<M = any> = {\n  /**\n   * A boolean for whether or not to the show the child content. Usually, this represents\n   * whether or the current item existing in the data.\n   */\n  in?: boolean;\n\n  /**\n   * An optional metadata that will be passed along on all callbacks\n   */\n  metadata?: M;\n\n  /**\n   * Called when the component enters for the first time.\n   */\n  onEnter?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component enters for the first time and right after onEnter call.\n   */\n  onEntering?: (node?: Element, callback?: () => void, metadata?: M) => void;\n\n  /**\n   * Called when the component enters for the first time and all the enter transitions are over.\n   */\n  onEntered?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component exits.\n   */\n  onExit?: (node?: Element, metadata?: M) => void;\n\n  /**\n   * Called when the component exits and right after the onExit call.\n   */\n  onExiting?: (node?: Element, callback?: () => void, metadata?: M) => void;\n\n  /**\n   * Called when the component exits and all the transitions are over.\n   */\n  onExited?: (node?: Element, metadata?: M) => void;\n};\n\n/**\n * @classdesc\n * The component that acts as a layer for handing transitions.\n *\n * @ignore\n */\nexport class Transition<M = any> extends Component<TransitionProps<M>, State> {\n  private readonly _appearStatus: TransitionIntermediateStatus;\n  private _nextCallback: CancellableFunction | null;\n\n  ////////////////////////////////////////////////////////////////////////\n  // Handler functions are created as members to have them 'this' bound //\n  ////////////////////////////////////////////////////////////////////////\n\n  ///////////////////////////\n  // Handler functions end //\n  ///////////////////////////\n\n  /**\n   * Instantiates Component\n   *\n   * @param props The component properties\n   */\n  constructor(props: Readonly<TransitionProps<M>>) {\n    super(props);\n\n    let appearStatus: TransitionIntermediateStatus;\n    if (props.in) {\n      appearStatus = 'entering';\n    } else {\n      appearStatus = null;\n    }\n\n    this._appearStatus = appearStatus;\n    this.state = { status: 'exited' };\n    this._nextCallback = null;\n  }\n\n  //////////////////////////////////////\n  // Component Life Cycle Hooks Start //\n  //////////////////////////////////////\n\n  /**\n   * Lifecycle hook that gets called when the component is mounted to the DOM\n   */\n  componentDidMount() {\n    this._updateStatus(this._appearStatus);\n  }\n\n  /**\n   * Lifecycle hook that gets called after each update to the component\n   *\n   * @param prevProps The props of the component before last update\n   */\n  componentDidUpdate(prevProps: Readonly<TransitionProps<M>>) {\n    let nextStatus: TransitionIntermediateStatus = null;\n\n    if (prevProps !== this.props) {\n      const { status } = this.state;\n\n      if (this.props.in) {\n        if (status !== 'entering' && status !== 'entered') {\n          // The component is just entering, so set the next status as Entering\n          nextStatus = 'entering';\n        }\n      } else {\n        if (status === 'entering' || status === 'entered') {\n          // The component is not in the data anymore, so we need to do exit animation\n          // So, set the next status as Exiting\n          nextStatus = 'exiting';\n        }\n      }\n    }\n\n    this._updateStatus(nextStatus);\n  }\n\n  /**\n   * Lifecycle hook that gets called right before the component unmounts\n   */\n  componentWillUnmount() {\n    this._cancelNextCallback();\n  }\n\n  ////////////////////////////////////\n  // Component Life Cycle Hooks End //\n  ////////////////////////////////////\n\n  /**\n   * Renders the Transition component\n   *\n   * @param props The current props\n   * @returns The rendered component child\n   */\n  render(props?: RenderableProps<TransitionProps<M>>): ComponentChild {\n    return props?.children;\n  }\n\n  ////////////////////////////\n  // Private helper methods //\n  ////////////////////////////\n\n  /**\n   * Creates a wrapper callback function, which can be cancelled.\n   *\n   * @param callback The current callback function\n   * @returns The created cancellable callback\n   */\n  private _setNextCallback(callback: (...args: any) => void): CancellableFunction {\n    let active = true;\n\n    this._nextCallback = (...args: any[]) => {\n      if (active) {\n        active = false;\n        this._nextCallback = null;\n\n        callback(...args);\n      }\n    };\n\n    this._nextCallback.cancel = () => {\n      active = false;\n    };\n\n    return this._nextCallback;\n  }\n\n  /**\n   * Cancels the scheduled next callback\n   */\n  private _cancelNextCallback() {\n    this._nextCallback?.cancel?.();\n    this._nextCallback = null;\n  }\n\n  /**\n   * Updates the status of the component. Performs corresponding Transitions.\n   */\n  private _updateStatus(nextStatus: TransitionIntermediateStatus) {\n    if (nextStatus != null) {\n      this._cancelNextCallback();\n\n      if (nextStatus === 'entering') {\n        this._performEnter(this.base as Element); // In our component, base is always Element\n      } else {\n        this._performExit(this.base as Element); // In our component, base is always Element\n      }\n    }\n  }\n\n  /**\n   * Perform Entering transitions\n   *\n   * @param node The root DOM element of this component\n   */\n  private _performEnter(node?: Element) {\n    this.props.onEnter?.(node, this.props.metadata);\n\n    this.setState({ status: 'entering' }, () => {\n      this.props.onEntering?.(\n        node,\n        this._setNextCallback(() => {\n          this.setState({ status: 'entered' }, () => {\n            this.props.onEntered?.(node, this.props.metadata);\n          });\n        }),\n        this.props.metadata\n      );\n    });\n  }\n\n  /**\n   * Perform Exiting transitions\n   *\n   * @param node The root DOM element of this component\n   */\n  private _performExit(node?: Element) {\n    this.props.onExit?.(node, this.props.metadata);\n\n    this.setState({ status: 'exiting' }, () => {\n      this.props.onExiting?.(\n        node,\n        this._setNextCallback(() => {\n          this.setState({ status: 'exited' }, () => {\n            this.props.onExited?.(node, this.props.metadata);\n          });\n        }),\n        this.props.metadata\n      );\n    });\n  }\n}\n"],"names":["Transition","Component","constructor","props","appearStatus","super","in","this","_appearStatus","state","status","_nextCallback","componentDidMount","_updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","_cancelNextCallback","render","children","_setNextCallback","callback","active","args","cancel","_performEnter","base","_performExit","node","onEnter","metadata","setState","onEntering","onEntered","onExit","onExiting","onExited"],"mappings":"wDAoFM,MAAOA,UAA4BC,EAAAA,UAiBvC,WAAAC,CAAYC,GAGV,IAAIC,EAFJC,MAAMF,GAIJC,EADED,EAAMG,GACO,WAEA,KAGjBC,KAAKC,cAAgBJ,EACrBG,KAAKE,MAAQ,CAAEC,OAAQ,UACvBH,KAAKI,cAAgB,IACtB,CASD,iBAAAC,GACEL,KAAKM,cAAcN,KAAKC,cACzB,CAOD,kBAAAM,CAAmBC,GACjB,IAAIC,EAA2C,KAE/C,GAAID,IAAcR,KAAKJ,MAAO,CAC5B,MAAMO,OAAEA,GAAWH,KAAKE,MAEpBF,KAAKJ,MAAMG,GACE,aAAXI,GAAoC,YAAXA,IAE3BM,EAAa,YAGA,aAAXN,GAAoC,YAAXA,IAG3BM,EAAa,UAGlB,CAEDT,KAAKM,cAAcG,EACpB,CAKD,oBAAAC,GACEV,KAAKW,qBACN,CAYD,MAAAC,CAAOhB,GACL,OAAOA,GAAOiB,QACf,CAYO,gBAAAC,CAAiBC,GACvB,IAAIC,GAAS,EAeb,OAbAhB,KAAKI,cAAgB,IAAIa,KACnBD,IACFA,GAAS,EACThB,KAAKI,cAAgB,KAErBW,KAAYE,GACb,EAGHjB,KAAKI,cAAcc,OAAS,KAC1BF,GAAS,CAAK,EAGThB,KAAKI,aACb,CAKO,mBAAAO,GACNX,KAAKI,eAAec,WACpBlB,KAAKI,cAAgB,IACtB,CAKO,aAAAE,CAAcG,GACF,MAAdA,IACFT,KAAKW,sBAEc,aAAfF,EACFT,KAAKmB,cAAcnB,KAAKoB,MAExBpB,KAAKqB,aAAarB,KAAKoB,MAG5B,CAOO,aAAAD,CAAcG,GACpBtB,KAAKJ,MAAM2B,UAAUD,EAAMtB,KAAKJ,MAAM4B,UAEtCxB,KAAKyB,SAAS,CAAEtB,OAAQ,aAAc,KACpCH,KAAKJ,MAAM8B,aACTJ,EACAtB,KAAKc,kBAAiB,KACpBd,KAAKyB,SAAS,CAAEtB,OAAQ,YAAa,KACnCH,KAAKJ,MAAM+B,YAAYL,EAAMtB,KAAKJ,MAAM4B,SAAS,GACjD,IAEJxB,KAAKJ,MAAM4B,SACZ,GAEJ,CAOO,YAAAH,CAAaC,GACnBtB,KAAKJ,MAAMgC,SAASN,EAAMtB,KAAKJ,MAAM4B,UAErCxB,KAAKyB,SAAS,CAAEtB,OAAQ,YAAa,KACnCH,KAAKJ,MAAMiC,YACTP,EACAtB,KAAKc,kBAAiB,KACpBd,KAAKyB,SAAS,CAAEtB,OAAQ,WAAY,KAClCH,KAAKJ,MAAMkC,WAAWR,EAAMtB,KAAKJ,MAAM4B,SAAS,GAChD,IAEJxB,KAAKJ,MAAM4B,SACZ,GAEJ"}