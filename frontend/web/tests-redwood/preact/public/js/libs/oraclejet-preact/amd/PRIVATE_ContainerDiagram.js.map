{"version":3,"file":"PRIVATE_ContainerDiagram.js","sources":["../../src/PRIVATE_ContainerDiagram/utils/diagramUtils.ts","../../src/PRIVATE_ContainerDiagram/DiagramLabel.tsx","../../src/PRIVATE_ContainerDiagram/DiagramExpandCollapseButton.tsx","../../src/PRIVATE_ContainerDiagram/DiagramNodeElement.tsx","../../src/PRIVATE_ContainerDiagram/DiagramLinkElement.tsx","../../src/PRIVATE_ContainerDiagram/DiagramLabelLayer.tsx","../../src/PRIVATE_ContainerDiagram/DiagramLinkLayer.tsx","../../src/PRIVATE_ContainerDiagram/DiagramPromotedLinkElement.tsx","../../src/PRIVATE_ContainerDiagram/DiagramPromotedLinkLayer.tsx","../../src/PRIVATE_ContainerDiagram/DiagramNodeLayer.tsx","../../src/PRIVATE_ContainerDiagram/DiagramLayers.tsx","../../src/PRIVATE_ContainerDiagram/DiagramPanZoomContainer.tsx","../../src/PRIVATE_ContainerDiagram/utils/navUtils.ts","../../src/PRIVATE_ContainerDiagram/hooks/useDiagramNavigation.ts","../../src/PRIVATE_ContainerDiagram/hooks/useEvents.ts","../../src/PRIVATE_ContainerDiagram/hooks/useDiagramDatatip.ts","../../src/PRIVATE_ContainerDiagram/hooks/usePointerGesture.ts","../../src/PRIVATE_ContainerDiagram/utils/panUtils.ts","../../src/PRIVATE_ContainerDiagram/hooks/useDragPan.ts","../../src/PRIVATE_ContainerDiagram/hooks/useDrag.ts","../../src/PRIVATE_ContainerDiagram/utils/zoomUtils.ts","../../src/PRIVATE_ContainerDiagram/hooks/usePinch.ts","../../src/PRIVATE_ContainerDiagram/hooks/usePinchZoom.ts","../../src/PRIVATE_ContainerDiagram/hooks/usePanZoom.ts","../../src/PRIVATE_ContainerDiagram/hooks/useWheelZoom.ts","../../src/PRIVATE_ContainerDiagram/hooks/useWheel.ts","../../src/PRIVATE_ContainerDiagram/ContainerDiagramWithDimensions.tsx","../../src/PRIVATE_ContainerDiagram/hooks/useDiagramSelection.ts","../../src/PRIVATE_ContainerDiagram/hooks/useDiagramContextMenu.ts","../../src/PRIVATE_ContainerDiagram/utils/contextMenuUtils.ts","../../src/PRIVATE_ContainerDiagram/ContainerDiagram.tsx"],"sourcesContent":["import type {\n  Pan,\n  Zoom,\n  DiagramNodeData,\n  DiagramLinkData,\n  ItemInfo,\n  Bounds,\n  Position,\n  Dimensions,\n  DatatipContext,\n  DiagramLabelStyles,\n  DiagramLabelPosition,\n  DiagramLayoutOutput\n} from '../diagram.types';\nimport type { RefObject } from 'preact';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { Font, GetTextDimensionsType, TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { ComponentChildren } from 'preact';\nimport { Property } from 'csstype';\nimport { generateAriaLabel } from '#utils/UNSAFE_visUtils/accUtils';\n\nconst ZOOM_TO_FIT_PADDING = 20;\n/**\n * Returns the pan properties for the diagram.\n */\nexport function getPanProps(\n  props: Pan,\n  contentBounds: Bounds,\n  userDragMode: string | undefined,\n  isDeviceTouch: boolean\n) {\n  return {\n    panning: isDeviceTouch\n      ? userDragMode === 'pan' && props.panning\n        ? props.panning\n        : 'off'\n      : props.panning\n      ? props.panning\n      : 'off',\n    panDirection: props.panDirection ? props.panDirection : 'any',\n    centerX:\n      props.centerX !== undefined ? props.centerX : contentBounds.width / 2 + contentBounds.x,\n    centerY:\n      props.centerY !== undefined ? props.centerY : contentBounds.height / 2 + contentBounds.y,\n    onPan: props.onPan\n  };\n}\n\n/**\n * Returns the zoom properties for the diagram.\n */\nexport function getZoomProps(props: Zoom, width: number, height: number, contentBounds: Bounds) {\n  const zoomTofitZoom = getZoomToFitZoom(width, height, contentBounds);\n  const maxZoom = props.maxZoom || 1;\n  const minZoom = props.minZoom || Math.min(maxZoom, zoomTofitZoom);\n  const zoom = props.zoomValue ? props.zoomValue : zoomTofitZoom;\n  return {\n    zooming: props.zooming ? props.zooming : 'off',\n    // default value of 0 indicates zoom-to-fit level\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    // zoom value of 0 will default to zoom to fit\n    zoomValue: constrainZoom(zoom, minZoom, maxZoom),\n    onZoom: props.onZoom\n  };\n}\n\n/**\n * Constructs the json object to be passed into the layout function\n */\nexport function constructLayoutJSON<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(\n  nodeItems: Map<K1, D1>,\n  linkItems: Map<K2, D2>,\n  promotedLinks: DiagramLinkData<string, K1>[],\n  dimensions: Map<K1, Dimensions>,\n  width: number,\n  height: number,\n  nodeBounds: Map<K1, Bounds>,\n  zoom: number,\n  nodeIdToParentMap: Map<K1, K1>,\n  nodeBoundsRef: Map<K1, Bounds>,\n  rootRef?: RefObject<HTMLDivElement>,\n  getTextDimensions?: GetTextDimensionsType\n) {\n  const labelDims: Map<K1 | K2, TextDimensions> = new Map();\n  const nodeValues = Array.from(nodeItems.values());\n  const linkValues = Array.from(linkItems.values());\n  if (getTextDimensions) {\n    getLabelProps(nodeValues, linkValues, labelDims, getTextDimensions);\n  }\n\n  const linkKeys = Array.from(linkItems.keys());\n  for (const id of linkKeys) {\n    const item = linkItems.get(id as K2);\n    if (item && getTextDimensions && item.label) {\n      const label = item.label;\n      const fontProps = _getFontProps(item.labelStyle);\n      labelDims.set(id as K1 | K2, getTextDimensions(label, fontProps));\n    }\n  }\n  const getLabelDimensions = function (data: D1 | D2) {\n    return labelDims.get(data.id);\n  };\n  const getNodeDimensions = function (data: D1) {\n    return dimensions.get(data.id);\n  };\n  const getRelativeNodeBounds = function (id: K1, containerId?: K1) {\n    const absPos = getAbsoluteItemPosition(id, containerId, rootRef);\n    const bounds = nodeBounds.get(id)!;\n    if (absPos && bounds) {\n      return {\n        x: absPos.x / zoom,\n        y: absPos.y / zoom,\n        width: bounds.width,\n        height: bounds.height\n      };\n    } else {\n      return undefined;\n    }\n  };\n\n  const getContainerId = function (startNode: K1, endNode: K1) {\n    return getCommonAncestorId(startNode, endNode, nodeIdToParentMap);\n  };\n\n  const getNodeBounds = function (data: D1) {\n    const id = data.id;\n    const linkBounds = nodeBoundsRef.get(id);\n    const bounds = nodeBounds.get(id)!;\n    if (linkBounds) {\n      if (rootRef && rootRef.current) {\n        const childElement = rootRef.current.querySelector(`[data-oj-child=${id}]`);\n        const nodeContainer = rootRef.current.querySelector(`[data-oj-private-node=${id}]`);\n        const dims = nodeBounds.get(id);\n        if (childElement && nodeContainer && dims) {\n          const childBoundingRect = normalizeBounds(childElement.getBoundingClientRect(), zoom);\n          const nodeBoundingRect = normalizeBounds(nodeContainer.getBoundingClientRect(), zoom);\n          const extraWidth = Math.max(\n            childBoundingRect.x -\n              nodeBoundingRect.x +\n              (linkBounds.width + linkBounds.x) -\n              nodeBoundingRect.width,\n            0\n          );\n          const extraHeight = Math.max(\n            childBoundingRect.y -\n              nodeBoundingRect.y +\n              (linkBounds.height + linkBounds.y) -\n              nodeBoundingRect.height,\n            0\n          );\n          return {\n            x: childBoundingRect.x - nodeBoundingRect.x + linkBounds.x,\n            y: childBoundingRect.y - nodeBoundingRect.y + linkBounds.y,\n            width: nodeBoundingRect.width + extraWidth,\n            height: nodeBoundingRect.height + extraHeight\n          };\n        }\n      }\n    } else if (bounds) {\n      return {\n        x: 0,\n        y: 0,\n        width: bounds.width,\n        height: bounds.height\n      };\n    }\n    return undefined;\n  };\n\n  const getPromotedLinks = function () {\n    return promotedLinks;\n  };\n\n  return {\n    layoutJSON: {\n      getNodeDimensions: getNodeDimensions,\n      getLabelDimensions: getLabelDimensions,\n      getContainerId,\n      getNodeBounds,\n      getRelativeNodeBounds,\n      getPromotedLinks,\n      componentSize: {\n        width: width,\n        height: height\n      }\n    },\n    labelDims: labelDims\n  };\n}\n\nfunction normalizeBounds(bounds: Bounds, zoom: number) {\n  return {\n    x: bounds.x / zoom,\n    y: bounds.y / zoom,\n    width: bounds.width / zoom,\n    height: bounds.height / zoom\n  };\n}\n\nexport function getAbsoluteLinkBounds<K1, K2>(\n  itemId: K1 | K2,\n  referenceId: K1 | undefined,\n  bounds: Map<K1 | K2, Bounds | Dimensions>,\n  zoom: number,\n  rootRef?: RefObject<HTMLDivElement>\n) {\n  if (rootRef && rootRef.current) {\n    const linkElement = rootRef.current.querySelector(`[data-oj-private-link=${itemId}]`);\n    let nodeContainer;\n    if (referenceId) {\n      nodeContainer = rootRef.current.querySelector(`[data-oj-private-node=${referenceId}]`);\n    }\n    const dims = bounds.get(itemId);\n    if (linkElement && nodeContainer && dims) {\n      const linkBoundingRect = normalizeBounds(linkElement.getBoundingClientRect(), zoom);\n      const diagramBoundingRect = normalizeBounds(nodeContainer.getBoundingClientRect(), zoom);\n      return {\n        x: linkBoundingRect.x - diagramBoundingRect.x,\n        y: linkBoundingRect.y - diagramBoundingRect.y,\n        width: dims.width,\n        height: dims.height\n      };\n    }\n  }\n  return null;\n}\n\nexport function getBounds<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(\n  nodes: D1[],\n  links: D2[],\n  promotedLinks: DiagramLinkData<string, K1>[],\n  nodeBounds: Map<K1, Bounds>,\n  linkDimensions: Map<K2, Dimensions>,\n  promotedLinkDimensions: Map<string, Dimensions>,\n  zoom: number,\n  rootRef?: RefObject<HTMLDivElement>\n) {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let id;\n  let topId;\n  let leftId;\n  for (let i = 0; i < nodes.length; i++) {\n    id = nodes[i].id;\n    const bounds = nodeBounds.get(id);\n    if (bounds) {\n      if (minX > bounds.x) {\n        minX = bounds.x;\n        leftId = id;\n      }\n      if (minY > bounds.y) {\n        minY = bounds.y;\n        topId = id;\n      }\n      if (maxX < bounds.x + bounds.width) {\n        maxX = bounds.x + bounds.width;\n      }\n      if (maxY < bounds.y + bounds.height) {\n        maxY = bounds.y + bounds.height;\n      }\n    }\n  }\n  const nodeMinX = minX;\n  const nodeMinY = minY;\n  let linkMinX = Infinity;\n  let linkMinY = Infinity;\n  let linkMaxX = -Infinity;\n  let linkMaxY = -Infinity;\n\n  for (let i = 0; i < links.length; i++) {\n    id = links[i].id;\n    //Top and left bounds are relative to the current most top and left nodes\n    const topBounds = getAbsoluteLinkBounds(id, topId, linkDimensions, zoom, rootRef);\n    const leftBounds = getAbsoluteLinkBounds(id, leftId, linkDimensions, zoom, rootRef);\n    if (leftBounds) {\n      if (leftBounds.x < linkMinX) {\n        linkMinX = leftBounds.x;\n      }\n      if (linkMaxX < leftBounds.x + leftBounds.width) {\n        linkMaxX = leftBounds.x + leftBounds.width;\n      }\n    }\n    if (topBounds) {\n      if (topBounds.y < linkMinY) {\n        linkMinY = topBounds.y;\n      }\n      if (linkMaxY < topBounds.y + topBounds.height) {\n        linkMaxY = topBounds.y + topBounds.height;\n      }\n    }\n  }\n\n  for (let i = 0; i < promotedLinks.length; i++) {\n    id = promotedLinks[i].id;\n    //Top and left bounds are relative to the current most top and left nodes\n    const topBounds = getAbsoluteLinkBounds(id, topId, promotedLinkDimensions, zoom, rootRef);\n    const leftBounds = getAbsoluteLinkBounds(id, leftId, promotedLinkDimensions, zoom, rootRef);\n    if (leftBounds) {\n      if (leftBounds.x < linkMinX) {\n        linkMinX = leftBounds.x;\n      }\n      if (linkMaxX < leftBounds.x + leftBounds.width) {\n        linkMaxX = leftBounds.x + leftBounds.width;\n      }\n    }\n    if (topBounds) {\n      if (topBounds.y < linkMinY) {\n        linkMinY = topBounds.y;\n      }\n      if (linkMaxY < topBounds.y + topBounds.height) {\n        linkMaxY = topBounds.y + topBounds.height;\n      }\n    }\n  }\n  return {\n    minX: nodeMinX,\n    minY: nodeMinY,\n    contentWidth: maxX - minX,\n    contentHeight: maxY - minY,\n    linkBounds:\n      linkMinX !== Infinity\n        ? { x: linkMinX, y: linkMinY, width: linkMaxX - linkMinX, height: linkMaxY - linkMinY }\n        : undefined\n  };\n}\n\nfunction getAbsoluteItemPosition<K1>(\n  nodeId: K1,\n  containerId?: K1,\n  rootRef?: RefObject<HTMLDivElement>\n) {\n  if (rootRef && rootRef.current) {\n    const nodeElement = rootRef.current.querySelector(`[data-oj-private-node=${nodeId}]`);\n    let nodeContainer;\n    if (containerId) {\n      nodeContainer = rootRef.current.querySelector(`[data-oj-child=${containerId}]`);\n    } else {\n      nodeContainer = rootRef.current.querySelector('[data-node-container]');\n    }\n    if (nodeElement && nodeContainer) {\n      const nodeBoundingRect = nodeElement.getBoundingClientRect();\n      const diagramBoundingRect = nodeContainer.getBoundingClientRect();\n      return {\n        x: nodeBoundingRect.x - diagramBoundingRect.x,\n        y: nodeBoundingRect.y - diagramBoundingRect.y\n      };\n    }\n  }\n  return null;\n}\n\nfunction getLabelProps<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramNodeData<K2, K1>\n>(\n  nodeItems: D1[],\n  linkItems: D2[],\n  labelDims: Map<K1 | K2, TextDimensions>,\n  getTextDimensions: GetTextDimensionsType\n) {\n  nodeItems.forEach((value) => {\n    if (value.children) {\n      getNodeLabelProps<K1, K2, D1>(value.children, labelDims, getTextDimensions);\n    }\n    if (value.label) {\n      const label = value.label;\n      const fontProps = _getFontProps(value.labelStyle);\n      labelDims.set(value.id as K1, getTextDimensions(label, fontProps));\n    }\n  });\n  linkItems.forEach((value) => {\n    if (value.label) {\n      const label = value.label;\n      const fontProps = _getFontProps(value.labelStyle);\n      labelDims.set(value.id as K2, getTextDimensions(label, fontProps));\n    }\n  });\n}\n\nfunction getNodeLabelProps<K1, K2, D1 extends DiagramNodeData<K1, D1>>(\n  nodeItems: D1[],\n  labelDims: Map<K1 | K2, TextDimensions>,\n  getTextDimensions: GetTextDimensionsType\n) {\n  nodeItems.forEach((value) => {\n    if (value.children) {\n      getNodeLabelProps<K1, K2, D1>(value.children, labelDims, getTextDimensions);\n    }\n    if (value.label) {\n      const label = value.label;\n      const fontProps = _getFontProps(value.labelStyle);\n      labelDims.set(value.id as K1, getTextDimensions(label, fontProps));\n    }\n  });\n}\n\n/**\n * Deconstructs the output of the layout function\n */\nexport function deconstructLayoutJSON<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(layoutJSON: DiagramLayoutOutput<K1, K2>, nodeData: D1[], linkData: D2[]) {\n  //const nodes = layoutJSON.nodes;\n  const links = layoutJSON.links;\n  //const promotedLinks = layoutJSON.promotedLinks;\n  const positions: Map<K1, Position> = new Map();\n  const nodeLabelPos: Map<K1, DiagramLabelPosition> = new Map();\n  const linkLabelPos: Map<K2, DiagramLabelPosition> = new Map();\n  //let hasNodeLabels = false;\n  // hasLinkLabels = false;\n  let link;\n  findPoints(layoutJSON, nodeData, positions, nodeLabelPos);\n  if (links) {\n    for (let i = 0; i < linkData.length; i++) {\n      link = links[linkData[i].id];\n      if (link && link.label) linkLabelPos.set(linkData[i].id, link.label);\n    }\n  }\n  return {\n    nodePoints: positions,\n    nodeLabelPos: nodeLabelPos,\n    linkLabelPos: linkLabelPos\n  };\n}\n\nfunction findPoints<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>\n>(\n  output: DiagramLayoutOutput<K1, K2>,\n  nodeData: D1[],\n  positions: Map<K1, Position>,\n  nodeLabelPos: Map<K1, DiagramLabelPosition>\n) {\n  const nodes = output.nodes;\n  let node;\n  if (nodes) {\n    for (let i = 0; i < nodeData.length; i++) {\n      const data = nodeData[i];\n      const id = data.id;\n      if (data.children) {\n        findPoints(output, data.children, positions, nodeLabelPos);\n      }\n      node = nodes[id];\n      if (node) {\n        positions.set(id, node.position);\n        if (node.label) {\n          nodeLabelPos.set(id, node.label);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Merges the node points into the dimensions\n */\nexport function mergeDimensions<K1>(\n  dimensions: Map<K1, Dimensions>,\n  nodePoints: Map<K1, Position>\n) {\n  const newBounds: Map<K1, Bounds> = new Map();\n  dimensions.forEach((value, key) => {\n    const point = nodePoints.get(key)!;\n    if (point) {\n      newBounds.set(key, { x: point.x, y: point.y, width: value.width, height: value.height });\n    }\n  });\n  return newBounds;\n}\n\n/**\n * Deep equality check for whether two arrays of bounds are the same\n */\nexport function isEqualBounds<K1>(bounds1: Map<K1, Bounds>, bounds2: Map<K1, Bounds>) {\n  if (bounds1.size !== bounds2.size) return false;\n  let equal = true;\n  bounds1.forEach((value, key) => {\n    const b2Value = bounds2.get(key);\n    if (!b2Value) equal = false;\n    else if (\n      Math.abs(value.x - b2Value.x) > 0.5 ||\n      Math.abs(value.y - b2Value.y) > 0.5 ||\n      Math.abs(value.width - b2Value.width) > 0.5 ||\n      Math.abs(value.height - b2Value.height) > 0.5\n    )\n      equal = false;\n  });\n  return equal;\n}\n\n/**\n * Deep equality check for whether two arrays of bounds are the same\n */\nexport function isEqualLabelBounds(bounds1: Bounds, bounds2: Bounds) {\n  return (\n    bounds1.x === bounds2.x &&\n    bounds1.y === bounds2.y &&\n    bounds1.width === bounds2.width &&\n    bounds1.height === bounds2.height\n  );\n}\n\n/**\n * Returns the text for the diagram datatip.\n */\nexport function getDatatipContent<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(\n  nodesMap: Map<K1, D1>,\n  linksMap: Map<K2, D2>,\n  focusedItem?: ItemInfo<K1, K2>,\n  hoveredItem?: ItemInfo<K1, K2>,\n  datatip?: (detail: DatatipContext<D1, D2>) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  }\n) {\n  let itemInfo;\n  const isPointerActive = hoveredItem?.isCurrent;\n  if (isPointerActive && hoveredItem.id != null) {\n    itemInfo = hoveredItem;\n  }\n  if (focusedItem && focusedItem.isCurrent) {\n    itemInfo = focusedItem;\n  }\n  if (itemInfo && datatip) {\n    return datatip(\n      itemInfo.type === 'node'\n        ? { data: nodesMap.get(itemInfo.id as K1) as D1, type: 'node' }\n        : { data: linksMap.get(itemInfo.id as K2) as D2, type: 'link' }\n    );\n  }\n  if (itemInfo) {\n    const text = (\n      itemInfo.type === 'node' ? nodesMap.get(itemInfo.id as K1) : linksMap.get(itemInfo.id as K2)\n    )?.accessibleLabel;\n    return {\n      content: text\n    };\n  }\n  return;\n}\n\n/**\n * Creates a map with key id and value node or link data\n */\nexport function createLinksMap<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  items: (D2 | DiagramLinkData<string, K1>)[]\n) {\n  const itemIdToDataMap = new Map();\n  const itemIdToIndexMap = new Map();\n  const itemIndexToIdMap = new Map();\n  const itemIdToParentMap = new Map();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    itemIdToDataMap.set(item.id, item);\n    itemIdToIndexMap.set(item.id, i);\n    itemIndexToIdMap.set(i, item.id);\n  }\n  return {\n    itemIdToDataMap,\n    itemIdToIndexMap,\n    itemIndexToIdMap,\n    itemIdToParentMap\n  };\n}\n\n/**\n * Creates a map with key id and value node or link data\n */\nexport function createPromotedLinksMap<K1>(items: DiagramLinkData<string, K1>[]) {\n  const itemIdToDataMap = new Map();\n  const itemIdToIndexMap = new Map();\n  const itemIndexToIdMap = new Map();\n  const itemIdToParentMap = new Map();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    itemIdToDataMap.set(item.id, item);\n    itemIdToIndexMap.set(item.id, i);\n    itemIndexToIdMap.set(i, item.id);\n  }\n  return {\n    itemIdToDataMap,\n    itemIdToIndexMap,\n    itemIndexToIdMap,\n    itemIdToParentMap\n  };\n}\n\n/**\n * Creates a map with key id and value node or link data\n */\nexport function createNodesMap<K1, D1 extends DiagramNodeData<K1, D1>>(items: D1[]) {\n  const itemIdToDataMap = new Map();\n  const itemIdToIndexMap = new Map();\n  const itemIndexToIdMap = new Map();\n  const itemIdToParentMap = new Map();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const index = String(i);\n    itemIdToDataMap.set(item.id, item);\n    itemIdToIndexMap.set(item.id, index);\n    itemIndexToIdMap.set(index, item.id);\n    if ((item as D1).children) {\n      _createItemMap<K1, D1>(\n        (item as D1).children!,\n        itemIdToDataMap,\n        itemIdToIndexMap,\n        itemIndexToIdMap,\n        itemIdToParentMap,\n        item.id as K1,\n        String(i)\n      );\n    }\n  }\n  return {\n    itemIdToDataMap,\n    itemIdToIndexMap,\n    itemIndexToIdMap,\n    itemIdToParentMap\n  };\n}\n\nfunction _createItemMap<K1, D1 extends DiagramNodeData<K1, D1>>(\n  items: D1[],\n  itemIdToDataMap: Map<K1, D1>,\n  itemIdToIndexMap: Map<K1, string>,\n  itemIndexToIdMap: Map<string, K1>,\n  itemIdToParentMap: Map<K1, K1>,\n  parentId: K1,\n  parentIndex: string\n) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const index = `${parentIndex}_${i}`;\n    itemIdToDataMap.set(item.id, item);\n    itemIdToIndexMap.set(item.id, index);\n    itemIndexToIdMap.set(index, item.id);\n    itemIdToParentMap.set(item.id, parentId);\n    if (item.children) {\n      _createItemMap(\n        item.children,\n        itemIdToDataMap,\n        itemIdToIndexMap,\n        itemIndexToIdMap,\n        itemIdToParentMap,\n        item.id,\n        index\n      );\n    }\n  }\n}\n\n/**\n * Filter out links with no start or end nodes\n */\nexport function filterLinksWithNoEndNodes<K2, K1, D1, D2 extends DiagramLinkData<K2, K1>>(\n  links: D2[],\n  nodesMap: Map<K1, D1>\n) {\n  const newLinks: D2[] = [];\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i];\n    if (nodesMap.get(link.startNode) && nodesMap.get(link.endNode)) {\n      newLinks.push(link);\n    }\n  }\n  return newLinks;\n}\n\n/**\n * Pulls out the dimensions from an array of bounds\n */\nexport function getDimensionsFromBounds<K1>(bounds: Map<K1, Bounds>) {\n  const dims: Map<K1, Dimensions> = new Map();\n  bounds.forEach((value, key) => {\n    dims.set(key, { width: value.width, height: value.height });\n  });\n  return dims;\n}\n\n/**\n * Returns true if event is a selection event\n */\nexport function isSelectionEvent(event: KeyboardEvent): boolean {\n  if (event.altKey && (event.key === '≥' || event.key === '≤')) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns the center position of the node or link\n * For links, draws a straight line between the centers of the start/end node\n * and returns the center of that line\n */\nexport function getFocusedItemBounds<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  focusedItemInfo: ItemInfo<K1, K2>,\n  bounds: Map<K1, Bounds>,\n  links: D2[],\n  linkIdToIndexMap: Map<K2, number>,\n  rootRef?: RefObject<HTMLDivElement>\n) {\n  if (focusedItemInfo.type === 'node') {\n    // Return the first element if cannot find the Node index\n    const position = getAbsoluteItemPosition(focusedItemInfo.id as K1, undefined, rootRef);\n    const nodeBounds = bounds.get(focusedItemInfo.id as K1) || bounds.values().next().value!;\n    return {\n      x: position ? position.x : nodeBounds.x,\n      y: position ? position.y : nodeBounds.y,\n      width: nodeBounds.width,\n      height: nodeBounds.height\n    };\n  } else {\n    // Center of a straight line between start/end node centers\n    const link = links[linkIdToIndexMap.get(focusedItemInfo.id as K2) || 0];\n    const startNB = bounds.get(link.startNode) || bounds.values().next().value!;\n    const endNB = bounds.get(link.endNode) || bounds.values().next().value!;\n    const startPosition = getAbsoluteItemPosition(link.startNode, undefined, rootRef)!;\n    const endPosition = getAbsoluteItemPosition(link.endNode, undefined, rootRef)!;\n    const startNCenter = {\n      x: startPosition.x + startNB.width / 2,\n      y: startPosition.y + startNB.height / 2\n    };\n    const endNCenter = { x: endPosition.x + endNB.width / 2, y: endPosition.y + endNB.height / 2 };\n\n    const minX = Math.min(startNCenter.x, endNCenter.x);\n    const minY = Math.min(startNCenter.y, endNCenter.y);\n    return {\n      x: minX,\n      y: minY,\n      width: Math.abs(startNCenter.x - endNCenter.x),\n      height: Math.abs(startNCenter.y - endNCenter.y)\n    };\n  }\n}\n/**\n * Combines the node and link ids into one array\n */\nexport function combineIds<K1, K2>(nodeIds?: K1[], linkIds?: K2[]) {\n  const combinedIds: (K1 | K2)[] = [];\n  if (nodeIds) {\n    for (let i = 0; i < nodeIds.length; i++) {\n      combinedIds.push(nodeIds[i]);\n    }\n  }\n  if (linkIds) {\n    for (let i = 0; i < linkIds.length; i++) {\n      combinedIds.push(linkIds[i]);\n    }\n  }\n  return combinedIds;\n}\n\n/**\n * Returns the bounds of the diagram content\n */\nexport function getContentBounds<K1>(nodeBounds: Map<K1, Bounds>, labelBounds?: Bounds): Bounds {\n  if (nodeBounds.size === 0) return { x: 0, width: Infinity, y: 0, height: Infinity };\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let dims;\n  nodeBounds.forEach((value) => {\n    dims = value;\n    minX = dims.x < minX ? dims.x : minX;\n    minY = dims.y < minY ? dims.y : minY;\n    maxX = dims.x + dims.width > maxX ? dims.x + dims.width : maxX;\n    maxY = dims.y + dims.height > maxY ? dims.y + dims.height : maxY;\n  });\n  if (labelBounds) {\n    minX = labelBounds.x < minX ? labelBounds.x : minX;\n    minY = labelBounds.y < minY ? labelBounds.y : minY;\n    maxX = labelBounds.x + labelBounds.width > maxX ? labelBounds.x + labelBounds.width : maxX;\n    maxY = labelBounds.y + labelBounds.height > maxY ? labelBounds.y + labelBounds.height : maxY;\n  }\n  return { x: minX, width: maxX - minX, y: minY, height: maxY - minY };\n}\n\n/**\n * Returns the label bounds\n */\nexport function getAllLabelBounds<K1, K2, D1 extends DiagramNodeData<K1, D1>>(\n  labelDims: Map<K1 | K2, TextDimensions>,\n  nodeLabelPos: Map<K1, DiagramLabelPosition> = new Map(),\n  //linkLabelPos: Map<K2, DiagramLabelPosition> = new Map(),\n  isRTL: boolean\n) {\n  if (nodeLabelPos.size === 0) return undefined;\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let dims;\n\n  nodeLabelPos.forEach((value, key) => {\n    dims = getLabelBounds(value, labelDims.get(key)!, isRTL);\n    minX = dims.x < minX ? dims.x : minX;\n    minY = dims.y < minY ? dims.y : minY;\n    maxX = dims.x + dims.width > maxX ? dims.x + dims.width : maxX;\n    maxY = dims.y + dims.height > maxY ? dims.y + dims.height : maxY;\n  });\n  /*linkLabelPos.forEach((value, key)=> {\n    dims = getLabelBounds(value, labelDims.get(key)!, isRTL);\n    minX = dims.x < minX ? dims.x : minX;\n    minY = dims.y < minY ? dims.y : minY;\n    maxX = dims.x + dims.width > maxX ? dims.x + dims.width : maxX;\n    maxY = dims.y + dims.height > maxY ? dims.y + dims.height : maxY;\n  })*/\n\n  return { x: minX, width: maxX - minX, y: minY, height: maxY - minY };\n}\n\nfunction getLabelBounds(label: DiagramLabelPosition, dims: TextDimensions, isRTL: boolean) {\n  const labelPos = getLabelPosition(dims, label, isRTL);\n  const isRotating = label.rotationAngle;\n  if (!isRotating) {\n    return { x: labelPos.x, y: labelPos.y, width: dims.width, height: dims.height };\n  } else {\n    // Find the 4 corners of the label bounds relative to the rotation point\n    const rotationPoint = label.rotationPoint\n      ? label.rotationPoint\n      : { x: dims.width / 2, y: dims.height / 2 };\n    const angle = label.rotationAngle!;\n    const topLeft = getCoordsRelToRotPoint({ x: 0, y: 0 }, rotationPoint);\n    const topRight = getCoordsRelToRotPoint({ x: dims.width, y: 0 }, rotationPoint);\n    const bottomLeft = getCoordsRelToRotPoint({ x: 0, y: dims.height }, rotationPoint);\n    const bottomRight = getCoordsRelToRotPoint({ x: dims.width, y: dims.height }, rotationPoint);\n    const rotTopLeft = rotatePoint(topLeft, angle);\n    const rotBotLeft = rotatePoint(bottomLeft, angle);\n    const rotTopRight = rotatePoint(topRight, angle);\n    const rotBotRight = rotatePoint(bottomRight, angle);\n    const points = [rotTopLeft, rotBotLeft, rotTopRight, rotBotRight].map((pos: Position) => {\n      return {\n        x: pos.x + labelPos.x + rotationPoint.x,\n        y: pos.y + labelPos.y + rotationPoint.y\n      };\n    });\n    return getBoundsFromPoints(points);\n  }\n}\n\nfunction getCoordsRelToRotPoint(labelPoint: Position, rotPoint: Position) {\n  return { x: labelPoint.x - rotPoint.x, y: labelPoint.y - rotPoint.y };\n}\n\nfunction rotatePoint(pos: Position, angle: number) {\n  return {\n    x: pos.x * Math.cos(angle) - pos.y * Math.sin(angle),\n    y: pos.x * Math.sin(angle) + pos.y * Math.cos(angle)\n  };\n}\n\nfunction getBoundsFromPoints(points: Position[]) {\n  let minX = points[0].x;\n  let minY = points[0].y;\n  let maxX = points[0].x;\n  let maxY = points[0].y;\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    if (point.x < minX) minX = point.x;\n    else if (point.x > maxX) maxX = point.x;\n    if (point.y < minY) minY = point.y;\n    else if (point.y > maxY) maxY = point.y;\n  }\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\n/**\n * Returns the position of the label\n * @param dimensions\n * @param positionProps\n * @returns position of the label\n */\nexport function getLabelPosition(\n  dimensions: TextDimensions,\n  positionProps: DiagramLabelPosition,\n  isRTL: boolean\n) {\n  const position = positionProps.position;\n  const hAlign = positionProps.hAlign ? positionProps.hAlign : isRTL ? 'right' : 'left';\n  const vAlign = positionProps.vAlign;\n  let x, y;\n  if (hAlign === 'center') {\n    x = position.x - dimensions.width / 2;\n  } else if (hAlign === 'right') {\n    x = position.x - dimensions.width;\n  } else {\n    x = position.x;\n  }\n\n  if (vAlign === 'middle') {\n    y = position.y - dimensions.height / 2;\n  } else if (vAlign === 'bottom') {\n    y = position.y - dimensions.height;\n  } else if (vAlign === 'baseline') {\n    y = position.y + dimensions.y;\n  } else {\n    y = position.y;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\n\n/**\n * Converts centerX,Y coordinates to panX,Y coordinates\n */\nexport function centerXYToPanXY(\n  centerX: number,\n  centerY: number,\n  zoom: number,\n  width: number,\n  height: number\n) {\n  return {\n    panX: width / 2 - centerX * zoom,\n    panY: height / 2 - centerY * zoom\n  };\n}\n/**\n * Converts panX,Y coordinates to centerX,Y coordinates\n */\nexport function panXYToCenterXY(\n  panX: number,\n  panY: number,\n  zoom: number,\n  width: number,\n  height: number\n) {\n  return {\n    centerX: (width / 2 - panX) / zoom,\n    centerY: (height / 2 - panY) / zoom\n  };\n}\n\n/**\n * Compares if two ItemInfo are equal\n */\nexport function isEqualItem<K1, K2>(item1?: ItemInfo<K1, K2>, item2?: ItemInfo<K1, K2>) {\n  return item1?.id === item2?.id && item1?.type === item2?.type;\n}\n\n/**\n * Returns the item info of the data-oj-node or data-oj-link attribute for a given element.\n */\nexport function getNavigableInfo<K1, K2>(\n  element: HTMLElement,\n  rootElementRef?: RefObject<HTMLDivElement>\n): ItemInfo<K1, K2> {\n  let type;\n  let elem = element;\n  let navigableId;\n  while (!navigableId) {\n    navigableId = elem.dataset['ojPrivateNode'];\n    if (navigableId) {\n      type = 'node';\n    } else {\n      navigableId = elem.dataset['ojPrivateLink'];\n      type = 'link';\n    }\n    if (!navigableId) {\n      if (elem.parentElement && elem.parentElement !== rootElementRef?.current) {\n        elem = elem.parentElement;\n      } else {\n        break;\n      }\n    }\n  }\n  return {\n    id: navigableId as K1 | K2,\n    type: type\n  } as ItemInfo<K1, K2>;\n}\n\n/**\n * Returns the item info of the data-oj-node or data-oj-link attribute for a given element.\n */\nexport function expCollapseButtonId<K1>(\n  element: HTMLElement,\n  rootElementRef?: RefObject<HTMLDivElement>\n): K1 | undefined {\n  let elem = element;\n  let id;\n  while (!id) {\n    id = elem.dataset['ojButton'] as K1;\n    if (!id) {\n      if (\n        elem.parentElement &&\n        !elem.parentElement.dataset['ojPrivateNode'] &&\n        elem.parentElement !== rootElementRef?.current\n      ) {\n        elem = elem.parentElement;\n      } else {\n        break;\n      }\n    }\n  }\n  return id;\n}\n\n/**\n * Returns the id of the focused item.\n */\nexport function getFocusedItem<K1, K2>(\n  focusedItemInfo: ItemInfo<K1, K2>,\n  hoveredItemInfo?: ItemInfo<K1, K2>\n) {\n  let focused;\n  if (focusedItemInfo.isCurrent && focusedItemInfo.isFocusVisible) {\n    focused = focusedItemInfo.id;\n  } else if (hoveredItemInfo?.isCurrent) {\n    focused = hoveredItemInfo.id;\n  }\n  return focused;\n}\n\n/**\n * Returns the aria label\n */\nexport function getItemAriaLabel(\n  translations: BundleType,\n  supportsSelection: boolean,\n  isSelected?: boolean,\n  accessibleLabel?: string\n) {\n  return generateAriaLabel(translations, accessibleLabel || '', {\n    isSelected: !supportsSelection ? undefined : isSelected\n  });\n}\n\n/**\n * Returns the zoom to fit zoom level\n */\nexport function getZoomToFitZoom(width: number, height: number, contentBounds: Bounds) {\n  const zoomX = (width - 2 * ZOOM_TO_FIT_PADDING) / contentBounds.width;\n  const zoomY = (height - 2 * ZOOM_TO_FIT_PADDING) / contentBounds.height;\n  return Math.min(zoomX, zoomY);\n}\n\n/**\n * Constrains the zoom level\n */\nfunction constrainZoom(zoom: number, minZoom: number, maxZoom: number) {\n  let newZoom = Math.max(minZoom, zoom);\n  newZoom = Math.min(maxZoom, newZoom);\n  return newZoom;\n}\n\n/**\n * Returns the font props for a node or link\n */\nfunction _getFontProps(styles?: DiagramLabelStyles) {\n  const fontProps: Font = {};\n  if (!styles) return fontProps;\n  if (styles.fontFamily) fontProps.fontFamily = styles.fontFamily;\n  if (styles.fontSize) fontProps.fontSize = styles.fontSize;\n  if (styles.fontStyle) fontProps.fontStyle = styles.fontStyle;\n  if (styles.fontWeight) fontProps.fontWeight = styles.fontWeight;\n  return fontProps;\n}\n\n/**\n * Returns the panX, panY, and zoom when zooming and centering an item\n */\nexport function zoomAndCenterItemFromInfo<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  info: ItemInfo<K1, K2>,\n  linkIdToDataMap: Map<K2, D2>,\n  bounds: Map<K1, Bounds>,\n  width: number,\n  height: number,\n  maxZoom: number\n) {\n  const type = info.type;\n  let totalBounds;\n  if (type === 'node') {\n    totalBounds = bounds.get(info.id as K1)!;\n  } else {\n    const link = linkIdToDataMap.get(info.id as K2)!;\n    const startNodeBounds = bounds.get(link.startNode)!;\n    const endNodeBounds = bounds.get(link.endNode)!;\n    const minX = Math.min(startNodeBounds.x, endNodeBounds.x);\n    const minY = Math.min(startNodeBounds.y, endNodeBounds.y);\n    const maxX = Math.max(\n      startNodeBounds.x + startNodeBounds.width,\n      endNodeBounds.x + startNodeBounds.width\n    );\n    const maxY = Math.max(\n      startNodeBounds.y + startNodeBounds.height,\n      endNodeBounds.y + endNodeBounds.height\n    );\n    totalBounds = { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n  }\n  return getPanZoomToCenterNode(totalBounds, maxZoom, width, height);\n}\n\n/**\n * Returns the pan and zoom values in order\n * to center a node or link\n */\nfunction getPanZoomToCenterNode(bounds: Bounds, maxZoom: number, width: number, height: number) {\n  const zoomX = (width - 2 * ZOOM_TO_FIT_PADDING) / bounds.width;\n  const zoomY = (height - 2 * ZOOM_TO_FIT_PADDING) / bounds.height;\n  const zoom = Math.min(zoomX, zoomY, maxZoom);\n  const cX = bounds.width / 2 + bounds.x;\n  const cY = bounds.height / 2 + bounds.y;\n  return { centerX: cX, centerY: cY, zoom: zoom };\n}\n\n/**\n * Returns whether the node is a leaf node\n */\n\nexport function isLeafNode<K1, D1 extends DiagramNodeData<K1, D1>>(nodeData: D1) {\n  return !nodeData.children;\n}\n\nexport function isContainerReady<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(\n  nodeData: D1,\n  nodeBounds: Map<K1, Bounds>,\n  links: D2[],\n  promotedLinks: DiagramLinkData<string, K1>[],\n  linkDimensions: Map<K2, Dimensions>,\n  promotedLinkDimensions: Map<string, Dimensions>\n) {\n  const children = nodeData.children!;\n  for (let i = 0; i < children?.length; i++) {\n    const child = children[i].id;\n    if (!nodeBounds.get(child)) {\n      return false;\n    }\n  }\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i].id;\n    const linkDims = linkDimensions.get(link);\n    if (!linkDims || linkDims.width === 0 || linkDims.height === 0) {\n      return false;\n    }\n  }\n  for (let i = 0; i < promotedLinks.length; i++) {\n    const link = promotedLinks[i].id;\n    const linkDims = promotedLinkDimensions.get(link);\n    if (!linkDims || linkDims.width === 0 || linkDims.height === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getLinkData<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  links: K2[],\n  linkData: D2[]\n) {\n  const data: D2[] = [];\n  linkData.forEach((value) => {\n    if (links.includes(value.id)) {\n      data.push(value);\n    }\n  });\n  return data;\n}\n\nfunction getCommonAncestorId<K1>(startId: K1, endId: K1, nodeIdToParentMap: Map<K1, K1>) {\n  const startAnc = _getAncestorIds(startId, nodeIdToParentMap);\n  const endAnc = _getAncestorIds(endId, nodeIdToParentMap);\n  for (let i = 0; i < startAnc.length; i++) {\n    if (endAnc.indexOf(startAnc[i]) > -1) {\n      return startAnc[i];\n    }\n  }\n  return undefined;\n}\n\nexport function getLinksForNode<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  containerId: K1 | undefined,\n  links: D2[],\n  promotedLinks: DiagramLinkData<string, K1>[],\n  nodeIdToParentMap: Map<K1, K1>\n) {\n  const containerLinks = [];\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i];\n    const ancId = getCommonAncestorId(link.startNode, link.endNode, nodeIdToParentMap);\n    if (ancId === containerId) {\n      containerLinks.push(link);\n    }\n  }\n  const containerPromotedLinks = [];\n  for (let i = 0; i < promotedLinks.length; i++) {\n    const link = promotedLinks[i];\n    const ancId = getCommonAncestorId(link.startNode, link.endNode, nodeIdToParentMap);\n    if (ancId === containerId) {\n      containerPromotedLinks.push(link);\n    }\n  }\n  return { containerLinks, containerPromotedLinks };\n}\n\nfunction _getAncestorIds<K1, D1 extends DiagramNodeData<K1, D1>>(nodeId: K1, nodes: Map<K1, K1>) {\n  const ancestors = [];\n  let anc = nodes.get(nodeId);\n  while (anc !== undefined) {\n    ancestors.push(anc);\n    anc = nodes.get(anc);\n  }\n  return ancestors;\n}\n\nexport function containerLinksReady<\n  K1 extends string | number,\n  K2 extends string | number,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>(containerLinks: (D2 | DiagramLinkData<string, K1>)[], layoutOutput: L) {\n  const nodes = layoutOutput.nodes;\n  //if (!links) return false;\n  for (let i = 0; i < containerLinks.length; i++) {\n    const link = containerLinks[i];\n    if (!(nodes[link.startNode] && nodes[link.endNode])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function changeExpanded<K1>(id: K1, expanded: Array<K1>) {\n  const index = expanded.indexOf(id);\n  if (index === -1) {\n    expanded.push(id);\n  } else if (expanded.includes(id)) {\n    expanded.splice(index, 1);\n  }\n  return expanded;\n}\n\nexport function getPromotedLinks<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  nodeIdToParentMap: Map<K1, K1>,\n  links: D2[],\n  expanded: K1[]\n) {\n  const promotedLinks = [];\n  const linkToPromotedMap = new Map<K2, string>();\n  const promotedToLinkMap = new Map<string, D2[]>();\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i];\n    const linkId = link.id;\n    if (!hasCollapsedParent(link, nodeIdToParentMap, expanded)) {\n      continue;\n    }\n    const startVisible = firstVisibleAncestor(link.startNode, nodeIdToParentMap, expanded);\n    const endVisible = firstVisibleAncestor(link.endNode, nodeIdToParentMap, expanded);\n    const promotedLinkId = `${startVisible}_${endVisible}`;\n    let subLinks = promotedToLinkMap.get(promotedLinkId);\n    if (subLinks) {\n      subLinks.push(link);\n    } else {\n      const promotedLink = {\n        id: promotedLinkId,\n        startNode: startVisible,\n        endNode: endVisible\n      };\n      promotedLinks.push(promotedLink);\n      subLinks = [link];\n    }\n    promotedToLinkMap.set(promotedLinkId, subLinks);\n    linkToPromotedMap.set(linkId, promotedLinkId);\n  }\n  return {\n    promotedLinks,\n    linkToPromotedMap,\n    promotedToLinkMap\n  };\n}\n\nfunction hasCollapsedParent<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  link: D2,\n  nodeIdToParentMap: Map<K1, K1>,\n  expanded: K1[]\n) {\n  if (\n    (nodeIdToParentMap.get(link.startNode) &&\n      expanded.includes(nodeIdToParentMap.get(link.startNode)!)) ||\n    (nodeIdToParentMap.get(link.endNode) && expanded.includes(nodeIdToParentMap.get(link.endNode)!))\n  ) {\n    return false;\n  }\n  return true;\n}\n\nfunction firstVisibleAncestor<K1>(nodeId: K1, nodeIdToParentMap: Map<K1, K1>, expanded: K1[]) {\n  let visibleAnc: K1 | undefined = nodeId;\n  let parentId = nodeIdToParentMap.get(nodeId);\n  let currentId = nodeId;\n  while (parentId) {\n    if (expanded.includes(parentId)) {\n      visibleAnc = currentId;\n    } else {\n      visibleAnc = undefined;\n      currentId = parentId;\n    }\n    parentId = nodeIdToParentMap.get(parentId);\n  }\n  return visibleAnc || currentId;\n}\n","import type { DiagramLabelPosition, DiagramLabelStyles } from './diagram.types';\nimport { getLabelPosition } from './utils/diagramUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { labelStyles } from './themes/DiagramStyles.css';\nimport type { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { Property } from 'csstype';\n\n/**\n * Props for the label component\n */\ntype LabelProps = {\n  styles?: LabelStyles;\n  text: string;\n  position: DiagramLabelPosition;\n  dimensions: TextDimensions;\n  isRTL: boolean;\n};\n\n/**\n * Label styles\n */\ntype LabelStyles = DiagramLabelStyles & {\n  borderStyle?: Property.BorderStyle;\n};\n\nexport const DiagramLabel = ({ text, position, styles, dimensions, isRTL }: LabelProps) => {\n  const { labelStyle, labelBorderStyle } = labelStyles;\n\n  const labelPosition = getLabelPosition(dimensions, position, isRTL);\n  const labelRotation = getLabelRotation(position);\n  return (\n    <div\n      class={classNames([labelStyle, styles && styles.borderColor && labelBorderStyle])}\n      style={{\n        top: labelPosition.y,\n        left: labelPosition.x,\n        ...styles,\n        ...labelRotation\n      }}>\n      {text}\n    </div>\n  );\n};\n\n/**\n * Returns the label rotation props\n * @param position\n * @returns rotation props\n */\nfunction getLabelRotation(position: DiagramLabelPosition) {\n  const rotationAngle = position.rotationAngle;\n  const rotationPoint = position.rotationPoint;\n  const rotation: {\n    transform?: string;\n    'transform-origin'?: string;\n  } = {};\n  if (rotationAngle) {\n    rotation['transform'] = `rotate(${rotationAngle}deg)`;\n  }\n  if (rotationPoint) {\n    rotation['transform-origin'] = `${rotationPoint.x}px ${rotationPoint.y}px`;\n  }\n  return rotation;\n}\n","import { Minus } from '#UNSAFE_RedwoodIcons/Minus';\nimport { Plus } from '#UNSAFE_RedwoodIcons/Plus';\nimport { buttonStyle } from './themes/DiagramStyles.css';\n\n/**\n * Props for the label component\n */\ntype ButtonProps<K1> = {\n  isRTL: boolean;\n  type: 'expand' | 'collapse';\n  id: K1;\n};\n\nexport const DiagramExpandCollapseButton = <K1,>({ type, id }: ButtonProps<K1>) => {\n  return (\n    <div\n      data-oj-button={id}\n      class={buttonStyle}\n      style={{\n        top: 0,\n        left: 0,\n        width: '5x',\n        height: '5x',\n        border: '1px solid black'\n      }}>\n      {type == 'collapse' ? <Plus size={'5x'} /> : <Minus size={'5x'} />}\n    </div>\n  );\n};\n","import type {\n  Position,\n  State,\n  NodeRendererContext,\n  DiagramLabelPosition,\n  DiagramNodeData\n} from './diagram.types';\nimport { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { getItemAriaLabel } from './utils/diagramUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { itemStyles, layerStyles } from './themes/DiagramStyles.css';\nimport { ComponentChildren } from 'preact';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { DiagramLabel } from './DiagramLabel';\nimport { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { DiagramExpandCollapseButton } from './DiagramExpandCollapseButton';\n\n/**\n * Props for node component\n */\ntype NodeProps<K1, K2, D1> = {\n  id: K1;\n  position?: Position;\n  label?: string;\n  state: State;\n  previousState: State;\n  isExpanded: boolean;\n  isDimmed?: boolean;\n  activeId?: string;\n  accessibleLabel?: string;\n  data: D1;\n  nodeRenderer: (context: NodeRendererContext<D1>) => ComponentChildren;\n  onNodeSizeChanged: (width: number, height: number, id: K1) => void;\n  supportsSelection: boolean;\n  content?: { element: JSX.Element; width: number; height: number };\n  labelPosition?: DiagramLabelPosition;\n  labelDimensions?: Map<K1 | K2, TextDimensions>;\n};\n\nexport const DiagramNodeElement = <K1, K2, D1 extends DiagramNodeData<K1, D1>>({\n  id,\n  state,\n  previousState,\n  position,\n  activeId,\n  nodeRenderer,\n  onNodeSizeChanged,\n  data,\n  accessibleLabel,\n  isDimmed,\n  supportsSelection,\n  content,\n  labelPosition,\n  labelDimensions\n}: NodeProps<K1, K2, D1>) => {\n  const { nodeStyles, dimmedItemStyle } = itemStyles;\n  const context = {\n    state: state,\n    previousState: previousState,\n    data: data,\n    content: content\n  };\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const ref = useRef<HTMLDivElement>(null);\n  // TODO JET-62472 change to one resize observer function\n  const optionsRef = useRef({ box: 'border-box' as const });\n  useResizeObserver(\n    ref,\n    useCallback(\n      (entry: ResizeObserverEntry) => {\n        const boxSize = entry.borderBoxSize;\n        const width = boxSize[0].inlineSize;\n        const height = boxSize[0].blockSize;\n        onNodeSizeChanged(width, height, id);\n      },\n      [id, onNodeSizeChanged]\n    ),\n    optionsRef.current\n  );\n  const nodePos = position ? position : { x: 0, y: 0 };\n  const { direction } = useUser();\n  const hasLabel = data.label && labelPosition && labelDimensions;\n  return (\n    <div\n      ref={ref}\n      key={id}\n      class={classNames([nodeStyles, isDimmed ? dimmedItemStyle : undefined])}\n      data-oj-private-node={id}\n      role=\"img\"\n      aria-label={getItemAriaLabel(\n        translations,\n        supportsSelection,\n        state.selected,\n        accessibleLabel\n      )}\n      style={{\n        top: nodePos.y,\n        left: nodePos.x\n      }}\n      id={state.focused || state.hovered ? activeId : undefined}>\n      {nodeRenderer(context)}\n      {hasLabel ? (\n        <div class={layerStyles}>\n          <DiagramLabel\n            styles={data.labelStyle}\n            text={data.label!}\n            position={labelPosition!}\n            dimensions={labelDimensions.get(id)!}\n            isRTL={direction === 'rtl'}\n          />\n        </div>\n      ) : undefined}\n      {data.children && data.showDisclosure !== 'off' ? (\n        <DiagramExpandCollapseButton\n          type={content ? 'expand' : 'collapse'}\n          isRTL={direction === 'rtl'}\n          id={id}\n        />\n      ) : undefined}\n    </div>\n  );\n};\n","import type {\n  State,\n  LinkRendererContext,\n  DiagramLinkData,\n  DiagramLabelPosition\n} from './diagram.types';\nimport { getItemAriaLabel } from './utils/diagramUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { itemStyles } from './themes/DiagramStyles.css';\nimport { ComponentChildren } from 'preact';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\nimport { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\n\n/**\n * Props for Link\n */\nexport type LinkProps<K1, K2, D2, L> = {\n  id: K2;\n  label?: string;\n  state: State;\n  previousState: State;\n  isDimmed?: boolean;\n  activeId?: string;\n  accessibleLabel?: string;\n  data: D2 | DiagramLinkData<string, K1>;\n  linkRenderer: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  supportsSelection: boolean;\n  layoutOutput: L;\n  onLinkSizeChanged: (width: number, height: number, id: K2) => void;\n  labelPosition?: DiagramLabelPosition;\n  labelDimensions?: Map<K1 | K2, TextDimensions>;\n  isPromoted?: boolean;\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport const DiagramLinkElement = <K1, K2, D2 extends DiagramLinkData<K2, K1>, L>({\n  id,\n  state,\n  previousState,\n  activeId,\n  data,\n  linkRenderer,\n  accessibleLabel,\n  isDimmed,\n  supportsSelection,\n  layoutOutput,\n  onLinkSizeChanged,\n  isPromoted,\n  promotedToLinkMap\n} //labelPosition,\n//labelDimensions\n: LinkProps<K1, K2, D2, L>) => {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { dimmedItemStyle, linkStyles } = itemStyles;\n  const context = (\n    isPromoted\n      ? {\n          state: state,\n          previousState: previousState,\n          data: promotedToLinkMap.get(id as string)!,\n          layoutOutput: layoutOutput,\n          startNode: data.startNode,\n          endNode: data.endNode,\n          type: 'promotedLink'\n        }\n      : {\n          state: state,\n          previousState: previousState,\n          data: data,\n          layoutOutput: layoutOutput,\n          type: 'link'\n        }\n  ) as LinkRendererContext<K1, D2, L>;\n  const ref = useRef<SVGGElement>(null);\n  const optionsRef = useRef({ box: 'border-box' as const });\n  useResizeObserver(\n    ref,\n    useCallback(\n      (entry: ResizeObserverEntry) => {\n        const boxSize = entry.borderBoxSize;\n        const width = boxSize[0].inlineSize;\n        const height = boxSize[0].blockSize;\n        onLinkSizeChanged(width, height, id);\n      },\n      [id, onLinkSizeChanged]\n    ),\n    optionsRef.current\n  );\n  //const hasLabel = data.label && labelPosition && labelDimensions;\n  return (\n    <g\n      ref={ref}\n      key={id}\n      id={state.focused ? activeId : undefined}\n      aria-label={getItemAriaLabel(\n        translations,\n        supportsSelection,\n        state.selected,\n        accessibleLabel\n      )}\n      data-oj-private-link={id}\n      role=\"img\"\n      class={classNames([linkStyles, isDimmed && dimmedItemStyle])}>\n      {linkRenderer(context)}\n    </g>\n  );\n};\n","import type { DiagramLabelPosition, DiagramLinkData } from './diagram.types';\nimport { DiagramLabel } from './DiagramLabel';\nimport type { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { layerStyles } from './themes/DiagramStyles.css';\nimport { useUser } from '#hooks/UNSAFE_useUser';\n\ntype Props<K1, K2, D2 extends DiagramLinkData<K2, K1>> = {\n  labelPosition: Map<K2, DiagramLabelPosition>;\n  itemProps: D2[];\n  labelDimensions: Map<K2, TextDimensions>;\n};\n\nexport function DiagramLabelLayer<K1, K2, D2 extends DiagramLinkData<K2, K1>>({\n  labelPosition,\n  itemProps,\n  labelDimensions\n}: Props<K1, K2, D2>) {\n  const { direction } = useUser();\n  return (\n    <div class={layerStyles}>\n      {itemProps.map((item) => {\n        if (item.label && labelPosition.get(item.id)) {\n          return (\n            <DiagramLabel\n              styles={item.labelStyle}\n              text={item.label}\n              position={labelPosition.get(item.id)!}\n              dimensions={labelDimensions.get(item.id)!}\n              isRTL={direction === 'rtl'}\n            />\n          );\n        }\n        return undefined;\n      })}\n    </div>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport type {\n  States,\n  LinkRendererContext,\n  DiagramLinkData,\n  DiagramLayoutOutput,\n  Bounds,\n  DiagramLabelPosition\n} from './diagram.types';\nimport { DiagramLinkElement } from './DiagramLinkElement';\nimport { layerStyles } from './themes/DiagramStyles.css';\nimport { getZoomToFitZoom } from './utils/diagramUtils';\nimport { DiagramLabelLayer } from './DiagramLabelLayer';\nimport { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\n\ntype Props<K2, K1, D2, L> = {\n  links: D2[];\n  states: States<K1, K2>;\n  previousStates: States<K1, K2>;\n  linkRenderer: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  width: number;\n  height: number;\n  supportsSelection: boolean;\n  layoutOutput: L;\n  combinedNodeBounds: Bounds;\n  labelDimensions: Map<K1 | K2, TextDimensions>;\n  linkLabelPositions: Map<K2, DiagramLabelPosition>;\n  onLinkSizeChanged: (width: number, height: number, id: K2) => void;\n  minX: number;\n  minY: number;\n  isPromoted?: boolean;\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport function DiagramLinkLayer<\n  K2 extends string | number,\n  K1 extends string | number,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>({\n  links,\n  states,\n  previousStates,\n  linkRenderer,\n  width,\n  height,\n  supportsSelection,\n  onLinkSizeChanged,\n  layoutOutput,\n  combinedNodeBounds,\n  linkLabelPositions,\n  labelDimensions,\n  isPromoted,\n  promotedToLinkMap\n}: Props<K2, K1, D2, L>) {\n  const zoom = getZoomToFitZoom(width, height, combinedNodeBounds);\n  return (\n    <div>\n      <svg width={width / zoom} height={height / zoom} class={layerStyles} overflow=\"visible\">\n        {links.map((link) => {\n          const state = {\n            selected: isPromoted\n              ? states.selectedPromotedLinkIds.includes(link.id as string)\n              : states.selectedLinkIds.includes(link.id),\n            focused: states.focusedId === link.id,\n            hovered: states.hoveredId === link.id,\n            zoom: states.zoom\n          };\n          const previousState = {\n            selected: isPromoted\n              ? previousStates.selectedPromotedLinkIds.includes(link.id as string)\n              : previousStates.selectedLinkIds.includes(link.id),\n            focused: previousStates.focusedId === link.id,\n            hovered: previousStates.hoveredId === link.id,\n            zoom: previousStates.zoom\n          };\n          return (\n            <DiagramLinkElement\n              id={link.id}\n              label={link.label}\n              state={state}\n              previousState={previousState}\n              isDimmed={\n                states.highlightedLinkIds.length !== 0 &&\n                !states.highlightedLinkIds.includes(link.id)\n              }\n              activeId={states.activeId}\n              accessibleLabel={link.accessibleLabel}\n              data={link}\n              linkRenderer={linkRenderer}\n              supportsSelection={supportsSelection}\n              layoutOutput={layoutOutput}\n              onLinkSizeChanged={onLinkSizeChanged}\n              promotedToLinkMap={promotedToLinkMap}\n              isPromoted={isPromoted}\n            />\n          );\n        })}\n      </svg>\n      {labelDimensions ? (\n        <div>\n          {links && linkLabelPositions ? (\n            <DiagramLabelLayer\n              labelPosition={linkLabelPositions}\n              itemProps={links}\n              labelDimensions={labelDimensions}\n            />\n          ) : undefined}\n        </div>\n      ) : undefined}\n    </div>\n  );\n}\n","import type {\n  State,\n  LinkRendererContext,\n  DiagramLabelPosition,\n  PromotedLinkData\n} from './diagram.types';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { itemStyles } from './themes/DiagramStyles.css';\nimport { ComponentChildren } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\n\n/**\n * Props for Link\n */\nexport type LinkProps<K1, D2, L> = {\n  id: string;\n  state: State;\n  previousState: State;\n  isDimmed?: boolean;\n  activeId?: string;\n  data: PromotedLinkData<K1>;\n  linkRenderer: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  supportsSelection: boolean;\n  layoutOutput: L;\n  onLinkSizeChanged: (width: number, height: number, id: string) => void;\n  labelPosition?: DiagramLabelPosition;\n  isPromoted?: boolean;\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport const DiagramPromotedLinkElement = <K1, D2, L>({\n  id,\n  state,\n  previousState,\n  activeId,\n  data,\n  linkRenderer,\n  isDimmed,\n  layoutOutput,\n  onLinkSizeChanged,\n  promotedToLinkMap\n} //labelPosition,\n//labelDimensions\n: LinkProps<K1, D2, L>) => {\n  const { dimmedItemStyle, linkStyles } = itemStyles;\n  const context = {\n    state: state,\n    previousState: previousState,\n    data: promotedToLinkMap.get(id as string)!,\n    layoutOutput: layoutOutput,\n    startNode: data.startNode,\n    endNode: data.endNode,\n    type: 'promotedLink',\n    id: id\n  } as LinkRendererContext<K1, D2, L>;\n  const ref = useRef<SVGGElement>(null);\n  const optionsRef = useRef({ box: 'border-box' as const });\n  useResizeObserver(\n    ref,\n    useCallback(\n      (entry: ResizeObserverEntry) => {\n        const boxSize = entry.borderBoxSize;\n        const width = boxSize[0].inlineSize;\n        const height = boxSize[0].blockSize;\n        onLinkSizeChanged(width, height, id);\n      },\n      [id, onLinkSizeChanged]\n    ),\n    optionsRef.current\n  );\n  //const hasLabel = data.label && labelPosition && labelDimensions;\n  return (\n    <g\n      ref={ref}\n      key={id}\n      id={state.focused ? activeId : undefined}\n      data-oj-private-link={id}\n      role=\"img\"\n      class={classNames([linkStyles, isDimmed && dimmedItemStyle])}>\n      {linkRenderer(context)}\n    </g>\n  );\n};\n","import { ComponentChildren } from 'preact';\nimport type {\n  States,\n  LinkRendererContext,\n  DiagramLinkData,\n  DiagramLayoutOutput,\n  Bounds,\n  PromotedLinkData\n} from './diagram.types';\nimport { layerStyles } from './themes/DiagramStyles.css';\nimport { getZoomToFitZoom } from './utils/diagramUtils';\nimport { DiagramPromotedLinkElement } from './DiagramPromotedLinkElement';\n\ntype Props<K2, K1, D2, L> = {\n  links: PromotedLinkData<K1>[];\n  states: States<K1, K2>;\n  previousStates: States<K1, K2>;\n  linkRenderer: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  width: number;\n  height: number;\n  supportsSelection: boolean;\n  layoutOutput: L;\n  combinedNodeBounds: Bounds;\n  onLinkSizeChanged: (width: number, height: number, id: string) => void;\n  minX: number;\n  minY: number;\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport function DiagramPromotedLinkLayer<\n  K2 extends string | number,\n  K1 extends string | number,\n  D2 extends DiagramLinkData<K2, K1> = DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2> = DiagramLayoutOutput<K1, K2>\n>({\n  links,\n  states,\n  previousStates,\n  linkRenderer,\n  width,\n  height,\n  supportsSelection,\n  onLinkSizeChanged,\n  layoutOutput,\n  combinedNodeBounds,\n  promotedToLinkMap\n}: Props<K2, K1, D2, L>) {\n  const zoom = getZoomToFitZoom(width, height, combinedNodeBounds);\n  return (\n    <div>\n      <svg width={width / zoom} height={height / zoom} class={layerStyles} overflow=\"visible\">\n        {links.map((link) => {\n          const state = {\n            selected: states.selectedPromotedLinkIds.includes(link.id),\n            focused: states.focusedId === link.id,\n            hovered: states.hoveredId === link.id,\n            zoom: states.zoom\n          };\n          const previousState = {\n            selected: previousStates.selectedPromotedLinkIds.includes(link.id),\n            focused: previousStates.focusedId === link.id,\n            hovered: previousStates.hoveredId === link.id,\n            zoom: previousStates.zoom\n          };\n          return (\n            <DiagramPromotedLinkElement\n              id={link.id}\n              state={state}\n              previousState={previousState}\n              isDimmed={\n                states.highlightedPromotedLinkIds.length !== 0 &&\n                !states.highlightedPromotedLinkIds.includes(link.id)\n              }\n              activeId={states.activeId}\n              data={link}\n              linkRenderer={linkRenderer}\n              supportsSelection={supportsSelection}\n              layoutOutput={layoutOutput}\n              onLinkSizeChanged={onLinkSizeChanged}\n              promotedToLinkMap={promotedToLinkMap}\n              isPromoted={true}\n            />\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n","import { ComponentChildren, RefObject } from 'preact';\nimport type {\n  States,\n  NodeRendererContext,\n  Bounds,\n  DiagramNodeData,\n  DiagramLabelPosition,\n  Dimensions,\n  DiagramLinkData,\n  LinkRendererContext,\n  DiagramLayoutOutput,\n  PromotedLinkData\n} from './diagram.types';\nimport { DiagramNodeElement } from './DiagramNodeElement';\nimport { layerStyles } from './themes/DiagramStyles.css';\nimport {\n  containerLinksReady,\n  getBounds,\n  getLinksForNode,\n  isContainerReady,\n  isLeafNode\n} from './utils/diagramUtils';\nimport { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { DiagramLinkLayer } from './DiagramLinkLayer';\nimport { DiagramPromotedLinkLayer } from './DiagramPromotedLinkLayer';\n\ntype Props<K1, K2, D1, D2, L> = {\n  nodes: D1[];\n  states: States<K1, K2>;\n  previousStates: States<K1, K2>;\n  nodeRenderer: (context: NodeRendererContext<D1>) => ComponentChildren;\n  linkRenderer?: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  onNodeSizeChanged: (width: number, height: number, id: K1) => void;\n  onLinkSizeChanged: (width: number, height: number, id: K2) => void;\n  onPromotedLinkSizeChanged: (width: number, height: number, id: string) => void;\n  nodeBounds: Map<K1, Bounds>;\n  supportsSelection: boolean;\n  minX?: number;\n  minY?: number;\n  nodeLabelPositions: Map<K1, DiagramLabelPosition>;\n  linkLabelPositions: Map<K2, DiagramLabelPosition>;\n  labelDimensions: Map<K1 | K2, TextDimensions>;\n  contentDims?: Map<K1, Dimensions>;\n  links: D2[];\n  promotedLinks: PromotedLinkData<K1>[];\n  //linkAncestors: Map<K1, K2[]>;\n  parentId?: K1;\n  nodeIdToParentMap: Map<K1, K1>;\n  layoutOutput?: L;\n  // width height are for svg for links\n  width: number;\n  height: number;\n  zoom: number;\n  linkDimensions: Map<K2, Dimensions>;\n  promotedLinkDimensions: Map<string, Dimensions>;\n  rootRef?: RefObject<HTMLDivElement>;\n  combinedNodeBounds: Bounds;\n  nodeBoundsRef: RefObject<Map<K1, Bounds>>;\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport function DiagramNodeLayer<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>({\n  nodes,\n  states,\n  previousStates,\n  nodeRenderer,\n  linkRenderer,\n  nodeBounds,\n  width,\n  height,\n  onNodeSizeChanged,\n  onLinkSizeChanged,\n  onPromotedLinkSizeChanged,\n  supportsSelection,\n  nodeLabelPositions,\n  linkLabelPositions,\n  labelDimensions,\n  minX = 0,\n  minY = 0,\n  parentId,\n  links,\n  promotedLinks,\n  layoutOutput,\n  zoom,\n  nodeIdToParentMap,\n  linkDimensions,\n  promotedLinkDimensions,\n  rootRef,\n  combinedNodeBounds,\n  nodeBoundsRef,\n  promotedToLinkMap\n}: Props<K1, K2, D1, D2, L>) {\n  const {\n    containerLinks: containerParentLinks,\n    containerPromotedLinks: containerParentPromotedLinks\n  } = getLinksForNode<K1, K2, D2>(parentId, links, promotedLinks, nodeIdToParentMap);\n  return (\n    <div class={layerStyles} data-node-container>\n      {nodes.map((node) => {\n        // this is for initial render before the layout function so render all nodes at 0,0\n        const position =\n          nodeBounds && nodeBounds.get(node.id)\n            ? { x: nodeBounds.get(node.id)!.x - minX, y: nodeBounds.get(node.id)!.y - minY }\n            : undefined;\n        const state = {\n          selected: states.selectedNodeIds.includes(node.id),\n          focused: states.focusedId === node.id,\n          hovered: states.hoveredId === node.id,\n          zoom: states.zoom,\n          expanded: states.expanded && states.expanded.includes(node.id)\n        };\n        const previousState = {\n          selected: previousStates.selectedNodeIds.includes(node.id),\n          focused: previousStates.focusedId === node.id,\n          hovered: previousStates.hoveredId === node.id,\n          zoom: previousStates.zoom,\n          expanded: previousStates.expanded && previousStates.expanded.includes(node.id)\n        };\n        const { containerLinks, containerPromotedLinks } = getLinksForNode<K1, K2, D2>(\n          node.id,\n          links,\n          promotedLinks,\n          nodeIdToParentMap\n        );\n\n        // Leaf node or node is collapsed\n        if (isLeafNode(node) || !states.expanded.includes(node.id)) {\n          return (\n            <DiagramNodeElement\n              id={node.id}\n              position={position}\n              state={state}\n              previousState={previousState}\n              isDimmed={\n                states.highlightedNodeIds.length !== 0 &&\n                !states.highlightedNodeIds.includes(node.id)\n              }\n              activeId={states.activeId}\n              nodeRenderer={nodeRenderer}\n              onNodeSizeChanged={onNodeSizeChanged}\n              accessibleLabel={node.accessibleLabel}\n              data={node}\n              isExpanded={false}\n              supportsSelection={supportsSelection}\n              labelDimensions={labelDimensions}\n              labelPosition={nodeLabelPositions?.get(node.id)}\n            />\n          );\n          // Expanded container where children are ready\n        } else if (\n          nodeBounds &&\n          isContainerReady<K1, K2, D1, D2>(\n            node,\n            nodeBounds,\n            containerLinks,\n            containerPromotedLinks,\n            linkDimensions,\n            promotedLinkDimensions\n          )\n        ) {\n          //const links = linkAncestors.get(node.id);\n          const childContent = getContent<K1, K2, D1, D2, L>(\n            node,\n            states,\n            previousStates,\n            nodeRenderer,\n            onNodeSizeChanged,\n            onLinkSizeChanged,\n            onPromotedLinkSizeChanged,\n            supportsSelection,\n            links,\n            promotedLinks,\n            nodeIdToParentMap,\n            width,\n            height,\n            zoom,\n            node.id,\n            nodeBounds,\n            linkDimensions,\n            promotedLinkDimensions,\n            combinedNodeBounds,\n            nodeBoundsRef,\n            nodeLabelPositions,\n            linkLabelPositions,\n            labelDimensions,\n            promotedToLinkMap,\n            linkRenderer,\n            layoutOutput,\n            rootRef\n          );\n          return (\n            <DiagramNodeElement\n              id={node.id}\n              position={position}\n              state={state}\n              previousState={previousState}\n              isDimmed={\n                states.highlightedNodeIds.length !== 0 &&\n                !states.highlightedNodeIds.includes(node.id)\n              }\n              activeId={states.activeId}\n              nodeRenderer={nodeRenderer}\n              onNodeSizeChanged={onNodeSizeChanged}\n              accessibleLabel={node.accessibleLabel}\n              data={node}\n              isExpanded={true}\n              supportsSelection={supportsSelection}\n              content={childContent}\n              labelDimensions={labelDimensions}\n              labelPosition={nodeLabelPositions?.get(node.id)}\n            />\n          );\n        } else {\n          const childContent = getContent<K1, K2, D1, D2, L>(\n            node,\n            states,\n            previousStates,\n            nodeRenderer,\n            onNodeSizeChanged,\n            onLinkSizeChanged,\n            onPromotedLinkSizeChanged,\n            supportsSelection,\n            links,\n            promotedLinks,\n            nodeIdToParentMap,\n            width,\n            height,\n            zoom,\n            node.id,\n            nodeBounds,\n            linkDimensions,\n            promotedLinkDimensions,\n            combinedNodeBounds,\n            nodeBoundsRef,\n            nodeLabelPositions,\n            linkLabelPositions,\n            labelDimensions,\n            promotedToLinkMap,\n            linkRenderer,\n            layoutOutput,\n            rootRef\n          );\n          return <div>{childContent.element}</div>;\n        }\n      })}\n      {links.length > 0 &&\n        layoutOutput &&\n        linkRenderer &&\n        width !== Infinity &&\n        containerParentLinks.length > 0 &&\n        containerLinksReady<K1, K2, D2, L>(containerParentLinks, layoutOutput) && (\n          <DiagramLinkLayer\n            links={containerParentLinks}\n            states={states}\n            previousStates={previousStates}\n            linkRenderer={linkRenderer}\n            width={width / zoom}\n            height={height}\n            supportsSelection={supportsSelection}\n            labelDimensions={labelDimensions}\n            layoutOutput={layoutOutput}\n            onLinkSizeChanged={onLinkSizeChanged}\n            linkLabelPositions={linkLabelPositions}\n            combinedNodeBounds={combinedNodeBounds}\n            minX={minX}\n            minY={minY}\n            promotedToLinkMap={promotedToLinkMap}\n          />\n        )}\n      {promotedLinks.length > 0 &&\n        layoutOutput &&\n        linkRenderer &&\n        width !== Infinity &&\n        containerParentPromotedLinks.length > 0 &&\n        containerLinksReady<K1, K2, D2, L>(containerParentPromotedLinks, layoutOutput) && (\n          <DiagramPromotedLinkLayer\n            links={containerParentPromotedLinks as PromotedLinkData<K1>[]}\n            states={states}\n            previousStates={previousStates}\n            linkRenderer={linkRenderer}\n            width={width / zoom}\n            height={height}\n            supportsSelection={supportsSelection}\n            layoutOutput={layoutOutput}\n            onLinkSizeChanged={onPromotedLinkSizeChanged}\n            combinedNodeBounds={combinedNodeBounds}\n            minX={minX}\n            minY={minY}\n            promotedToLinkMap={promotedToLinkMap}\n          />\n        )}\n    </div>\n  );\n}\n\nfunction getContent<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>(\n  nodeData: D1,\n  states: States<K1, K2>,\n  previousStates: States<K1, K2>,\n  nodeRenderer: (context: NodeRendererContext<D1>) => ComponentChildren,\n  onNodeSizeChanged: (width: number, height: number, id: K1) => void,\n  onLinkSizeChanged: (width: number, height: number, id: K2) => void,\n  onPromotedLinkSizeChanged: (width: number, height: number, id: string) => void,\n  supportsSelection: boolean,\n  links: D2[],\n  promotedLinks: PromotedLinkData<K1>[],\n  nodeIdToParentMap: Map<K1, K1>,\n  width: number,\n  height: number,\n  zoom: number,\n  parentId: K1,\n  nodeBounds: Map<K1, Bounds>,\n  linkDimensions: Map<K2, Dimensions>,\n  promotedLinkDimensions: Map<string, Dimensions>,\n  combinedNodeBounds: Bounds,\n  nodeBoundsRef: RefObject<Map<K1, Bounds>>,\n  nodeLabelPositions: Map<K1, DiagramLabelPosition>,\n  linkLabelPositions: Map<K2, DiagramLabelPosition>,\n  labelDimensions: Map<K1 | K2, TextDimensions>,\n  promotedToLinkMap: Map<string, D2[]>,\n  linkRenderer?: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren,\n  layoutOutput?: L,\n  rootRef?: RefObject<HTMLDivElement>\n) {\n  //let minX;\n  //let minY;\n  //let maxX;\n  //let maxY;\n  //let validBounds;\n  const children = nodeData.children!;\n  const { containerLinks, containerPromotedLinks } = getLinksForNode<K1, K2, D2>(\n    parentId,\n    links,\n    promotedLinks,\n    nodeIdToParentMap\n  );\n  const { minX, minY, contentWidth, contentHeight, linkBounds } = getBounds(\n    children,\n    containerLinks,\n    containerPromotedLinks,\n    nodeBounds,\n    linkDimensions,\n    promotedLinkDimensions,\n    zoom,\n    rootRef\n  );\n  if (linkBounds) {\n    const nodeFullBounds = nodeBoundsRef.current;\n    nodeFullBounds?.set(nodeData.id, linkBounds);\n    nodeBoundsRef.current = nodeFullBounds;\n  }\n  //console.log('children', minX, minY, contentWidth, contentHeight);\n\n  const element = (\n    <div data-oj-child={parentId} style={{ position: 'relative' }}>\n      <DiagramNodeLayer\n        nodes={children}\n        nodeBounds={nodeBounds}\n        states={states}\n        minX={nodeBounds ? minX : undefined}\n        minY={nodeBounds ? minY : undefined}\n        previousStates={previousStates}\n        nodeRenderer={nodeRenderer}\n        onNodeSizeChanged={onNodeSizeChanged}\n        onLinkSizeChanged={onLinkSizeChanged}\n        onPromotedLinkSizeChanged={onPromotedLinkSizeChanged}\n        supportsSelection={supportsSelection}\n        nodeLabelPositions={nodeLabelPositions}\n        linkLabelPositions={linkLabelPositions}\n        labelDimensions={labelDimensions}\n        links={links}\n        promotedLinks={promotedLinks}\n        nodeIdToParentMap={nodeIdToParentMap}\n        linkRenderer={linkRenderer}\n        layoutOutput={layoutOutput}\n        width={width}\n        height={height}\n        zoom={zoom}\n        parentId={parentId}\n        linkDimensions={linkDimensions}\n        promotedLinkDimensions={promotedLinkDimensions}\n        rootRef={rootRef}\n        combinedNodeBounds={combinedNodeBounds}\n        nodeBoundsRef={nodeBoundsRef}\n        promotedToLinkMap={promotedToLinkMap}\n      />\n    </div>\n  );\n  return {\n    element,\n    width: contentWidth ? contentWidth : 0,\n    height: contentHeight ? contentHeight - minY! : 0,\n    linkBounds\n  };\n}\n","import type {\n  NodeRendererContext,\n  LinkRendererContext,\n  States,\n  Bounds,\n  DiagramLabelPosition,\n  DiagramNodeData,\n  DiagramLinkData,\n  DiagramLayoutOutput,\n  Dimensions,\n  PromotedLinkData\n} from './diagram.types';\nimport { DiagramNodeLayer } from './DiagramNodeLayer';\nimport { ComponentChildren, RefObject } from 'preact';\nimport type { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { getBounds, getLinksForNode } from './utils/diagramUtils';\n\n/**\n * Props for Diagram layers component\n */\ntype DiagramLayersProps<K1, K2, D1, D2, L> = {\n  nodes: D1[];\n  links: D2[];\n  nodeRenderer: (context: NodeRendererContext<D1>) => ComponentChildren;\n  linkRenderer?: (context: LinkRendererContext<K1, D2, L>) => ComponentChildren;\n  states: States<K1, K2>;\n  previousStates: States<K1, K2>;\n  nodeBounds: Map<K1, Bounds>;\n  // width height are for svg for links\n  width: number;\n  height: number;\n  onNodeSizeChanged: (width: number, height: number, id: K1) => void;\n  onLinkSizeChanged: (width: number, height: number, id: K2) => void;\n  onPromotedLinkSizeChanged: (width: number, height: number, id: string) => void;\n  nodeLabelPositions: Map<K1, DiagramLabelPosition>;\n  linkLabelPositions: Map<K2, DiagramLabelPosition>;\n  labelDimensions: Map<K1 | K2, TextDimensions>;\n  supportsSelection: boolean;\n  layoutOutput?: L;\n  combinedNodeBounds: Bounds;\n  zoom: number;\n  nodeIdToParentMap: Map<K1, K1>;\n  linkDimensions: Map<K2, Dimensions>;\n  promotedLinkDimensions: Map<string, Dimensions>;\n  rootRef?: RefObject<HTMLDivElement>;\n  nodeBoundsRef: RefObject<Map<K1, Bounds>>;\n  promotedLinks: PromotedLinkData<K1>[];\n  promotedToLinkMap: Map<string, D2[]>;\n};\n\nexport function DiagramLayers<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>({\n  nodes,\n  links,\n  promotedLinks,\n  nodeRenderer,\n  linkRenderer,\n  states,\n  previousStates,\n  nodeBounds,\n  width,\n  height,\n  onNodeSizeChanged,\n  onLinkSizeChanged,\n  onPromotedLinkSizeChanged,\n  labelDimensions,\n  nodeLabelPositions,\n  linkLabelPositions,\n  supportsSelection,\n  layoutOutput,\n  zoom,\n  nodeIdToParentMap,\n  linkDimensions,\n  promotedLinkDimensions,\n  rootRef,\n  combinedNodeBounds,\n  nodeBoundsRef,\n  promotedToLinkMap\n}: DiagramLayersProps<K1, K2, D1, D2, L>) {\n  const { containerLinks, containerPromotedLinks } = getLinksForNode<K1, K2, D2>(\n    undefined,\n    links,\n    promotedLinks,\n    nodeIdToParentMap\n  );\n  const { minX, minY } = getBounds(\n    nodes,\n    containerLinks,\n    containerPromotedLinks,\n    nodeBounds,\n    linkDimensions,\n    promotedLinkDimensions,\n    zoom,\n    rootRef\n  );\n  return (\n    <>\n      <DiagramNodeLayer\n        nodes={nodes}\n        nodeBounds={nodeBounds}\n        states={states}\n        previousStates={previousStates}\n        nodeRenderer={nodeRenderer}\n        onNodeSizeChanged={onNodeSizeChanged}\n        onLinkSizeChanged={onLinkSizeChanged}\n        onPromotedLinkSizeChanged={onPromotedLinkSizeChanged}\n        supportsSelection={supportsSelection}\n        nodeLabelPositions={nodeLabelPositions}\n        linkLabelPositions={linkLabelPositions}\n        labelDimensions={labelDimensions}\n        linkDimensions={linkDimensions}\n        promotedLinkDimensions={promotedLinkDimensions}\n        rootRef={rootRef}\n        links={links}\n        promotedLinks={promotedLinks}\n        nodeIdToParentMap={nodeIdToParentMap}\n        linkRenderer={linkRenderer}\n        layoutOutput={layoutOutput}\n        width={width}\n        height={height}\n        zoom={zoom}\n        minX={nodeBounds && minX !== Infinity ? minX : undefined}\n        minY={nodeBounds && minY !== Infinity ? minY : undefined}\n        combinedNodeBounds={combinedNodeBounds}\n        nodeBoundsRef={nodeBoundsRef}\n        promotedToLinkMap={promotedToLinkMap}\n      />\n    </>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport { centerXYToPanXY } from './utils/diagramUtils';\nimport { panZoomStyles } from './themes/DiagramStyles.css';\n\ntype Props = {\n  centerX: number;\n  centerY: number;\n  zoom: number;\n  width: number;\n  height: number;\n  children: ComponentChildren;\n};\n\nexport function DiagramPanZoomContainer({\n  centerX,\n  centerY,\n  children,\n  zoom,\n  width,\n  height\n}: Props) {\n  const panValues = centerXYToPanXY(centerX, centerY, zoom, width, height);\n  return (\n    <div\n      class={panZoomStyles}\n      style={{\n        //TODO JET-62471 look at using matrices or both in transform instead\n        translate: `${panValues.panX}px ${panValues.panY}px`,\n        transform: `scale(${zoom})`\n      }}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DiagramNodeData, DiagramLinkData, Bounds, ItemInfo } from '../diagram.types';\n\n/**\n * Navigation direction\n */\nexport type NavDirection = 'right' | 'left' | 'up' | 'down';\n\ntype linkDetailType<K2> = {\n  id: K2;\n  angle: number;\n  distance: number;\n  /**\n   * Ingoing = 1, outgoing = 0\n   */\n  direction: 0 | 1;\n};\n\n/**\n * Returns the node data based on node info in a diagram.\n * @param itemInfo\n * @returns\n */\nexport function getNodeDetailFromInfo<K1, K2, D1 extends DiagramNodeData<K1, D1>>(\n  itemInfo: ItemInfo<K1, K2>,\n  nodes: D1[]\n): D1 | undefined {\n  let node;\n  for (let i = 0; i < nodes.length; i++) {\n    node = nodes[i];\n    if (itemInfo.id === node.id) {\n      return node;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns the link data based on link info in a diagram.\n * @param itemInfo\n * @returns\n */\nexport function getLinkDetailFromInfo<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  itemInfo: ItemInfo<K1, K2>,\n  links: D2[]\n): D2 | undefined {\n  let link;\n  for (let i = 0; i < links.length; i++) {\n    link = links[i];\n    if (itemInfo.id === link.id) {\n      return link;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Utility method that adds sorting attributes of each link to an array\n */\nexport function addSortingAttributes<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(node: D1, listOfLinks: D2[], nodes: D1[], nodeBounds: Map<K1, Bounds>) {\n  let angle, distance, direction;\n  const linkDetail: linkDetailType<K2>[] = [];\n  for (let i = 0; i < listOfLinks.length; i++) {\n    const link = listOfLinks[i];\n    angle = _getClockwiseAngle(node, link, nodes, nodeBounds);\n    distance = _getNodesDistance(link, nodes, nodeBounds);\n    direction = _getLinkDirection(node, link);\n    linkDetail.push({ id: link.id, angle: angle, distance: distance, direction: direction });\n  }\n  return linkDetail;\n}\n\n/**\n * Returns a function that compares two link around a given node\n * The links are analyzed by angle, distance from the node and direction. The sorting attributes are added to the links before sorting.\n */\nexport function getLinkComparator<K2>() {\n  return (link1: linkDetailType<K2>, link2: linkDetailType<K2>) => {\n    const { angle: linkAngle1, distance: linkDistance1, direction: linkDirection1 } = link1;\n    const { angle: linkAngle2, distance: linkDistance2, direction: linkDirection2 } = link2;\n    let res = -1;\n\n    if (!_anglesAreEqualWithinTolerance(linkAngle1, linkAngle2) && linkAngle1 > linkAngle2) {\n      res = 1;\n    } else if (_anglesAreEqualWithinTolerance(linkAngle1, linkAngle2)) {\n      //check distance and direction\n      if (linkDistance1 > linkDistance2) {\n        res = 1;\n      } else if (linkDistance2 == linkDistance1 && linkDirection1 > linkDirection2) {\n        //outgoing to ingoing\n        res = 1;\n      } else if (linkDistance2 == linkDistance1 && linkDirection1 == linkDirection2) {\n        res = 0;\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Returns navigable links for a given node\n */\nexport function getNavigableLinksForNodeId<K1, K2, D2 extends DiagramLinkData<K2, K1>>(\n  nodeId: K1,\n  listOfLinks: D2[]\n) {\n  const links: D2[] = [];\n  listOfLinks.forEach((link) => {\n    const startId = link.startNode;\n    const endId = link.endNode;\n\n    if (startId == nodeId || endId == nodeId) links.push(link);\n  });\n  return links;\n}\n\n/**\n * Get the clockwise angle for the link given node as a center\n */\nfunction _getClockwiseAngle<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(node: D1, link: D2, nodes: D1[], nodeBounds: Map<K1, Bounds>) {\n  //find opposite node\n  let currNode;\n  let startNode = nodes[0];\n  let endNode = nodes[0];\n  for (let i = 0; i < nodes.length; i++) {\n    currNode = nodes[i];\n    if (currNode.id === link.startNode) {\n      startNode = currNode;\n    } else if (currNode.id === link.endNode) {\n      endNode = currNode;\n    }\n  }\n  const oppositeNode = node.id == startNode.id ? endNode : startNode;\n\n  const p1 = _getNodeCenter(node, nodeBounds);\n  const p2 = _getNodeCenter(oppositeNode, nodeBounds);\n  let angle = Math.atan2(p2.y - p1.y, p2.x - p1.x);\n  angle = angle < 0 ? angle + Math.PI * 2 : angle;\n  return angle;\n}\n\n/**\n * Get the distance between start and end nodes for the given link\n */\nfunction _getNodesDistance<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(link: D2, nodes: D1[], nodeBounds: Map<K1, Bounds>) {\n  let currNode;\n  let startNode = nodes[0];\n  let endNode = nodes[0];\n  for (let i = 0; i < nodes.length; i++) {\n    currNode = nodes[i];\n    if (currNode.id === link.startNode) {\n      startNode = currNode;\n    } else if (currNode.id === link.endNode) {\n      endNode = currNode;\n    }\n  }\n  const p1 = _getNodeCenter(startNode, nodeBounds);\n  const p2 = _getNodeCenter(endNode, nodeBounds);\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\n/**\n * Get link direction for the given node.  1 if the node is the end node\n * and 0 if it is the start node\n */\nfunction _getLinkDirection<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(node: D1, link: D2): 0 | 1 {\n  if (link.endNode === node.id) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Get node center\n */\nfunction _getNodeCenter<K1, D1 extends DiagramNodeData<K1, D1>>(\n  node: D1,\n  nodeBounds: Map<K1, Bounds>\n) {\n  const nodeBB = nodeBounds.get(node.id)!;\n  return { x: nodeBB.x + nodeBB.width / 2, y: nodeBB.y + nodeBB.height / 2 };\n}\n\n/**\n * Calculates the angle weighted by distance\n */\nexport function calcDistanceAngleWeighted(\n  objectBB: Bounds,\n  currentBB: Bounds,\n  direction: NavDirection\n) {\n  // Variables used for calculating penalties when calculating distances between two navigables.\n  const optimalAngle1 = (15 / 180) * Math.PI;\n  const optimalAngle2 = (40 / 180) * Math.PI;\n  const suboptimalAnglePenalty1 = 2; // multiplier to the distance\n  const suboptimalAnglePenalty2 = 6; // multiplier to the distance\n\n  const objCenterX = objectBB.x + objectBB.width / 2;\n  const objCenterY = objectBB.y + objectBB.height / 2;\n\n  const curCenterX = currentBB.x + currentBB.width / 2;\n  const curCenterY = currentBB.y + currentBB.height / 2;\n\n  const x_dist = Math.abs(objCenterX - curCenterX);\n  const y_dist = Math.abs(objCenterY - curCenterY);\n\n  const angle = Math.atan2(y_dist, x_dist);\n\n  let distance = Math.sqrt(x_dist * x_dist + y_dist * y_dist);\n\n  // Angle penalty based on direction\n  if (\n    (angle > optimalAngle1 && (direction == 'right' || direction == 'left')) ||\n    (angle < Math.PI / 2 - optimalAngle1 && (direction == 'up' || direction == 'down'))\n  ) {\n    if (\n      (angle > optimalAngle2 && (direction == 'right' || direction == 'left')) ||\n      (angle < Math.PI / 2 - optimalAngle2 && (direction == 'up' || direction == 'down'))\n    ) {\n      distance *= suboptimalAnglePenalty2;\n    } else {\n      distance *= suboptimalAnglePenalty1;\n    }\n  }\n\n  return distance;\n}\n\n/**\n * Given a direction, is a certain node is a valid destination to navigate to\n */\nexport function isValidDestination(\n  objBB: Bounds,\n  curBB: Bounds,\n  direction: NavDirection,\n  compareCenters: boolean\n) {\n  // compare the centers of the navigable and to be valid, the navigable must be in the right direction\n  // without tolerance\n  if (compareCenters) {\n    const objCenterX = objBB.x + 0.5 * objBB.width;\n    const curCenterX = curBB.x + 0.5 * curBB.width;\n    const objCenterY = objBB.y + 0.5 * objBB.height;\n    const curCenterY = curBB.y + 0.5 * curBB.height;\n\n    switch (direction) {\n      case 'up':\n        return objCenterY < curCenterY;\n      case 'down':\n        return objBB.y > curCenterY;\n      case 'right':\n        return objCenterX > curCenterX;\n      case 'left':\n        return objCenterX < curCenterX;\n      default:\n        break;\n    }\n    return true;\n  }\n\n  switch (direction) {\n    case 'up':\n      return objBB.y < curBB.y || _areEqualWithinTolerance(objBB.y, curBB.y);\n    case 'down':\n      return objBB.y > curBB.y || _areEqualWithinTolerance(objBB.y, curBB.y);\n    case 'right':\n      return objBB.x > curBB.x || _areEqualWithinTolerance(objBB.x, curBB.x);\n    case 'left':\n      return objBB.x < curBB.x || _areEqualWithinTolerance(objBB.x, curBB.x);\n    default:\n      break;\n  }\n  return true;\n}\n\n/**\n * Returns true if two nodes are in contact\n */\nexport function calcInContact(objRect: Bounds, curRect: Bounds, direction: NavDirection) {\n  switch (direction) {\n    case 'up':\n      return (\n        _isVerticallyAligned(objRect, curRect) &&\n        (curRect.y <= objRect.y + objRect.height ||\n          _areEqualWithinTolerance(curRect.y, objRect.y + objRect.height))\n      );\n    case 'down':\n      return (\n        _isVerticallyAligned(objRect, curRect) &&\n        (objRect.y <= curRect.y + curRect.height ||\n          _areEqualWithinTolerance(objRect.y, curRect.y + curRect.height))\n      );\n    case 'right':\n      return (\n        _isHorizontallyAligned(objRect, curRect) &&\n        (objRect.x <= curRect.x + curRect.width ||\n          _areEqualWithinTolerance(objRect.x, curRect.x + curRect.width))\n      );\n    case 'left':\n      return (\n        _isHorizontallyAligned(objRect, curRect) &&\n        (curRect.x <= objRect.x + objRect.width ||\n          _areEqualWithinTolerance(curRect.x, objRect.x + objRect.width))\n      );\n    default:\n      break;\n  }\n\n  return false;\n}\n\nfunction _isVerticallyAligned(rect1: Bounds, rect2: Bounds) {\n  return (\n    (rect1.x >= rect2.x && rect1.x <= rect2.x + rect2.width) ||\n    (rect2.x >= rect1.x && rect2.x <= rect1.x + rect1.width)\n  );\n}\n\nfunction _isHorizontallyAligned(rect1: Bounds, rect2: Bounds) {\n  return (\n    (rect1.y >= rect2.y && rect1.y <= rect2.y + rect2.height) ||\n    (rect2.y >= rect1.y && rect2.y <= rect1.y + rect1.height)\n  );\n}\n\nfunction _areEqualWithinTolerance(a: number, b: number) {\n  return Math.abs(a - b) <= 0.0000001;\n}\n\nfunction _anglesAreEqualWithinTolerance(a1: number, a2: number) {\n  let res = Math.abs(a1 - a2) <= 0.0000001;\n  if (!res) {\n    res = Math.abs(Math.PI * 2 + Math.min(a1, a2) - Math.max(a1, a2)) <= 0.0000001;\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  NavDirection,\n  addSortingAttributes,\n  calcDistanceAngleWeighted,\n  calcInContact,\n  getLinkComparator,\n  getNavigableLinksForNodeId,\n  getNodeDetailFromInfo,\n  isValidDestination\n} from '../utils/navUtils';\nimport type { DiagramNodeData, DiagramLinkData, Bounds, ItemInfo } from '../diagram.types';\nimport { useRef } from 'preact/hooks';\n\nexport function useDiagramNavigation<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(nodes: D1[], links: D2[], bounds: Map<K1, Bounds>, linkIdToDataMap: Map<K2, D2>) {\n  const currentKeyboardFocusNode = useRef<K1>();\n  const nodeBoundsById = bounds;\n\n  function getNextNavigableNode(\n    direction: NavDirection,\n    compareCenters: boolean,\n    current?: D1,\n    listOfObjects?: D1[]\n  ) {\n    if (!listOfObjects) return current;\n\n    if (!current) return listOfObjects[0];\n    const currBB = nodeBoundsById.get(current.id);\n    if (!currBB) return listOfObjects[0];\n\n    let nextObject = current; //init to current object\n    let nextDistance = Number.MAX_VALUE;\n\n    // If an object is in contact it overrules all other attributes\n    // Only another in contact object with better attributes will have higher precedence\n    let nextInContact = false;\n\n    // Whether or not the for loop has encountered the current object\n    let hasFoundCurrent = false;\n\n    let object, inContact, distance;\n    for (let i = 0; i < listOfObjects.length; i++) {\n      object = listOfObjects[i];\n\n      if (object === current) {\n        hasFoundCurrent = true;\n        continue;\n      }\n      const objBB = nodeBoundsById.get(object.id);\n      if (!objBB) continue;\n\n      const objBounds = { x: objBB.x, y: objBB.y, width: objBB.width, height: objBB.height };\n      const currBounds = { x: currBB.x, y: currBB.y, width: currBB.width, height: currBB.height };\n      if (!isValidDestination(objBounds, currBounds, direction, compareCenters)) continue;\n\n      inContact = calcInContact(objBounds, currBounds, direction);\n\n      if (nextInContact && !inContact) continue;\n\n      distance = calcDistanceAngleWeighted(objBounds, currBounds, direction);\n\n      if (distance == 0 && !hasFoundCurrent) continue;\n\n      // Make sure incontact flag have highest precedence\n      if (\n        (!nextInContact && inContact) ||\n        (distance < nextDistance && ((nextInContact && inContact) || !nextInContact))\n      ) {\n        nextDistance = distance;\n        nextObject = object;\n        nextInContact = inContact;\n      }\n    }\n    return nextObject;\n  }\n\n  /**\n   * Get next navigavle link depending on direction - clockwise or conter clockwise.\n   * The decision is made based on location of nodes centers rather than link paths or link angles.\n   */\n  function getNextNavigableLink(\n    direction: string,\n    listOfNodes: D1[],\n    currentLink?: D2,\n    listOfLinks?: D2[]\n  ) {\n    if (!listOfLinks) return currentLink;\n\n    if (!currentLink) return listOfLinks[0];\n    const keyboardFocusNode = currentKeyboardFocusNode.current;\n    const nodeId = keyboardFocusNode ? keyboardFocusNode : currentLink.startNode;\n    const node = getNodeDetailFromInfo({ id: nodeId, type: 'node' }, listOfNodes);\n\n    if (!node) return currentLink;\n    const adjLinks = getNavigableLinksForNodeId(node.id, listOfLinks);\n    listOfLinks = adjLinks;\n    const linksWithSortingAttributes = addSortingAttributes<K1, K2, D1, D2>(\n      node,\n      listOfLinks,\n      listOfNodes,\n      nodeBoundsById\n    );\n    linksWithSortingAttributes.sort(getLinkComparator());\n    //clockwise direction\n    const bForward = direction == 'down' ? true : false;\n    let index = 0;\n    for (let i = 0; i < linksWithSortingAttributes.length; i++) {\n      const link = linksWithSortingAttributes[i];\n      if (link.id === currentLink.id) {\n        if (bForward) index = i == linksWithSortingAttributes.length - 1 ? 0 : i + 1;\n        else index = i == 0 ? linksWithSortingAttributes.length - 1 : i - 1;\n        break;\n      }\n    }\n    return linksWithSortingAttributes[index];\n  }\n\n  /**\n   * Returns the link detail when a node to link navigation occurs\n   */\n  function navigateFromNodeToLink(listOfLinks: D2[], event: KeyboardEvent, node?: D1) {\n    if (!node) return undefined;\n    const adjLinks = getNavigableLinksForNodeId(node.id, listOfLinks);\n    if (adjLinks.length < 1) return undefined;\n    let link = adjLinks[0];\n    const nodeBB = nodeBoundsById.get(node.id)!;\n    let object, currNode, currNodeBB, currNodeBBCenterX;\n    const nodeCenterX = nodeBB.x + nodeBB.width / 2;\n    currentKeyboardFocusNode.current = node.id;\n    for (let i = 0; i < adjLinks.length; i++) {\n      object = adjLinks[i];\n      currNode = object.startNode === node.id ? object.endNode : object.startNode;\n      currNodeBB = nodeBoundsById.get(currNode);\n      currNodeBBCenterX = currNodeBB!.x + currNodeBB!.width / 2;\n      if (\n        // equivalent of ≤ and ≥\n        (event.altKey && event.code === 'Comma' && currNodeBBCenterX <= nodeCenterX) ||\n        (event.altKey && event.code === 'Period' && currNodeBBCenterX >= nodeCenterX)\n      ) {\n        link = object;\n        break;\n      }\n    }\n    return { id: link.id, type: 'link' };\n  }\n\n  /**\n   * Returns the node detail when a link to node navigation occurs\n   */\n  function navigateFromLinkToNode(linkId: K2, event: KeyboardEvent) {\n    const key = event.key;\n    const linkData = linkIdToDataMap.get(linkId)!;\n    const startNodeBB = nodeBoundsById.get(linkData.startNode);\n    const endNodeBB = nodeBoundsById.get(linkData.endNode);\n    if (!startNodeBB || !endNodeBB) return undefined;\n    const startNodeCenterX = startNodeBB.x + startNodeBB.width / 2;\n    const endNodeCenterX = endNodeBB.x + endNodeBB.width / 2;\n    const newNode =\n      (endNodeCenterX > startNodeCenterX && key === 'ArrowRight') ||\n      (endNodeCenterX < startNodeCenterX && key === 'ArrowLeft')\n        ? linkData.endNode\n        : linkData.startNode;\n    return { id: newNode, type: 'node' };\n  }\n\n  return {\n    isNode: (itemInfo: ItemInfo<K1, K2>): boolean => {\n      let node, link;\n      for (let i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        link = links[i];\n        if (itemInfo.id === node.id) {\n          return true;\n        }\n        if (itemInfo.id === link.id) {\n          return true;\n        }\n      }\n      return false;\n    },\n    getNextNavigableNode,\n    getNextNavigableLink,\n    navigateFromNodeToLink,\n    navigateFromLinkToNode\n  };\n}\n","import {\n  ItemInfo,\n  ItemHoverDetail,\n  ItemFocusDetail,\n  Bounds,\n  DiagramNodeData,\n  DiagramLinkData,\n  ExpandedItemDetail\n} from '../diagram.types';\nimport { useRef, useState } from 'preact/hooks';\nimport {\n  isEqualItem,\n  getNavigableInfo,\n  zoomAndCenterItemFromInfo,\n  changeExpanded,\n  expCollapseButtonId\n} from '../utils/diagramUtils';\nimport { getRandomId } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { getNodeDetailFromInfo, getLinkDetailFromInfo } from '../utils/navUtils';\nimport { useDiagramNavigation } from './useDiagramNavigation';\nimport type { NavDirection } from '../utils/navUtils';\nimport { useVisHover } from '#hooks/PRIVATE_useVisHover';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { gestureTypes } from '#hooks/PRIVATE_useVisContextMenu';\n\nconst DEFAULT_KB_PAN = 15;\nconst DEFAULT_KB_ZOOM = 0.15;\n\nexport function useEvents<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>(\n  touchResponse: 'touchStart' | 'touchHold',\n  initNode: D1,\n  nodes: D1[],\n  links: D2[],\n  nodeBounds: Map<K1, Bounds>,\n  linkIdToDataMap: Map<K2, D2>,\n  nodeIdToDataMap: Map<K1, D1>,\n  promotedLinkIdToDataMap: Map<string, DiagramLinkData<string, K1>>,\n  width: number,\n  height: number,\n  maxZoom: number,\n  expanded: K1[],\n  itemIdToParentMap: Map<K1, K1>,\n  onItemHover?: (detail: ItemHoverDetail<K1, K2, D1, D2>) => void,\n  onItemFocus?: (detail: ItemFocusDetail<K1, K2, D1, D2>) => void,\n  kbPanCallback?: (props: {\n    dPan?: { dx: number; dy: number };\n    nPan?: { cx: number; cy: number };\n    center?: boolean;\n  }) => void,\n  kbZoomCallback?: (props: { dZoom?: number; nZoom?: number }) => void,\n  onExpandedChange?: (detail: ExpandedItemDetail<K1>) => void\n) {\n  const {\n    getNextNavigableNode,\n    getNextNavigableLink,\n    navigateFromNodeToLink,\n    navigateFromLinkToNode\n  } = useDiagramNavigation<K1, K2, D1, D2>(nodes, links, nodeBounds, linkIdToDataMap);\n  const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo<K1, K2>>({\n    id: initNode.id,\n    type: 'node'\n  });\n  const [hoveredItemInfo, sethoveredItemInfo] = useState<ItemInfo<K1, K2>>();\n  const activeId = useRef<string>();\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n    let eventConsumed = false;\n    // tabbing out of the diagram\n    if (key === 'TAB') {\n      return;\n    }\n    // if this a switch from node to link or vice versa\n    if (isChangeItemType(event)) {\n      const nextItemInfo = (\n        focusedItemInfo.type === 'node'\n          ? navigateFromNodeToLink(links, event, getNodeDetailFromInfo(focusedItemInfo, nodes))\n          : navigateFromLinkToNode(focusedItemInfo.id as K2, event)\n      ) as ItemInfo<K1, K2>;\n      handleKeyboardInput(nextItemInfo);\n      eventConsumed = true;\n    } else if (isNavigationEvent(key)) {\n      const nextItemInfo = handleKeyboardNavigationEvent(key) as ItemInfo<K1, K2>;\n      handleKeyboardInput(nextItemInfo);\n      eventConsumed = true;\n    } else {\n      switch (key) {\n        case 'PageUp': {\n          kbPanCallback &&\n            kbPanCallback({\n              dPan: {\n                dx: event.shiftKey ? -DEFAULT_KB_PAN : 0,\n                dy: event.shiftKey ? 0 : -DEFAULT_KB_PAN\n              }\n            });\n          eventConsumed = true;\n          break;\n        }\n        case 'PageDown': {\n          kbPanCallback &&\n            kbPanCallback({\n              dPan: {\n                dx: event.shiftKey ? DEFAULT_KB_PAN : 0,\n                dy: event.shiftKey ? 0 : DEFAULT_KB_PAN\n              }\n            });\n          eventConsumed = true;\n          eventConsumed = true;\n          break;\n        }\n        case '+':\n        case '=': {\n          kbZoomCallback && kbZoomCallback({ dZoom: DEFAULT_KB_ZOOM });\n          eventConsumed = true;\n          break;\n        }\n        case '-':\n        case '_': {\n          kbZoomCallback && kbZoomCallback({ dZoom: -DEFAULT_KB_ZOOM });\n          eventConsumed = true;\n          break;\n        }\n        case '0': {\n          if (event.ctrlKey && event.altKey) {\n            const { centerX, centerY, zoom } = zoomAndCenterItemFromInfo(\n              focusedItemInfo,\n              linkIdToDataMap,\n              nodeBounds,\n              width,\n              height,\n              maxZoom\n            );\n            kbZoomCallback && kbZoomCallback({ nZoom: zoom });\n            kbPanCallback && kbPanCallback({ nPan: { cx: centerX, cy: centerY } });\n          } else {\n            // zoom to fit\n            kbZoomCallback && kbZoomCallback({});\n            kbPanCallback && kbPanCallback({ center: true });\n          }\n          eventConsumed = true;\n          break;\n        }\n        case ' ': {\n          if (event.ctrlKey && event.shiftKey) {\n            if (focusedItemInfo.type === 'node') {\n              const id = focusedItemInfo.id as K1;\n              const newExpanded = changeExpanded(id, expanded);\n              const data: D1[] = [];\n              newExpanded.forEach((id) => {\n                data.push(nodeIdToDataMap.get(id)!);\n              });\n              onExpandedChange && onExpandedChange(newExpanded);\n            }\n          }\n          break;\n        }\n        case '[': {\n          if (focusedItemInfo.type === 'node') {\n            const child = getChildInfo(focusedItemInfo.id as K1);\n            if (child) {\n              const item = { id: child.id, type: 'node' } as ItemInfo<K1, K2>;\n              handleKeyboardInput(item);\n            }\n          }\n          eventConsumed = true;\n          break;\n        }\n        case ']': {\n          if (focusedItemInfo.type === 'node') {\n            const parentId = itemIdToParentMap.get(focusedItemInfo.id as K1);\n            if (parentId) {\n              const item = { id: parentId, type: 'node' } as ItemInfo<K1, K2>;\n              handleKeyboardInput(item);\n            }\n          }\n          eventConsumed = true;\n          break;\n        }\n      }\n    }\n    if (eventConsumed) {\n      cancelEvent(event);\n    }\n  };\n\n  const getChildInfo = (id: K1) => {\n    const children = nodeIdToDataMap.get(id)?.children;\n    if (children && children.length > 0) {\n      return children[0];\n    }\n    return undefined;\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.code;\n    switch (key) {\n      case 'Tab': {\n        updatefocusedItemInfo({\n          ...focusedItemInfo,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n    }\n  };\n\n  const blurHandler = () => {\n    if (hoveredItemInfo != null || focusedItemInfo.isCurrent) {\n      onItemFocus?.({ id: undefined, data: undefined });\n    }\n    const itemInfo = { ...focusedItemInfo, isCurrent: false, isFocusVisible: false };\n    setfocusedItemInfo(itemInfo);\n  };\n\n  const onHover = (event: PointerEvent) => {\n    const itemInfo = getNavigableInfo<K1, K2>(event.target as HTMLElement);\n    if (itemInfo && !isEqualItem(itemInfo, hoveredItemInfo)) {\n      sethoveredItemInfo({ ...itemInfo, isCurrent: true });\n      activeId.current = getRandomId();\n      setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false });\n      if (itemInfo.type === 'node') {\n        onItemHover?.({\n          id: itemInfo.id,\n          type: 'node',\n          data: nodeIdToDataMap.get(itemInfo.id as K1)\n        });\n      } else if (itemInfo.type === 'link') {\n        onItemHover?.({\n          id: itemInfo.id,\n          type: 'link',\n          data: linkIdToDataMap.get(itemInfo.id as K2)\n        });\n      } else if (itemInfo.type === 'promotedLink') {\n        onItemHover?.({\n          id: itemInfo.id,\n          type: 'promotedLink',\n          data: promotedLinkIdToDataMap.get(itemInfo.id)\n        });\n      }\n    }\n  };\n\n  const onHoverLeave = () => {\n    sethoveredItemInfo(undefined);\n    activeId.current = undefined;\n    onItemHover?.({ id: undefined, data: undefined });\n  };\n\n  const hoverHandlers = useVisHover(onHover, undefined, onHoverLeave, touchResponse);\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const itemInfo = getNavigableInfo<K1, K2>(event.target as HTMLElement);\n    if (itemInfo.id != null) {\n      let buttonId;\n      if (itemInfo.type === 'node') {\n        buttonId = expCollapseButtonId<K1>(event.target as HTMLElement);\n        if (buttonId) {\n          console.log('button');\n          const newExpanded = changeExpanded(buttonId, expanded);\n          const data: D1[] = [];\n          newExpanded.forEach((id) => {\n            data.push(nodeIdToDataMap.get(id)!);\n          });\n          onExpandedChange && onExpandedChange(newExpanded);\n          console.log(newExpanded);\n          event.preventDefault();\n          event.stopPropagation();\n          return;\n        }\n      }\n      console.log(itemInfo);\n      console.log(event.target);\n      setfocusedItemInfo(itemInfo);\n      activeId.current = getRandomId();\n    }\n  };\n\n  function updatefocusedItemInfo(itemInfo: ItemInfo<K1, K2>) {\n    if (itemInfo.type === 'node') {\n      onItemFocus?.({\n        id: itemInfo.id as K1,\n        type: 'node',\n        data: nodeIdToDataMap.get(itemInfo.id)\n      });\n    } else if (itemInfo.type === 'link') {\n      onItemFocus?.({\n        id: itemInfo.id as K2,\n        type: 'link',\n        data: linkIdToDataMap.get(itemInfo.id)\n      });\n    } else if (itemInfo.type === 'promotedLink') {\n      onItemFocus?.({\n        id: itemInfo.id,\n        type: 'promotedLink',\n        data: promotedLinkIdToDataMap.get(itemInfo.id)\n      });\n    }\n    activeId.current = getRandomId();\n    setfocusedItemInfo(itemInfo);\n  }\n\n  function handleKeyboardInput(item?: ItemInfo<K1, K2>) {\n    if (!item) return;\n    if (!isEqualItem(item, focusedItemInfo)) {\n      item.isCurrent = true;\n      item.isFocusVisible = true;\n      if (hoveredItemInfo) {\n        sethoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      updatefocusedItemInfo(item);\n    }\n  }\n\n  function isNavigationEvent(key: string) {\n    switch (key) {\n      case 'ArrowDown':\n      case 'ArrowUp':\n      case 'ArrowRight':\n      case 'ArrowLeft': {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isChangeItemType(event: KeyboardEvent) {\n    const key = event.code;\n    // check if switching from node to link\n    // equivalent of ≤ and ≥\n    if (focusedItemInfo.type === 'node' && event.altKey && (key === 'Period' || key === 'Comma')) {\n      return true;\n      // check if switching from link to node\n    } else if (\n      !(focusedItemInfo.type === 'node') &&\n      (key === 'ArrowLeft' || key === 'ArrowRight')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function handleKeyboardNavigationEvent(key: string) {\n    let direction: NavDirection = 'down';\n    switch (key) {\n      case 'ArrowDown': {\n        direction = 'down';\n        break;\n      }\n      case 'ArrowUp': {\n        direction = 'up';\n        break;\n      }\n      case 'ArrowRight': {\n        direction = 'right';\n        break;\n      }\n      case 'ArrowLeft': {\n        direction = 'left';\n        break;\n      }\n    }\n    if (focusedItemInfo.type === 'node') {\n      const parent = itemIdToParentMap.get(focusedItemInfo.id as K1);\n      const navigableNodes =\n        parent && nodeIdToDataMap.get(parent) ? nodeIdToDataMap.get(parent)!.children! : nodes;\n      const itemDetail = getNextNavigableNode(\n        direction,\n        true,\n        nodeIdToDataMap.get(focusedItemInfo.id as K1),\n        navigableNodes\n      );\n      return itemDetail ? { id: itemDetail.id, type: 'node' } : focusedItemInfo;\n    } else {\n      const linkDetail = getLinkDetailFromInfo<K1, K2, D2>(focusedItemInfo, links);\n      const itemDetail = getNextNavigableLink(direction, nodes, linkDetail, links);\n      return itemDetail\n        ? { id: itemDetail.id, type: 'link' }\n        : { id: focusedItemInfo.id, type: 'link' };\n    }\n  }\n  const onContextMenuDismissed = (gesture: gestureTypes) => {\n    if (gesture === 'keyboard') {\n      updatefocusedItemInfo({\n        ...focusedItemInfo,\n        isFocusVisible: true,\n        isCurrent: true\n      });\n    }\n  };\n\n  return {\n    focusedItemInfo,\n    hoveredItemInfo,\n    activeId: activeId.current,\n    onContextMenuDismissed,\n    eventsProps: mergeProps(hoverHandlers, {\n      onKeyUp: keyUpHandler,\n      onKeyDown: keyDownHandler,\n      onBlur: blurHandler,\n      onPointerUp: pointerUpHandler\n    })\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type {\n  ItemInfo,\n  Bounds,\n  DatatipContext,\n  DiagramNodeData,\n  DiagramLinkData\n} from '../diagram.types';\nimport type { RefObject } from 'preact';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\nimport { calculateOffset } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport type { Pan } from '../utils/panUtils';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getDatatipContent } from '../utils/diagramUtils';\nimport { ComponentChildren } from 'preact';\nimport { Property } from 'csstype';\n\ntype props<K1, K2, D1, D2> = {\n  touchResponse: 'touchStart' | 'touchHold';\n  datatip?: (context: DatatipContext<D1, D2>) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  };\n  text?: string;\n  focusedItemInfo: ItemInfo<K1, K2>;\n  focusedItemBoundsRef: RefObject<Bounds | null>;\n  panState: Pan;\n  zoom: number;\n  width: number;\n  nodesMap: Map<K1, D1>;\n  linksMap: Map<K2, D2>;\n  hoveredItem?: ItemInfo<K1, K2>;\n};\n\n/**\n * Returns the datatip.\n * @param text The text string for the diagram item.\n * @param rootRef The ref for root of the diagram.\n * @param focusedItemBoundsRef The ref for focused item bounds.\n * @param focusedItemInfo The ItemInfo for focused item.\n * @returns\n */\nexport const useDiagramDatatip = <\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>({\n  touchResponse,\n  datatip,\n  focusedItemBoundsRef,\n  focusedItemInfo,\n  panState,\n  zoom,\n  width,\n  nodesMap,\n  linksMap,\n  hoveredItem\n}: props<K1, K2, D1, D2>) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const datatipC = getDatatipContent(nodesMap, linksMap, focusedItemInfo, hoveredItem, datatip);\n\n  const elementBounds = focusedItemBoundsRef.current\n    ? {\n        x: focusedItemBoundsRef.current.x * zoom + panState.panX,\n        y: focusedItemBoundsRef.current.y * zoom + panState.panY,\n        width: focusedItemBoundsRef.current.width * zoom,\n        height: focusedItemBoundsRef.current.height * zoom\n      }\n    : undefined;\n  const offset = focusedItemInfo.isCurrent\n    ? calculateOffset(isRtl, width, elementBounds)\n    : calculateOffset(isRtl, width);\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: datatipC?.content,\n    borderColor: datatipC?.borderColor,\n    placement: 'top-start',\n    offset,\n    anchor: focusedItemInfo?.isCurrent ? 'element' : 'pointer',\n    touchResponse\n  });\n  return { datatipContent: datatipContent, datatipProps: datatipProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\n\ntype PointerGesture = {\n  pointers: PointerEvent[];\n};\n\ntype UsePointerGestureOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  numPointers: number;\n  onPointerGestureDown?: (detail: PointerGesture) => void;\n  onPointerGestureMove?: (detail: PointerGesture) => void;\n  onPointerGestureEnd?: (detail: PointerGesture) => void;\n  onExtraneousPointerDown?: (detail: PointerGesture) => void;\n  isDisabled?: boolean;\n};\n\nconst usePointerGesture = ({\n  captureTargetRef,\n  numPointers = 1,\n  onPointerGestureDown,\n  onPointerGestureMove,\n  onPointerGestureEnd,\n  onExtraneousPointerDown,\n  isDisabled = false\n}: UsePointerGestureOptions) => {\n  const activePointers = useRef<PointerEvent[]>([]);\n\n  if (isDisabled) {\n    activePointers.current = [];\n  }\n\n  const onPointerDown = (e: PointerEvent) => {\n    activePointers.current.push(e);\n    if (activePointers.current.length === numPointers) {\n      onPointerGestureDown && onPointerGestureDown({ pointers: activePointers.current });\n    } else if (activePointers.current.length > numPointers) {\n      onExtraneousPointerDown && onExtraneousPointerDown({ pointers: activePointers.current });\n    }\n  };\n\n  const onPointerMove = (e: PointerEvent) => {\n    if (activePointers.current.length === 0) return;\n\n    const index = activePointers.current.findIndex(\n      (pointerEvent) => pointerEvent.pointerId === e.pointerId\n    );\n    if (index === -1) return;\n\n    activePointers.current[index] = e;\n    if (activePointers.current.length === numPointers) {\n      activePointers.current.forEach((e) =>\n        captureTargetRef.current!.setPointerCapture(e.pointerId)\n      );\n\n      onPointerGestureMove && onPointerGestureMove({ pointers: activePointers.current });\n    }\n  };\n\n  const onPointerUp = (e: PointerEvent) => {\n    const index = activePointers.current.findIndex(\n      (pointerEvent) => pointerEvent.pointerId === e.pointerId\n    );\n    if (index === -1) return;\n\n    activePointers.current[index] = e;\n    if (activePointers.current.length === numPointers) {\n      onPointerGestureEnd && onPointerGestureEnd({ pointers: activePointers.current });\n    }\n    activePointers.current.splice(index, 1);\n  };\n\n  const onPointerCancel = onPointerUp;\n  const onPointerLeave = onPointerUp;\n\n  return isDisabled\n    ? {}\n    : {\n        onPointerDown,\n        onPointerMove,\n        onPointerUp,\n        onPointerCancel,\n        onPointerLeave\n      };\n};\n\nexport { usePointerGesture };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Bounds, PanState } from '../diagram.types';\nimport { panXYToCenterXY } from './diagramUtils';\nexport type PanBounds = {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n};\n\n/**\n * The pan values that describes where the diagram content\n * is panned\n */\nexport type Pan = {\n  panX: number;\n  panY: number;\n};\n\nconst constrainPan = (\n  previousPan: Pan,\n  nextPan: Pan,\n  panBounds: PanBounds,\n  panDirection: 'x' | 'y' | 'any'\n) => {\n  const panX = panDirection !== 'y' ? nextPan.panX : previousPan.panX;\n  const panY = panDirection !== 'x' ? nextPan.panY : previousPan.panY;\n  return {\n    panX: panX > panBounds.maxX ? panBounds.maxX : panX < panBounds.minX ? panBounds.minX : panX,\n    panY: panY > panBounds.maxY ? panBounds.maxY : panY < panBounds.minY ? panBounds.minY : panY\n  };\n};\n\nexport const pan = (\n  previousPan: Pan,\n  nextPan: Pan,\n  panDirection: 'x' | 'y' | 'any',\n  zoom: number,\n  width: number,\n  height: number,\n  panBounds?: PanBounds,\n  onPanChange?: (detail: PanState) => void\n) => {\n  if (!panBounds) {\n    //On initial render before nodes are rendered\n    return { newPan: { panX: 0, panY: 0 } };\n  }\n  const newPan = constrainPan(previousPan, nextPan, panBounds, panDirection);\n  const isPanChanged = newPan.panX !== previousPan.panX || newPan.panY !== previousPan.panY;\n  const center = panXYToCenterXY(newPan.panX, newPan.panY, zoom, width, height);\n  isPanChanged &&\n    onPanChange &&\n    onPanChange({\n      centerX: center.centerX,\n      centerY: center.centerY\n    });\n  return { newPan };\n};\n\nexport const getPanBounds = (\n  dWidth: number,\n  dHeight: number,\n  elemBounds: Bounds,\n  zoom: number,\n  minZoom: number,\n  initPanZoomState: {\n    zoom: number;\n    centerX?: number;\n    centerY?: number;\n  },\n  panType?: string\n): PanBounds => {\n  const { x, y, width, height } = elemBounds;\n  let minX, maxX, minY, maxY;\n  if (panType === 'centerContent') {\n    minX = dWidth / 2 - (width + x) * zoom;\n    minY = dHeight / 2 - (height + y) * zoom;\n    maxX = dWidth / 2 - x * zoom;\n    maxY = dHeight / 2 - y * zoom;\n  } else {\n    // panType equals fixed\n    const zoomRatio = zoom / minZoom;\n    // Find left corner of the content at min zoom and content is centered\n    const minZoomX = (dWidth - width * minZoom) / 2 - x * minZoom;\n    const minZoomY = (dHeight - height * minZoom) / 2 - y * minZoom;\n    // When we pan all the way to the right, the left corner of displayable area is 0,0 as in min zoom.\n    // When we pan all the way to the left, lets find the corner of the displayable area\n    const leftCornerX = dWidth - dWidth * zoomRatio;\n    const leftCornerY = dHeight - dHeight * zoomRatio;\n    // Now we have everything to calculate pan zoom constraints\n    minX = leftCornerX + minZoomX * zoomRatio;\n    minY = leftCornerY + minZoomY * zoomRatio;\n    maxX = minZoomX * zoomRatio;\n    maxY = minZoomY * zoomRatio;\n  }\n  const initZoom = initPanZoomState.zoom;\n  const initCenterX = initPanZoomState.centerX;\n  const initCenterY = initPanZoomState.centerY;\n  // If an initial panZoomState is set, should expand pan bounds to include it\n  let dx, dy;\n  if (initCenterX) {\n    const boundsX = initCenterX * initZoom - dWidth / 2;\n    if (-boundsX * initZoom < minX) {\n      dx = minX - boundsX * initZoom;\n      minX -= dx;\n      maxX += dx;\n    } else if (-boundsX * initZoom > maxX) {\n      dx = -boundsX * initZoom - maxX;\n      minX -= dx;\n      maxX += dx;\n    }\n  }\n  if (initCenterY) {\n    const boundsY = initCenterY * initZoom - dHeight / 2;\n    if (-boundsY * initZoom < minY) {\n      dy = minY - boundsY * initZoom;\n      minY -= dy;\n      maxY += dy;\n    } else if (-boundsY * initZoom > maxY) {\n      dy = -boundsY * initZoom - maxY;\n      minY -= dy;\n      maxY += dy;\n    }\n  }\n  return {\n    minX: minX,\n    maxX: maxX,\n    minY: minY,\n    maxY: maxY\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { PanState } from '../diagram.types';\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { useDrag } from './useDrag';\nimport { PanBounds, pan } from '../utils/panUtils';\nimport { centerXYToPanXY } from '../utils/diagramUtils';\n/**\n * Options for useDragPan hook\n */\ntype UseDragPanOptions = {\n  panProps: {\n    centerX: number;\n    centerY: number;\n    panDirection: 'x' | 'y' | 'any';\n    onPan?: (detail: PanState) => void;\n    panning?: 'centerContent' | 'fixed' | 'off';\n  };\n  captureTargetRef: RefObject<HTMLDivElement>;\n  panBounds?: PanBounds;\n  onDragPanStart?: () => void;\n  onDragPanEnd?: () => void;\n  zoom: number;\n  width: number;\n  height: number;\n};\n\nconst useDragPan = ({\n  panProps,\n  captureTargetRef,\n  panBounds,\n  width,\n  height,\n  zoom,\n  onDragPanStart,\n  onDragPanEnd\n}: UseDragPanOptions) => {\n  const prevPanState = useRef({ panX: 0, panY: 0 });\n  const initialPanState = useRef({ panX: 0, panY: 0 });\n  const dragProps = useDrag({\n    captureTargetRef,\n    onDragStart: () => {\n      const panValues = centerXYToPanXY(panProps.centerX, panProps.centerY, zoom, width, height);\n      initialPanState.current = {\n        panX: panValues.panX,\n        panY: panValues.panY\n      };\n      onDragPanStart && onDragPanStart();\n    },\n    onDragMove: ({ dx, dy }) => {\n      const nextPan = {\n        panX: initialPanState.current.panX + dx,\n        panY: initialPanState.current.panY + dy\n      };\n      const { newPan } = pan(\n        prevPanState.current,\n        nextPan,\n        panProps.panDirection,\n        zoom,\n        width,\n        height,\n        panBounds,\n        panProps.onPan\n      );\n      prevPanState.current = newPan;\n    },\n    onDragEnd: ({ originalEvent }) => {\n      // If panning occurred, call preventDefault to prevent selection from occurring\n      if (\n        initialPanState.current.panX !== prevPanState.current.panX ||\n        initialPanState.current.panY !== prevPanState.current.panY\n      )\n        originalEvent.preventDefault();\n      onDragPanEnd && onDragPanEnd();\n    },\n    isDisabled: panProps.panning === 'off'\n  });\n\n  return dragProps;\n};\n\nexport { useDragPan };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { usePointerGesture } from './usePointerGesture';\n/**\n * Draggable region\n */\ntype DraggableRegion = {\n  xMin: number;\n  xMax: number;\n  yMin: number;\n  yMax: number;\n};\n\ntype DragDetail = {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  regionOffsetX: number;\n  regionOffsetY: number;\n  originalEvent: PointerEvent;\n};\n\ntype UseDragOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  draggableRegion?: DraggableRegion;\n  onDragStart?: (detail: Omit<DragDetail, 'dx' | 'dy'>) => void;\n  onDragMove?: (detail: DragDetail) => void;\n  onDragEnd?: (detail: DragDetail) => void;\n  isDisabled?: boolean;\n};\n/**\n * Whether point with coordinates are in the draggable region\n */\nconst inDraggableRegion = (x: number, y: number, region?: DraggableRegion) => {\n  if (!region) return true;\n  const { xMin, xMax, yMin, yMax } = region;\n  return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n};\n\n/**\n * Returns region offset\n */\nconst getRegionOffset = (x: number, y: number, region?: DraggableRegion) => {\n  if (!region) return { regionOffsetX: x, regionOffsetY: y };\n  return { regionOffsetX: x - region.xMin, regionOffsetY: y - region.yMin };\n};\n\nconst useDrag = ({\n  captureTargetRef,\n  draggableRegion,\n  onDragStart,\n  onDragMove,\n  onDragEnd,\n  isDisabled = false\n}: UseDragOptions) => {\n  const inactiveState = { isDragging: false, x0: -1, y0: -1, regionOffsetX: -1, regionOffsetY: -1 };\n  const dragState = useRef(inactiveState);\n\n  const handlePointerEvent = (e: PointerEvent, cb?: (detail: DragDetail) => void) => {\n    const { isDragging, x0, y0, regionOffsetX, regionOffsetY } = dragState.current;\n    if (!isDragging) return;\n    const x = e.pageX;\n    const y = e.pageY;\n    cb && cb({ x, y, dx: x - x0, dy: y - y0, regionOffsetX, regionOffsetY, originalEvent: e });\n  };\n\n  const dragProps = usePointerGesture({\n    captureTargetRef,\n    numPointers: 1, // Only allow 1 pointer dragging\n    onExtraneousPointerDown: () => {\n      dragState.current = inactiveState;\n    },\n    onPointerGestureDown: ({ pointers: [e] }) => {\n      const x = e.pageX;\n      const y = e.pageY;\n      if (e.button !== 0 || !inDraggableRegion(x, y, draggableRegion)) return;\n      const { regionOffsetX, regionOffsetY } = getRegionOffset(x, y, draggableRegion);\n      dragState.current = { isDragging: true, x0: x, y0: y, regionOffsetX, regionOffsetY };\n      onDragStart && onDragStart({ x, y, regionOffsetX, regionOffsetY, originalEvent: e });\n    },\n    onPointerGestureMove: ({ pointers: [e] }) => {\n      handlePointerEvent(e, onDragMove);\n    },\n    onPointerGestureEnd: ({ pointers: [e] }) => {\n      handlePointerEvent(e, onDragEnd);\n      dragState.current = inactiveState;\n    }\n  });\n\n  return isDisabled ? {} : dragProps;\n};\n\nexport { useDrag };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport const ZOOM_INCREMENT = 0.05;\n\nexport const zoom = (\n  nextZoom: number,\n  zoom: number,\n  minZoom: number,\n  maxZoom: number,\n  onZoomChange?: (detail: { zoomValue: number }) => void\n) => {\n  const newZoom = nextZoom > maxZoom || nextZoom < minZoom ? zoom : nextZoom;\n  const isZoomChanged = newZoom !== zoom;\n  isZoomChanged &&\n    onZoomChange &&\n    onZoomChange({\n      zoomValue: newZoom\n    });\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { usePointerGesture } from './usePointerGesture';\n\ntype Point = { x: number; y: number };\n\nconst getMidpoint = (p1: Point, p2: Point) => ({ x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 });\nconst getDistance = (p1: Point, p2: Point) => Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p2.y) ** 2);\n\ntype PinchDetail = {\n  origin: Point;\n  delta: number;\n};\n\ntype UsePinchOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  onPinchZoomStart?: (detail: PinchDetail) => void;\n  onPinchZoomChange?: (detail: PinchDetail) => void;\n  onPinchZoomEnd?: () => void;\n  isDisabled?: boolean;\n};\n\nconst usePinch = ({\n  captureTargetRef,\n  onPinchZoomStart,\n  onPinchZoomChange,\n  onPinchZoomEnd,\n  isDisabled = false\n}: UsePinchOptions) => {\n  const origin = useRef({ x: -1, y: -1 });\n  const prevDistance = useRef(-1);\n  const reset = () => {\n    origin.current = { x: -1, y: -1 };\n    prevDistance.current = -1;\n  };\n\n  if (isDisabled) reset();\n\n  const pinchProps = usePointerGesture({\n    captureTargetRef,\n    numPointers: 2, // Pinch gesture requires 2 pointers\n    onPointerGestureDown: ({ pointers: [pointer1, pointer2] }) => {\n      const p1 = { x: pointer1.offsetX, y: pointer1.offsetY };\n      const p2 = { x: pointer2.offsetX, y: pointer2.offsetY };\n      origin.current = getMidpoint(p1, p2);\n      prevDistance.current = getDistance(p1, p2);\n      onPinchZoomStart &&\n        onPinchZoomStart({\n          origin: origin.current,\n          delta: 0\n        });\n    },\n    onPointerGestureMove: ({ pointers: [pointer1, pointer2] }) => {\n      const p1 = { x: pointer1.offsetX, y: pointer1.offsetY };\n      const p2 = { x: pointer2.offsetX, y: pointer2.offsetY };\n      const distance = getDistance(p1, p2);\n      const delta = distance - prevDistance.current;\n      prevDistance.current = distance;\n      onPinchZoomChange &&\n        onPinchZoomChange({\n          origin: origin.current,\n          delta\n        });\n    },\n    onPointerGestureEnd: () => {\n      reset();\n      onPinchZoomEnd && onPinchZoomEnd();\n    }\n  });\n\n  return isDisabled ? {} : pinchProps;\n};\n\nexport { usePinch };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { usePinch } from './usePinch';\nimport { zoom, ZOOM_INCREMENT } from '../utils/zoomUtils';\n\ntype UsePinchZoomOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  zooming: 'on' | 'off';\n  minZoom: number;\n  maxZoom: number;\n  zoomValue: number;\n  onZoom?: (detail: { zoomValue: number }) => void;\n};\n\nconst usePinchZoom = ({\n  captureTargetRef,\n  zooming,\n  minZoom,\n  maxZoom,\n  zoomValue,\n  onZoom\n}: UsePinchZoomOptions) => {\n  const pinchProps = usePinch({\n    captureTargetRef,\n    onPinchZoomChange: ({ delta }) => {\n      const newZoom = zoomValue * (1 + ZOOM_INCREMENT * delta);\n      zoom(newZoom, zoomValue, minZoom, maxZoom, onZoom);\n    },\n    isDisabled: zooming === 'off'\n  });\n\n  return pinchProps;\n};\n\nexport { usePinchZoom };\n","import { Pan, Zoom, Bounds } from '../diagram.types';\nimport type { RefObject } from 'preact';\nimport { useState, useRef } from 'preact/hooks';\nimport { useDragPan } from './useDragPan';\nimport { useWheelZoom } from './useWheelZoom';\nimport { usePinchZoom } from './usePinchZoom';\nimport {\n  centerXYToPanXY,\n  getPanProps,\n  getZoomProps,\n  getZoomToFitZoom\n} from '../utils/diagramUtils';\nimport { PanBounds, getPanBounds, pan } from '../utils/panUtils';\nimport { zoom } from '../utils/zoomUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { isTouch } from '#utils/UNSAFE_visUtils/clientUtils';\nimport { Property } from 'csstype';\nimport { useVisDragModeControls } from '#hooks/PRIVATE_useVisDragModeControls';\n\nexport type PanZoomProps = {\n  props: Pan & Zoom;\n  captureTargetRef: RefObject<HTMLDivElement>;\n  width: number;\n  height: number;\n  contentBounds: Bounds;\n  isRtl: boolean;\n};\n\nexport const usePanZoom = ({\n  props,\n  captureTargetRef,\n  width,\n  height,\n  contentBounds,\n  isRtl\n}: PanZoomProps) => {\n  const [cursor, setCursor] = useState<Property.Cursor>();\n  const zoomProps = getZoomProps(props, width, height, contentBounds);\n  const panBounds = useRef<PanBounds>();\n  const prevZoom = useRef<number>();\n  const panning = useRef<string>();\n  const initPanZoomState = useRef({\n    zoom: props.zoomValue || 0,\n    centerX: props.centerX,\n    centerY: props.centerY\n  });\n\n  const isDeviceTouch = isTouch();\n  const plotArea = {\n    width: width,\n    height: height,\n    x: 0,\n    y: 0\n  };\n\n  const showPanButton = isDeviceTouch ? props.panning && props.panning !== 'off' : undefined;\n  const dragModeOptions = {\n    isZoomScroll: true,\n    plotAreaSpace: plotArea,\n    componentWidth: width,\n    isRtl,\n    showPanButton: showPanButton ?? false,\n    showZoomButton: false,\n    showSelectButton: false,\n    isDisabled: !isDeviceTouch\n  };\n\n  const { toggleButtonContent, userDragMode } = useVisDragModeControls(dragModeOptions);\n  const panProps = getPanProps(props, contentBounds, userDragMode, isDeviceTouch);\n  if (\n    contentBounds.width !== Infinity &&\n    (zoomProps.zoomValue !== prevZoom.current || panProps.panning !== panning.current)\n  ) {\n    panBounds.current = getPanBounds(\n      width,\n      height,\n      contentBounds,\n      zoomProps.zoomValue,\n      zoomProps.minZoom,\n      initPanZoomState.current,\n      panProps.panning\n    );\n    prevZoom.current = zoomProps.zoomValue;\n    panning.current = panProps.panning;\n  }\n  const dragPanProps = useDragPan({\n    panProps: panProps,\n    captureTargetRef: captureTargetRef,\n    panBounds: panBounds.current,\n    zoom: zoomProps.zoomValue,\n    width,\n    height,\n    onDragPanStart: () => setCursor('grabbing'),\n    onDragPanEnd: () => setCursor('auto')\n  });\n  //dZoom or nZoom is required\n  const kbZoomCallback = (props: { dZoom?: number; nZoom?: number }) => {\n    const newZoom = props.dZoom\n      ? zoomProps.zoomValue + props.dZoom\n      : getZoomToFitZoom(width, height, contentBounds);\n    zoom(\n      props.nZoom ? props.nZoom : newZoom,\n      zoomProps.zoomValue,\n      zoomProps.minZoom,\n      zoomProps.maxZoom,\n      zoomProps.onZoom\n    );\n  };\n  const prevPanState = useRef({ panX: 0, panY: 0 });\n\n  // dPan or nPan is required\n  const kbPanCallback = (props: {\n    dPan?: { dx: number; dy: number };\n    nPan?: { cx: number; cy: number };\n    center?: boolean;\n  }) => {\n    let centerX;\n    let centerY;\n    if (props.center) {\n      centerX = contentBounds.x + contentBounds.width / 2;\n      centerY = contentBounds.y + contentBounds.height / 2;\n    } else if (props.dPan) {\n      centerX = panProps.centerX + props.dPan.dx;\n      centerY = panProps.centerY + props.dPan.dy;\n    } else {\n      centerX = props.nPan!.cx;\n      centerY = props.nPan!.cy;\n    }\n    const panValues = centerXYToPanXY(centerX, centerY, zoomProps.zoomValue, width, height);\n    const { newPan } = pan(\n      prevPanState.current,\n      panValues,\n      panProps.panDirection,\n      zoomProps.zoomValue,\n      width,\n      height,\n      panBounds.current,\n      panProps.onPan\n    );\n    prevPanState.current = newPan;\n  };\n  const wheelZoomProps = useWheelZoom(zoomProps);\n  const pinchZoomProps = usePinchZoom({\n    captureTargetRef,\n    zooming: zoomProps.zooming,\n    minZoom: zoomProps.minZoom,\n    maxZoom: zoomProps.maxZoom,\n    zoomValue: zoomProps.zoomValue,\n    onZoom: zoomProps.onZoom\n  });\n  const panZoomProps = mergeProps(dragPanProps, wheelZoomProps, pinchZoomProps);\n\n  return {\n    panZoomProps,\n    panProps,\n    zoomProps,\n    toggleButtonContent,\n    cursor,\n    centerX: panProps.centerX,\n    centerY: panProps.centerY,\n    zoomValue: zoomProps.zoomValue,\n    kbPanCallback: panProps.panning !== 'off' ? kbPanCallback : undefined,\n    kbZoomCallback: zoomProps.zooming !== 'off' ? kbZoomCallback : undefined\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useWheel } from './useWheel';\nimport { zoom, ZOOM_INCREMENT } from '../utils/zoomUtils';\n\ntype UseWheelZoomOptions = {\n  zooming: 'on' | 'off';\n  minZoom: number;\n  maxZoom: number;\n  zoomValue: number;\n  onZoom?: (detail: { zoomValue: number }) => void;\n};\n\nconst useWheelZoom = ({ zooming, minZoom, maxZoom, zoomValue, onZoom }: UseWheelZoomOptions) => {\n  const wheelProps = useWheel({\n    onWheel: ({ deltaY }) => {\n      const newZoom = zoomValue * (1 + ZOOM_INCREMENT * deltaY);\n      zoom(newZoom, zoomValue, minZoom, maxZoom, onZoom);\n    },\n    isDisabled: zooming === 'off'\n  });\n\n  return wheelProps;\n};\n\nexport { useWheelZoom };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\ntype WheelDetail = {\n  x: number;\n  y: number;\n  deltaX: number;\n  deltaY: number;\n  ctrlKey: boolean;\n};\n\ntype UseWheelOptions = {\n  onWheel: (detail: WheelDetail) => void;\n  preventDefault?: boolean;\n  isDisabled?: boolean;\n};\n\nconst PX_FACTOR_PER_LINE = 15; // Value used in Toolkit\nconst PX_FACTOR_PER_PAGE = 40; // Value copied from datagrid; this is not handled in Toolkit\n\nconst getNormalizedDelta = (e: WheelEvent) => {\n  const { deltaX, deltaY, deltaMode } = e;\n\n  switch (deltaMode) {\n    case e.DOM_DELTA_PIXEL:\n      return { deltaX: -deltaX, deltaY: -deltaY };\n    case e.DOM_DELTA_LINE:\n      return { deltaX: -deltaX * PX_FACTOR_PER_LINE, deltaY: -deltaY * PX_FACTOR_PER_LINE };\n    case e.DOM_DELTA_PAGE:\n      return { deltaX: -deltaX * PX_FACTOR_PER_PAGE, deltaY: -deltaY * PX_FACTOR_PER_PAGE };\n    default:\n      return { deltaX: -deltaX, deltaY: -deltaY };\n  }\n};\n\nconst useWheel = ({\n  onWheel: onWheelCallback,\n  preventDefault = true,\n  isDisabled = false\n}: UseWheelOptions) => {\n  const onWheel = (e: WheelEvent) => {\n    const { deltaX, deltaY } = getNormalizedDelta(e);\n    if (preventDefault) e.preventDefault();\n    onWheelCallback({\n      x: e.offsetX,\n      y: e.offsetY,\n      deltaX,\n      deltaY,\n      ctrlKey: e.ctrlKey || e.metaKey\n    });\n  };\n  return isDisabled ? {} : { onWheel };\n};\n\nexport { useWheel, PX_FACTOR_PER_LINE };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type {\n  DiagramProps,\n  Bounds,\n  DiagramLabelPosition,\n  States,\n  DiagramNodeData,\n  DiagramLinkData,\n  DiagramLayoutOutput,\n  Dimensions\n} from './diagram.types';\nimport type { TextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { DiagramLayers } from './DiagramLayers';\nimport { DiagramPanZoomContainer } from './DiagramPanZoomContainer';\nimport { useEvents } from './hooks/useEvents';\nimport { useDiagramDatatip } from './hooks/useDiagramDatatip';\nimport { useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { usePanZoom } from './hooks/usePanZoom';\nimport { useRef, useState } from 'preact/hooks';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { useDiagramSelection } from './hooks/useDiagramSelection';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport {\n  constructLayoutJSON,\n  deconstructLayoutJSON,\n  getFocusedItemBounds,\n  mergeDimensions,\n  isEqualBounds,\n  getDimensionsFromBounds,\n  // combineIds,\n  getContentBounds,\n  centerXYToPanXY,\n  filterLinksWithNoEndNodes,\n  getAllLabelBounds,\n  isEqualLabelBounds,\n  createLinksMap,\n  createNodesMap,\n  getPromotedLinks,\n  createPromotedLinksMap\n} from './utils/diagramUtils';\nimport { outerStyles } from './themes/DiagramStyles.css';\nimport { useVisTouchResponse } from '#hooks/PRIVATE_useVisTouchResponse';\nimport { merge } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport { useDiagramContextMenu } from './hooks/useDiagramContextMenu';\n\ntype DiagramWithDimensionsProps<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1,\n  D2,\n  L\n> = Omit<DiagramProps<K1, K2, D1, D2, L>, 'width' | 'height'> & {\n  width: number;\n  height: number;\n};\n\nexport function ContainerDiagramWithDimensions<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>({\n  nodes = [],\n  links = [],\n  width,\n  height,\n  selectedIds = {},\n  selectionMode = 'none',\n  layout,\n  nodeRenderer,\n  linkRenderer,\n  onSelectionChange,\n  onItemHover,\n  onItemFocus,\n  highlightedIds = {},\n  datatip,\n  expanded = [],\n  onExpandedChange,\n  contextMenuConfig,\n  ...otherProps\n}: DiagramWithDimensionsProps<K1, K2, D1, D2, L>) {\n  const focusedItemBoundsRef = useRef<Bounds | null>(null);\n  const rootRef = useRef<HTMLDivElement>(null);\n  //TODO JET-62563 change bounds to a MAP\n  const [bounds, setBounds] = useState<Map<K1, Bounds>>(new Map());\n  const linkDimensions = useRef<Map<K2, Dimensions>>(new Map());\n  const promotedLinkDimensions = useRef<Map<string, Dimensions>>(new Map());\n  const [combinedLabelBounds, setCombinedLabelBounds] = useState<Bounds>();\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const diagramNodes = nodes;\n  const nodeMap = createNodesMap<K1, D1>(diagramNodes);\n  const nodeIdToParentMap = nodeMap.itemIdToParentMap;\n  const nodeIdToDataMap = nodeMap.itemIdToDataMap;\n  const diagramLinks = filterLinksWithNoEndNodes(links, nodeIdToDataMap);\n  const linkMap = createLinksMap<K1, K2, D2>(diagramLinks);\n  const linkIdToDataMap = linkMap.itemIdToDataMap;\n  const resizeThrottling = useRef<boolean>(false);\n  const newDimensions = getDimensionsFromBounds(bounds);\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n  const labelDimensions = useRef<Map<K1 | K2, TextDimensions>>(new Map());\n  const linkDimsChanged = useRef<boolean>(false);\n  const nodeLabelPosRef = useRef<Map<K1, DiagramLabelPosition>>(new Map());\n  const linkLabelPosRef = useRef<Map<K2, DiagramLabelPosition>>(new Map());\n  const [layoutOutput, setLayoutOutput] = useState<L>();\n  const nodeBoundsRef = useRef<Map<K1, Bounds>>(new Map());\n  const {\n    promotedLinks,\n    //linkToPromotedMap,\n    promotedToLinkMap\n  } = getPromotedLinks<K1, K2, D2>(nodeIdToParentMap, links, expanded);\n  const promotedLinkMap = createPromotedLinksMap<K1>(promotedLinks);\n\n  const contentBounds = getContentBounds(bounds, combinedLabelBounds);\n  const {\n    panZoomProps,\n    panProps,\n    zoomProps,\n    toggleButtonContent,\n    cursor,\n    centerX,\n    centerY,\n    zoomValue,\n    kbPanCallback,\n    kbZoomCallback\n  } = usePanZoom({\n    props: otherProps,\n    captureTargetRef: rootRef,\n    width: width,\n    height: height,\n    contentBounds,\n    isRtl\n  });\n\n  const { touchResponse, touchResponseStyle } = useVisTouchResponse({\n    type: 'auto',\n    supportsTouchDragGestures: zoomProps.zooming === 'on' || panProps.panning !== 'off',\n    rootRef\n  });\n\n  const { onContextMenuDismissed, focusedItemInfo, hoveredItemInfo, activeId, eventsProps } =\n    useEvents<K1, K2, D1, D2>(\n      touchResponse,\n      diagramNodes[0],\n      diagramNodes,\n      diagramLinks,\n      bounds,\n      linkIdToDataMap,\n      nodeIdToDataMap,\n      promotedLinkMap.itemIdToDataMap,\n      width,\n      height,\n      otherProps.maxZoom || 1,\n      expanded,\n      nodeIdToParentMap,\n      onItemHover,\n      onItemFocus,\n      kbPanCallback,\n      kbZoomCallback,\n      onExpandedChange\n    );\n\n  const { selectionProps, selectionContent } = useDiagramSelection<K1, K2, D1, D2>({\n    selectedIds,\n    selectionMode,\n    nodeMap,\n    linkMap,\n    promotedLinkMap,\n    focusedItemInfo,\n    onSelectionChange,\n    rootRef\n  });\n\n  // This is for the datatip kb position\n  if (focusedItemInfo && bounds.size > 0) {\n    focusedItemBoundsRef.current = getFocusedItemBounds(\n      focusedItemInfo,\n      bounds,\n      diagramLinks,\n      linkMap.itemIdToIndexMap,\n      rootRef\n    );\n  }\n\n  const {\n    datatipContent,\n    datatipProps: { 'aria-describedby': datatipAriaDescribedby, ...datatipProps }\n  } = useDiagramDatatip({\n    touchResponse,\n    datatip,\n    focusedItemInfo,\n    focusedItemBoundsRef,\n    panState: centerXYToPanXY(centerX, centerY, zoomValue, width, height),\n    zoom: zoomValue,\n    width: width,\n    nodesMap: nodeIdToDataMap,\n    linksMap: linkIdToDataMap,\n    hoveredItem: hoveredItemInfo\n  });\n\n  const [visibility, setVisibility] = useState<'visible' | 'hidden'>('hidden');\n  const style = {\n    width: width,\n    height: height,\n    cursor: cursor,\n    visibility: visibility,\n    ...touchResponseStyle\n  };\n\n  const states = useRef<States<K1, K2>>();\n  const previousState = states.current // states.current is previous state\n    ? states.current\n    : {\n        selectedNodeIds: [],\n        selectedLinkIds: [],\n        selectedPromotedLinkIds: [],\n        focusedId: undefined,\n        hoveredId: undefined,\n        activeId: undefined,\n        highlightedNodeIds: [],\n        highlightedLinkIds: [],\n        highlightedPromotedLinkIds: [],\n        zoom: 0,\n        expanded: []\n      };\n\n  states.current = {\n    // update states to new state\n    selectedNodeIds: selectedIds.nodes ?? [],\n    selectedLinkIds: selectedIds.links ?? [],\n    selectedPromotedLinkIds: selectedIds.promotedLinks ?? [],\n    focusedId:\n      focusedItemInfo.isCurrent && focusedItemInfo.isFocusVisible ? focusedItemInfo.id : undefined,\n    hoveredId: hoveredItemInfo?.isCurrent ? hoveredItemInfo.id : undefined,\n    activeId,\n    highlightedNodeIds: highlightedIds.nodes ?? [],\n    highlightedLinkIds: highlightedIds.links ?? [],\n    highlightedPromotedLinkIds: highlightedIds.promotedLinks ?? [],\n    zoom: zoomValue,\n    expanded: expanded || []\n  };\n\n  const { contextMenuContent, contextMenuProps } = useDiagramContextMenu<K1, K2, D1, D2>({\n    focusedItemInfo,\n    rootRef,\n    contextMenuConfig: nodes.length > 0 ? contextMenuConfig : undefined,\n    onContextMenuDismissed,\n    nodesMap: nodeIdToDataMap,\n    linksMap: linkIdToDataMap\n  });\n\n  const mergedEventProps = mergeProps(\n    panZoomProps,\n    eventsProps,\n    selectionProps,\n    datatipProps,\n    contextMenuProps\n  );\n\n  // Called anytime node changes size\n  const onNodeSizeChanged = (nodeWidth: number, nodeHeight: number, id: K1) => {\n    newDimensions.set(id, { width: nodeWidth, height: nodeHeight });\n    if (resizeThrottling.current) {\n      return;\n    }\n\n    resizeThrottling.current = true;\n    // performs layout at the next available animation frame when all measurements should be ready\n    window.requestAnimationFrame(() => {\n      const { labelDims, layoutJSON } = constructLayoutJSON<K1, K2, D1, D2>(\n        nodeIdToDataMap,\n        linkIdToDataMap,\n        promotedLinks,\n        newDimensions,\n        width,\n        height,\n        bounds,\n        zoomValue,\n        nodeIdToParentMap,\n        nodeBoundsRef.current,\n        rootRef,\n        getTextDimensions\n      );\n      labelDimensions.current = labelDims;\n      const layoutOutput = layout(layoutJSON);\n      const { nodePoints, nodeLabelPos, linkLabelPos } = deconstructLayoutJSON<K1, K2, D1, D2>(\n        layoutOutput,\n        diagramNodes,\n        diagramLinks\n      );\n      nodeLabelPosRef.current = nodeLabelPos;\n      linkLabelPosRef.current = linkLabelPos;\n      const nodeBounds = mergeDimensions(newDimensions, nodePoints);\n      const labelBounds = getAllLabelBounds(labelDims, nodeLabelPos, direction === 'rtl');\n      const equalBounds = isEqualBounds(nodeBounds, bounds);\n      if (\n        !equalBounds ||\n        linkDimsChanged.current ||\n        (combinedLabelBounds &&\n          labelBounds &&\n          !isEqualLabelBounds(combinedLabelBounds, labelBounds))\n      ) {\n        setBounds(nodeBounds);\n        setCombinedLabelBounds(labelBounds);\n        setLayoutOutput(layoutOutput);\n        linkDimsChanged.current = false;\n        setVisibility('hidden');\n      } else if (visibility == 'hidden') {\n        setVisibility('visible');\n      }\n      resizeThrottling.current = false;\n    });\n  };\n\n  const onLinkSizeChanged = (linkWidth: number, linkHeight: number, id: K2) => {\n    const linkDims = linkDimensions.current.get(id);\n    if (\n      !linkDims ||\n      (linkDims &&\n        (Math.abs(linkWidth - linkDims.width) > 0.5 ||\n          Math.abs(linkHeight - linkDims.height) > 0.5))\n    ) {\n      linkDimensions.current.set(id, { width: linkWidth, height: linkHeight });\n      linkDimsChanged.current = true;\n    }\n  };\n\n  const onPromotedLinkSizeChanged = (linkWidth: number, linkHeight: number, id: string) => {\n    const linkDims = promotedLinkDimensions.current.get(id);\n    if (\n      !linkDims ||\n      (linkDims &&\n        (Math.abs(linkWidth - linkDims.width) > 0.5 ||\n          Math.abs(linkHeight - linkDims.height) > 0.5))\n    ) {\n      promotedLinkDimensions.current.set(id, { width: linkWidth, height: linkHeight });\n      linkDimsChanged.current = true;\n    }\n  };\n\n  return (\n    <div\n      ref={rootRef}\n      class={outerStyles}\n      {...mergedEventProps}\n      style={style}\n      tabIndex={0}\n      role=\"application\"\n      aria-label={otherProps['aria-label']}\n      aria-labelledby={otherProps['aria-labelledby']}\n      aria-describedby={merge([otherProps['aria-describedby'], datatipAriaDescribedby])}\n      aria-activedescendant={activeId}>\n      {getTextDimensions ? (\n        <DiagramPanZoomContainer\n          centerX={centerX}\n          centerY={centerY}\n          zoom={zoomValue}\n          width={width}\n          height={height}>\n          <DiagramLayers\n            nodes={diagramNodes}\n            links={diagramLinks}\n            zoom={zoomValue}\n            nodeRenderer={nodeRenderer}\n            linkRenderer={linkRenderer}\n            width={width}\n            height={height}\n            nodeBounds={bounds}\n            linkDimensions={linkDimensions.current}\n            promotedLinkDimensions={promotedLinkDimensions.current}\n            states={states.current!}\n            previousStates={previousState}\n            onNodeSizeChanged={onNodeSizeChanged}\n            onLinkSizeChanged={onLinkSizeChanged}\n            onPromotedLinkSizeChanged={onPromotedLinkSizeChanged}\n            nodeLabelPositions={nodeLabelPosRef.current}\n            linkLabelPositions={linkLabelPosRef.current}\n            labelDimensions={labelDimensions.current}\n            supportsSelection={\n              selectionMode !== 'none' ||\n              !!(selectedIds?.nodes && selectedIds.nodes.length > 0) ||\n              !!(selectedIds?.links && selectedIds.links.length > 0)\n            }\n            layoutOutput={layoutOutput}\n            nodeIdToParentMap={nodeIdToParentMap}\n            rootRef={rootRef}\n            combinedNodeBounds={contentBounds}\n            nodeBoundsRef={nodeBoundsRef}\n            promotedLinks={promotedLinks}\n            promotedToLinkMap={promotedToLinkMap}\n          />\n        </DiagramPanZoomContainer>\n      ) : undefined}\n      {textMeasureContent}\n      {datatipContent}\n      {contextMenuContent}\n      {selectionContent}\n      {toggleButtonContent}\n    </div>\n  );\n}\n","import { useSelection } from '#hooks/PRIVATE_useVisSelection';\nimport type { DiagramLinkData, DiagramNodeData, ItemInfo } from '../diagram.types';\nimport { getNavigableInfo } from '../utils/diagramUtils';\nimport type { RefObject } from 'preact';\n\ntype SelectionProps<K1, K2, D1, D2> = {\n  selectedIds: {\n    nodes?: K1[];\n    links?: K2[];\n    promotedLinks?: string[];\n  };\n  selectionMode: 'none' | 'single' | 'multiple';\n  nodeMap: {\n    itemIdToDataMap: Map<K1, D1>;\n    itemIdToIndexMap: Map<K1, string>;\n    itemIndexToIdMap: Map<string, K1>;\n  };\n  linkMap: {\n    itemIdToDataMap: Map<K2, D2>;\n    itemIdToIndexMap: Map<K2, number>;\n    itemIndexToIdMap: Map<number, K2>;\n  };\n  promotedLinkMap: {\n    itemIdToDataMap: Map<string, DiagramLinkData<string, K1>>;\n    itemIdToIndexMap: Map<string, number>;\n    itemIndexToIdMap: Map<number, string>;\n  };\n  focusedItemInfo: ItemInfo<K1, K2>;\n  onSelectionChange?: (detail: {\n    nodes: K1[];\n    links: K2[];\n    promotedLinks: string[];\n    nodeData: (D1 | undefined)[];\n    linkData: (D2 | undefined)[];\n    promotedLinkData: (DiagramLinkData<string, K1> | undefined)[];\n  }) => void;\n  rootRef: RefObject<HTMLDivElement>;\n};\n\ntype EncodedNodeId = `N_${string}`;\ntype EncodedLinkId = `L_${number}`;\ntype EncodedPromotedLinkId = `P_${number}`;\n\nexport function useDiagramSelection<\n  K1,\n  K2,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>\n>({\n  selectedIds,\n  selectionMode,\n  nodeMap,\n  linkMap,\n  promotedLinkMap,\n  focusedItemInfo,\n  onSelectionChange,\n  rootRef\n}: SelectionProps<K1, K2, D1, D2>) {\n  const nodeIdToIndexMap = nodeMap.itemIdToIndexMap;\n  const nodeIndexToIdMap = nodeMap.itemIndexToIdMap;\n  const nodeIdToDataMap = nodeMap.itemIdToDataMap;\n  const linkIdToIndexMap = linkMap.itemIdToIndexMap;\n  const linkIndexToIdMap = linkMap.itemIndexToIdMap;\n  const linkIdToDataMap = linkMap.itemIdToDataMap;\n  const promotedLinkIdToIndexMap = promotedLinkMap.itemIdToIndexMap;\n  const promotedLinkIndexToIdMap = promotedLinkMap.itemIndexToIdMap;\n  const promotedLinkIdToDataMap = promotedLinkMap.itemIdToDataMap;\n  const encodeNodeId = (id: K1) => `N_${nodeIdToIndexMap.get(id)}` as EncodedNodeId;\n  const decodeNodeId = (id: EncodedNodeId) => nodeIndexToIdMap.get(id.slice(2));\n  const encodeLinkId = (id: K2) => `L_${linkIdToIndexMap.get(id)}` as EncodedLinkId;\n  const decodeLinkId = (id: EncodedLinkId) => linkIndexToIdMap.get(Number(id.slice(2)));\n  const encodePromotedLinkId = (id: string) =>\n    `P_${promotedLinkIdToIndexMap.get(id)}` as EncodedPromotedLinkId;\n  const decodePromotedLinkId = (id: EncodedPromotedLinkId) =>\n    promotedLinkIndexToIdMap.get(Number(id.slice(2)));\n\n  const encodedNodesSelection = selectedIds.nodes ? selectedIds.nodes.map(encodeNodeId) : [];\n  const encodedLinksSelection = selectedIds.links ? selectedIds.links.map(encodeLinkId) : [];\n  const encodedPromotedLinksSelection = selectedIds.promotedLinks\n    ? selectedIds.promotedLinks.map(encodePromotedLinkId)\n    : [];\n  const encodedSelection = [\n    ...encodedNodesSelection,\n    ...encodedLinksSelection,\n    ...encodedPromotedLinksSelection\n  ];\n  const idExtracter = (event: Event) => {\n    // return encodeNodeId(id) or encodeLinkId(id) depending on node or link selection or undefined if clicked on empty space\n    const info =\n      event.type === 'keyup'\n        ? focusedItemInfo\n        : getNavigableInfo<K1, K2>(event.target as HTMLElement, rootRef);\n    return info.id !== undefined\n      ? info.type === 'node'\n        ? encodeNodeId(info.id as K1)\n        : info.type === 'link'\n        ? encodeLinkId(info.id as K2)\n        : encodePromotedLinkId(info.id as string)\n      : undefined;\n  };\n\n  const onEncodedSelectionChange = (detail: {\n    ids: (EncodedNodeId | EncodedLinkId | EncodedPromotedLinkId)[];\n  }) => {\n    const newNodeIds = detail.ids\n      .filter((encId) => encId[0] === 'N')\n      .map((encId) => decodeNodeId(encId as EncodedNodeId)!);\n    const newLinkIds = detail.ids\n      .filter((encId) => encId[0] === 'L')\n      .map((encId) => decodeLinkId(encId as EncodedLinkId)!);\n\n    const newPromotedLinkIds = detail.ids\n      .filter((encId) => encId[0] === 'P')\n      .map((encId) => decodePromotedLinkId(encId as EncodedPromotedLinkId)!);\n\n    const newSelectedNodeIds = newNodeIds.filter(\n      (id) => nodeIdToDataMap.get(id)?.selectable !== 'off'\n    );\n    const newSelectedLinkIds = newLinkIds.filter(\n      (id) => linkIdToDataMap.get(id)?.selectable !== 'off'\n    );\n\n    const nodeData = newSelectedNodeIds.map((selectedId) => {\n      return nodeIdToDataMap.get(selectedId);\n    });\n    const linkData = newSelectedLinkIds.map((selectedId) => {\n      return linkIdToDataMap.get(selectedId);\n    });\n\n    const promotedLinkData = newPromotedLinkIds.map((selectedId) => {\n      return promotedLinkIdToDataMap.get(selectedId);\n    });\n    return (\n      onSelectionChange &&\n      onSelectionChange({\n        nodes: newSelectedNodeIds,\n        links: newSelectedLinkIds,\n        promotedLinks: newPromotedLinkIds,\n        nodeData,\n        linkData,\n        promotedLinkData\n      })\n    );\n  };\n\n  const getDataById = (id: EncodedNodeId | EncodedLinkId | EncodedPromotedLinkId) => {\n    let data;\n    if (id[0] === 'N') {\n      const nodeId = decodeNodeId(id as EncodedNodeId)!;\n      data = nodeMap.itemIdToDataMap.get(nodeId);\n    } else if (id[0] === 'L') {\n      const linkId = decodeLinkId(id as EncodedLinkId)!;\n      data = linkMap.itemIdToDataMap.get(linkId);\n    } else if (id[0] === 'P') {\n      const linkId = decodePromotedLinkId(id as EncodedPromotedLinkId)!;\n      data = promotedLinkMap.itemIdToDataMap.get(linkId);\n    }\n    return data;\n  };\n\n  const { selectionContent, selectionProps } = useSelection<\n    `N_${string}` | `L_${number}` | `P_${number}`,\n    D1 | D2 | DiagramLinkData<string, K1>\n  >({\n    selection: encodedSelection,\n    idExtracter,\n    selectionMode,\n    getDataById,\n    onChange: onEncodedSelectionChange\n  });\n\n  return { selectionContent, selectionProps };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { RefObject } from 'preact';\nimport type {\n  DiagramContextMenuConfig,\n  DiagramContextMenuContext,\n  ItemInfo\n} from '../diagram.types';\nimport { type gestureTypes, useContextMenu } from '#hooks/PRIVATE_useVisContextMenu';\nimport { getDiagramContextMenuContext } from '../utils/contextMenuUtils';\n\ntype Props<K1, K2, D1, D2> = {\n  nodesMap: Map<K1, D1>;\n  linksMap: Map<K2, D2>;\n  focusedItemInfo: ItemInfo<K1, K2>;\n  rootRef: RefObject<HTMLDivElement>;\n  contextMenuConfig?: DiagramContextMenuConfig<D1, D2>;\n  onContextMenuDismissed?: (gesture: gestureTypes) => void;\n};\n\nexport const useDiagramContextMenu = <K1, K2, D1, D2>({\n  focusedItemInfo,\n  rootRef,\n  contextMenuConfig,\n  onContextMenuDismissed,\n  nodesMap,\n  linksMap\n}: Props<K1, K2, D1, D2>) => {\n  const { contextMenuProps, contextMenuContent } = useContextMenu<\n    DiagramContextMenuContext<D1, D2>\n  >({\n    onContextMenuHandler: ({ gesture, target }) => {\n      let idx;\n      let elementType: 'node' | 'link' | 'background' = 'background';\n      const currentTarget = target as HTMLElement;\n      if (gesture === 'keyboard') {\n        idx = focusedItemInfo.id;\n        if (focusedItemInfo.type === 'node') {\n          elementType = 'node';\n        } else if (idx !== undefined) {\n          elementType = 'link';\n        }\n      } else if (\n        (currentTarget.closest('[data-oj-private-node]') as HTMLElement)?.dataset['ojPrivateNode']\n      ) {\n        idx = (currentTarget.closest('[data-oj-private-node]') as HTMLElement)?.dataset[\n          'ojPrivateNode'\n        ] as K1;\n        elementType = 'node';\n      } else if (\n        (currentTarget.closest('[data-oj-private-link]') as SVGElement)?.dataset[\n          'ojPrivateLink'\n        ] as K2\n      ) {\n        idx = (currentTarget.closest('[data-oj-private-link]') as SVGElement)?.dataset[\n          'ojPrivateLink'\n        ] as K2;\n        elementType = 'link';\n      }\n\n      const { context } = getDiagramContextMenuContext<K1, K2, D1, D2>(\n        nodesMap,\n        linksMap,\n        elementType,\n        idx\n      );\n      if (gesture === 'keyboard') {\n        let element;\n        if (focusedItemInfo.type === 'node') {\n          element = rootRef.current?.querySelector(`[data-oj-private-node=\"${idx}\"]`);\n        } else {\n          element = rootRef.current?.querySelector(`[data-oj-private-link=\"${idx}\"]`);\n        }\n        return {\n          type: 'element',\n          context,\n          elem: element ? element : null\n        };\n      }\n      return { type: 'pointer', context };\n    },\n    contextMenuOptions: {\n      isDisabled: !contextMenuConfig //If there is not a context menu renderer we disable the hook\n    },\n    rootRef,\n    contextMenuConfig,\n    onContextMenuDismissed\n  });\n\n  return { contextMenuContent, contextMenuProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DiagramContextMenuContext } from '../diagram.types';\n\nexport function getDiagramContextMenuContext<K1, K2, D1, D2>(\n  nodesMap: Map<K1, D1>,\n  linksMap: Map<K2, D2>,\n  type: 'node' | 'link' | 'background',\n  idx?: K1 | K2 | string\n) {\n  let context: DiagramContextMenuContext<D1, D2>;\n\n  if (type === 'node') {\n    context = {\n      data: nodesMap.get(idx as K1)!,\n      type\n    };\n  } else if (type === 'link') {\n    context = {\n      data: linksMap.get(idx as K2)!,\n      type\n    };\n  } else {\n    context = {\n      type: 'background'\n    };\n  }\n\n  return {\n    context: context as DiagramContextMenuContext<D1, D2>\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type {\n  DiagramProps,\n  DiagramNodeData,\n  DiagramLinkData,\n  DiagramLayoutOutput\n} from './diagram.types';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { dimensionStyle } from './themes/DiagramStyles.css';\nimport { ContainerDiagramWithDimensions } from './ContainerDiagramWithDimensions';\n\n/**\n * Diagrams are used to display a set of nodes and the links between them.\n */\nexport function ContainerDiagram<\n  K1 extends string | number,\n  K2 extends string | number,\n  D1 extends DiagramNodeData<K1, D1>,\n  D2 extends DiagramLinkData<K2, K1>,\n  L extends DiagramLayoutOutput<K1, K2>\n>({ width, height, ...otherProps }: DiagramProps<K1, K2, D1, D2, L>) {\n  return otherProps.nodes && otherProps.nodes.length > 0 ? (\n    <TrackResizeContainer width={width} height={height} class={dimensionStyle}>\n      {(width, height) => (\n        <ContainerDiagramWithDimensions width={width} height={height} {...otherProps} />\n      )}\n    </TrackResizeContainer>\n  ) : null;\n}\n"],"names":["constructLayoutJSON","nodeItems","linkItems","promotedLinks","dimensions","width","height","nodeBounds","zoom","nodeIdToParentMap","nodeBoundsRef","rootRef","getTextDimensions","labelDims","Map","nodeValues","Array","from","values","linkValues","forEach","value","children","getNodeLabelProps","label","fontProps","_getFontProps","labelStyle","set","id","getLabelProps","linkKeys","keys","item","get","layoutJSON","getNodeDimensions","data","getLabelDimensions","getContainerId","startNode","endNode","getCommonAncestorId","getNodeBounds","linkBounds","bounds","current","childElement","querySelector","nodeContainer","dims","childBoundingRect","normalizeBounds","getBoundingClientRect","nodeBoundingRect","extraWidth","Math","max","x","extraHeight","y","getRelativeNodeBounds","containerId","absPos","getAbsoluteItemPosition","getPromotedLinks","componentSize","getAbsoluteLinkBounds","itemId","referenceId","linkElement","linkBoundingRect","diagramBoundingRect","getBounds","nodes","links","linkDimensions","promotedLinkDimensions","topId","leftId","minX","Infinity","minY","maxX","maxY","i","length","nodeMinX","nodeMinY","linkMinX","linkMinY","linkMaxX","linkMaxY","topBounds","leftBounds","contentWidth","contentHeight","undefined","nodeId","nodeElement","deconstructLayoutJSON","nodeData","linkData","positions","nodeLabelPos","linkLabelPos","link","findPoints","nodePoints","output","node","position","_createItemMap","items","itemIdToDataMap","itemIdToIndexMap","itemIndexToIdMap","itemIdToParentMap","parentId","parentIndex","index","getAllLabelBounds","isRTL","size","key","labelPos","getLabelPosition","rotationAngle","rotationPoint","angle","topLeft","getCoordsRelToRotPoint","topRight","bottomLeft","bottomRight","points","point","getBoundsFromPoints","rotatePoint","map","pos","getLabelBounds","labelPoint","rotPoint","cos","sin","positionProps","hAlign","vAlign","centerXYToPanXY","centerX","centerY","panX","panY","isEqualItem","item1","item2","type","getNavigableInfo","element","rootElementRef","navigableId","elem","dataset","parentElement","getItemAriaLabel","translations","supportsSelection","isSelected","accessibleLabel","generateAriaLabel","getZoomToFitZoom","contentBounds","zoomX","zoomY","min","constrainZoom","minZoom","maxZoom","newZoom","styles","fontFamily","fontSize","fontStyle","fontWeight","zoomAndCenterItemFromInfo","info","linkIdToDataMap","totalBounds","startNodeBounds","endNodeBounds","cX","cY","getPanZoomToCenterNode","startId","endId","startAnc","_getAncestorIds","endAnc","indexOf","getLinksForNode","containerLinks","push","containerPromotedLinks","ancestors","anc","containerLinksReady","layoutOutput","changeExpanded","expanded","includes","splice","hasCollapsedParent","firstVisibleAncestor","visibleAnc","currentId","DiagramLabel","text","labelBorderStyle","labelStyles","labelPosition","labelRotation","rotation","getLabelRotation","_jsx","class","classNames","borderColor","style","top","left","DiagramExpandCollapseButton","buttonStyle","border","Plus","Minus","DiagramNodeElement","state","previousState","activeId","nodeRenderer","onNodeSizeChanged","isDimmed","content","labelDimensions","nodeStyles","dimmedItemStyle","itemStyles","context","useTranslationBundle","ref","useRef","optionsRef","box","useResizeObserver","useCallback","entry","boxSize","borderBoxSize","inlineSize","blockSize","nodePos","direction","useUser","hasLabel","_jsxs","role","selected","focused","hovered","layerStyles","showDisclosure","jsx","DiagramLinkElement","linkRenderer","onLinkSizeChanged","isPromoted","promotedToLinkMap","linkStyles","DiagramLabelLayer","itemProps","DiagramLinkLayer","states","previousStates","combinedNodeBounds","linkLabelPositions","jsxs","overflow","selectedPromotedLinkIds","selectedLinkIds","focusedId","hoveredId","highlightedLinkIds","DiagramPromotedLinkElement","DiagramPromotedLinkLayer","highlightedPromotedLinkIds","DiagramNodeLayer","onPromotedLinkSizeChanged","nodeLabelPositions","containerParentLinks","containerParentPromotedLinks","selectedNodeIds","child","linkDims","isContainerReady","childContent","getContent","highlightedNodeIds","isExpanded","nodeFullBounds","DiagramLayers","_Fragment","DiagramPanZoomContainer","panValues","panZoomStyles","translate","transform","getNodeDetailFromInfo","itemInfo","getNavigableLinksForNodeId","listOfLinks","_getClockwiseAngle","currNode","oppositeNode","p1","_getNodeCenter","p2","atan2","PI","_getNodesDistance","sqrt","pow","_getLinkDirection","nodeBB","calcDistanceAngleWeighted","objectBB","currentBB","optimalAngle1","optimalAngle2","objCenterX","objCenterY","curCenterX","curCenterY","x_dist","abs","y_dist","distance","isValidDestination","objBB","curBB","compareCenters","_areEqualWithinTolerance","calcInContact","objRect","curRect","_isVerticallyAligned","_isHorizontallyAligned","rect1","rect2","a","b","_anglesAreEqualWithinTolerance","a1","a2","res","useDiagramNavigation","currentKeyboardFocusNode","nodeBoundsById","isNode","getNextNavigableNode","listOfObjects","currBB","object","inContact","nextObject","nextDistance","Number","MAX_VALUE","nextInContact","hasFoundCurrent","objBounds","currBounds","getNextNavigableLink","listOfNodes","currentLink","keyboardFocusNode","linksWithSortingAttributes","linkDetail","addSortingAttributes","sort","link1","link2","linkAngle1","linkDistance1","linkDirection1","linkAngle2","linkDistance2","linkDirection2","bForward","navigateFromNodeToLink","event","adjLinks","currNodeBB","currNodeBBCenterX","nodeCenterX","altKey","code","navigateFromLinkToNode","linkId","startNodeBB","endNodeBB","startNodeCenterX","endNodeCenterX","useEvents","touchResponse","initNode","nodeIdToDataMap","promotedLinkIdToDataMap","onItemHover","onItemFocus","kbPanCallback","kbZoomCallback","onExpandedChange","focusedItemInfo","setfocusedItemInfo","useState","hoveredItemInfo","sethoveredItemInfo","getChildInfo","hoverHandlers","useVisHover","target","isCurrent","getRandomId","updatefocusedItemInfo","handleKeyboardInput","isFocusVisible","onContextMenuDismissed","gesture","eventsProps","mergeProps","onKeyUp","onKeyDown","eventConsumed","isChangeItemType","isNavigationEvent","nextItemInfo","parent","navigableNodes","itemDetail","getLinkDetailFromInfo","handleKeyboardNavigationEvent","dPan","dx","shiftKey","dy","dZoom","ctrlKey","nZoom","nPan","cx","cy","center","newExpanded","preventDefault","stopPropagation","cancelEvent","onBlur","onPointerUp","buttonId","expCollapseButtonId","console","log","usePointerGesture","captureTargetRef","numPointers","onPointerGestureDown","onPointerGestureMove","onPointerGestureEnd","onExtraneousPointerDown","isDisabled","activePointers","e","findIndex","pointerEvent","pointerId","pointers","onPointerDown","onPointerMove","setPointerCapture","onPointerCancel","onPointerLeave","pan","previousPan","nextPan","panDirection","panBounds","onPanChange","newPan","constrainPan","isPanChanged","panXYToCenterXY","useDragPan","panProps","onDragPanStart","onDragPanEnd","prevPanState","initialPanState","dragProps","draggableRegion","onDragStart","onDragMove","onDragEnd","inactiveState","isDragging","x0","y0","regionOffsetX","regionOffsetY","dragState","handlePointerEvent","cb","pageX","pageY","originalEvent","button","region","xMin","xMax","yMin","yMax","inDraggableRegion","getRegionOffset","useDrag","onPan","panning","nextZoom","onZoomChange","zoomValue","getDistance","usePinchZoom","zooming","onZoom","pinchProps","onPinchZoomStart","onPinchZoomChange","onPinchZoomEnd","origin","prevDistance","reset","pointer1","pointer2","offsetX","offsetY","getMidpoint","delta","usePinch","usePanZoom","props","isRtl","cursor","setCursor","zoomProps","zoomTofitZoom","getZoomProps","prevZoom","initPanZoomState","isDeviceTouch","isTouch","plotArea","showPanButton","dragModeOptions","isZoomScroll","plotAreaSpace","componentWidth","showZoomButton","showSelectButton","toggleButtonContent","userDragMode","useVisDragModeControls","getPanProps","dWidth","dHeight","elemBounds","panType","zoomRatio","minZoomX","minZoomY","initZoom","initCenterX","initCenterY","boundsX","boundsY","getPanBounds","dragPanProps","wheelZoomProps","onWheel","onWheelCallback","deltaX","deltaY","deltaMode","DOM_DELTA_PIXEL","DOM_DELTA_LINE","DOM_DELTA_PAGE","getNormalizedDelta","metaKey","useWheel","useWheelZoom","pinchZoomProps","panZoomProps","ContainerDiagramWithDimensions","selectedIds","selectionMode","layout","onSelectionChange","highlightedIds","datatip","contextMenuConfig","otherProps","focusedItemBoundsRef","setBounds","combinedLabelBounds","setCombinedLabelBounds","diagramNodes","nodeMap","String","createNodesMap","diagramLinks","nodesMap","newLinks","filterLinksWithNoEndNodes","linkMap","createLinksMap","resizeThrottling","newDimensions","getDimensionsFromBounds","textMeasureContent","useTextDimensions","linkDimsChanged","nodeLabelPosRef","linkLabelPosRef","setLayoutOutput","linkToPromotedMap","startVisible","endVisible","promotedLinkId","subLinks","promotedLink","promotedLinkMap","createPromotedLinksMap","labelBounds","getContentBounds","touchResponseStyle","useVisTouchResponse","supportsTouchDragGestures","selectionProps","selectionContent","nodeIdToIndexMap","nodeIndexToIdMap","linkIdToIndexMap","linkIndexToIdMap","promotedLinkIdToIndexMap","promotedLinkIndexToIdMap","encodeNodeId","decodeNodeId","slice","encodeLinkId","decodeLinkId","encodePromotedLinkId","decodePromotedLinkId","encodedSelection","useSelection","selection","idExtracter","getDataById","onChange","detail","newNodeIds","ids","filter","encId","newLinkIds","newPromotedLinkIds","newSelectedNodeIds","selectable","newSelectedLinkIds","selectedId","promotedLinkData","useDiagramSelection","next","startNB","endNB","startPosition","endPosition","startNCenter","endNCenter","getFocusedItemBounds","datatipContent","datatipProps","datatipAriaDescribedby","panState","linksMap","hoveredItem","datatipC","focusedItem","isPointerActive","getDatatipContent","elementBounds","offset","calculateOffset","useDatatip","placement","anchor","useDiagramDatatip","visibility","setVisibility","contextMenuContent","contextMenuProps","useContextMenu","onContextMenuHandler","idx","elementType","currentTarget","closest","getDiagramContextMenuContext","contextMenuOptions","useDiagramContextMenu","mergedEventProps","outerStyles","tabIndex","merge","nodeWidth","nodeHeight","window","requestAnimationFrame","newBounds","mergeDimensions","equalBounds","bounds1","bounds2","equal","b2Value","isEqualBounds","linkWidth","linkHeight","TrackResizeContainer","dimensionStyle"],"mappings":"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"}