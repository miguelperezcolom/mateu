{"version":3,"file":"UNSAFE_units.js","sources":["../../../src/utils/UNSAFE_units/units.ts"],"sourcesContent":["import { isString } from '@oracle/oraclejet-internal-utilities/stringUtils';\n\nconst is = (Ctor: any) => (val: any) =>\n  (val != null && val.constructor === Ctor) || val instanceof Ctor;\n\nconst isNumber = is(Number);\nconst isNumeral = (n: any) => !isNaN(parseFloat(n)) && !isNaN(n - 0);\nconst isZero = (n: any) => n === 0 || n === '0';\n\nconst units = ['px', '%', 'em', 'rem', 'vh', 'vw'] as const;\nconst endsWithUnitRegExp = new RegExp(`(${units.join('|')})$`);\n\ntype Unit = (typeof units)[number];\n\nconst hasUnit = (val: any) => isString(val) && endsWithUnitRegExp.test(val as string);\nconst toUnit = (unit: Unit) => (n: string | number) =>\n  isZero(n) || hasUnit(n) || !isNumeral(n) ? n : n + unit;\n\nconst px = toUnit('px');\n\nexport { isNumber, isZero, hasUnit, px };\n"],"names":["isNumber","Ctor","Number","val","constructor","isZero","n","endsWithUnitRegExp","RegExp","join","hasUnit","isString","o","test","px","unit","isNaN","parseFloat","isNumeral"],"mappings":"yEAEA,MAGMA,GAHMC,EAGQC,OAHOC,GACjB,MAAPA,GAAeA,EAAIC,cAAgBH,GAASE,aAAeF,GADnD,IAACA,EAIZ,MACMI,EAAUC,GAAiB,IAANA,GAAiB,MAANA,EAGhCC,EAAqB,IAAIC,OAAO,IADxB,CAAC,KAAM,IAAK,KAAM,MAAO,KAAM,MACGC,KAAK,UAI/CC,EAAWP,GAAaQ,EAAQC,EAACT,IAAQI,EAAmBM,KAAKV,GAIjEW,GAHUC,EAGE,KAHcT,GAC9BD,EAAOC,IAAMI,EAAQJ,KAVL,CAACA,IAAYU,MAAMC,WAAWX,MAAQU,MAAMV,EAAI,GAUpCY,CAAUZ,GAAKA,EAAIA,EAAIS,GADtC,IAACA"}