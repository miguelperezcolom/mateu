{"version":3,"file":"eventsUtils-5fb81c3e.js","sources":["../../src/utils/UNSAFE_visUtils/eventsUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { RefObject } from 'preact';\n\n/**\n * Return the dataset info of target element.\n * @param target\n * @param rootRef\n * @returns\n */\nexport function getElementData(rootRef: RefObject<Element>, target: HTMLElement) {\n  let currentTarget = target;\n\n  while (currentTarget != rootRef.current) {\n    const objectId = currentTarget.dataset['ojPrivateObject'];\n    if (objectId) {\n      return currentTarget.dataset;\n    }\n    currentTarget = currentTarget.parentElement!;\n  }\n  return null;\n}\n\n/**\n * Parses the groupIndex, seriesIndex and ItemIndex from the fiven DOMStringMap.\n * @param infoMap\n */\nfunction parseInfo(infoMap: DOMStringMap) {\n  return {\n    groupIndex: infoMap['ojPrivateGroupIndex']\n      ? parseInt(infoMap['ojPrivateGroupIndex'], 10)\n      : undefined,\n    seriesIndex: infoMap['ojPrivateSeriesIndex']\n      ? parseInt(infoMap['ojPrivateSeriesIndex'], 10)\n      : undefined,\n    itemIndex: infoMap['ojPrivateItemIndex']\n      ? parseInt(infoMap['ojPrivateItemIndex'], 10)\n      : undefined,\n    levelIndex: infoMap['ojPrivateLevelIndex']\n      ? parseInt(infoMap['ojPrivateLevelIndex'], 10)\n      : undefined\n  };\n}\n\n/**\n * Returns the group or item info.\n * @param rootRef\n * @param event\n * @returns\n */\nexport function getInfo(rootRef: RefObject<HTMLElement>, target: HTMLElement) {\n  const elDomMap = getElementData(rootRef, target);\n  if (!elDomMap) {\n    return;\n  }\n  return parseInfo(elDomMap);\n}\n\n/**\n * Prevent defaults and stops propagation of event.\n * @param event\n */\nexport function cancelEvent(event: Event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n/**\n * Compares if two sets are equal.\n */\nexport const isEqual = <T>(setA: Set<T>, setB: Set<T>) => {\n  return setA.size === setB.size && [...setA].every((value) => setB.has(value));\n};\n"],"names":["getElementData","rootRef","target","currentTarget","current","dataset","parentElement","event","preventDefault","stopPropagation","elDomMap","infoMap","groupIndex","parseInt","undefined","seriesIndex","itemIndex","levelIndex","setA","setB","size","every","value","has"],"mappings":"6CAgBgB,SAAAA,EAAeC,EAA6BC,GAC1D,IAAIC,EAAgBD,EAEpB,KAAOC,GAAiBF,EAAQG,SAAS,CAEvC,GADiBD,EAAcE,QAAyB,gBAEtD,OAAOF,EAAcE,QAEvBF,EAAgBA,EAAcG,aAC/B,CACD,OAAO,IACT,eAyCM,SAAsBC,GAC1BA,EAAMC,iBACND,EAAME,iBACR,+BAfgB,SAAQR,EAAiCC,GACvD,MAAMQ,EAAWV,EAAeC,EAASC,GAxB3C,IAAmBS,EAyBjB,GAAKD,EAGL,MA3BO,CACLE,YAFeD,EA4BAD,GA1B0B,oBACrCG,SAASF,EAA6B,oBAAG,SACzCG,EACJC,YAAaJ,EAA8B,qBACvCE,SAASF,EAA8B,qBAAG,SAC1CG,EACJE,UAAWL,EAA4B,mBACnCE,SAASF,EAA4B,mBAAG,SACxCG,EACJG,WAAYN,EAA6B,oBACrCE,SAASF,EAA6B,oBAAG,SACzCG,EAgBR,YAcuB,CAAII,EAAcC,IAChCD,EAAKE,OAASD,EAAKC,MAAQ,IAAIF,GAAMG,OAAOC,GAAUH,EAAKI,IAAID"}