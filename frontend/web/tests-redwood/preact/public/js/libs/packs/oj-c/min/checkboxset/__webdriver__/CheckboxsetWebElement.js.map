{"version":3,"file":"CheckboxsetWebElement.js","sourceRoot":"","sources":["CheckboxsetWebElement.ts"],"names":[],"mappings":";;;AAAA,2EAAwE;AACxE,2DAAgE;AAOhE;;;;GAIG;AACH,MAAa,qBAAsB,SAAQ,qDAAyB;IAClE;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,KAAoC;QAC3D,uCAAuC;QACvC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC;YACnC,2DAA2D;YAC3D,MAAM,IAAI,0BAAK,CAAC,2BAA2B,CACzC,oFAAoF,CACrF,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC;IACrC,CAAC;IAEO,KAAK,CAAC,mBAAmB;QAC/B,MAAM,eAAe,GAAuB,EAAE,CAAC;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QAExD,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YAEzD,kDAAkD;YAClD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtB,eAAe,CAAC,IAAI,CAAC;oBACnB,KAAK;oBACL,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;iBACjB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,YAAY,CAAC,MAAqC;QAC9D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEhD,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE;YACrD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;YAC5C,MAAM,UAAU,GAAG,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,EAAE,CAAC;gBAC/D,kBAAkB;gBAClB,MAAM,KAAK,CAAC,QAAQ,CAAC,wBAAG,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACF;AAlED,sDAkEC","sourcesContent":["import { CheckboxsetWebElementBase } from './CheckboxsetWebElementBase';\nimport { By, error, Key, WebElement } from 'selenium-webdriver';\n\ntype LabelInputs = {\n  label: WebElement;\n  input: WebElement;\n};\n\n/**\n * The component WebElement for [oj-c-checkboxset](../../jsdocs/oj-c.Checkboxset.html).\n * Do not instantiate this class directly, instead, use\n * [findCheckboxset](../functions/findCheckboxset.html).\n */\nexport class CheckboxsetWebElement extends CheckboxsetWebElementBase {\n  /**\n   * Sets the value of \"value\" property for the Checkboxset component\n   * @param value The value to set for \"value\"\n   * @throws {ElementNotInteractableError} if the API is called when the control is readonly or disabled\n   */\n  public async changeValue(value: Array<string | number> | null): Promise<void> {\n    // Check if the control is interactable\n    if (!(await this.isInteractable())) {\n      // Cannot interact when the control is disabled or readonly\n      throw new error.ElementNotInteractableError(\n        'oj-c-checkboxset: Value cannot be changed when the control is disabled or readonly'\n      );\n    }\n\n    await this.whenBusyContextReady();\n    await this.toggleValues(value);\n  }\n\n  /**\n   * Checks if the Checkboxset is in interactable state\n   */\n  private async isInteractable(): Promise<boolean> {\n    const isReadonly = await this.getReadonly();\n    const isDisabled = await this.getDisabled();\n    return !(isReadonly || isDisabled);\n  }\n\n  private async getInputsWithLabels() {\n    const labelsAndInputs: Array<LabelInputs> = [];\n    const labels = await this.findElements(By.css('label'));\n\n    const promises = labels.map(async (label) => {\n      const inputs = await label.findElements(By.css('input'));\n\n      // make sure the label is associated with an input\n      if (inputs.length > 0) {\n        labelsAndInputs.push({\n          label,\n          input: inputs[0]\n        });\n      }\n    });\n\n    await Promise.all(promises);\n    return labelsAndInputs;\n  }\n\n  /**\n   * Check checkboxes that have value within values array\n   */\n  private async toggleValues(values: Array<string | number> | null) {\n    const inputs = await this.getInputsWithLabels();\n\n    const promises = inputs.map(async ({ label, input }) => {\n      const value = await input.getAttribute('value');\n      const isSelected = await input.isSelected();\n      const isInValues = values?.includes(value);\n      if ((isInValues && !isSelected) || (!isInValues && isSelected)) {\n        // toggle checkbox\n        await label.sendKeys(Key.SPACE);\n      }\n    });\n\n    await Promise.all(promises);\n  }\n}\n"]}