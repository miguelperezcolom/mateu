{"version":3,"file":"RichRadiosetWebElement.js","sourceRoot":"","sources":["RichRadiosetWebElement.ts"],"names":[],"mappings":";;;AAAA,6EAA0E;AAC1E,2DAAuD;AAEvD;;;;GAIG;AACH,MAAa,sBAAuB,SAAQ,uDAA0B;IACpE;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,KAAU;QAC1B,uCAAuC;QACvC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC;YACnC,2DAA2D;YAC3D,MAAM,IAAI,0BAAK,CAAC,2BAA2B,CACzC,sFAAsF,CACvF,CAAC;QACJ,CAAC;QACD,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,8DAA8D;QAC9D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC5C,0FAA0F;QAC1F,6BAA6B;QAC7B,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAK,CAAC,oBAAoB,CAAC,uBAAuB,KAAK,wBAAwB,CAAC,CAAC;QAC7F,CAAC;QACD,MAAM,IAAI,EAAE,KAAK,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,YAAY,CAAC,KAAU;QACnC,OAAO,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CACzC,CAAC,OAAoB,EAAE,WAAmB,EAAE,EAAE;YAC5C,MAAM,YAAY,GAAG,OAAO,CAAC,aAAa,CACxC,8BAA8B,WAAW,IAAI,CAC1B,CAAC;YACtB,OAAO,YAAY,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACpD,CAAC,EACD,IAAI,EACJ,KAAK,CACN,CAAC;IACJ,CAAC;CACF;AArDD,wDAqDC","sourcesContent":["import { RichRadiosetWebElementBase } from './RichRadiosetWebElementBase';\nimport { error, WebElement } from 'selenium-webdriver';\n\n/**\n * The component WebElement for [oj-c-rich-radioset](../../jsdocs/oj-c.RichRadioset.html).\n * Do not instantiate this class directly, instead, use\n * [findRichRadioset](../functions/findRichRadioset.html).\n */\nexport class RichRadiosetWebElement extends RichRadiosetWebElementBase {\n  /**\n   * Sets the value of \"value\" property for the Radioset component\n   * @param value The value to set for \"value\"\n   * @throws {ElementNotInteractableError} if the API is called when the control is readonly or disabled\n   * @throws {InvalidArgumentError} if the value is non-existent\n   */\n  async changeValue(value: any) {\n    // Check if the control is interactable\n    if (!(await this.isInteractable())) {\n      // Cannot interact when the control is disabled or readonly\n      throw new error.ElementNotInteractableError(\n        'oj-c-rich-radioset: Value cannot be changed when the control is disabled or readonly'\n      );\n    }\n    await this.whenBusyContextReady();\n    // Get the oj-c-rich-radioset element using the value property\n    const card = await this.getRadioCard(value);\n    // If the label for the input was not found, then the provided value does not exist in the\n    // oj-c-rich-radioset element\n    if (card == null) {\n      throw new error.InvalidArgumentError(`oj-c-rich-radioset: ${value} is not a valid value.`);\n    }\n    await card?.click();\n  }\n\n  /**\n   * Checks if the Radioset is in interactable state\n   */\n  private async isInteractable(): Promise<boolean> {\n    const isReadonly = await this.getReadonly();\n    const isDisabled = await this.getDisabled();\n    return !(isReadonly || isDisabled);\n  }\n\n  /**\n   * Finds the card of the input element for the provided value if it exists\n   *\n   * @param value The value for which the radio element has to be fetched\n   * @returns The corresponding card of the input element if it exists, null otherwise\n   */\n  private async getRadioCard(value: any): Promise<WebElement | null> {\n    return await this.getDriver().executeScript<WebElement | null>(\n      (element: HTMLElement, searchValue: string) => {\n        const inputElement = element.querySelector(\n          `input[type=\"radio\"][value=\"${searchValue}\"]`\n        ) as HTMLInputElement;\n        return inputElement?.closest('[role=\"listitem\"]');\n      },\n      this,\n      value\n    );\n  }\n}\n"]}