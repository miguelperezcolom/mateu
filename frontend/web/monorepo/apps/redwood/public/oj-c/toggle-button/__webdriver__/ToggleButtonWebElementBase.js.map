{"version":3,"file":"ToggleButtonWebElementBase.js","sourceRoot":"","sources":["ToggleButtonWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,0BAA2B,SAAQ,uBAAY;IAC1D;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAS,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACI,WAAW,CAAC,KAAc;QAC/B,OAAO,IAAI,CAAC,WAAW,CAAU,OAAO,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAU,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAU,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAkB,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,WAAW,CAAS,UAAU,CAAC,CAAC;IAC9C,CAAC;CACF;AA1FD,gEA0FC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-toggle-button WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, ToggleButtonWebElement.ts.\n */\nexport class ToggleButtonWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>label</code> property.\n   * Text to show in the button.\n   * @return The value of <code>label</code> property.\n   *\n   */\n  public getLabel(): Promise<string> {\n    return this.getProperty<string>('label');\n  }\n\n  /**\n   * Sets the value of <code>value</code> property.\n   * Specifies if the toggle button is selected\n   * @param value The value to set for <code>value</code>\n   *\n   */\n  public changeValue(value: boolean): Promise<void> {\n    return this.setProperty<boolean>('value', value);\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * Specifies if the toggle button is selected\n   * @return The value of <code>value</code> property.\n   *\n   */\n  public getValue(): Promise<boolean> {\n    return this.getProperty<boolean>('value');\n  }\n\n  /**\n   * Gets the value of <code>tooltip</code> property.\n   * Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.\n   * @return The value of <code>tooltip</code> property.\n   *\n   */\n  public getTooltip(): Promise<string> {\n    return this.getProperty<string>('tooltip');\n  }\n\n  /**\n   * Gets the value of <code>disabled</code> property.\n   * Specifies that the button element should be disabled.\n   * @return The value of <code>disabled</code> property.\n   *\n   */\n  public getDisabled(): Promise<boolean> {\n    return this.getProperty<boolean>('disabled');\n  }\n\n  /**\n   * Gets the value of <code>width</code> property.\n   * Specifies that the button style width\n   * @return The value of <code>width</code> property.\n   *\n   */\n  public getWidth(): Promise<number | string> {\n    return this.getProperty<number | string>('width');\n  }\n\n  /**\n   * Gets the value of <code>display</code> property.\n   * Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.\n   * @return The value of <code>display</code> property.\n   *\n   */\n  public getDisplay(): Promise<string> {\n    return this.getProperty<string>('display');\n  }\n\n  /**\n   * Gets the value of <code>size</code> property.\n   * Size of button\n   * @return The value of <code>size</code> property.\n   *\n   */\n  public getSizeProperty(): Promise<string> {\n    return this.getProperty<string>('size');\n  }\n\n  /**\n   * Gets the value of <code>chroming</code> property.\n   * Indicates in what states the button has variants in background and border.\n   * @return The value of <code>chroming</code> property.\n   *\n   */\n  public getChroming(): Promise<string> {\n    return this.getProperty<string>('chroming');\n  }\n}\n"]}