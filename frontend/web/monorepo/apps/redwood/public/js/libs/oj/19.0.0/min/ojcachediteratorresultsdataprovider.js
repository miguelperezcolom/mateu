/**
 * @license
 * Copyright (c) 2014, 2025, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
define(["ojs/ojcore-base","ojs/ojdataprovider","ojs/ojeventtarget"],function(t,e,a){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;
/**
     * @license
     * Copyright (c) 2014, 2025, Oracle and/or its affiliates.
     * Licensed under The Universal Permissive License (UPL), Version 1.0
     * @ignore
     */
/**
     * @preserve Copyright 2013 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
/**
     * @license
     * Copyright (c) 2014, 2025, Oracle and/or its affiliates.
     * Licensed under The Universal Permissive License (UPL), Version 1.0
     * @ignore
     */
class r{constructor(a,s){var i,h;this.dataProvider=a,this.options=s,this.CacheAsyncIterable=(h=class{constructor(t,e,a,r){this._parent=t,this.dataProviderAsyncIterator=e,this.params=a,this.cache=r,this[i]=()=>new this._parent.CacheAsyncIterator(this._parent,this.dataProviderAsyncIterator,this.params,this.cache,this._clientId),this._clientId=Symbol(),this._parent._mapClientIdToIteratorInfo.set(this._clientId,0)}},i=Symbol.asyncIterator,h),this.CacheAsyncIterator=class{constructor(t,e,a,r,s){this._parent=t,this.asyncIterator=e,this.params=a,this.cache=r,this._clientId=s,this._iteratorOffset=0,this._needLocalRowCount="enabled"===t.options?.includeFilteredRowCount&&"enabled"===a?.includeFilteredRowCount&&"exact"!==t._baseFetchFirstCapability?.totalFilteredRowCount}_getIteratorOffset(t){return this._parent._mapClientIdToIteratorInfo.get(t)}_getStaleResult(t){return null!=t?t.value.data?.length>0?new this._parent.CacheAsyncIteratorYieldResult(t.value,-1):new this._parent.CacheAsyncIteratorReturnResult(t.value,-1):{value:{data:[],metadata:[],fetchParameters:this.params,totalFilteredRowCount:-1},done:!0}}next(){const t=this.params||{},a=t.size||-1,r=t?.signal;return e.wrapWithAbortHandling(r,e=>e(this._getResult(t,a,this._needLocalRowCount?this._parent.cache.getSize():void 0)),!1)}_getResult(t,e,a){let r;if(-1===e||this._needLocalRowCount&&0===this._getIteratorOffset(this._clientId)){if(this.cache.isDone())return r=this.cache.getDataList(t,this._getIteratorOffset(this._clientId)),this._parent._mapClientIdToIteratorInfo.set(this._clientId,this._getIteratorOffset(this._clientId)+r.data.length),Promise.resolve(this._getFinalResult(r,a));{const a=()=>this._checkCachedParamsAndIterate(t,-1).then(r=>this.asyncIterator!==this._parent._currentAsyncIterator?this._getStaleResult():r.done?Promise.resolve(this._getResult(t,e,this._parent.cache.getSize())):a());return a()}}return this._fetchFromCacheAndIterate(t,e,a)}_getFinalResult(t,e){return!this._parent._getSharedIteratorState().cachedFetchParams.sortCriteria||t.fetchParameters&&t.fetchParameters.sortCriteria||(t.fetchParameters.sortCriteria=this._parent._getSharedIteratorState().cachedFetchParams.sortCriteria),t?.data?.length>0?new this._parent.CacheAsyncIteratorYieldResult(t,e):new this._parent.CacheAsyncIteratorReturnResult(t,e)}_checkCachedParamsAndIterate(t,e){let a,s=this._parent._getSharedIteratorState().cachedFetchParams,i=this._parent._getSharedIteratorState().fetchOffset,h=this._parent._getSharedIteratorState().fetchPromise;return h&&this._getIteratorOffset(this._clientId)===i&&r._compareCachedFetchParameters(t,s)?a=h:(this._parent._getSharedIteratorState().cachedFetchParams=r._createCachedFetchParams(t),this._parent._getSharedIteratorState().fetchPromise=this.asyncIterator.next().then(t=>this.asyncIterator!==this._parent._currentAsyncIterator?this._getStaleResult(t):(t.value.fetchParameters?.sortCriteria&&(this._parent._getSharedIteratorState().cachedFetchParams.sortCriteria=t.value.fetchParameters?.sortCriteria),this._parent._getSharedIteratorState().fetchOffset=this._parent._getSharedIteratorState().fetchOffset+t.value.data.length,this._parent._getSharedIteratorState().fetchPromise=null,this.cache.addListResult(t),t)),a=this._parent._getSharedIteratorState().fetchPromise),a}_fetchFromCacheAndIterate(t,e,a){let r=this.cache.getDataList(t,this._getIteratorOffset(this._clientId));if(this.cache.getSize()>=this._getIteratorOffset(this._clientId)+e||this.cache.isDone()){let t=this._getIteratorOffset(this._clientId)+r.data.length;return this._parent._mapClientIdToIteratorInfo.set(this._clientId,t),Promise.resolve(this._getFinalResult(r,a))}{let s=0,i=e-r.data.length;const h=()=>this._checkCachedParamsAndIterate(t,e).then(e=>{if(this.asyncIterator!==this._parent._currentAsyncIterator)return this._getStaleResult();{let n=e.value.data.slice(s,i);if(i-=n.length,0===i||this.cache.isDone()){r=this.cache.getDataList(t,this._getIteratorOffset(this._clientId));let s=this._getIteratorOffset(this._clientId)+r.data.length;this._parent._mapClientIdToIteratorInfo.set(this._clientId,s);let i=Object.assign({},e);return i.value.data=r.data,i.value.metadata=r.metadata,Promise.resolve(this._getFinalResult(i.value,a))}return h()}});return h()}}},this.CacheAsyncIteratorYieldResult=class{constructor(t,e){this.value=t,this[r._VALUE]=void 0!==e?Object.assign({totalFilteredRowCount:e},t):t,this[r._DONE]=!1}},this.CacheAsyncIteratorReturnResult=class{constructor(t,e){this.value=t,this[r._VALUE]=void 0!==e?Object.assign({totalFilteredRowCount:e},t):t,this[r._DONE]=!0}},this.cache=new t.DataCache,this._mapClientIdToIteratorInfo=new Map,this._lastFetchParams=null,this._firstIteratorState=null,a.createOptimizedKeyMap&&(this.createOptimizedKeyMap=t=>a.createOptimizedKeyMap(t)),a.createOptimizedKeySet&&(this.createOptimizedKeySet=t=>a.createOptimizedKeySet(t)),this.handleMutationOffsetUpdate=function(t,e){if("remove"===t){let t=0;e.forEach(e=>{this._mapClientIdToIteratorInfo.forEach((a,r)=>{e<a&&(this._mapClientIdToIteratorInfo.set(r,a-1),t+=1)})}),null!==this._firstIteratorState&&(this._firstIteratorState.fetchOffset-=t)}if("add"===t){let t=0;e.forEach(e=>{this._mapClientIdToIteratorInfo.forEach((a,r)=>{e<a&&(this._mapClientIdToIteratorInfo.set(r,a+1),t+=1)})}),null!==this._firstIteratorState&&(this._firstIteratorState.fetchOffset+=t)}}.bind(this),a.addEventListener(r._MUTATE,t=>{this.cache.processMutations(t.detail,this.handleMutationOffsetUpdate),this.dispatchEvent(t)}),a.addEventListener(r._REFRESH,t=>{this.cache.reset(),this._lastFetchParams=null,this._firstIteratorState=null,this.dispatchEvent(t)}),this._baseFetchFirstCapability=a.getCapability("fetchFirst")}containsKeys(t){const e=new Set,a=new Set,r=this.cache.getDataByKeys(t);if(t.keys.forEach(t=>{r.results.get(t)?e.add(t):a.add(t)}),0===a.size)return Promise.resolve({containsParameters:t,results:e});{const r={attributes:t.attributes,keys:a,scope:t.scope};return this.dataProvider.containsKeys(r).then(a=>(a.results.forEach(t=>{e.add(t)}),{containsParameters:t,results:e}))}}fetchByKeys(t){const a=new Map,r=new Set,s=t?.signal;return e.wrapWithAbortHandling(s,e=>{const s=this.cache.getDataByKeys(t);if(t.keys.forEach(t=>{const e=s.results.get(t);e?a.set(t,e):r.add(t)}),0===r.size)return e({fetchParameters:t,results:a});{const s={attributes:t.attributes,keys:r,scope:t.scope};return e(this.dataProvider.fetchByKeys(s).then(e=>(e.results.forEach((t,e)=>{a.set(e,t)}),{fetchParameters:t,results:a})))}},!1)}fetchByOffset(t){const a=t.size||r._DEFAULT_SIZE,s=t?.signal;return e.wrapWithAbortHandling(s,e=>{if(r._compareCachedFetchParameters(t,this._lastFetchParams)&&t.offset+a<=this.cache.getSize()){let r={...t};r.size=a;const s=this.cache.getDataByOffset(r);if(s)return e(s)}return e(this.dataProvider.fetchByOffset(t))},!1)}fetchFirst(t){if(t?.signal?.aborted){const e=this.dataProvider.fetchFirst(t)[Symbol.asyncIterator]();return this._currentAsyncIterator=e,new this.CacheAsyncIterable(this,e,null,null)}if(!this._getSharedIteratorState()||!r._compareCachedFetchParameters(t,t&&this._getSharedIteratorState()?this._getSharedIteratorState().cachedFetchParams:this._lastFetchParams)){this.cache.reset(),this._lastFetchParams=r._createCachedFetchParams(t);let e={...t};"enabled"===this.options?.includeFilteredRowCount&&"enabled"===t?.includeFilteredRowCount&&"exact"!==this._baseFetchFirstCapability?.totalFilteredRowCount&&(e.size=-1);const a=this.dataProvider.fetchFirst(e)[Symbol.asyncIterator]();this._firstIteratorState={cachedFetchParams:this._lastFetchParams,fetchOffset:0,fetchPromise:null,asyncIterator:a}}return this._currentAsyncIterator=this._getSharedIteratorState().asyncIterator,new this.CacheAsyncIterable(this,this._getSharedIteratorState().asyncIterator,t,this.cache)}getCapability(t){const e=this.dataProvider.getCapability(t);return"fetchCapability"===t||"fetchFirst"===t?{attributeFilter:e?.attributeFilter,caching:"visitedByCurrentIterator"}:e}getTotalSize(){return null!=this._lastFetchParams&&!this._lastFetchParams.filterDef&&this.cache.isDone()?Promise.resolve(this.cache.getSize()):this.dataProvider.getTotalSize()}isEmpty(){return null!=this._lastFetchParams&&!this._lastFetchParams.filterDef&&this.cache.isDone()?0===this.cache.getSize()?"yes":"no":this.dataProvider.isEmpty()}_getSharedIteratorState(){return this._firstIteratorState}static _compareCachedFetchParameters(e,a){return e=e||{},!(null!=a&&a.signal?.aborted&&!e.signal?.aborted)&&(null!=a&&t.Object.compareValues(a.attributes,e.attributes||null)&&t.Object.compareValues(a.filterDef,e.filterCriterion?r._getFilterDef(e.filterCriterion):null)&&t.Object.compareValues(a.sortCriteria,e.sortCriteria||null))}static _createCachedFetchParams(t){t=t||{};const e={};return e.size=t.size,e.attributes=t.attributes?Object.assign({},t.attributes):null,e.filterDef=t.filterCriterion?r._getFilterDef(t.filterCriterion):null,e.sortCriteria=t.sortCriteria?Object.assign([],t.sortCriteria):null,e.signal=t.signal,e}static _getFilterDef(t){if(!t)return null;const e={};return Object.keys(t).forEach(a=>{"filter"!==a&&(e[a]=t[a])}),e}}
/**
     * @license
     * Copyright (c) 2014, 2025, Oracle and/or its affiliates.
     * Licensed under The Universal Permissive License (UPL), Version 1.0
     * @ignore
     */
return r._REFRESH="refresh",r._MUTATE="mutate",r._VALUE="value",r._DONE="done",r._DEFAULT_SIZE=25,a.EventTargetMixin.applyMixin(r),t._registerLegacyNamespaceProp("CachedIteratorResultsDataProvider",r),r});
//# sourceMappingURL=ojcachediteratorresultsdataprovider.js.map