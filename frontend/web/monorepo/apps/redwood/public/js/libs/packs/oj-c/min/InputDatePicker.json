[
  {
    "id": "oj-c.InputDatePicker",
    "name": "InputDatePicker",
    "memberof": "oj-c",
    "kind": "class",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "ojcomponent": true,
    "isvcomponent": true,
    "since": "17.0.0",
    "longname": "oj-c.InputDatePicker",
    "pack": "oj-c",
    "classdesc": "<h3 id=\"InputDatePickerOverview-section\">\n  JET Input Date Picker Component\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#InputDatePickerOverview-section\"></a>\n</h3>\n\n<p>Description: A JET Input Date Picker allows users to enter or select a single date using a\ncalendar interface.</p>\n\n<pre class=\"prettyprint\"><code>&lt;oj-c-input-date-picker label-hint=\"Date\">&lt;/oj-c-input-date-picker></code></pre>\n\n<h3 id=\"validation-section\">\n  Validation and Messaging\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#validation-section\"></a>\n</h3>\n\n<p>\nFor components that support validators, any invalid values entered by the user are not pushed into the value\nif validation fails: the <a href=\"#valid\">valid property</a> will change but the original value will remain unchanged.\nThe same thing applies to required validation: if required is set to true and the user clears the field,\nvalid will change, but empty values will not be pushed so the original value remains unchanged.\n</p>\n<p>\nUse <a href=\"../jetCookbook.html?component=validationGroup&demo=requiredFieldValidation\">\n&lt;oj-validation-group></a> to handle tracking valid across multiple components.\n</p>\n<p>\nAn editable component runs validation (normal or deferred) based on the action performed on it\n(either by end-user or page author), and the state it was in when the action occurred. Examples\nof actions are - creating a component, user changing the value of the component by interacting\nwith it, the app setting a value programmatically, the app calling the validate() method etc. At\nthe time the action occurs, the component could already be showing errors, or can have a deferred\nerror or have no errors.\n</p>\n<p>\nThese factors also determine whether validation errors/messages get shown to the user immediately\nor get deferred. The following sections highlight the kinds of validation that are run and how\nmessages get handled.\n</p>\n\n<h4 id=\"normal-validation-section\">\n  Normal Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#normal-validation-section\"></a>\n</h4>\nNormal validation is run in the following cases on the display value, using the converter and\nvalidators (this includes async-validators) set on the component (for components that support these properties),\n\nand validation errors are reported to user immediately.\n<ul>\n<li>When value changes as a result of user interaction all messages are cleared, including custom\nmessages added by the app, and full validation is run on the UI value. The steps performed are\noutlined below.\n<ol>\n<li>All messages are cleared and <code class=\"prettyprint\">messagesCustom</code> property is cleared</li>\n<li>If no converter is present then processing continues to next step. If a converter is\npresent, the UI value is first converted (i.e., parsed). If there is a parse error then\nthe messages are shown and processing returns.</li>\n<li>If there are no validators setup for the component then the value is set on the component.\nOtherwise all validators are run in sequence using the parsed value from the previous step. The\nimplicit required validator is run first if the component is marked required. When a validation error is\nencountered it is remembered and the next validator in the sequence is run.\n<ul><li>NOTE: The value is trimmed before required validation is run</li></ul>\n</li>\n<li>At the end of the validation run if there are errors, the messages are shown\nand processing returns. If there are async-validators, those errors are shown as soon as they\ncome in, and not until all validators, sync and async validators, are complete, does processing\nreturn, that is, value and valid are updated. If there are no errors, then the\n<code class=\"prettyprint\">value</code> property is updated and the formatted value displayed on the\nUI.</li>\n</ol>\n</li>\n<li>When the <code class=\"prettyprint\">validate</code> method is called by app, all messages are\ncleared and full validation is run using the display value. See <code class=\"prettyprint\">validate</code>\nmethod on the sub-classes for details. Note: JET validation is designed to catch user input errors, and not invalid\ndata passed from the server; this should be caught on the server.</li>\n<li>When certain properties change through programmatic intervention by app, the component\ndetermines whether it needs to run normal validation based on the state the component is in.\nRefer to the <a href=\"#mixed-validation-section\">Mixed Validation</a> section below for details. </li>\n</ul>\n\n<h4 id=\"deferred-validation-section\">\n  Deferred Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-validation-section\"></a>\n</h4>\nDeferred validation is run in the following cases on the component value using the implicit\nrequired validator if required is true, and validation errors are deferred, i.e., not shown to user immediately.\nRefer to the <a href=\"#deferred-messages-section\">Showing Deferred Messages</a> section to\nunderstand how deferred messages can be shown.\n<ul>\n <li>When a component is created and it is required deferred validation is run and no messages are cleared\n prior to running validation.\n Refer to the <a href=\"#deferred-validators-section\">Validators\n Participating in Deferred Validation</a> section for details.</li>\n <li>When the <code class=\"prettyprint\">value</code> property changes due to programmatic\n intervention deferred validation is run, after all messages and messagesCustom property are cleared.</li>\n <li>When the <code class=\"prettyprint\">reset</code> method is called, deferred validation is run\n  after all messages and messagesCustom property are cleared.</li>\n <li>When certain properties change through programmatic intervention by app, the component\n determines whether it needs to run deferred validation based on the state the component is in.\n Refer to the <a href=\"#mixed-validation-section\">Mixed Validation</a> section below for details.</li>\n</ul>\n\n<h4 id=\"mixed-validation-section\">\n  Mixed Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#mixed-validation-section\"></a>\n</h4>\nEither deferred or normal validation is run in the following cases based on the state the\ncomponent is in and any validation errors encountered are either hidden or shown to user.\n<ul>\n <li>when disabled property changes. See <a href=\"#disabled\">disabled</a> property for details.</li>\n <li>when converter property (if available) changes.</li>\n <li>when required property changes. See <a href=\"#required\">required</a> property for details.</li>\n <li>when validators property changes (for components that support validators). See <a href=\"#validators\">validators</a> property for details.</li>\n</ul>\n\n<h3 id=\"deferred-messages-section\">\n  Showing Deferred Messages\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-messages-section\"></a>\n</h3>\nDeferred validation messages are displayed only when page author requests for it explicitly in\none of the following ways:\n<ul>\n<li>calls the <a href=\"#showMessages\"><code class=\"prettyprint\">showMessages</code></a> method on the component</li>\n</ul>\n\n<h3 id=\"deferred-validators-section\">\n  Validators Participating in Deferred Validation\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#deferred-validators-section\"></a>\n</h3>\nThe required validator is the only validator type that participates in deferred validation.\nThe required property needs to be set to true for the required validator to run.\n\n<h3 id=\"user-assistance-text-section\">\n  User Assistance Text\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#user-assistance-text-section\"></a>\n</h3>\n<p>\nUser assistive text provides guidance to help the user understand what data to enter or select.\n</p>\n<p>\nBy default all user assistance text shows inline.\nFor input components, it shows when the field takes focus. In other components\nit shows all the time. See the user-assistance-density property for other ways\nthe user assistance text can render, like in 'compact' mode, it will render as an icon on the label\nwhich when clicked will show the user assistance text in a notewindow.\n</p>\n<p>\nThe JET form component properties that are used for user assistance text are help.instruction,\nvalidator and converter hints (for components that support these properties), and help-hints.\nIn the Redwood theme for clarity only one user assistance text shows to the user.\nThe precedence rules are:\n<ul>\n<li>help.instruction shows;</li>\n<li>if no help.instruction, then validator hint shows;</li>\n<li>if no help.instruction or validator hint, then help-hints.definition shows;</li>\n<li>if no help.instruction, validator hint, or help-hints.definition, then converter hint shows.</li>\n<li>help-hints.source always shows along side the above.</li>\n</ul>\n</p>\n<p>For components that support validators or converters, sometimes a hint shows that you do not want to show. To not show it,\n set the display-options.validator-hint and/or display-options.converter-hint property to 'none'.\n</p>\n<p>required property can be used to guide the user.\nIn Redwood, a required field shows the word Required under the field\nwhen the field is empty and does not have focus.\nThe mask placeholder is shown when the field is empty and has focus. The mask placeholder is not configurable.\n</p>\n\n<h3 id=\"touch-section\">\n  Touch End User Information\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#touch-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Input field (Not a Segment)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Sets focus to first segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Sets focus to segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Double Tap</kbd></td>\n      <td>If the date is complete, selects the entire date. Hitting backspace clears it.</td>\n    </tr>\n     <tr>\n      <td>Calendar icon (When the date picker is not open)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Opens the Date Picker and moves the focus to the first focusable element in the DatePicker.</td>\n    </tr>\n    <tr>\n      <td>Calendar icon (When the date picker is open)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Closes the Date Picker.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"keyboard-section\">\n  Keyboard End User Information\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#keyboard-section\"></a>\n</h3>\n\n<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Input field</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Sets focus to first segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field</td>\n      <td><kbd>Ctrl + A</kbd> or <kbd>Command + A</kbd></td>\n      <td>If the date is complete, selects the entire date. Double clicking on the field also selects the date.</td>\n    </tr>\n    <tr>\n      <td>Input field with date selected</td>\n      <td><kbd>Backspace/Delete</kbd></td>\n      <td>Backspace or delete key clears the date. The mask placeholders will be shown again and focus will be on the first segment.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Backspace/Delete</kbd></td>\n      <td>Clears the date segment. Focus remains on the date segment.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the segment on the right. If focus is on the rightmost segment, the focus does not move.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the segment on the left. If focus is on the leftmost segment, the focus does not move.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>UpArrow/DownArrow</kbd></td>\n      <td>Increments or decrements the number by one in the segment. If there is no number in the segment, it initializes it to the current date.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>End</kbd></td>\n      <td>Increments the segment to the maximum number for the segment. For example, if on the month segment, this will set the number to 12. If on the year segment, this will set the number to 2100.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>Home</kbd></td>\n      <td>Decrements the segment to the minimum number for the segment. For example, if on the month segment, this will set the number to 1. If on the year segment, this will set the number to 1900.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>Page Up/Page Down</kbd></td>\n      <td>Increments or decrements the number by two in the month segment, by seven in the day segment, or by five in the year segment. If there is no number in the segment, it initializes it to the current date.</td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Esc</kbd></td>\n      <td>Closes the date picker.</td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Tab</kbd></td>\n      <td>\n        Moves the focus to next element in the date picker sequence. Only one element in the calendar grid is in the Tab sequence\n        (current day/month/year or selected day/month/year depending on scenario). If focus is on the last tabbable element\n        inside the date picker, moves focus to the first tabbable element inside the date picker.\n      </td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Shift + Tab</kbd></td>\n      <td>\n        Moves the focus to the previous tabbable element inside the date picker. If focus is on the first tabbable element\n        inside the date picker, moves focus to the last tabbable element inside the date picker.\n      </td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused day or activates the button currently focused.\n      </td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>PageUp</kbd></td>\n      <td>Changes the calendar grid to the previous month. Moves focus to the closest day in the previous month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>PageDown</kbd></td>\n      <td>Changes the calendar grid to the next month. Moves focus to the closest day in the next month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Shift + PageUp</kbd></td>\n      <td>Changes the calendar grid to the previous year. Moves focus to the closest day of the same month in the previous year.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Shift + PageDown</kbd></td>\n      <td>Changes the calendar grid to the next year. Moves focus to the closest day of the same month in the next year.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Ctrl + Alt + T or Ctrl + Option + T</kbd></td>\n     <td>Changes the calendar grid to the year and month that contains today's date. Moves focus to Today.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Home</kbd></td>\n      <td>Go to the first day of the current month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>End</kbd></td>\n      <td>Go to the last day of the current month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowLeft</kbd></td>\n      <td>Moves focus to the previous day. In RTL, this will move focus to the next day.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowRight</kbd></td>\n      <td>Moves focus to the next day. In RTL, this will move focus to the previous day.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowUp</kbd></td>\n      <td>Moves focus to the same day of the previous week.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowDown</kbd></td>\n      <td>Moves focus to the same day of the next week.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused month and returns to the date picker, refreshing the display to show the selected month.\n      </td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Moves focus to four months back from the current focused month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Moves focus to four months ahead from the current focused month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the next month. In RTL, this will move focus to the previous month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the previous month. In RTL, this will move focus to the next month.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused year and returns to the date picker, refreshing the display to show the selected month.\n      </td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>PageUp</kbd></td>\n      <td>Changes the year grid to the previous decade. The focus remains in the same location with respect to the current decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>PageDown</kbd></td>\n      <td>Changes the year grid to the next decade. The focus remains in the same location with respect to the current decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Moves focus to four years back from the current focused year. If that year is not in the year grid, go back 1 decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Moves focus to four years ahead from the current focused year. If that year is not in the year grid, go ahead 1 decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the next year. In RTL, this will move focus to the previous year.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the previous year. In RTL, this will move focus to the next year.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"a11y-section\">\n  Accessibility\n  <a class=\"bookmarkable-link\" title=\"Bookmarkable Link\" href=\"#a11y-section\"></a>\n</h3>\n\n<p>\nFor accessibility, set the <a href=\"#labelHint\">label-hint</a> property.\nIf there is no visible label, then to make this accessible to screen reader users,\nset the <a href=\"#labelHint\">label-hint</a> and <a href=\"#labelEdge\">label-edge</a>='none'\nwhich renders an aria-label with the label-hint text.\n</p>\n\n\n<p>\nDisabled content: JET supports an accessible luminosity contrast ratio,\nas specified in <a href=\"http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast\">WCAG 2.0 - Section 1.4.3 \"Contrast\"</a>,\nin the themes that are accessible.  (See the \"Theming\" chapter of the JET Developer Guide for more information on which\nthemes are accessible.)  Note that Section 1.4.3 says that text or images of text that are part of an inactive user\ninterface component have no contrast requirement.  Because disabled content may not meet the minimum contrast ratio\nrequired of enabled content, it cannot be used to convey meaningful information.\n</p>",
    "scope": "static",
    "tagWithoutBrackets": "oj-c-input-date-picker",
    "tagWithBrackets": "<oj-c-input-date-picker>",
    "domInterface": "CInputDatePickerElement",
    "ojPageTitle": "&lt;oj-c-input-date-picker>",
    "camelCaseName": "InputDatePicker",
    "ojPageTitlePrefix": "Element: ",
    "ojtsvcomponent": true,
    "tstype": {
      "target": "Type",
      "value": "interface CInputDatePickerElement extends JetElement<InputDatePickerElementSettableProperties>"
    },
    "ojsignature": [
      {
        "target": "Type",
        "value": "interface CInputDatePickerElement extends JetElement<InputDatePickerElementSettableProperties>"
      }
    ],
    "tsdeprecated": [
      {
        "type": "supersedes",
        "since": "17.1.0",
        "value": [
          "oj-input-date"
        ]
      }
    ],
    "ojmodule": "input-date-picker"
  },
  {
    "id": "oj-c.InputDatePicker#columnSpan",
    "name": "columnSpan",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#columnSpan",
    "scope": "instance",
    "type": {
      "names": [
        "number"
      ]
    },
    "optional": true,
    "description": "Specifies how many columns this component should span.\nThis only takes effect when this component is a child of a form layout\nthat has direction 'row'.",
    "defaultvalue": 1
  },
  {
    "id": "oj-c.InputDatePicker#containerReadonly",
    "name": "containerReadonly",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#containerReadonly",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.\nThis affects whether a readonly component renders in full or mixed readonly mode."
  },
  {
    "id": "oj-c.InputDatePicker#dateRangeOverflowMessageDetail",
    "name": "dateRangeOverflowMessageDetail",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#dateRangeOverflowMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message detail when the date range validation fails when user's input is greater than the max.\nIf the component needs a validation error message for overflow that is different from the default,\nset this property. The function should return a translated string.\n</p>\nUsage: <br/>\ndateRangeOverflowMessageDetail = (p: { value: string; max: string }) => `The date ${p.value} needs to be on or before ${p.max}.`<br/>\ndateRangeOverflowMessageDetail = (p: {max: string }) => `The date needs to be on or before ${p.max}.`<br/>\ndateRangeOverflowMessageDetail = () => `The date is out of range.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.InputDatePicker.OverflowMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#dateRangeUnderflowMessageDetail",
    "name": "dateRangeUnderflowMessageDetail",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#dateRangeUnderflowMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message when the date range validation fails when the user's input is less than the min.\nIf the component needs a validation error message for underflow that is different from the default,\nset this property. The function should return a translated string.\n</p>\nUsage: <br/>\ndateRangeUnderflowMessageDetail = (p: { value: string; min: string }) => `The date ${p.value} needs to be on or after ${p.min}.`<br/>\ndateRangeUnderflowMessageDetail = (p: {min: string }) => `The date needs to be on or after ${p.min}.`<br/>\ndateRangeUnderflowMessageDetail = () => `The date is out of range.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.InputDatePicker.UnderflowMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#dateRestrictionMessageDetail",
    "name": "dateRestrictionMessageDetail",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#dateRestrictionMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns a component-specific message when the date restriction validation fails when the user's input is disabled or restricted.\nIf the component needs a validation error message for restriction that is different from the default,\nset this property. The function should return a translated string.\n</p>\nUsage: <br/>\ndateRestrictionMessageDetail = (p: { value: string }) => `The date ${p.value} is not available.`<br/>\ndateRestrictionMessageDetail = () => `The date is not available.`",
    "tstype": [
      {
        "target": "Type",
        "value": "(p: oj-c.InputDatePicker.RestrictionMessageDetailParameters) => string",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#dayFormatter",
    "name": "dayFormatter",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#dayFormatter",
    "scope": "instance",
    "type": {
      "names": [
        "function"
      ]
    },
    "optional": true,
    "description": "<p>\nA callback function that returns additional information for rendering a day in the Date Picker.\nIf you want to restrict or disable some of the days, set this property. When this property is set,\nthis will be used to validate the value. If a selected date is either 'disabled' or 'restricted',\nit will fail the validation and a validation error will be shown.\n<p>",
    "tstype": [
      {
        "target": "Type",
        "value": "(date: Required<oj-c.InputDatePicker.CalendarDate>) => { state: \"disabled\" | \"enabled\" | \"restricted\"; }",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#daysOutsideMonth",
    "name": "daysOutsideMonth",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#daysOutsideMonth",
    "scope": "instance",
    "type": {
      "names": [
        "\"hidden\"",
        "\"selectable\""
      ]
    },
    "optional": true,
    "description": "The days-outside-month attribute affects the day cells that are outside of the current month.",
    "ojvalues": [
      {
        "name": "hidden",
        "description": "The days outside of the current month will be hidden.",
        "displayName": "Hidden",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "selectable",
        "description": "The days outside of the current month will be visible and selectable.",
        "displayName": "Selectable",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"hidden\""
  },
  {
    "id": "oj-c.InputDatePicker#disabled",
    "name": "disabled",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#disabled",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "Whether the component is disabled. The default is false.\n\n<p>\nWhen the <code class=\"prettyprint\">disabled</code> property changes due to programmatic\nintervention, the component may clear messages and run validation in some cases. </br>\n<ul>\n<li>when a required component is initialized as disabled\n<code class=\"prettyprint\">value=\"{{currentValue}}\" required disabled</code>,\ndeferred validation is skipped.</li>\n<li>when a disabled component is enabled,\n <ul>\n <li>if component is invalid and showing messages then all component messages are cleared,\n and full validation run using the display value.\n  <ul>\n   <li>if there are validation errors, they are shown.</li>\n   <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n   property is updated. Page authors can listen to the <code class=\"prettyprint\">valueChanged</code>\n   event to clear custom errors.</li>\n  </ul>\n </li>\n\n <li>if component is valid and has no errors then deferred validation is run.\n   <ul>\n   <li>if there is a deferred validation error, then the valid property is updated. </li>\n   </ul>\n </li>\n <li>if component is invalid and deferred errors then component messages are cleared and\n deferred validation re-run.\n   <ul>\n   <li>if there is a deferred validation error, then the valid property is updated.</li>\n   </ul>\n </li>\n </ul>\n</li>\n<li>when enabled component is disabled then no validation is run and the component appears\ndisabled.</li>\n</ul>\n</p>",
    "defaultvalue": false
  },
  {
    "id": "oj-c.InputDatePicker#displayOptions",
    "name": "displayOptions",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#displayOptions",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.InputDatePicker.DisplayOptionsProps",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#help",
    "name": "help",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#help",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "Form component help information.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.InputDatePicker.Help",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#helpHints",
    "name": "helpHints",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#helpHints",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "description": "The helpHints object contains a definition property and a source property.",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.InputDatePicker.HelpHints",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#labelEdge",
    "name": "labelEdge",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#labelEdge",
    "scope": "instance",
    "type": {
      "names": [
        "\"none\"",
        "\"start\"",
        "\"top\"",
        "\"inside\""
      ]
    },
    "optional": true,
    "description": "Specifies how the label of the component is positioned when the label-hint\nattribute is set on the component.",
    "ojvalues": [
      {
        "name": "inside",
        "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
        "displayName": "Inside",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "none",
        "description": "The component will not create a label, but instead set the aria-label property on the input element.",
        "displayName": "None",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "start",
        "description": "The label will be placed before the start of the component.",
        "displayName": "Start",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "top",
        "description": "The label will be placed on top of the component.",
        "displayName": "Top",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#labelHint",
    "name": "labelHint",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#labelHint",
    "scope": "instance",
    "type": {
      "names": [
        "string"
      ]
    },
    "optional": false,
    "description": "Represents a hint for rendering a label on the component.\nThis is used in combination with the label-edge attribute to control how the label should be rendered."
  },
  {
    "id": "oj-c.InputDatePicker#labelStartWidth",
    "name": "labelStartWidth",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#labelStartWidth",
    "scope": "instance",
    "type": {
      "names": [
        "number|string"
      ]
    },
    "optional": true,
    "description": "<p> The width of the label when labelEdge is 'start'.</p>\n<p> This attribute accepts values of type\n<code>0 | `--${string}` | `${number}%` | `${number}x` | `calc(${string})`</code></p>"
  },
  {
    "id": "oj-c.InputDatePicker#labelWrapping",
    "name": "labelWrapping",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#labelWrapping",
    "scope": "instance",
    "type": {
      "names": [
        "\"truncate\"",
        "\"wrap\""
      ]
    },
    "optional": true,
    "description": "Should the labels wrap or truncate when there is not enough available space.",
    "tsdeprecated": [
      {
        "type": "deprecated",
        "since": "18.0.0",
        "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
      }
    ],
    "ojvalues": [
      {
        "name": "truncate",
        "description": "Label will truncate if needed.",
        "displayName": "Truncate",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "wrap",
        "description": "Label will wrap if needed.",
        "displayName": "Wrap",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#max",
    "name": "max",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#max",
    "scope": "instance",
    "type": {
      "names": [
        "string|null"
      ]
    },
    "optional": true,
    "description": "The maximum selectable date, in date only ISO string format.\nThe date the user enters must be less than or equal to the max date, otherwise the user will see an error.\nAlso, the dates in the date picker that are greater than this date will not be selectable.\nThis must be a date only ISO string with no time, otherwise an error is thrown and the component will not render.\nWhen set to null, there is no maximum."
  },
  {
    "id": "oj-c.InputDatePicker#maxWidth",
    "name": "maxWidth",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#maxWidth",
    "scope": "instance",
    "type": {
      "names": [
        "number|string"
      ]
    },
    "optional": true,
    "description": "Specifies the component's max width.  If unset, the default max width is 100%.",
    "ojvalues": [
      {
        "name": "sm",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "md",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "tstype": [
      {
        "target": "Type",
        "value": "number|string|\"sm\"|\"md\"",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#messagesCustom",
    "name": "messagesCustom",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#messagesCustom",
    "scope": "instance",
    "type": {
      "names": [
        "Array<object>"
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "description": "List of messages an app would add to the component when it has business/custom validation\nerrors that it wants the component to show. This allows the app to perform further validation\nbefore sending data to the server. When this option is set the message shows to the\nuser right away. To clear the custom message, set <code class=\"prettyprint\">messagesCustom</code>\nback to an empty array.<br/>\n<p>\nSee the <a href=\"#validation-section\">Validation and Messages</a> section\nfor details on when the component clears <code class=\"prettyprint\">messagesCustom</code>;\nfor example, when full validation is run.\n</p>",
    "defaultvalue": "[]",
    "tstype": [
      {
        "target": "Type",
        "value": "Array<oj-c.InputDatePicker.ComponentMessageItem>",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#min",
    "name": "min",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#min",
    "scope": "instance",
    "type": {
      "names": [
        "string|null"
      ]
    },
    "optional": true,
    "description": "The minimum selectable date, in date only ISO string format.\nThe date the user enters must be greater than or equal to the min date, otherwise the user will see an error.\nAlso, the dates in the date picker that are less than this date will not be selectable.\nThis must be a date only ISO string with no time, otherwise an error is thrown and the component will not render.\nWhen set to null, there is no minimum."
  },
  {
    "id": "oj-c.InputDatePicker#monthAndYearPicker",
    "name": "monthAndYearPicker",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#monthAndYearPicker",
    "scope": "instance",
    "type": {
      "names": [
        "\"off\"",
        "\"on\""
      ]
    },
    "optional": true,
    "description": "The month-and-year-picker attribute can be used to specify whether or not the DatePicker should show the\ntoggle buttons that toggle the month grid picker and year grid picker. The month picker grid allows\nthe user to select a month to display in the date picker and the year picker grid allows the user to\nselect the year to display in the date picker.",
    "ojvalues": [
      {
        "name": "on",
        "description": "The month and year toggle buttons will be shown.",
        "displayName": "On",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "off",
        "description": "The month and year toggle buttons will not be shown and the date picker renders the month and the year as text.",
        "displayName": "Off",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"on\""
  },
  {
    "id": "oj-c.InputDatePicker#readonly",
    "name": "readonly",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#readonly",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "<p>\nWhether the component is readonly. The readonly property sets or returns whether an element\nis readonly, or not. A readonly element cannot be modified. However, a user can tab to it,\nhighlight it, focus on it, and copy the text from it. If you want to prevent the user from\ninteracting with the element, use the disabled property instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were false.\n</p>"
  },
  {
    "id": "oj-c.InputDatePicker#readonlyUserAssistanceShown",
    "name": "readonlyUserAssistanceShown",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#readonlyUserAssistanceShown",
    "scope": "instance",
    "type": {
      "names": [
        "\"none\"",
        "\"confirmationAndInfoMessages\""
      ]
    },
    "optional": true,
    "description": "<p>\nSpecifies which user assistance types should be shown when the component is readonly.\n</p>",
    "defaultvalue": "\"none\""
  },
  {
    "id": "oj-c.InputDatePicker#required",
    "name": "required",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#required",
    "scope": "instance",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "optional": true,
    "description": "<p>\nThis property set to <code class=\"prettyprint\">false</code> implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to <code class=\"prettyprint\">true</code> implies that a value is required to be provided by the user.\n</p>\n<p>\nIn the Redwood theme, by default, a Required text is rendered inline when the field is empty.\nIf user-assistance-density is 'compact', it will show on the label as an icon.\n</p>\n<p>The Required error text is based on Redwood UX designs, and it is not recommended that it be changed.\nTo override the required error message,\nuse the <code class=\"prettyprint\">required-message-detail</code> attribute.\nThe component's label text is passed in as a token {label} and can be used in the message detail.\n</p>\n<p>When required is set to true, an implicit required validator is created, i.e.,\n<code class=\"prettyprint\">new RequiredValidator()</code>. The required validator is the only\nvalidator to run during initial render, and its error is not shown to the user at this time;\nthis is called deferred validation. The required validator also runs during normal validation;\nthis is when the errors are shown to the user.\nSee the <a href=\"#validation-section\">Validation and Messaging</a> section for details.\n</p>\n<p>\nWhen the <code class=\"prettyprint\">required</code> property changes due to programmatic intervention,\nthe component may clear component messages and run validation, based on the current state it's in. </br>\n\n<h4>Running Validation when required property changes</h4>\n<ul>\n<li>if component is valid when required is set to true, then it runs deferred validation on\nthe value property. If the field is empty, the valid state is invalidHidden. No errors are\nshown to the user.\n</li>\n<li>if component is valid when required is set from true to false, then no validation is run.\n</li>\n<li>if component is invalid and has deferred messages (invalidHidden) when required is set to false, then\ncomponent messages are cleared (messages-custom messages are not cleared)\nbut no deferred validation is run because required is false.\n</li>\n<li>if component is invalid and currently showing invalid messages (invalidShown) when required is changed\nto either true or false, then\ncomponent messages are cleared and normal validation is run using the current display value.\n<ul>\n  <li>if there are validation errors, then <code class=\"prettyprint\">value</code>\n  property is not updated and the error is shown.\n  </li>\n  <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n  property is updated; page author can listen to the <code class=\"prettyprint\">valueChanged</code>\n  event on the component to clear custom errors.</li>\n</ul>\n</li>\n</ul>\n\n<h4>Clearing Messages when required property changes</h4>\n<ul>\n<li>Only messages created by the component, like validation messages, are cleared when the required property changes.</li>\n<li><code class=\"prettyprint\">messagesCustom</code> property is not cleared.</li>\n</ul>\n\n</p>",
    "defaultvalue": false
  },
  {
    "id": "oj-c.InputDatePicker#requiredMessageDetail",
    "name": "requiredMessageDetail",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#requiredMessageDetail",
    "scope": "instance",
    "type": {
      "names": [
        "string"
      ]
    },
    "optional": true,
    "description": "<p>\nThe component-specific message detail when the required validation fails.\nIf the component needs a required validation error message that is different from the default,\nset this property. It should be a translated string.\n</p>"
  },
  {
    "id": "oj-c.InputDatePicker#textAlign",
    "name": "textAlign",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#textAlign",
    "scope": "instance",
    "type": {
      "names": [
        "\"end\"",
        "\"start\"",
        "\"right\""
      ]
    },
    "optional": true,
    "description": "Specifies how the text is aligned within the text field",
    "ojvalues": [
      {
        "name": "start",
        "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
        "displayName": "Start",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "end",
        "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
        "displayName": "End",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "right",
        "description": "Aligns text right regardless of reading direction, often used for numbers.",
        "displayName": "Right",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#todayTimeZone",
    "name": "todayTimeZone",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#todayTimeZone",
    "scope": "instance",
    "type": {
      "names": [
        "string"
      ]
    },
    "optional": true,
    "description": "<p>\nThe today-time-zone attribute is used to compute today's date.\nThis defaults to the user's system timezone.\n</p>\n<p>\nThe only reason an application would set the today-time-zone property is if they want the\nhighlighted today cell to be in a different timezone than the user's system's timezone,\nlike if the user has a preferred timezone that is not where they are physically working.\n</p>"
  },
  {
    "id": "oj-c.InputDatePicker#todayButton",
    "name": "todayButton",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#todayButton",
    "scope": "instance",
    "type": {
      "names": [
        "\"hidden\"",
        "\"visible\""
      ]
    },
    "optional": true,
    "description": "Specifies the visibility of the 'Go to today' button.",
    "ojvalues": [
      {
        "name": "visible",
        "description": "The 'Go to Today' button will be shown and it can be pressed to navigate to Today.",
        "displayName": "Visible",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "hidden",
        "description": "The 'Go to Today' button will be hidden.",
        "displayName": "Hidden",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"visible\""
  },
  {
    "id": "oj-c.InputDatePicker#userAssistanceDensity",
    "name": "userAssistanceDensity",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#userAssistanceDensity",
    "scope": "instance",
    "type": {
      "names": [
        "\"compact\"",
        "\"reflow\"",
        "\"efficient\""
      ]
    },
    "optional": true,
    "description": "<p>\nSpecifies the density of the form component's user assistance presentation. It can be shown inline with\nreserved rows to prevent reflow if a user assistance text shows up, inline without reserved rows that would\nreflow if a user assistance text shows up, or it can be shown compactly in a popup instead.\n</p>\n<p>\nIf the property value is not set either directly on the component or inherited from\na parent form layout, then the property is treated as if its value were \"reflow\".\n</p>",
    "ojvalues": [
      {
        "name": "reflow",
        "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
        "displayName": "Reflow",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "efficient",
        "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
        "displayName": "Efficient",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "compact",
        "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
        "displayName": "Compact",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#validators",
    "name": "validators",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#validators",
    "scope": "instance",
    "type": {
      "names": [
        "Array<object>|null"
      ]
    },
    "optional": true,
    "description": "List of validators, synchronous or asynchronous, used by the component\nwhen performing validation. Each item is either an\ninstance that duck types oj.Validator or oj.AsyncValidator.\n<p>\nAt runtime when the component runs validation, it\ncombines all the validators\nspecified through this <code class=\"prettyprint\">validators</code> attribute\nand the <code class=\"prettyprint\">async-validators</code> attribute, and\nruns all of them.\n</p>\n<p>\nHints exposed by validators are shown inline by default in the Redwood theme when the\nfield has focus.\nYou can turn off showing validator hints by using the\n'validatorHint' property set to 'none' on the <code class=\"prettyprint\">display-options</code>\nattribute.\n</p>\n<p>\nIn the Redwood theme, only one hint shows at a time, so the precedence rules are:\nhelp.instruction shows; if no help.instruction then validator hints show;\nif none, then help-hints.definition shows; if none, then converter hint shows.\nhelp-hints.source always shows along with the other help or hint.\n</p>\n\n<p>\nWhen <code class=\"prettyprint\">validators</code> property changes due to programmatic\nintervention, the component may decide to clear messages and run validation, based on the\ncurrent state it is in. </br>\n\n<h4>Steps Performed Always</h4>\n<ul>\n<li>The cached list of validator instances are cleared and new validator hints is pushed to\nmessaging.\n</li>\n</ul>\n\n<h4>Running Validation</h4>\n<ul>\n<li>if component is valid when validators changes, component does nothing other than the\nsteps it always performs.</li>\n<li>if component is invalid and is showing messages when\n<code class=\"prettyprint\">validators</code> or\n<code class=\"prettyprint\">async-validators</code> changes then all component messages\n are cleared and full validation run using the display value on the component.\n<ul>\n  <li>if there are validation errors, then <code class=\"prettyprint\">value</code>\n  property is not updated and the error is shown.\n  </li>\n  <li>if no errors result from the validation, the <code class=\"prettyprint\">value</code>\n  property is updated; page author can listen to the <code class=\"prettyprint\">valueChanged</code>\n  event to clear custom errors.</li>\n</ul>\n</li>\n<li>if component is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.</li>\n</ul>\n</p>\n\n<h4>Clearing Messages</h4>\n<ul>\n<li>Only messages created by the component are cleared.</li>\n<li><code class=\"prettyprint\">messagesCustom</code> property is not cleared.</li>\n</ul>\n</p>",
    "defaultvalue": "[]",
    "tstype": [
      {
        "target": "Type",
        "value": "Array<AsyncValidator<string>|Validator<string>>|null",
        "jsdocOverride": true,
        "module": {
          "AsyncValidator": "ojvalidator-async",
          "Validator": "ojvalidator"
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#value",
    "name": "value",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#value",
    "scope": "instance",
    "type": {
      "names": [
        "string|null"
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "description": "The value of the component.\n<p>The value must be a local date (no time) ISO string such as '2021-03-14',\notherwise the component will throw an error.</p>\n<p>\nIf needed, use IntlConverterUtils.dateToLocalIsoDateString to convert a Date to\na local ISO string that contains only the date to set as the initial value.\nIntlConverterUtils.dateToLocalIsoDateString(new Date(2014, 1, 1)));\n</p>\n\n<p>\nWhen <code class=\"prettyprint\">value</code> property changes due to programmatic\nintervention, the component always clears all messages\nincluding <code class=\"prettyprint\">messagesCustom</code>, runs deferred validation, and\nalways refreshes UI display value.\n</p>\n\n<p>\nWhen the input field is cleared and the value is committed, the <code class=\"prettyprint\">value</code>\nproperty is set to <code>null</code>.\n</p>\n\n<h4>Running Validation</h4>\n<ul>\n<li>component always runs deferred validation; the\n<code class=\"prettyprint\">valid</code> property is updated with the result.</li>\n</ul>",
    "defaultvalue": null
  },
  {
    "id": "oj-c.InputDatePicker#weekDisplay",
    "name": "weekDisplay",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#weekDisplay",
    "scope": "instance",
    "type": {
      "names": [
        "\"number\"",
        "\"none\""
      ]
    },
    "optional": true,
    "description": "Whether week of the year will be shown in the DatePicker. The default calculation follows the\nrule for ISO 8601 as follows: The first week of the year is defined as the week that contains\nthe first Thursday. Therefore, if January 1st falls on a Friday, it is considered part of the last week\nof the previous year. Conversely, if December 31st falls on a Wednesday, it is part of week 1 of the following year.",
    "ojvalues": [
      {
        "name": "none",
        "description": "The week of the year column will not be shown.",
        "displayName": "None",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "number",
        "description": "Will show the week of the year as a number.",
        "displayName": "Number",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "defaultvalue": "\"none\""
  },
  {
    "id": "oj-c.InputDatePicker#width",
    "name": "width",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#width",
    "scope": "instance",
    "type": {
      "names": [
        "number|string"
      ]
    },
    "optional": true,
    "description": "Specifies the component's width.  If unset, the default width is 100%.\nNote that by default max-width is 100%, which will override the width if the container is smaller than the width specified.",
    "ojvalues": [
      {
        "name": "sm",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "md",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "tstype": [
      {
        "target": "Type",
        "value": "number|string|\"sm\"|\"md\"",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#rawValue",
    "name": "rawValue",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#rawValue",
    "scope": "instance",
    "type": {
      "names": [
        "object"
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "readonly": true,
    "description": "<p>The  <code class=\"prettyprint\">rawValue</code> is the read-only property for retrieving\nthe current displayed value from the component.</p>\n<p>\nThe <code class=\"prettyprint\">rawValue</code> updates when the user types into the field,\nso the <code class=\"prettyprint\">rawValue</code> changes as the value of the field is changed,\nwhether or not it is valid.\nIf the user types '2023' into the year field in an otherwise empty field,\nthe rawValue will be {year:2, month:undefined, day:undefined}, then {year:20, month:undefined, day:undefined},\nthen {year:202, month:undefined, day:undefined},\nand finally {year:2023, month:undefined, day:undefined}. When the user blurs or presses\nEnter the <code class=\"prettyprint\">rawValue</code> property gets parsed into an date only ISO string (an error is thrown if\nthe date is not complete), and the date only ISO string gets validated. If valid, the <code class=\"prettyprint\">value</code> property\ngets updated with the date only ISO string.\n</p>\n<p>If the user clears the field, rawValue is undefined.\n</p>\n<p>This is a read-only attribute so page authors cannot set or change it directly.</p>",
    "tstype": [
      {
        "target": "Type",
        "value": "oj-c.InputDatePicker.CalendarDate",
        "jsdocOverride": true
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#valid",
    "name": "valid",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "member",
    "longname": "oj-c.InputDatePicker#valid",
    "scope": "instance",
    "type": {
      "names": [
        "\"pending\"",
        "\"valid\"",
        "\"invalidHidden\"",
        "\"invalidShown\""
      ]
    },
    "optional": true,
    "ojwriteback": true,
    "readonly": true,
    "description": "<p>\nThe current valid state of the component. It is evaluated on initial render.\nIt is re-evaluated\n<ul>\n  <li>after each validator (validators or async-validators) is run (full or deferred)</li>\n  <li>when messagesCustom is updated,\n  since messagesCustom can be added by the app developer any time.</li>\n  <li>when showMessages() is called. Since showMessages() moves the\n  hidden messages into messages shown,\n  if the valid state was \"invalidHidden\" then it would become \"invalidShown\".</li>\n  <li>when the required property has changed. If a component is empty and has required\n  set, the valid state may be \"invalidHidden\" (if no invalid messages are being shown as well).\n  If required property is removed, the valid state would change to \"valid\".</li>\n</ul>\n</p>\n<p>\n Note: New valid states may be added to the list of valid values in future releases.\n Any new values will start with \"invalid\"\n if it is an invalid state, \"pending\" if it is pending state,\n and \"valid\" if it is a valid state.\n</p>",
    "ojvalues": [
      {
        "name": "valid",
        "description": "The component is valid",
        "displayName": "Valid",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "pending",
        "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
        "displayName": "Pending",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidHidden",
        "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Hidden",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "invalidShown",
        "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
        "displayName": "Invalid Shown",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#blur",
    "name": "blur",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#blur",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Blurs the date field.",
    "ojhidden": true
  },
  {
    "id": "oj-c.InputDatePicker#focus",
    "name": "focus",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#focus",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Focuses the date field.",
    "ojhidden": true
  },
  {
    "id": "oj-c.InputDatePicker#showMessages",
    "name": "showMessages",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#showMessages",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Takes all deferred messages and shows them.\nIt then updates the valid property;\ne.g., if the valid state was \"invalidHidden\" before showMessages(),\nthe valid state will become \"invalidShown\" after showMessages().\nIf there were no deferred messages this method simply returns."
  },
  {
    "id": "oj-c.InputDatePicker#reset",
    "name": "reset",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#reset",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Resets the component by clearing all messages and messagesCustom attribute\nand updates the component's display value using the attribute value.\nUser entered values will be erased when this method is called."
  },
  {
    "id": "oj-c.InputDatePicker#validate",
    "name": "validate",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#validate",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "Promise"
          ]
        },
        "description": "Promise resolves to \"valid\" if there were no converter parse errors and the component\npassed all validations. The Promise resolves to \"valid\" if the component is disabled or readonly.\nThe Promise resolves to \"invalid\" if there were converter\nparse errors or if there were validation errors"
      }
    ],
    "description": "If enabled, validates the component's display value using the component's implicit converter which converts from\na CalendarDate object to a date only ISO string and all validators registered on the component and updates the value\noption by performing the following steps.\n<ol>\n<li>All messages are cleared, including custom messages added by the app.</li>\n<li>If the UI display value is empty, then the component normalizes the value to null.</li>\n<li>\n If the normalized value is null, then processing continues to next step. Otherwise,\n the UI value is first converted (i.e., parsed). If there is a parse error (the field does not contain a complete date)\n then the message is shown and processing stops.\n</li>\n<li>\n If required is true, the implicit required validator is run. If the required validator throws an error, the message is shown.\n</li>\n<li>\n If there are no other validators registered on the component, or if the UI display value is empty,\n the value option is updated.\n\n Otherwise all validators are run in sequence using the parsed value from the previous step.\n When a validation error is encountered it is remembered and the next validator in the sequence is run.\n</li>\n<li>\n At the end of validation if there are errors, the messages are shown.\n If there were no errors, then the value option is updated.\n</li>\n</ol>\n<p>If the component is readonly or disabled, returns a Promise that resolves to 'valid'\nwithout doing any validation.</p>"
  },
  {
    "id": "oj-c.InputDatePicker#setProperty",
    "name": "setProperty",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#setProperty",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
    "params": [
      {
        "name": "property",
        "description": "The property name to set. Supports dot notation for subproperty access.",
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "value",
        "description": "The new value to set the property to.",
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#getProperty",
    "name": "getProperty",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#getProperty",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "description": "Retrieves the value of a property or a subproperty.",
    "params": [
      {
        "name": "property",
        "description": "The property name to get. Supports dot notation for subproperty access.",
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker#setProperties",
    "name": "setProperties",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "kind": "function",
    "longname": "oj-c.InputDatePicker#setProperties",
    "scope": "instance",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "description": "Performs a batch set of properties.",
    "params": [
      {
        "name": "properties",
        "description": "An object containing the property and value pairs to set.",
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.touchDoc",
    "name": "touchDoc",
    "kind": "member",
    "longname": "oj-c.InputDatePicker.touchDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Gesture</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Input field (Not a Segment)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Sets focus to first segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Sets focus to segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Double Tap</kbd></td>\n      <td>If the date is complete, selects the entire date. Hitting backspace clears it.</td>\n    </tr>\n     <tr>\n      <td>Calendar icon (When the date picker is not open)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Opens the Date Picker and moves the focus to the first focusable element in the DatePicker.</td>\n    </tr>\n    <tr>\n      <td>Calendar icon (When the date picker is open)</td>\n      <td><kbd>Tap</kbd></td>\n      <td>Closes the Date Picker.</td>\n    </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "ojfragment": true
  },
  {
    "id": "oj-c.InputDatePicker.keyboardDoc",
    "name": "keyboardDoc",
    "kind": "member",
    "longname": "oj-c.InputDatePicker.keyboardDoc",
    "description": "<table class=\"keyboard-table\">\n  <thead>\n    <tr>\n      <th>Target</th>\n      <th>Key</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Input field</td>\n      <td><kbd>Tab In</kbd></td>\n      <td>Sets focus to first segment. Show user assistance text.</td>\n    </tr>\n    <tr>\n      <td>Input field</td>\n      <td><kbd>Ctrl + A</kbd> or <kbd>Command + A</kbd></td>\n      <td>If the date is complete, selects the entire date. Double clicking on the field also selects the date.</td>\n    </tr>\n    <tr>\n      <td>Input field with date selected</td>\n      <td><kbd>Backspace/Delete</kbd></td>\n      <td>Backspace or delete key clears the date. The mask placeholders will be shown again and focus will be on the first segment.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>Backspace/Delete</kbd></td>\n      <td>Clears the date segment. Focus remains on the date segment.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the segment on the right. If focus is on the rightmost segment, the focus does not move.</td>\n    </tr>\n    <tr>\n      <td>Input field segment</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the segment on the left. If focus is on the leftmost segment, the focus does not move.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>UpArrow/DownArrow</kbd></td>\n      <td>Increments or decrements the number by one in the segment. If there is no number in the segment, it initializes it to the current date.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>End</kbd></td>\n      <td>Increments the segment to the maximum number for the segment. For example, if on the month segment, this will set the number to 12. If on the year segment, this will set the number to 2100.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>Home</kbd></td>\n      <td>Decrements the segment to the minimum number for the segment. For example, if on the month segment, this will set the number to 1. If on the year segment, this will set the number to 1900.</td>\n    </tr>\n   <tr>\n      <td>Input field segment</td>\n      <td><kbd>Page Up/Page Down</kbd></td>\n      <td>Increments or decrements the number by two in the month segment, by seven in the day segment, or by five in the year segment. If there is no number in the segment, it initializes it to the current date.</td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Esc</kbd></td>\n      <td>Closes the date picker.</td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Tab</kbd></td>\n      <td>\n        Moves the focus to next element in the date picker sequence. Only one element in the calendar grid is in the Tab sequence\n        (current day/month/year or selected day/month/year depending on scenario). If focus is on the last tabbable element\n        inside the date picker, moves focus to the first tabbable element inside the date picker.\n      </td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Shift + Tab</kbd></td>\n      <td>\n        Moves the focus to the previous tabbable element inside the date picker. If focus is on the first tabbable element\n        inside the date picker, moves focus to the last tabbable element inside the date picker.\n      </td>\n    </tr>\n    <tr>\n      <td>Date Picker</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused day or activates the button currently focused.\n      </td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>PageUp</kbd></td>\n      <td>Changes the calendar grid to the previous month. Moves focus to the closest day in the previous month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>PageDown</kbd></td>\n      <td>Changes the calendar grid to the next month. Moves focus to the closest day in the next month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Shift + PageUp</kbd></td>\n      <td>Changes the calendar grid to the previous year. Moves focus to the closest day of the same month in the previous year.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Shift + PageDown</kbd></td>\n      <td>Changes the calendar grid to the next year. Moves focus to the closest day of the same month in the next year.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Ctrl + Alt + T or Ctrl + Option + T</kbd></td>\n     <td>Changes the calendar grid to the year and month that contains today's date. Moves focus to Today.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>Home</kbd></td>\n      <td>Go to the first day of the current month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>End</kbd></td>\n      <td>Go to the last day of the current month.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowLeft</kbd></td>\n      <td>Moves focus to the previous day. In RTL, this will move focus to the next day.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowRight</kbd></td>\n      <td>Moves focus to the next day. In RTL, this will move focus to the previous day.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowUp</kbd></td>\n      <td>Moves focus to the same day of the previous week.</td>\n    </tr>\n    <tr>\n      <td>Calendar Grid</td>\n      <td><kbd>ArrowDown</kbd></td>\n      <td>Moves focus to the same day of the next week.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused month and returns to the date picker, refreshing the display to show the selected month.\n      </td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Moves focus to four months back from the current focused month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Moves focus to four months ahead from the current focused month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the next month. In RTL, this will move focus to the previous month.</td>\n    </tr>\n    <tr>\n      <td>Months Grid</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the previous month. In RTL, this will move focus to the next month.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>Enter/Space</kbd></td>\n      <td>\n        Selects the currently focused year and returns to the date picker, refreshing the display to show the selected month.\n      </td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>PageUp</kbd></td>\n      <td>Changes the year grid to the previous decade. The focus remains in the same location with respect to the current decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>PageDown</kbd></td>\n      <td>Changes the year grid to the next decade. The focus remains in the same location with respect to the current decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>UpArrow</kbd></td>\n      <td>Moves focus to four years back from the current focused year. If that year is not in the year grid, go back 1 decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>DownArrow</kbd></td>\n      <td>Moves focus to four years ahead from the current focused year. If that year is not in the year grid, go ahead 1 decade.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>RightArrow</kbd></td>\n      <td>Moves focus to the next year. In RTL, this will move focus to the previous year.</td>\n    </tr>\n    <tr>\n      <td>Years Grid</td>\n      <td><kbd>LeftArrow</kbd></td>\n      <td>Moves focus to the previous year. In RTL, this will move focus to the next year.</td>\n    </tr>\n  </tbody>\n</table>",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "ojfragment": true
  },
  {
    "id": "oj-c.InputDatePicker.OverflowMessageDetailParameters",
    "name": "OverflowMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.OverflowMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the dateRangeOverflowMessageDetail callback function.",
    "properties": [
      {
        "name": "value",
        "description": "The value entered by the user.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "max",
        "description": "The maximum allowed value.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.UnderflowMessageDetailParameters",
    "name": "UnderflowMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.UnderflowMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters the are passed into the dateRangeUnderflowMessageDetail callback function.",
    "properties": [
      {
        "name": "value",
        "description": "The value entered by the user.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "min",
        "description": "The minimum allowed value.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.RestrictionMessageDetailParameters",
    "name": "RestrictionMessageDetailParameters",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.RestrictionMessageDetailParameters",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Parameters that are passed into the dateRestrictionMessageDetail callback function.",
    "properties": [
      {
        "name": "state",
        "description": "The state of selected invalid value.",
        "optional": false,
        "type": {
          "names": [
            "\"disabled\"",
            "\"restricted\""
          ]
        }
      },
      {
        "name": "value",
        "description": "The value entered by the user.",
        "optional": false,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.CalendarDate",
    "name": "CalendarDate",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.CalendarDate",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "",
    "properties": [
      {
        "name": "year",
        "optional": true,
        "type": {
          "names": [
            "number"
          ]
        }
      },
      {
        "name": "month",
        "optional": true,
        "type": {
          "names": [
            "number"
          ]
        }
      },
      {
        "name": "day",
        "optional": true,
        "type": {
          "names": [
            "number"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.DisplayOptionsProps",
    "name": "DisplayOptionsProps",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.DisplayOptionsProps",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
    "properties": [
      {
        "name": "messages",
        "description": "Display options for auxiliary message text.",
        "optional": true,
        "type": {
          "names": [
            "\"none\"",
            "\"display\""
          ]
        },
        "defaultvalue": "\"display\""
      },
      {
        "name": "validatorHint",
        "description": "Display options for auxiliary validator hint text.",
        "optional": true,
        "type": {
          "names": [
            "\"none\"",
            "\"display\""
          ]
        },
        "defaultvalue": "\"display\""
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.Help",
    "name": "Help",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.Help",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "Form component help information.",
    "properties": [
      {
        "name": "instruction",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to\nhelp the user understand what data to enter or select.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.HelpHints",
    "name": "HelpHints",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.HelpHints",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "The helpHints object contains a definition property and a source property.",
    "properties": [
      {
        "name": "definition",
        "description": "A type of user assistance text. User assistance text is used to provide guidance to help\nthe user understand what data to enter or select. help-hints could come from a help system.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "source",
        "description": "Help source URL associated with the component.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "sourceText",
        "description": "Custom text to be used for the source link.",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ]
  },
  {
    "id": "oj-c.InputDatePicker.ComponentMessageItem",
    "name": "ComponentMessageItem",
    "kind": "typedef",
    "memberof": "oj-c.InputDatePicker",
    "meta": {
      "filename": "input-date-picker.tsx",
      "path": "web/components/oj-c/input-date-picker"
    },
    "longname": "oj-c.InputDatePicker.ComponentMessageItem",
    "type": {
      "names": [
        "Object"
      ]
    },
    "scope": "static",
    "description": "A type for a single component message",
    "properties": [
      {
        "name": "summary",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "detail",
        "optional": true,
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "name": "severity",
        "optional": true,
        "type": {
          "names": [
            "\"error\"",
            "\"confirmation\"",
            "\"info\"",
            "\"warning\""
          ]
        }
      }
    ]
  }
]