{"version":3,"file":"useActive-bb5dc069.js","sources":["../../src/hooks/UNSAFE_useActive/useActive.ts"],"sourcesContent":["import { useToggle } from '../UNSAFE_useToggle';\nimport { useRef, useCallback, useEffect } from 'preact/hooks';\n\nexport type ActiveOptions = {\n  isDisabled?: boolean;\n  disabledKeys?: ('enter' | 'space')[];\n};\n\n/**\n * Indicates if primary mouse button is down\n * @param e\n * @returns\n */\nconst isPrimaryMouseButtonDown = (e: MouseEvent) => {\n  const flags = e.buttons !== undefined ? e.buttons : e.which;\n  const primaryMouseButtonDown = (flags & 1) === 1;\n  if (primaryMouseButtonDown) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns properties to manage active state indication\n * @returns\n */\nexport function useActive({ isDisabled, disabledKeys }: ActiveOptions = { isDisabled: false }): {\n  isActive: boolean;\n  activeProps: Record<string, any>;\n} {\n  const { bool, setTrue, setFalse } = useToggle(false);\n  const wasActive = useRef(false);\n\n  const mouseDownTarget = useCallback(\n    (e: MouseEvent) => {\n      if (isPrimaryMouseButtonDown(e)) {\n        setTrue();\n      }\n    },\n    [setTrue]\n  );\n\n  const leftTarget = useCallback(\n    (e: MouseEvent) => {\n      if (isPrimaryMouseButtonDown(e)) {\n        wasActive.current = true;\n      }\n      setFalse();\n    },\n    [setFalse]\n  );\n\n  const enteredTarget = useCallback(\n    (e: MouseEvent) => {\n      if (wasActive.current) {\n        if (isPrimaryMouseButtonDown(e)) {\n          setTrue();\n        }\n        wasActive.current = false;\n      }\n    },\n    [setTrue]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        (event.key === ' ' && !disabledKeys?.includes('space')) ||\n        (event.key === 'Enter' && !disabledKeys?.includes('enter'))\n      ) {\n        setTrue();\n      }\n    },\n    [setTrue, disabledKeys]\n  );\n\n  const onKeyUp = useCallback(() => {\n    setFalse();\n  }, [setFalse]);\n\n  const onBlur = useCallback(() => {\n    setFalse();\n  }, [setFalse]);\n\n  // If target gets disabled, should set active to false\n  useEffect(() => {\n    if (isDisabled) {\n      setFalse();\n    }\n  }, [isDisabled, setFalse]);\n\n  const activeProps = isDisabled\n    ? {}\n    : {\n        onMouseDown: mouseDownTarget,\n        onMouseLeave: leftTarget,\n        onMouseEnter: enteredTarget,\n        onMouseUp: setFalse,\n        onTouchStart: setTrue,\n        onTouchEnd: setFalse,\n        onTouchCancel: setFalse,\n        onKeyDown,\n        onKeyUp,\n        onBlur\n      };\n\n  return {\n    isActive: isDisabled ? false : bool,\n    activeProps: activeProps\n  };\n}\n"],"names":["isPrimaryMouseButtonDown","e","undefined","buttons","which","isDisabled","disabledKeys","bool","setTrue","setFalse","useToggle","wasActive","useRef","mouseDownTarget","useCallback","leftTarget","current","enteredTarget","onKeyDown","event","key","includes","onKeyUp","onBlur","useEffect","isActive","activeProps","onMouseDown","onMouseLeave","onMouseEnter","onMouseUp","onTouchStart","onTouchEnd","onTouchCancel"],"mappings":"uFAaA,MAAMA,EAA4BC,KAEe,SADnBC,IAAdD,EAAEE,QAAwBF,EAAEE,QAAUF,EAAEG,oBAYxC,UAAUC,WAAEA,EAAUC,aAAEA,GAAgC,CAAED,YAAY,IAIpF,MAAME,KAAEA,EAAIC,QAAEA,EAAOC,SAAEA,GAAaC,EAAAA,WAAU,GACxCC,EAAYC,UAAO,GAEnBC,EAAkBC,eACrBb,IACKD,EAAyBC,IAC3BO,GACD,GAEH,CAACA,IAGGO,EAAaD,eAChBb,IACKD,EAAyBC,KAC3BU,EAAUK,SAAU,GAEtBP,GAAU,GAEZ,CAACA,IAGGQ,EAAgBH,eACnBb,IACKU,EAAUK,UACRhB,EAAyBC,IAC3BO,IAEFG,EAAUK,SAAU,EACrB,GAEH,CAACR,IAGGU,EAAYJ,eACfK,KAEkB,MAAdA,EAAMC,MAAgBd,GAAce,SAAS,UAC/B,UAAdF,EAAMC,MAAoBd,GAAce,SAAS,WAElDb,GACD,GAEH,CAACA,EAASF,IAGNgB,EAAUR,EAAAA,aAAY,KAC1BL,GAAU,GACT,CAACA,IAEEc,EAAST,EAAAA,aAAY,KACzBL,GAAU,GACT,CAACA,IAwBJ,OArBAe,EAAAA,WAAU,KACJnB,GACFI,GACD,GACA,CAACJ,EAAYI,IAiBT,CACLgB,UAAUpB,GAAqBE,EAC/BmB,YAjBkBrB,EAChB,CAAE,EACF,CACEsB,YAAad,EACbe,aAAcb,EACdc,aAAcZ,EACda,UAAWrB,EACXsB,aAAcvB,EACdwB,WAAYvB,EACZwB,cAAexB,EACfS,YACAI,UACAC,UAOR"}