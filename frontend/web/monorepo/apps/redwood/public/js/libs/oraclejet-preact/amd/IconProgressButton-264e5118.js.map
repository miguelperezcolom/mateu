{"version":3,"file":"IconProgressButton-264e5118.js","sources":["../../src/UNSAFE_IconProgressButton/IconProgressButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment, Ref } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ProgressButtonLabelLayout } from '../UNSAFE_ProgressButtonLabelLayout';\nimport { forwardRef, ElementRef } from 'preact/compat';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { ButtonIntrinsicProps } from '../utils/UNSAFE_buttonUtils';\nimport { processGlobals } from '../utils/UNSAFE_buttonUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport translations from '#resources/nls/en/bundle';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\ntype BaseProps = ButtonIntrinsicProps &\n  WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * Specifies the icon for the button.\n     */\n    children?: ComponentChild;\n\n    /**\n     * Specifies that a quick indeterminate action is taking place, making the button read-only.\n     */\n    isLoading?: boolean;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are a more prominent variant. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     */\n    variant?: 'borderless' | 'outlined' | 'solid' | 'callToAction';\n    /**\n     * The size indicates how large the button is rendered.\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * tooltip - used for tooltip and aria-label\n     */\n    tooltip: string;\n  };\n\n/**\n * An Icon Progress button is an icon push button that can show progress.\n */\nexport const IconProgressButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isLoading = false,\n      isDisabled = false,\n      size = 'md',\n      type: buttonType = 'button',\n      onAction,\n      width,\n      tooltip,\n      testId,\n      ...props\n    }: BaseProps & TestIdProps,\n    ref: Ref<ButtonHandle>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n    const isAdjustedLoading = isDisabled ? false : isLoading;\n    const progressStatus = translations.accButtonProgressStatus({\n      label: tooltip\n    });\n    const progressComplete = translations.accButtonProgressComplete({\n      label: tooltip\n    });\n\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n\n    const tooltipLabel = tooltip;\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltipLabel,\n      isDisabled\n    });\n\n    /* For a11y, we use ignore aria-label during loading time */\n    const { 'aria-describedby': adb, ...ttProps } = tooltipProps;\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(ttProps, globalEventProps)}\n          ref={ref}\n          elementDetails={elementDetails}\n          isReadOnly={isAdjustedLoading}\n          isDisabled={isDisabled}\n          size={size}\n          variant={variant}\n          width={width}\n          styling={isAdjustedLoading ? ['min', 'hiddenLabel', 'noHoverActive'] : ['min']}\n          onAction={onAction}\n          aria-label={tooltip}\n          testId={testId}>\n          <ProgressButtonLabelLayout\n            display={'icons'}\n            isLoading={isAdjustedLoading}\n            accessibleLoadedLabel={progressComplete}\n            accessibleLoadingLabel={progressStatus}\n            isLoadingContrast={variant === 'callToAction'}\n            startIcon={props.children}\n            size={size}></ProgressButtonLabelLayout>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nIconProgressButton.displayName = 'IconProgressButton';\n"],"names":["IconProgressButton","forwardRef","variant","isLoading","isDisabled","size","type","buttonType","onAction","width","tooltip","testId","props","ref","globalEventProps","processGlobals","isAdjustedLoading","progressStatus","translations","accButtonProgressStatus","label","progressComplete","accButtonProgressComplete","elementDetails","tooltipLabel","tooltipContent","tooltipProps","useTooltip","text","adb","ttProps","_jsxs","Fragment","children","_jsx","BaseButton","mergeProps","isReadOnly","styling","jsx","ProgressButtonLabelLayout","display","accessibleLoadedLabel","accessibleLoadingLabel","isLoadingContrast","startIcon","displayName"],"mappings":"ijBA8EaA,EAAqBC,EAAAA,YAChC,EAEIC,UAAU,WACVC,aAAY,EACZC,cAAa,EACbC,OAAO,KACPC,KAAMC,EAAa,SACnBC,WACAC,QACAC,UACAC,YACGC,GAELC,KAEA,MAAMC,iBAAEA,GAAqBC,EAAcA,eAACH,GACtCI,GAAoBZ,GAAqBD,EACzCc,EAAiBC,EAAY,QAACC,wBAAwB,CAC1DC,MAAOV,IAEHW,EAAmBH,EAAY,QAACI,0BAA0B,CAC9DF,MAAOV,IAGHa,EAAiB,CACrBjB,KAAM,SACNC,WAAYA,GAGRiB,EAAed,GAEfe,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMJ,EACNpB,gBAIM,mBAAoByB,KAAQC,GAAYJ,EAEhD,OACEK,EAAAA,KAACC,EAAAA,SACC,CAAAC,SAAA,CAAAC,EAAAA,IAACC,EAAAA,WACK,IAAAC,EAAAA,WAAWN,EAAShB,GACxBD,IAAKA,EACLU,eAAgBA,EAChBc,WAAYrB,EACZZ,WAAYA,EACZC,KAAMA,EACNH,QAASA,EACTO,MAAOA,EACP6B,QAAStB,EAAoB,CAAC,MAAO,cAAe,iBAAmB,CAAC,OACxER,SAAUA,EAAQ,aACNE,EACZC,OAAQA,EACRsB,SAAAC,EAAAK,IAACC,EAAyBA,0BAAA,CACxBC,QAAS,QACTtC,UAAWa,EACX0B,sBAAuBrB,EACvBsB,uBAAwB1B,EACxB2B,kBAA+B,iBAAZ1C,EACnB2C,UAAWjC,EAAMqB,SACjB5B,KAAMA,MAEToB,IAEH,IAINzB,EAAmB8C,YAAc"}