{"version":3,"file":"useVisDragModeControls-f3a420dc.js","sources":["../../src/hooks/PRIVATE_useVisDragModeControls/VisDragModeControls.tsx","../../src/hooks/PRIVATE_useVisDragModeControls/useVisDragModeControls.tsx","../../src/hooks/PRIVATE_useVisDragModeControls/util.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { ChartMarqueeSelectIcon } from '#PRIVATE_ThemedIcons/ChartMarqueeSelectIcon';\nimport { ChartPanIcon } from '#PRIVATE_ThemedIcons/ChartPanIcon';\nimport { styles } from './themes/useVisDragModeControls.css';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { ChartZoomIcon } from '#PRIVATE_ThemedIcons/ChartZoomIcon';\nimport { ButtonSetSingle } from '#UNSAFE_ButtonSetSingle';\nimport { ButtonSetItem } from '#UNSAFE_ButtonSetItem';\nimport { IconToggleButton } from '#UNSAFE_IconToggleButton';\n\ntype Props = {\n  divRef: Ref<HTMLDivElement>;\n  position: {\n    top?: string;\n    bottom?: string;\n    right?: string;\n    left?: string;\n  };\n  dragMode?: 'select' | 'zoom' | 'pan';\n  showZoomButton: boolean;\n  showPanButton: boolean;\n  showSelectButton: boolean;\n  onDragModeChange: (mode?: 'select' | 'zoom' | 'pan') => void;\n};\n\nexport function VisDragModeControls({\n  position,\n  divRef,\n  dragMode,\n  onDragModeChange,\n  showZoomButton,\n  showPanButton,\n  showSelectButton\n}: Props) {\n  const { right, left, top, bottom } = position;\n  const onButtonAction = ({ value }: { value: 'zoom' | 'pan' | 'select' }) => {\n    onDragModeChange(value === dragMode ? undefined : value);\n  };\n\n  const showOnlyOne =\n    (showPanButton && !showSelectButton && !showZoomButton) ||\n    (!showPanButton && !showSelectButton && showZoomButton) ||\n    (!showPanButton && showSelectButton && !showZoomButton);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const zoomAriaLabel = translations.vis_marqueeZoomTooltip();\n  const panAriaLabel = translations.vis_panTooltip();\n  const selectAriaLabel = translations.vis_marqueeSelectTooltip();\n  return showZoomButton || showPanButton || showSelectButton ? (\n    <div\n      ref={divRef}\n      class={styles.background}\n      data-oj-private-object=\"dragModeControls\"\n      style={{\n        right,\n        left,\n        top,\n        bottom\n      }}>\n      {!showOnlyOne ? (\n        <ButtonSetSingle\n          size=\"sm\"\n          value={dragMode}\n          onCommit={onButtonAction as (detail: { value?: string }) => void}\n          display=\"icons\"\n          variant=\"outlined\">\n          {showPanButton && (\n            <ButtonSetItem\n              value=\"pan\"\n              label={panAriaLabel}\n              startIcon={<ChartPanIcon />}></ButtonSetItem>\n          )}\n          {showZoomButton && (\n            <ButtonSetItem\n              value=\"zoom\"\n              label={zoomAriaLabel}\n              startIcon={<ChartZoomIcon />}></ButtonSetItem>\n          )}\n          {showSelectButton && (\n            <ButtonSetItem\n              value=\"select\"\n              label={selectAriaLabel}\n              startIcon={<ChartMarqueeSelectIcon />}></ButtonSetItem>\n          )}\n        </ButtonSetSingle>\n      ) : (\n        <>\n          {showPanButton && (\n            <IconToggleButton\n              accessibleLabel={panAriaLabel}\n              isSelected={dragMode === 'pan'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'pan' ? undefined : 'pan');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartPanIcon />\n            </IconToggleButton>\n          )}\n          {showZoomButton && (\n            <IconToggleButton\n              accessibleLabel={zoomAriaLabel}\n              isSelected={dragMode === 'zoom'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'zoom' ? undefined : 'zoom');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartZoomIcon />\n            </IconToggleButton>\n          )}\n          {showSelectButton && (\n            <IconToggleButton\n              accessibleLabel={selectAriaLabel}\n              isSelected={dragMode === 'select'}\n              onToggle={() => {\n                onDragModeChange(dragMode === 'select' ? undefined : 'select');\n              }}\n              variant=\"outlined\"\n              size=\"sm\">\n              <ChartMarqueeSelectIcon />\n            </IconToggleButton>\n          )}\n        </>\n      )}\n    </div>\n  ) : null;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { getInitialDragMode } from './util';\nimport { VisDragModeControls } from './VisDragModeControls';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\ntype Props = {\n  plotAreaSpace: Dimension;\n  componentWidth: number;\n  isRtl: boolean;\n  showPanButton: boolean;\n  showZoomButton: boolean;\n  showSelectButton: boolean;\n  isDisabled?: boolean;\n  dragMode?: 'zoom' | 'pan' | 'user' | 'select' | 'off';\n};\n\nexport function useVisDragModeControls({\n  componentWidth,\n  plotAreaSpace,\n  isRtl,\n  showPanButton,\n  showZoomButton,\n  showSelectButton,\n  isDisabled = false,\n  dragMode\n}: Props) {\n  const dragButtonDivRef = useRef<HTMLDivElement>(null);\n  const originalDragModeRef = useRef<'select' | 'zoom' | 'pan' | 'off' | 'user' | undefined>(dragMode);\n\n  const isInitialRenderRef = useRef(true);\n  useEffect(() => {\n    isInitialRenderRef.current = false;\n  }, []);\n\n  const [userDragMode, setUserDragMode] = useState<'select' | 'zoom' | 'pan' | undefined>();\n  const initialSelection = getInitialDragMode(\n    dragMode,\n    showPanButton,\n    showZoomButton,\n    showSelectButton\n  );\n\n  const dragModeChanged = originalDragModeRef.current != dragMode;\n\n  if (dragModeChanged || isInitialRenderRef.current) {\n    originalDragModeRef.current = dragMode;\n    setUserDragMode(initialSelection);\n  }\n\n  const toggleButtonContent = isDisabled ? undefined : (\n    <VisDragModeControls\n      position={{\n        top: `${plotAreaSpace.y}px`,\n        right: isRtl ? undefined : `${componentWidth - plotAreaSpace.x - plotAreaSpace.width}px`,\n        left: isRtl ? `${plotAreaSpace.x}px` : undefined\n      }}\n      divRef={dragButtonDivRef}\n      showSelectButton={showSelectButton}\n      showZoomButton={showZoomButton}\n      showPanButton={showPanButton}\n      dragMode={userDragMode}\n      onDragModeChange={setUserDragMode}\n    />\n  );\n\n  return {\n    dragButtonDivRef: dragButtonDivRef,\n    toggleButtonContent: toggleButtonContent,\n    userDragMode\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * Returns the dragMode during initial render or when dragMode props\n * change (i.e when user hasn't selected yet) based on available dragModes.\n */\nexport function getInitialDragMode(\n  dragMode: 'pan' | 'user' | 'zoom' | 'select' | 'off' | undefined,\n  showPanButton: boolean,\n  showZoomButton: boolean,\n  showSelectButton: boolean\n) {\n  return showPanButton && (dragMode === 'pan' || dragMode === 'user')\n    ? 'pan'\n    : showZoomButton && dragMode === 'zoom'\n    ? 'zoom'\n    : showSelectButton && dragMode === 'select'\n    ? 'select'\n    : undefined;\n}\n"],"names":["VisDragModeControls","position","divRef","dragMode","onDragModeChange","showZoomButton","showPanButton","showSelectButton","right","left","top","bottom","showOnlyOne","translations","useTranslationBundle","zoomAriaLabel","vis_marqueeZoomTooltip","panAriaLabel","vis_panTooltip","selectAriaLabel","vis_marqueeSelectTooltip","_jsx","jsx","ref","class","styles","background","style","children","_jsxs","jsxs","_Fragment","IconToggleButton","accessibleLabel","isSelected","onToggle","undefined","variant","size","ChartPanIcon","ChartZoomIcon","ChartMarqueeSelectIcon","ButtonSetSingle","value","onCommit","display","ButtonSetItem","label","startIcon","SvgMove","SvgButton","componentWidth","plotAreaSpace","isRtl","isDisabled","dragButtonDivRef","useRef","originalDragModeRef","isInitialRenderRef","useEffect","current","userDragMode","setUserDragMode","useState","initialSelection","getInitialDragMode","toggleButtonContent","y","x","width"],"mappings":"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"}