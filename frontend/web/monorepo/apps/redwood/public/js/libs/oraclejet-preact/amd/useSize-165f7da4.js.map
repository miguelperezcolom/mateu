{"version":3,"file":"useSize-165f7da4.js","sources":["../../src/hooks/PRIVATE_useSize/useSize.ts"],"sourcesContent":["import type { RefObject } from 'preact';\nimport { useState, useCallback } from 'preact/hooks';\nimport { useResizeObserver } from '#hooks/UNSAFE_useResizeObserver';\n\nconst useSize = (\n  ref: RefObject<Element>,\n  options: Parameters<typeof useResizeObserver>[2] = { box: 'content-box' }\n) => {\n  const [size, setSize] = useState<{ width: number; height: number }>();\n\n  useResizeObserver(\n    ref,\n    useCallback(\n      (entry) => {\n        const boxSize = options.box === 'border-box' ? entry.borderBoxSize : entry.contentBoxSize;\n        const newWidth = boxSize[0].inlineSize;\n        const newHeight = boxSize[0].blockSize;\n        setSize({ width: newWidth, height: newHeight });\n      },\n      [options]\n    ),\n    options\n  );\n\n  return size;\n};\n\nexport { useSize };\n"],"names":["ref","options","box","size","setSize","useState","useResizeObserver","useCallback","entry","boxSize","borderBoxSize","contentBoxSize","newWidth","inlineSize","newHeight","blockSize","width","height"],"mappings":"yGAIgB,CACdA,EACAC,EAAmD,CAAEC,IAAK,kBAE1D,MAAOC,EAAMC,GAAWC,EAAQA,WAgBhC,OAdAC,EAAAA,kBACEN,EACAO,eACGC,IACC,MAAMC,EAA0B,eAAhBR,EAAQC,IAAuBM,EAAME,cAAgBF,EAAMG,eACrEC,EAAWH,EAAQ,GAAGI,WACtBC,EAAYL,EAAQ,GAAGM,UAC7BX,EAAQ,CAAEY,MAAOJ,EAAUK,OAAQH,GAAY,GAEjD,CAACb,IAEHA,GAGKE,CAAI"}