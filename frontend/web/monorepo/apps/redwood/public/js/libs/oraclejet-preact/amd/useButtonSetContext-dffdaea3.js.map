{"version":3,"file":"useButtonSetContext-dffdaea3.js","sources":["../../src/hooks/UNSAFE_useButtonSetContext/ButtonSetContext.ts","../../src/hooks/UNSAFE_useButtonSetContext/useButtonSetContext.ts"],"sourcesContent":["import { createContext } from 'preact';\nimport type { DimensionProps } from '../../utils/UNSAFE_interpolations/dimensions';\nimport { LayoutWidths, InputTypes } from '../../utils/UNSAFE_buttonUtils/toggle.types';\nimport { ValueUpdateDetail } from '../../utils/UNSAFE_valueUpdateDetail';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\ntype ButtonSetContextProps = WidthProps & {\n  /**\n   * variant indicates the toggle button variant\n   */\n  variant?: 'borderless' | 'outlined';\n  /**\n   * isDisabled indicates whether the toggle button is in disabled state\n   */\n  isDisabled: boolean;\n  /**\n   * size indicates the size of the button\n   */\n  size: 'sm' | 'md' | 'lg';\n\n  /**\n   * inputType specifies what type of input is needed\n   */\n  inputType?: InputTypes;\n\n  /**\n   * inputName is the name of the radio or checkbox\n   */\n  inputName?: string;\n\n  /**\n   * The layoutWidth specifies if the toggle button width fits the contents or\n   * the container.\n   */\n  layoutWidth?: LayoutWidths;\n\n  /**\n   * Display indicates whether only the label, icons, or all elements should be rendered by the buttonset.\n   */\n  display?: 'label' | 'all' | 'icons';\n\n  /**\n   * Value of the ButtonSetItem\n   */\n  buttonSetValue?: Array<string>;\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of isSelected property should be updated\n   */\n  onCommit?: (detail: ValueUpdateDetail<Array<string>>) => void;\n};\n\n/**\n * Context which the parent component can use to provide various ToggleButton related\n * information\n */\nconst ButtonSetContext = createContext<ButtonSetContextProps>({\n  variant: 'outlined',\n  isDisabled: false,\n  size: 'md',\n  layoutWidth: 'auto',\n  display: 'all',\n  buttonSetValue: undefined,\n  onCommit: undefined\n});\n\nexport { ButtonSetContext };\n","import { useContext } from 'preact/hooks';\nimport { ButtonSetContext } from './ButtonSetContext';\n\n/**\n * Utility hook for consuming the ButtonSetContext\n *\n * @returns The value of closest ButtonSetControl provider\n */\nfunction useButtonSetContext() {\n  return useContext(ButtonSetContext);\n}\n\nexport { useButtonSetContext };\n"],"names":["ButtonSetContext","createContext","variant","isDisabled","size","layoutWidth","display","buttonSetValue","undefined","onCommit","useContext"],"mappings":"yEAyDM,MAAAA,EAAmBC,EAAAA,cAAqC,CAC5DC,QAAS,WACTC,YAAY,EACZC,KAAM,KACNC,YAAa,OACbC,QAAS,MACTC,oBAAgBC,EAChBC,cAAUD,+CCxDZ,WACE,OAAOE,EAAAA,WAAWV,EACpB"}