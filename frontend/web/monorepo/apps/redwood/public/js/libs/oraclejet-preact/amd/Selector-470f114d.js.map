{"version":3,"file":"Selector-470f114d.js","sources":["../../src/UNSAFE_Selector/Selector.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef } from 'preact/hooks';\n\nimport { Keys, containsKey, addKey, removeKey } from '../utils/UNSAFE_keys';\nimport { SelectionDetail } from '../UNSAFE_Collection';\nimport { styles } from './themes/SelectorStyles.css';\nimport { StyledCheckbox } from '../PRIVATE_StyledCheckbox';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { useFocus } from '../hooks/UNSAFE_useFocus';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useHover } from '../hooks/UNSAFE_useHover/useHover';\n\n/**\n * Props for the Selector Component\n */\nexport type Props<K> = {\n  /**\n   * The key associated with the Selector.\n   */\n  rowKey: K;\n  /**\n   * The selected keys.\n   */\n  selectedKeys: Keys<K>;\n  /**\n   * aria-label for this selector\n   */\n  'aria-label'?: string;\n  /**\n   * Determine whether to show the visual partial icon when selector is checked. If the\n   * selector is checked and isPartial is set to true, the selector would show a partially\n   * checked icon.\n   */\n  isPartial?: boolean;\n  /**\n   * Specifies the selection mode. For selection mode 'all', please refer to SelectorAll component.\n   */\n  selectionMode?: 'multiple' | 'single';\n  /**\n   * Callback function to invoke when the selected keys has changed when\n   * the checkbox is toggled.\n   */\n  onChange?: (detail: SelectionDetail<K>) => void;\n  /**\n   * One or more ids (separated by spaces) of elements that label the selected item. This will be used for the aria-labelledby of the DOM element.\n   */\n  'aria-labelledby'?: string;\n};\n\n/**\n * The Selector component renders checkboxes in collections to support selection.\n */\nexport function Selector<K>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledby,\n  rowKey,\n  selectedKeys,\n  isPartial,\n  selectionMode = 'multiple',\n  onChange,\n  testId\n}: Props<K> & TestIdProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isActive, activeProps } = useActive();\n  const { isFocus, focusProps } = useFocus();\n  const { onKeyUp: onActiveKeyUp, ...activeRest } = activeProps;\n\n  const { isHover, hoverProps } = useHover();\n\n  const onSelectionHandler = useCallback(\n    (event: KeyboardEvent | MouseEvent) => {\n      const { key } = event as KeyboardEvent;\n      if (key !== undefined && key !== ' ') {\n        return;\n      }\n\n      handleSelect(event, rowKey, selectedKeys, selectionMode, onChange);\n    },\n    [rowKey, selectedKeys, selectionMode, onChange]\n  );\n\n  // because we stop event propagation on selection, we must ensure\n  // that the event gets passed to useActive's onKeyUp handler first\n  // so that it doesn't get stuck in \"active\" mode\n  const onKeyUpHandler = useCallback(\n    (e: KeyboardEvent) => {\n      onActiveKeyUp(e);\n      onSelectionHandler(e);\n    },\n    [onActiveKeyUp, onSelectionHandler]\n  );\n\n  const onClick = useCallback(\n    (e: MouseEvent) => {\n      inputRef.current?.focus();\n      onSelectionHandler(e);\n    },\n    [onSelectionHandler]\n  );\n\n  const isChecked = isPartial\n    ? 'partial'\n    : containsKey(selectedKeys, rowKey)\n    ? 'checked'\n    : 'unchecked';\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <div\n      class={styles.base}\n      onClick={onClick}\n      onKeyUp={onKeyUpHandler}\n      {...activeRest}\n      {...testIdProps}\n      {...hoverProps}>\n      <StyledCheckbox\n        ref={inputRef}\n        isHover={isHover}\n        isActive={isActive}\n        isChecked={isChecked}\n        isFocusRingShown={isFocus}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        onKeyDown={onKeyDown}\n        {...focusProps}\n      />\n    </div>\n  );\n}\n\nconst handleSelect = <K,>(\n  event: MouseEvent | KeyboardEvent,\n  rowKey: K,\n  selectedKeys: Props<K>['selectedKeys'],\n  selectionMode: Props<K>['selectionMode'],\n  onChange?: Props<K>['onChange']\n) => {\n  if (onChange) {\n    const newKeys = getNewKeys(rowKey, selectedKeys, selectionMode);\n    onChange({ value: newKeys, target: event.target });\n\n    // we don't want container component like ListView to process the click event,\n    // and we also stop the event propagation in keyup due to issue in JET-60156\n    event.stopPropagation();\n  }\n};\n\nconst getNewKeys = <K,>(\n  rowKey: K,\n  selectedKeys: Props<K>['selectedKeys'],\n  selectionMode: Props<K>['selectionMode']\n) => {\n  let newKeys;\n  const checked = containsKey(selectedKeys, rowKey);\n  if (checked) {\n    newKeys = removeKey(selectedKeys, rowKey, false);\n  } else {\n    if (selectionMode === 'single') {\n      newKeys = { all: false, keys: new Set([rowKey]) } as Keys<K>;\n    } else {\n      newKeys = addKey(selectedKeys, rowKey);\n    }\n  }\n  return newKeys;\n};\n\nconst onKeyDown = (event: KeyboardEvent) => {\n  if (event.key == ' ') {\n    // prevent auto scrolling\n    event.preventDefault();\n  } else if (event.key == 'Enter') {\n    // prevent active styles applied to checkbox\n    event.stopPropagation();\n  }\n};\n"],"names":["handleSelect","event","rowKey","selectedKeys","selectionMode","onChange","value","getNewKeys","target","stopPropagation","newKeys","containsKey","removeKey","all","keys","Set","addKey","onKeyDown","key","preventDefault","ariaLabel","ariaLabelledby","isPartial","testId","inputRef","useRef","isActive","activeProps","useActive","isFocus","focusProps","useFocus","onKeyUp","onActiveKeyUp","activeRest","isHover","hoverProps","useHover","onSelectionHandler","useCallback","undefined","onKeyUpHandler","e","onClick","current","focus","isChecked","testIdProps","useTestId","_jsx","class","styles","base","children","StyledCheckbox","ref","isFocusRingShown"],"mappings":"yRAyIA,MAAMA,EAAe,CACnBC,EACAC,EACAC,EACAC,EACAC,KAEA,GAAIA,EAAU,CAEZA,EAAS,CAAEC,MADKC,EAAWL,EAAQC,EAAcC,GACtBI,OAAQP,EAAMO,SAIzCP,EAAMQ,iBACP,GAGGF,EAAa,CACjBL,EACAC,EACAC,KAEA,IAAIM,EAWJ,OAREA,EAFcC,EAAAA,YAAYR,EAAcD,GAE9BU,EAAAA,UAAUT,EAAcD,GAAQ,GAEpB,WAAlBE,EACQ,CAAES,KAAK,EAAOC,KAAM,IAAIC,IAAI,CAACb,KAE7Bc,EAAMA,OAACb,EAAcD,GAG5BQ,CAAO,EAGVO,EAAahB,IACA,KAAbA,EAAMiB,IAERjB,EAAMkB,iBACgB,SAAblB,EAAMiB,KAEfjB,EAAMQ,iBACP,aA1HG,UACJ,aAAcW,EACd,kBAAmBC,EAAcnB,OACjCA,EAAMC,aACNA,EAAYmB,UACZA,EAASlB,cACTA,EAAgB,WAAUC,SAC1BA,EAAQkB,OACRA,IAEA,MAAMC,EAAWC,SAAyB,OACpCC,SAAEA,EAAQC,YAAEA,GAAgBC,EAASA,aACrCC,QAAEA,EAAOC,WAAEA,GAAeC,EAAQA,YAChCC,QAASC,KAAkBC,GAAeP,GAE5CQ,QAAEA,EAAOC,WAAEA,GAAeC,EAAQA,WAElCC,EAAqBC,eACxBtC,IACC,MAAMiB,IAAEA,GAAQjB,OACJuC,IAARtB,GAA6B,MAARA,GAIzBlB,EAAaC,EAAOC,EAAQC,EAAcC,EAAeC,EAAS,GAEpE,CAACH,EAAQC,EAAcC,EAAeC,IAMlCoC,EAAiBF,eACpBG,IACCT,EAAcS,GACdJ,EAAmBI,EAAE,GAEvB,CAACT,EAAeK,IAGZK,EAAUJ,eACbG,IACClB,EAASoB,SAASC,QAClBP,EAAmBI,EAAE,GAEvB,CAACJ,IAGGQ,EAAYxB,EACd,UACAX,EAAWA,YAACR,EAAcD,GAC1B,UACA,YAEE6C,EAAcC,YAAUzB,GAE9B,OACE0B,EAAAA,IACE,MAAA,CAAAC,MAAOC,EAAAA,OAAOC,KACdT,QAASA,EACTX,QAASS,KACLP,KACAa,KACAX,EAAUiB,SACdJ,EAAAA,IAACK,EAAAA,eACC,CAAAC,IAAK/B,EACLW,QAASA,EACTT,SAAUA,EACVoB,UAAWA,EACXU,iBAAkB3B,EAAO,aACbT,EAAS,kBACJC,EACjBJ,UAAWA,KACPa,KAIZ"}