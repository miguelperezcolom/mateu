{"version":3,"file":"UNSAFE_Train.js","sources":["../../src/UNSAFE_Train/TrainContext.tsx","../../src/UNSAFE_Train/Connector.tsx","../../src/UNSAFE_Train/UserChosenIcon.tsx","../../src/UNSAFE_Train/StepIcon.tsx","../../src/UNSAFE_Train/StepLabel.tsx","../../src/UNSAFE_Train/Step.tsx","../../src/UNSAFE_Train/Train.tsx"],"sourcesContent":["import { createContext } from 'preact';\nexport interface TrainContextType {\n  onSelect: (event: Event, stepId: string) => void;\n  selectedStep: string;\n  numberOfSteps: number;\n  selectedStepIndex: number;\n  index: number;\n  isCurrent: boolean;\n}\n\nexport const Context = createContext<any>(null);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TrainVariantOptions, TrainStyles } from './themes/TrainStyles.css';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\n\ninterface ConnectorProps {\n  /**\n   * Determines if the adjacent steps should be connected.\n   */\n  isConnected: boolean;\n}\n\nexport const Connector = ({ isConnected }: ConnectorProps) => {\n  const { styles, variantClasses } = useComponentTheme<TrainVariantOptions, TrainStyles>(\n    TrainRedwoodTheme,\n    {\n      connectorConnected: isConnected ? 'isConnected' : 'notConnected'\n    }\n  );\n\n  return <span class={classNames([styles.connectorBaseStyle, variantClasses])}></span>;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MessageSeverity } from './TrainIcons.types';\nimport { MessageConfirmationIcon } from '../PRIVATE_ThemedIcons/MessageConfirmationIcon';\nimport { MessageErrorIcon } from '../PRIVATE_ThemedIcons/MessageErrorIcon';\nimport { MessageInfoIcon } from '../PRIVATE_ThemedIcons/MessageInfoIcon';\nimport { MessageWarningIcon } from '../PRIVATE_ThemedIcons/MessageWarningIcon';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TrainVariantOptions, TrainStyles } from './themes/TrainStyles.css';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\n\nconst messageTypeIcons = {\n  confirmation: MessageConfirmationIcon,\n  error: MessageErrorIcon,\n  fatal: MessageErrorIcon,\n  info: MessageInfoIcon,\n  warning: MessageWarningIcon\n};\n\n/**\n * Props for the UserChosenIcon component\n */\ntype Props = {\n  /**\n   * Determines the message type icon from the following types 'error', 'warning', 'confirmation', 'info' and 'none'.\n   */\n  messageType: Exclude<MessageSeverity, 'none'>;\n\n  /**\n   * Determines if the step is disabled or not\n   */\n  isDisabled: boolean;\n\n  /**\n   * Translations resources\n   */\n  translations?: {\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'error' severity level\n     */\n    fatal?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * UserChosenIcon Component for rendering the severity based icon in Message\n */\nfunction UserChosenIcon({ messageType, isDisabled = false }: Props) {\n  const IconComponent = messageTypeIcons[messageType];\n\n  const { styles, variantClasses } = useComponentTheme<TrainVariantOptions, TrainStyles>(\n    TrainRedwoodTheme,\n    {\n      messageType: messageType,\n      stepIconDisabled: isDisabled ? 'isDisabled' : 'notDisabled'\n    }\n  );\n  return (\n    <div class={classNames([styles.messageTypeIconBaseStyle, variantClasses])} role=\"presentation\">\n      <IconComponent />\n    </div>\n  );\n}\n\nexport { UserChosenIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { UserChosenIcon } from './UserChosenIcon';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageSeverity } from './TrainIcons.types';\nimport { useContext } from 'preact/hooks';\nimport { Context, TrainContextType } from './TrainContext';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useActive } from '../hooks/UNSAFE_useActive';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TrainVariantOptions, TrainStyles } from './themes/TrainStyles.css';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\n\ninterface StepIconProps {\n  /**\n   * Determines if the step is disabled or not\n   */\n  isDisabled: boolean;\n  /**\n   * Determines if the step has been visited\n   */\n  isVisited: boolean;\n\n  /**\n   * A string that defines which icon type the step should take\n   */\n  messageType?: Exclude<MessageSeverity, 'none'>;\n}\n\n/**\n * Step icon\n */\nexport const StepIcon = ({ isDisabled, isVisited, messageType }: StepIconProps) => {\n  const { index, selectedStepIndex } = useContext<TrainContextType>(Context);\n\n  const isCurrent = selectedStepIndex === index;\n\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = useInteractionStyle({\n    isDisabled: isDisabled || isCurrent\n  });\n\n  const { isActive, activeProps } = useActive({ isDisabled: isDisabled || isCurrent });\n\n  const mergedProps = mergeProps(interactionProps, activeProps);\n\n  const { styles, variantClasses } = useComponentTheme<TrainVariantOptions, TrainStyles>(\n    TrainRedwoodTheme,\n    {\n      stepIconDisabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      stepIconCurrent: isCurrent ? 'isCurrent' : 'notCurrent',\n      stepIconVisited: isVisited ? 'isVisited' : 'notVisited',\n      stepIconNeedsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',\n      stepIconPseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      stepIconActive: isActive ? 'isActive' : 'notActive'\n    }\n  );\n\n  const iconStyles = () => {\n    if (messageType) {\n      return <UserChosenIcon messageType={messageType} isDisabled={isDisabled} />;\n    } else {\n      return (\n        <span {...mergedProps} class={classNames([styles.stepIconBaseStyle, variantClasses])}>\n          {index + 1}\n        </span>\n      );\n    }\n  };\n\n  return <span class={styles.stepIconContainerStyle}>{iconStyles()}</span>;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageSeverity } from './TrainIcons.types';\nimport { useContext } from 'preact/hooks';\nimport { Context, TrainContextType } from './TrainContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\n\nimport type { BundleType } from '../resources/nls/bundle';\n\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TrainVariantOptions, TrainStyles } from './themes/TrainStyles.css';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\n\ninterface StepLabelProps {\n  /**\n   * Determines if the step is disabled or not\n   */\n  isDisabled: boolean;\n  /**\n   * Determines if the step is visited or not\n   */\n  isVisited: boolean;\n\n  /**\n   * Label of the step\n   */\n  label: string;\n\n  /**\n   * Determines the message type icon from the following types 'error', 'warning', 'confirmation', 'info' and 'none'.\n   */\n  messageType?: Exclude<MessageSeverity, 'none'>;\n}\n\n/**\n * Step label component\n */\nexport const StepLabel = ({ label, isDisabled, isVisited, messageType }: StepLabelProps) => {\n  const { numberOfSteps, index, selectedStepIndex } = useContext<TrainContextType>(Context);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const isCurrent = selectedStepIndex === index;\n\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = useInteractionStyle({\n    isDisabled: isDisabled || isCurrent\n  });\n\n  const currentStepStatus = isCurrent\n    ? translations.train_current()\n    : isVisited\n    ? translations.train_visited()\n    : translations.train_not_visited();\n\n  const currentStep = index + 1;\n\n  const statusTextForCurrentStep = messageType\n    ? `${translations.train_status({\n        currentStep: currentStep.toString(),\n        numberOfSteps: numberOfSteps.toString()\n      })}. ${currentStepStatus}, ${translations.train_message_type()}: ${messageType}`\n    : `${translations.train_status({\n        currentStep: currentStep.toString(),\n        numberOfSteps: numberOfSteps.toString()\n      })}. ${currentStepStatus}`;\n\n  const { styles, variantClasses } = useComponentTheme<TrainVariantOptions, TrainStyles>(\n    TrainRedwoodTheme,\n    {\n      stepLabelDisabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      stepLabelCurrent: isCurrent ? 'isCurrent' : 'notCurrent',\n      stepLabelVisited: isVisited ? 'isVisited' : 'notVisited',\n      stepLabelNeedsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',\n      stepLabelPseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover'\n    }\n  );\n\n  const handleClick = (event: Event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <span class={styles.stepLabelWrapperStyle}>\n      <a\n        {...interactionProps}\n        href=\"#\"\n        class={classNames([styles.stepLabelBaseStyle, variantClasses])}\n        onClick={handleClick}>\n        {label}\n        <HiddenAccessible>{statusTextForCurrentStep}</HiddenAccessible>\n      </a>\n    </span>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { FunctionComponent } from 'preact';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useCallback, useContext, useState } from 'preact/hooks';\nimport { Context, TrainContextType } from './TrainContext';\nimport { MessageSeverity } from './TrainIcons.types';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\n\nimport { Connector } from './Connector';\nimport { StepIcon } from './StepIcon';\nimport { StepLabel } from './StepLabel';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\nimport { TrainVariantOptions, TrainStyles } from './themes/TrainStyles.css';\n\ninterface StepProps {\n  /**\n   * Unique step id\n   */\n  id: string;\n\n  /**\n   * Determines if the step is disabled or not\n   */\n  isDisabled: boolean;\n\n  /**\n   * Determines if the step has been visited or not\n   */\n  isVisited: boolean;\n\n  /**\n   * Determines which icon the step has from the following types 'error', 'warning', 'confirmation', 'info' and 'none'.\n   */\n  messageType?: Exclude<MessageSeverity, 'none'>;\n\n  /**\n   * Step Label\n   */\n  label: string;\n}\n\n/**\n * Step component\n */\n\nexport const Step: FunctionComponent<StepProps> = ({\n  id,\n  isDisabled,\n  isVisited,\n  messageType,\n  label\n}) => {\n  const { onSelect, /* selectedStep ,*/ numberOfSteps, selectedStepIndex, index } =\n    useContext<TrainContextType>(Context) || // get the context object or...\n    (() => {\n      // if there's no context object, throw an error\n      throw new Error('Step component must be rendered within a Train component.');\n    })();\n\n  const isCurrent = selectedStepIndex === index;\n\n  const [isActive, setIsActive] = useState(false);\n\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = useInteractionStyle({\n    isDisabled: isDisabled || isCurrent\n  });\n\n  const isConnectorConnected = selectedStepIndex > index;\n\n  const onSelectHandler = useCallback(\n    (event: Event) => {\n      if (!isDisabled && !isCurrent) {\n        onSelect(event, id);\n      }\n    },\n    [isDisabled, isCurrent, onSelect, id]\n  );\n\n  const { pressProps } = usePress(onSelectHandler, {});\n\n  const isLast = index !== numberOfSteps - 1;\n\n  const onMouseUpHandler = useCallback(() => {\n    setIsActive(false);\n  }, []);\n\n  const onMouseDownHandler = useCallback(() => {\n    setIsActive(true);\n  }, []);\n\n  const { styles, variantClasses } = useComponentTheme<TrainVariantOptions, TrainStyles>(\n    TrainRedwoodTheme,\n    {\n      stepDisabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      needsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',\n      pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      stepActive: isActive && !isCurrent ? 'isActive' : 'notActive'\n    }\n  );\n\n  const mergedProps = mergeProps(pressProps, interactionProps, {\n    onMouseUp: onMouseUpHandler,\n    onMouseDown: onMouseDownHandler\n  });\n\n  return (\n    <span class={styles.stepContainerStyle}>\n      {isLast && <Connector isConnected={isConnectorConnected} />}\n      <span {...mergedProps} class={classNames([styles.stepBaseStyle, variantClasses])}>\n        <StepIcon isVisited={isVisited} isDisabled={isDisabled} messageType={messageType} />\n        <StepLabel\n          label={label}\n          isVisited={isVisited}\n          isDisabled={isDisabled}\n          messageType={messageType}\n        />\n      </span>\n    </span>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { toChildArray } from 'preact';\nimport { Context } from './TrainContext';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useTestId, TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { TrainStyles } from './themes/TrainStyles.css';\nimport { TrainRedwoodTheme } from './themes/redwood/TrainTheme';\n\ntype TrainProps = {\n  /**\n   * Id of the currently selected step.\n   */\n  selectedStep: string;\n\n  /**\n   * Children of Train which are of type Step.\n   */\n  children: JSX.Element[];\n\n  /**\n   * A callback function to be invoked when the Step is selected.\n   */\n  onSelect?: (detail: selectDetail) => void;\n} & TestIdProps;\n\nexport type selectDetail = {\n  /**\n   * Click event object\n   */\n  event: Event;\n  /**\n   * To step id\n   */\n  toStep: string;\n};\n\n/**\nThe JET Train component serves as a visual navigator enabling users to traverse through different 'steps'. Each 'step' is represented by the Step sub-component which can manifest its own state - 'visited', 'unvisited', or 'disabled', and is capable of communicating various message types including 'error', 'confirmation', 'warning', or 'info'.\n */\nexport function Train({ onSelect, selectedStep, children, testId }: TrainProps) {\n  const { classes, styles } = useComponentTheme<never, TrainStyles>(TrainRedwoodTheme);\n\n  const testIdProps = useTestId(testId);\n\n  const selectedStepIndex = children.findIndex((step) => step.props.id === selectedStep);\n\n  const onStepSelect = useCallback(\n    (event: Event, stepId: string) => {\n      onSelect?.({\n        event: event,\n        toStep: stepId\n      });\n    },\n    [onSelect]\n  );\n\n  const trainContext = {\n    onSelect: onStepSelect,\n    selectedStep: selectedStep,\n    selectedStepIndex: selectedStepIndex,\n    numberOfSteps: children.length,\n    index: 0\n  };\n\n  const childrenArray = toChildArray(children).filter(Boolean);\n\n  return (\n    <div class={classes} {...testIdProps}>\n      {childrenArray.map((step, index) => (\n        <Context.Provider value={{ ...trainContext, index }}>\n          <div class={styles.baseListStyle}>{step}</div>\n        </Context.Provider>\n      ))}\n    </div>\n  );\n}\n"],"names":["Context","createContext","Connector","isConnected","styles","variantClasses","useComponentTheme","TrainRedwoodTheme","connectorConnected","_jsx","class","classNames","connectorBaseStyle","messageTypeIcons","confirmation","MessageConfirmationIcon","SvgSuccessS","error","MessageErrorIcon","SvgErrorS","fatal","info","MessageInfoIcon","SvgInformationS","warning","MessageWarningIcon","SvgWarningS","UserChosenIcon","messageType","isDisabled","IconComponent","stepIconDisabled","messageTypeIconBaseStyle","role","children","StepIcon","isVisited","index","selectedStepIndex","useContext","isCurrent","interactionProps","applyPseudoHoverStyle","applyHoverStyle","useInteractionStyle","isActive","activeProps","useActive","mergedProps","mergeProps","stepIconCurrent","stepIconVisited","stepIconNeedsEventsHover","stepIconPseudoHover","stepIconActive","jsx","stepIconContainerStyle","stepIconBaseStyle","StepLabel","label","numberOfSteps","translations","useTranslationBundle","currentStepStatus","train_current","train_visited","train_not_visited","currentStep","statusTextForCurrentStep","train_status","toString","train_message_type","stepLabelDisabled","stepLabelCurrent","stepLabelVisited","stepLabelNeedsEventsHover","stepLabelPseudoHover","stepLabelWrapperStyle","_jsxs","jsxs","href","stepLabelBaseStyle","onClick","event","preventDefault","HiddenAccessible","id","onSelect","Error","setIsActive","useState","isConnectorConnected","onSelectHandler","useCallback","pressProps","usePress","isLast","onMouseUpHandler","onMouseDownHandler","stepDisabled","needsEventsHover","pseudoHover","stepActive","onMouseUp","onMouseDown","stepContainerStyle","stepBaseStyle","selectedStep","testId","classes","testIdProps","useTestId","findIndex","step","props","trainContext","stepId","toStep","length","childrenArray","toChildArray","filter","Boolean","map","Provider","value","baseListStyle"],"mappings":"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"}