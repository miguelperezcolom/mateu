{"version":3,"file":"ScatterChart-208763f2.js","sources":["../../src/UNSAFE_ScatterChart/ScatterChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ScatterChartProps, ScatterItem } from './scatterChart.types';\nimport { findNearestDataPoint } from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { getMarkers, getSeriesData } from '#utils/PRIVATE_chartUtils/utils';\nimport { MarkersWithLabel } from '#PRIVATE_Chart/MarkersWithLabel';\nimport { getLineAreaChartNavUtil } from '#utils/PRIVATE_chartUtils/navUtils';\nimport { Chart } from '#PRIVATE_Chart';\nimport { Scale, TimeAxisProps } from '#utils/UNSAFE_visTypes/chart';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getColorRamp } from '#utils/UNSAFE_visUtils';\nimport { Point } from '#utils/PRIVATE_visSVGUtils';\nimport { getLineAreaSegments } from '#utils/PRIVATE_chartUtils/utils';\nimport { getItemColor, getMarkerType } from '#utils/PRIVATE_chartUtils/dataStyleUtils';\nimport { LineSeries } from '#PRIVATE_LineAreaComponents/LineSeries';\n\n/**\n * Scatter charts define data items using x and y values, making them useful for viewing relationships between 2 dimensions.\n */\nexport function ScatterChart<K extends string | number, D extends ScatterItem<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataLabelEffect = 'outline',\n  ...props\n}: ScatterChartProps<K, D>) {\n  const { direction, forcedColors } = useUser();\n  const isHighContrast = forcedColors === 'active';\n  const isTestEnv = props.testId !== undefined;\n  const isRtl = direction === 'rtl';\n  const isLog = yAxis?.scale === 'log';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const hiddenSet = new Set(hiddenIds);\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const isHoriz = orientation === 'horizontal';\n  const colors = getColorRamp();\n  const renderedSeries = getSeriesData<K, D>(\n    series?.length,\n    groups?.length,\n    getDataItem,\n    hiddenSet,\n    isLog\n  );\n\n  const renderedGetDataItem = (seriesIndex: number, groupIndex: number): D | undefined =>\n    getDataItem(seriesIndex, groupIndex);\n\n  const getGapRatio = () => {\n    return 1;\n  };\n\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    // TODO: JET-71301\n    return getLineAreaChartNavUtil<D>(\n      getDataItem,\n      series.length,\n      startIndex,\n      endIndex,\n      false,\n      isRtl,\n      isHoriz\n    );\n  };\n\n  const getDataItemPos = (xScale: Scale, yScale: Scale) => {\n    return (seriesIndex: number, groupIndex: number) => {\n      // Scatter shouldn't create renderedSeries. Can filter for hidden item here.\n      // TODO: JET-71332\n      const item = renderedSeries[seriesIndex][groupIndex] as { x: number; y: number };\n      if (item?.x == null && item?.y) {\n        return;\n      }\n      const x = xScale.transform(item?.x!);\n      const y = yScale.transform(item?.y!);\n      return { x, y, height: 0, width: 0 };\n    };\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    return {\n      color: getItemColor(seriesIndex, groupIndex, series, getDataItem),\n      type: getMarkerType(seriesIndex, groupIndex, getDataItem)\n    };\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale) => {\n    const getSeriesDataInfo = () => {\n      return {\n        offset: 0,\n        dataWidth: 0\n      };\n    };\n\n    const getYCoord = (value: number, yScale: Scale) => {\n      return yScale.transform(value);\n    };\n\n    return findNearestDataPoint<K, D>(\n      series,\n      groups,\n      xScale,\n      yScale,\n      renderedGetDataItem,\n      false,\n      getSeriesDataInfo,\n      getYCoord,\n      isLog,\n      0,\n      hiddenSet,\n      timeAxisType\n    );\n  };\n  const markers = getMarkers();\n\n  const getOffset = () => {\n    return { startOffset: 0, endOffset: 0 };\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      overview=\"off\"\n      defaultOverviewContentRenderer={() => null}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      getDataItem={getDataItem}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getMarkerInfo={getMarkerColorAndType}\n      renderGridLinesInFront={false}\n      isDataXAxis={true}\n      getStartAndEndAxesOffset={getOffset}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      isRtl={isRtl}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        isPointInsideMarquee,\n        defaultFontSize,\n        getTextDimensions,\n        axisStepWidth,\n        getItemAriaLabel\n      }) => {\n        return (\n          <>\n            {renderedSeries.map((lineAreaSeries, index) => {\n              if (lineAreaSeries.length === 0) {\n                /* TODO: need a better way to handle when a series is hidden. */\n                return;\n              }\n              const seriesItem = series[index];\n              const isLineRendered = seriesItem.lineType && seriesItem.lineType !== 'none';\n              const lineSegmentCoords: Point[][] = getLineAreaSegments<K, D>(\n                yScale,\n                xScale,\n                lineAreaSeries,\n                xStartIndex,\n                xEndIndex,\n                isLog,\n                groups,\n                index,\n                renderedGetDataItem,\n                timeAxisType,\n                true\n              );\n\n              const isHighlighted =\n                highlightedIds === undefined ||\n                highlightedIds.length === 0 ||\n                highlightedSet.has(seriesItem.id);\n\n              return (\n                <>\n                  {isLineRendered && (\n                    <LineSeries\n                      lineType={seriesItem.lineType}\n                      /* TODO: confirm with UX if this is contrastLine (changes depending on dark/light mode) or always white. \n                        It's always white in legacy.*/\n                      lineColor={seriesItem.lineColor}\n                      /* The area generated in legacy are bit apart and not touching when stacked. Preact areas are a bit closer than legacy when curved. \n                      Increased the contrast linewidth (to 2.5 from legacy 1.25) to give legacy visual treatment.\n                      TODO: investivage why legacy areas are not touching. maybe we want to do the same in preact svg utils that\n                      generates this curve.\n                     */\n                      lineWidth={seriesItem.lineWidth}\n                      lineStyle={seriesItem.lineStyle}\n                      color={seriesItem.lineColor || colors[index % colors.length]}\n                      lineSegmentCoords={lineSegmentCoords}\n                      isHorizontal={isHoriz}\n                      isHighlighted={isHighlighted}\n                      seriesIndex={index}\n                      groupWidth={axisStepWidth}\n                      isRtl={isRtl}\n                      timeAxisType={timeAxisType}\n                    />\n                  )}\n                  <MarkersWithLabel\n                    yScale={yScale}\n                    xScale={xScale}\n                    groups={groups}\n                    series={seriesItem}\n                    timeAxisType={timeAxisType}\n                    color={\n                      seriesItem.lineColor ||\n                      colors[\n                        index % colors.length\n                      ] /* TODO : make this use getItemColor function from dataStyleUtils. */\n                    }\n                    seriesIndex={index}\n                    startIndex={xStartIndex}\n                    endIndex={xEndIndex}\n                    markerType={markers[index % markers.length]}\n                    orientation={orientation}\n                    isLog={isLog}\n                    activeId={activeId}\n                    getDataItem={getDataItem}\n                    isPointInsideMarquee={isPointInsideMarquee}\n                    selectedIds={selectedSet}\n                    highlightedIds={highlightedIds !== undefined ? highlightedSet : undefined}\n                    focusedItemIndex={\n                      focusedItemInfo.seriesIndex === index &&\n                      focusedItemInfo.isFocusVisible &&\n                      !(props.isDataCursorEnabled && props.dataCursorStyle?.isMarkerDisplayed)\n                        ? focusedItemInfo.groupIndex\n                        : undefined\n                    }\n                    hoveredItemIndex={\n                      hoveredItemInfo?.isCurrent && hoveredItemInfo.seriesIndex === index\n                        ? hoveredItemInfo.groupIndex\n                        : undefined\n                    }\n                    isSelectionEnabled={selectionMode === 'single' || selectionMode === 'multiple'}\n                    isDrillEnabled={drilling === 'on'}\n                    defaultFontSize={defaultFontSize}\n                    dataLabelEffect={dataLabelEffect}\n                    isHighContrast={isHighContrast}\n                    isTestEnv={isTestEnv}\n                    isDataXAxis={true}\n                    getItemAriaLabel={getItemAriaLabel}\n                    getTextDimensions={getTextDimensions}\n                  />\n                </>\n              );\n            })}\n          </>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["width","height","selectedIds","hiddenIds","highlightedIds","hideAndShowBehavior","orientation","yAxis","series","groups","getDataItem","selectionMode","drilling","dataLabelEffect","props","direction","forcedColors","useUser","isHighContrast","isTestEnv","undefined","testId","isRtl","isLog","scale","timeAxisType","xAxis","hiddenSet","Set","selectedSet","highlightedSet","isHoriz","colors","getColorRamp","renderedSeries","getSeriesData","length","renderedGetDataItem","seriesIndex","groupIndex","markers","getMarkers","_jsx","Chart","overview","defaultOverviewContentRenderer","findNearest","xScale","yScale","findNearestDataPoint","offset","dataWidth","value","transform","getDataItemPos","item","x","y","getMarkerInfo","color","getItemColor","type","getMarkerType","renderGridLinesInFront","isDataXAxis","getStartAndEndAxesOffset","startOffset","endOffset","getNavUtil","startIndex","endIndex","getLineAreaChartNavUtil","getGapRatio","children","xStartIndex","xEndIndex","activeId","focusedItemInfo","hoveredItemInfo","isPointInsideMarquee","defaultFontSize","getTextDimensions","axisStepWidth","getItemAriaLabel","jsx","_Fragment","Fragment","map","lineAreaSeries","index","seriesItem","isLineRendered","lineType","lineSegmentCoords","getLineAreaSegments","isHighlighted","has","id","_jsxs","LineSeries","lineColor","lineWidth","lineStyle","isHorizontal","groupWidth","MarkersWithLabel","markerType","focusedItemIndex","isFocusVisible","isDataCursorEnabled","dataCursorStyle","isMarkerDisplayed","hoveredItemIndex","isCurrent","isSelectionEnabled","isDrillEnabled"],"mappings":"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"}