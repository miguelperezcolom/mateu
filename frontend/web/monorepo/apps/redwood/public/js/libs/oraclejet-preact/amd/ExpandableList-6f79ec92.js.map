{"version":3,"file":"ExpandableList-6f79ec92.js","sources":["../../src/UNSAFE_ExpandableList/useExpandCollapse.ts","../../src/UNSAFE_ExpandableList/ExpandableList.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback } from 'preact/hooks';\nimport { ToggleDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { containsKey, Keys } from '../utils/UNSAFE_keys';\n\n/**\n * A hook that handles mouse and keyboard gesture that toggles the expanded state.\n * @param keyExtractor\n * @param expanded\n * @param onToggle\n * @returns\n */\nexport function useExpandCollapse<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  expanded: Keys<K>,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) {\n  const { direction } = useUser();\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      handleToggle(event, keyExtractor, onToggle);\n    },\n    [keyExtractor, onToggle]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        handleToggle(event, keyExtractor, onToggle);\n      } else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n        const isRtl = direction === 'rtl';\n        const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;\n        handleArrowKey(isLeftArrow, event.target as HTMLElement, expanded, keyExtractor, onToggle);\n        // arrow key might cause it to scroll horizontally\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    [keyExtractor, onToggle, expanded, direction]\n  );\n\n  return onToggle ? { onClick, onKeyDown, onKeyUp } : {};\n}\n\n// prevent default (propagation) for keyDown to prevent scrolling the container\nconst onKeyDown = (event: KeyboardEvent) => {\n  if (\n    event.key === 'Enter' ||\n    event.key === ' ' ||\n    event.key === 'ArrowLeft' ||\n    event.key === 'ArrowRight'\n  ) {\n    event.preventDefault();\n  }\n};\n\nconst handleArrowKey = <K>(\n  isLeftArrow: boolean,\n  target: HTMLElement,\n  expanded: Keys<K>,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(target);\n  if (onToggle && itemKey) {\n    const contains = containsKey(expanded, itemKey);\n    if ((isLeftArrow && contains) || (!isLeftArrow && !contains)) {\n      onToggle({ value: itemKey });\n    }\n  }\n};\n\nconst handleToggle = <K>(\n  event: Event,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (onToggle && itemKey) {\n    onToggle({ value: itemKey });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n","import { ComponentChildren, Fragment } from 'preact';\nimport { useState, useCallback, useRef } from 'preact/hooks';\nimport { memo } from 'preact/compat';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport {\n  CurrentKeyDetail,\n  ListItemRendererContext,\n  SelectionDetail,\n  ToggleDetail,\n  FlattenedDataState,\n  HierarchicalItemRendererContext\n} from '../UNSAFE_Collection';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { Keys, containsKey, isSameKey } from '../utils/UNSAFE_keys';\nimport { Button } from '../UNSAFE_Button';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { ExpandIcon } from '../PRIVATE_ThemedIcons/ExpandIcon';\nimport { CollapseIcon } from '../PRIVATE_ThemedIcons/CollapseIcon';\nimport {\n  List,\n  ListGroupHeader,\n  GROUP_SELECTOR,\n  excludeGroup,\n  GroupLoadingIndicator\n} from '../PRIVATE_List';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { CustomRendererContext, PublicListProps } from '../UNSAFE_ListView/List.types';\nimport { useExpandCollapse } from './useExpandCollapse';\nimport { keyExtractor } from '../utils/PRIVATE_collectionUtils';\n\n// these are the props that are different from ListView\ntype SpecificTypes<K, D> = {\n  /**\n   * A function to render an item or a group header.\n   */\n  children: (context: HierarchicalItemRendererContext<K, D>) => ComponentChildren;\n  /**\n   * A FlattenedDataState object that provides information including data and metadata to this ExpandableList.\n   * If the value is null, then ExpandableList will show loading indicator until a FlattenedDataState is set.\n   */\n  data: FlattenedDataState<K, D> | null;\n  /**\n   * A function to handle when user performs a gesture that toggles the expansion state of a group header\n   */\n  onToggle?: (detail: ToggleDetail<K>) => void;\n};\n\n/**\n * Props for the ExpandableList Component, which consist of all props from ListView\n * except some which have different signatures.\n */\ntype ExpandableListProps<K, D> = Omit<PublicListProps<K, D>, 'children' | 'data'> &\n  SpecificTypes<K, D>;\n\n/**\n * An ExpandableList shows a two-level group of items where each group header can be expand or collapse.\n */\nexport function ExpandableList<K extends string | number, D>({\n  children,\n  data,\n  onSelectionChange,\n  onToggle,\n  onPersistCurrentItem,\n  ...props\n}: ExpandableListProps<K, D>) {\n  const [statusText, setStatusText] = useState('');\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const currentKey = useRef<K>();\n  const handleOnPersistCurrentItem = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      currentKey.current = detail.value;\n      onPersistCurrentItem?.(detail);\n    },\n    [onPersistCurrentItem]\n  );\n\n  const updateStateText = useCallback(\n    (detail: ToggleDetail<K>) => {\n      onToggle?.(detail);\n      if (data) {\n        const previouslyExpanded = containsKey(data?.expanded, detail.value);\n        setStatusText(\n          previouslyExpanded\n            ? translations.expandableList_groupCollapse()\n            : translations.expandableList_groupExpand()\n        );\n        // we need to clear the live region text otherwise screenreader\n        // won't read again if the content did not change the next time\n        setTimeout(() => {\n          setStatusText('');\n        }, 1000);\n      }\n    },\n    [onToggle, data, translations]\n  );\n  const expandCollapseProps = useExpandCollapse(\n    (element: HTMLElement) => {\n      if (element.getAttribute('role') === 'treegrid') {\n        return currentKey.current === undefined ? null : currentKey.current;\n      }\n      return keyExtractor(element, GROUP_SELECTOR) as K;\n    },\n    data == null ? (emptyKeys as Keys<K>) : data.expanded,\n    onToggle && updateStateText\n  );\n\n  const descId = useId();\n  const stableDescIdRef = useRef(descId);\n\n  const createHierarchicalContext = <K, D>(\n    context: ListItemRendererContext<K, D>,\n    options?: { expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }\n  ) => {\n    const expanderRenderer =\n      options !== undefined\n        ? () => (\n            <Expander\n              itemKey={context.metadata.key}\n              expanded={options.expanded}\n              onToggle={options.onToggle}\n            />\n          )\n        : undefined;\n\n    return {\n      ...context,\n      parentKey: context.metadata.parentKey,\n      leaf: context.metadata.isLeaf ?? true,\n      depth: context.metadata.treeDepth ?? 1,\n      expander: expanderRenderer\n    };\n  };\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange && data) {\n        const keys = excludeGroup(data, detail.value);\n        if (isSameKey(keys, detail.value)) {\n          onSelectionChange(detail);\n        } else if (keys.keys && keys.keys.size > 0) {\n          onSelectionChange({ ...detail, value: keys });\n        }\n      }\n    },\n    [onSelectionChange, data]\n  );\n\n  const customItemRenderer = (context: CustomRendererContext<K, D>) => {\n    const itemKey = context.listItemContext.metadata.key;\n    const options =\n      data && onToggle ? { expanded: containsKey(data.expanded, itemKey), onToggle } : undefined;\n    const itemContext = createHierarchicalContext(context.listItemContext, options);\n    if (itemContext.leaf) {\n      return context.defaultListItem(itemContext, { itemDepth: itemContext.depth + 1 });\n    } else {\n      return (\n        <ListGroupHeader\n          key={itemContext.metadata.key}\n          ariaDescribedBy={stableDescIdRef.current}\n          itemKey={itemContext.metadata.key}\n          itemIndex={itemContext.index}\n          itemDepth={itemContext.depth}\n          isFocused={context.isFocused}\n          isFocusRingVisible={context.isFocusRingVisible}\n          isActive={context.isActive}\n          isGridlineVisible={false}\n          isExpandable={true}\n          expandedKeys={data == null ? (emptyKeys as Keys<K>) : data.expanded}\n          onToggle={onToggle}>\n          {children(itemContext)}\n        </ListGroupHeader>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <List\n        data={data}\n        role=\"treegrid\"\n        loadingIndicator={<GroupLoadingIndicator />}\n        onSelectionChange={handleSelectionChange}\n        customItemRenderer={customItemRenderer}\n        onPersistCurrentItem={handleOnPersistCurrentItem}\n        {...{ ...props, ...expandCollapseProps }}>\n        {(context: ListItemRendererContext<K, D>) => {\n          return children(context as HierarchicalItemRendererContext<K, D>);\n        }}\n      </List>\n      {onToggle && (\n        <Fragment>\n          <LiveRegion>{statusText}</LiveRegion>\n          <span id={stableDescIdRef.current}>\n            <HiddenAccessible>\n              {translations.expandableList_expandCollapseInstructionText()}\n            </HiddenAccessible>\n          </span>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst Expander = memo(\n  <K,>(props: { itemKey: K; expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }) => {\n    const classes = classNames(['oj-listview-expander']);\n\n    const actionHandler = () => {\n      props.onToggle({ value: props.itemKey });\n    };\n\n    return (\n      <span class={classes} role=\"presentation\">\n        <Button\n          onAction={actionHandler}\n          variant=\"ghost\"\n          startIcon={props.expanded ? <ExpandIcon size=\"6x\" /> : <CollapseIcon size=\"6x\" />}\n        />\n      </span>\n    );\n  },\n  (prev: any, next: any) => {\n    return (\n      prev.itemKey === next.itemKey &&\n      prev.expanded === next.expanded &&\n      prev.onToggle === next.onToggle\n    );\n  }\n);\n"],"names":["onKeyDown","event","key","preventDefault","handleArrowKey","isLeftArrow","target","expanded","keyExtractor","onToggle","itemKey","contains","containsKey","value","handleToggle","type","stopPropagation","emptyKeys","all","keys","Set","Expander","memo","props","classes","classNames","_jsx","class","role","children","jsx","Button","onAction","variant","startIcon","ExpandIcon","size","CollapseIcon","prev","next","data","onSelectionChange","onPersistCurrentItem","statusText","setStatusText","useState","translations","useTranslationBundle","currentKey","useRef","handleOnPersistCurrentItem","useCallback","detail","current","updateStateText","previouslyExpanded","expandableList_groupCollapse","expandableList_groupExpand","setTimeout","expandCollapseProps","direction","useUser","onClick","onKeyUp","isRtl","useExpandCollapse","element","getAttribute","undefined","GROUP_SELECTOR","descId","useId","stableDescIdRef","handleSelectionChange","excludeGroup","isSameKey","_jsxs","jsxs","Fragment","List","loadingIndicator","GroupLoadingIndicator","customItemRenderer","context","listItemContext","metadata","options","itemContext","expanderRenderer","parentKey","leaf","isLeaf","depth","treeDepth","expander","createHierarchicalContext","defaultListItem","itemDepth","ListGroupHeader","ariaDescribedBy","itemIndex","index","isFocused","isFocusRingVisible","isActive","isGridlineVisible","isExpandable","expandedKeys","LiveRegion","id","HiddenAccessible","expandableList_expandCollapseInstructionText"],"mappings":"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"}