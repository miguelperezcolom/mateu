{"version":3,"file":"ComboChart-09c90d6d.js","sources":["../../src/UNSAFE_ComboChart/ComboChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComboChartProps, LineAreaItem } from './ComboChart.types';\nimport {\n  findNearestDataPoint,\n  getStartAndEndAxesOffset\n} from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { AreaSeries } from '#PRIVATE_LineAreaComponents/AreaSeries';\nimport { getMarkers, getSeriesData } from '#utils/PRIVATE_chartUtils/utils';\nimport { MarkersWithLabel } from '#PRIVATE_Chart/MarkersWithLabel';\nimport { getLineAreaChartNavUtil } from '#utils/PRIVATE_chartUtils/navUtils';\nimport { Chart } from '#PRIVATE_Chart';\nimport { Scale, TimeAxisProps } from '#utils/UNSAFE_visTypes/chart';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getColorRamp } from '#utils/UNSAFE_visUtils';\nimport { LineSeries } from '#PRIVATE_LineAreaComponents/LineSeries';\nimport { Point } from '#utils/PRIVATE_visSVGUtils';\nimport { getLineAreaSegments } from '#utils/PRIVATE_chartUtils/utils';\nimport { colorSchemeVars } from '@oracle/oraclejet-internal-theme-contract/themeContract.css';\nimport { getItemColor, getMarkerType } from '#utils/PRIVATE_chartUtils/dataStyleUtils';\nimport { BarGroup } from '#UNSAFE_BarChart/BarGroup';\nimport { getBarPosition } from '#UNSAFE_BarChart/utils/barLayoutUtils';\nimport { getLineAreaChartItemPosition } from '#PRIVATE_LineAreaComponents/utils/chartUtils';\nimport { getBarGapRatio } from '#UNSAFE_BarChart/utils/barSeriesUtils';\n\nconst LINE_WITH_AREA_OPACITY = 0.2;\n\n/**\n * The ComboChart displays information graphically using bars, lines and filled areas, making relationships among the data easier to understand.\n */\nexport function ComboChart<K extends string | number, D extends LineAreaItem<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataItemGaps = 0.5,\n  dataLabelEffect = 'outline',\n  ...props\n}: ComboChartProps<K, D>) {\n  const { direction, forcedColors } = useUser();\n  const isHighContrast = forcedColors === 'active';\n  const filteredBarSeries = series.filter((currentSeries) => currentSeries.type === 'bar');\n  const isRtl = direction === 'rtl';\n  const isLog = yAxis?.scale === 'log';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const hiddenSet = new Set(hiddenIds);\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const isHoriz = orientation === 'horizontal';\n  const colors = getColorRamp();\n  // TODO: JET-71332 ; should only be (number | undefined)[][]\n  // remove the type inference from scatter chart item.\n  let renderedSeries = getSeriesData<K, D>(\n    series.length,\n    groups.length,\n    getDataItem,\n    hiddenSet,\n    isLog\n  );\n\n  const renderedGetDataItem = (seriesIndex: number, groupIndex: number): D | undefined => {\n    if (!isStacked) return getDataItem(seriesIndex, groupIndex);\n    return {\n      ...getDataItem(seriesIndex, groupIndex),\n      value: renderedSeries[seriesIndex][groupIndex]\n    } as D;\n  };\n\n  const getGapRatio = () => {\n    return 1;\n  };\n\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    // TODO: JET-71332\n    //@ts-ignore\n    return getLineAreaChartNavUtil<D>(\n      getDataItem,\n      series.length,\n      startIndex,\n      endIndex,\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n  };\n  const isSplitDualY = typeof props.y2Axis?.split === 'number';\n  const getDataItemPos = (\n    xScale: Scale,\n    yScale: Scale,\n    y2Scale: Scale,\n    axisStepWidth: number,\n    averageGroupZ: number,\n    gapRatio: number\n  ) => {\n    const _getBarPosition = hasBar\n      ? getBarPosition(\n          filteredBarSeries,\n          groups,\n          getDataItem,\n          xScale,\n          yScale,\n          y2Scale,\n          hiddenSet,\n          dataItemGaps,\n          axisStepWidth,\n          averageGroupZ,\n          gapRatio,\n          yAxis?.scale === 'log',\n          isStacked,\n          isRtl,\n          isHoriz,\n          isSplitDualY,\n          timeAxisType\n        )\n      : undefined;\n\n    return (seriesIndex: number, groupIndex: number) => {\n      const seriesItem = series[seriesIndex];\n      if (seriesItem.type === 'bar') {\n        return _getBarPosition ? _getBarPosition(seriesIndex, groupIndex) : undefined;\n      } else {\n        return getLineAreaChartItemPosition(\n          seriesIndex,\n          groupIndex,\n          renderedSeries,\n          getDataItem,\n          groups,\n          isHoriz,\n          xScale,\n          yScale,\n          timeAxisType\n        );\n      }\n    };\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    const color = getItemColor(seriesIndex, groupIndex, series, getDataItem);\n    const markerType = getMarkerType(seriesIndex, groupIndex, getDataItem);\n    return { color, markerType };\n  };\n\n  const findNearest = (xScale: Scale, yScale: Scale, y2Scale: Scale) => {\n    const getSeriesDataInfo = () => {\n      return {\n        offset: 0,\n        dataWidth: 0\n      };\n    };\n\n    const getYCoord = (value: number, yScale: Scale) => {\n      return yScale.transform(value);\n    };\n\n    return findNearestDataPoint<K, D>(\n      series,\n      groups,\n      xScale,\n      yScale,\n      renderedGetDataItem,\n      isStacked,\n      getSeriesDataInfo,\n      getYCoord,\n      isLog,\n      0,\n      hiddenSet,\n      timeAxisType,\n      y2Scale\n    );\n  };\n  const markers = getMarkers();\n\n  const allLineSegmentCoords: Point[][] = [];\n\n  const { hasBar, hasCenteredSeries, hasUncenteredSeries, hasArea } = (\n    series as { lineType: string; type: string }[]\n  ).reduce(\n    (acc, s) => {\n      return {\n        hasArea: acc.hasArea || s.type === 'area' || s.type === 'lineWithArea',\n        hasBar: acc.hasBar || s.type === 'bar',\n        hasCenteredSeries:\n          acc.hasCenteredSeries ||\n          s.lineType === 'centeredSegmented' ||\n          s.lineType === 'centeredStepped',\n        hasUncenteredSeries:\n          acc.hasUncenteredSeries || s.lineType === 'segmented' || s.lineType === 'stepped'\n      };\n    },\n    { hasBar: false, hasCenteredSeries: false, hasUncenteredSeries: false, hasArea: false }\n  );\n\n  const getOffset = (groupCount: number) => {\n    return getStartAndEndAxesOffset(\n      hasCenteredSeries,\n      hasUncenteredSeries,\n      isHoriz,\n      groupCount,\n      hasBar\n    );\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      defaultOverviewContentRenderer={() => {\n        return <OverviewComboChart groups={groups} series={series} getDataItem={getDataItem} />;\n      }}\n      groups={groups}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      isStacked={isStacked}\n      getDataItem={getDataItem}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getMarkerInfo={getMarkerColorAndType}\n      renderGridLinesInFront={hasArea}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      getStartAndEndAxesOffset={getOffset}\n      isRtl={isRtl}\n      {...props}>\n      {({\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        groupsInfo,\n        yScale,\n        y2Scale,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        isPointInsideMarquee,\n        getTextDimensions,\n        defaultFontSize,\n        axisStepWidth,\n        averageGroupZ,\n        getItemAriaLabel,\n        plotAreaClipPathId\n      }) => {\n        let barSeriesIndex = -1;\n        const leafGroups = groupsInfo.map(({ item }) => item);\n        renderedSeries = getSeriesData<K, D>(\n          series.length,\n          leafGroups.length,\n          getDataItem,\n          hiddenSet,\n          isLog\n        );\n\n        return (\n          <>\n            {renderedSeries.map((valueSeries, index) => {\n              const currentSeries = series[index];\n              const isAssociatedToY2 = currentSeries.associatedYAxis === 'y2';\n              const areaOpacity =\n                currentSeries.type === 'lineWithArea' ? LINE_WITH_AREA_OPACITY : 1;\n              const isAreaRendered =\n                currentSeries.type === 'area' || currentSeries.type === 'lineWithArea';\n              const isContrastLineNeeded = currentSeries.type === 'area';\n\n              if (valueSeries.length === 0) {\n                return;\n              }\n\n              const lineSegmentCoords: Point[][] = getLineAreaSegments<K, D>(\n                isAssociatedToY2 ? y2Scale : yScale,\n                xScale,\n                valueSeries,\n                xStartIndex,\n                xEndIndex,\n                isLog,\n                leafGroups,\n                index,\n                renderedGetDataItem,\n                timeAxisType\n              );\n              allLineSegmentCoords[index] = lineSegmentCoords[0];\n              const isBottomSegmentCurved =\n                currentSeries.type !== 'bar'\n                  ? currentSeries.lineType === 'curved' &&\n                    isStacked &&\n                    renderedSeries.length > 1 &&\n                    index > 0\n                  : isStacked && renderedSeries.length > 1 && index > 0;\n\n              const isHighlighted =\n                highlightedIds === undefined ||\n                highlightedSet.size === 0 ||\n                highlightedSet.has(currentSeries.id);\n\n              const prevCoords =\n                isStacked && index != 0\n                  ? allLineSegmentCoords.reduce((prevValue, newValue, j) => {\n                      // find the index i such that i < index, and series i  has at least\n                      // one or more data item unhidden. Only such series will can be\n                      // used as bottomCoord for current series. Otherwise we have to use\n                      // baseline coord\n                      if (j >= index) {\n                        return prevValue;\n                      }\n                      if (newValue.length > 0) {\n                        return j;\n                      }\n                      return prevValue;\n                    }, 0)\n                  : undefined;\n              if (currentSeries.type === 'bar') barSeriesIndex = barSeriesIndex + 1;\n              return (\n                <>\n                  {currentSeries.type === 'bar' &&\n                    leafGroups.slice(xStartIndex, xEndIndex + 1).map((_, index) => {\n                      const barGroup = (\n                        <BarGroup\n                          plotAreaClipPathId={plotAreaClipPathId}\n                          yScale={yScale}\n                          y2Scale={y2Scale}\n                          xScale={xScale}\n                          splitDualY={isSplitDualY}\n                          groupIndex={index + xStartIndex}\n                          selectedIds={selectedSet}\n                          hiddenIds={hiddenSet}\n                          highlightedIds={highlightedIds ? highlightedSet : highlightedIds}\n                          isDrillEnabled={drilling === 'on'}\n                          series={filteredBarSeries}\n                          barGapRatio={getBarGapRatio(isStacked, xStartIndex, xEndIndex)}\n                          dataItemGaps={dataItemGaps}\n                          isPointInsideMarquee={isPointInsideMarquee}\n                          isStacked={isStacked}\n                          axisStepWidth={axisStepWidth}\n                          averageGroupZ={averageGroupZ!}\n                          group={leafGroups[index]}\n                          timeAxisType={(props.xAxis as TimeAxisProps)?.timeAxisType}\n                          colors={colors}\n                          activeId={activeId}\n                          isLog={yAxis?.scale === 'log'}\n                          orientation={orientation}\n                          getDataItem={getDataItem}\n                          isSelectionEnabled={selectionMode != 'none'}\n                          isRtl={isRtl}\n                          focusedItemInfo={focusedItemInfo}\n                          hoveredItemInfo={hoveredItemInfo}\n                          getTextDimensions={getTextDimensions}\n                          defaultFontSize={defaultFontSize}\n                          seriesIndex={barSeriesIndex}\n                          getItemAriaLabel={getItemAriaLabel}\n                        />\n                      );\n\n                      return barGroup;\n                    })}\n                  {isAreaRendered && (\n                    <AreaSeries\n                      yScale={isAssociatedToY2 ? y2Scale : yScale}\n                      plotAreaClipPathId={plotAreaClipPathId}\n                      lineType={currentSeries.lineType}\n                      color={currentSeries.areaColor || colors[index % colors.length]}\n                      isHorizontal={isHoriz}\n                      areaColorOpacity={areaOpacity}\n                      isBottomSegmentCurved={isBottomSegmentCurved}\n                      bottomCoords={\n                        prevCoords !== undefined &&\n                        allLineSegmentCoords[prevCoords].some((value) => value != null)\n                          ? allLineSegmentCoords[prevCoords]\n                          : undefined\n                      }\n                      lineSegments={lineSegmentCoords}\n                      isLog={isLog}\n                      isHighlighted={isHighlighted}\n                      seriesIndex={index}\n                      groupWidth={axisStepWidth}\n                      isRtl={isRtl}\n                      timeAxisType={timeAxisType}\n                    />\n                  )}\n                  {currentSeries.type === 'line' && (\n                    <LineSeries\n                      plotAreaClipPathId={plotAreaClipPathId}\n                      lineType={currentSeries.lineType}\n                      lineColor={\n                        isContrastLineNeeded\n                          ? colorSchemeVars.dvt.contrastLine\n                          : currentSeries.lineColor\n                      }\n                      lineWidth={isContrastLineNeeded ? 1.25 : currentSeries.lineWidth}\n                      lineStyle={currentSeries.lineStyle || 'solid'}\n                      color={currentSeries.lineColor || colors[index % colors.length]}\n                      lineSegmentCoords={lineSegmentCoords}\n                      isHorizontal={isHoriz}\n                      isHighlighted={isHighlighted}\n                      seriesIndex={index}\n                      groupWidth={axisStepWidth}\n                      isRtl={isRtl}\n                      timeAxisType={timeAxisType}\n                    />\n                  )}\n                  {\n                    /*for non stacked charts, markers should render in the order of series.\n                     some markers might get hidden behind area but this preserves the legacy behavior. */\n                    !isStacked && (currentSeries.type === 'line' || isAreaRendered) && (\n                      <MarkersWithLabel\n                        yScale={isAssociatedToY2 ? y2Scale : yScale}\n                        xScale={xScale}\n                        groups={leafGroups}\n                        series={currentSeries}\n                        timeAxisType={timeAxisType}\n                        color={\n                          colors[\n                            index % colors.length\n                          ] /* TODO : make this use getItemColor function from dataStyleUtils. */\n                        }\n                        seriesIndex={index}\n                        startIndex={xStartIndex}\n                        endIndex={xEndIndex}\n                        markerType={markers[index % markers.length]}\n                        orientation={orientation}\n                        isLog={isLog}\n                        activeId={activeId}\n                        getDataItem={getDataItem}\n                        isPointInsideMarquee={isPointInsideMarquee}\n                        selectedIds={selectedSet}\n                        focusedItemIndex={\n                          focusedItemInfo.seriesIndex === index &&\n                          focusedItemInfo.isFocusVisible &&\n                          !(props.isDataCursorEnabled && props.dataCursorStyle?.isMarkerDisplayed)\n                            ? focusedItemInfo.groupIndex\n                            : undefined\n                        }\n                        hoveredItemIndex={\n                          hoveredItemInfo?.isCurrent && hoveredItemInfo.seriesIndex === index\n                            ? hoveredItemInfo.groupIndex\n                            : undefined\n                        }\n                        isSelectionEnabled={\n                          selectionMode === 'single' || selectionMode === 'multiple'\n                        }\n                        isDrillEnabled={drilling === 'on'}\n                        defaultFontSize={defaultFontSize}\n                        dataLabelEffect={dataLabelEffect}\n                        isHighContrast={isHighContrast}\n                        getItemAriaLabel={getItemAriaLabel}\n                      />\n                    )\n                  }\n                </>\n              );\n            })}\n          </>\n          //TODO - handle isStack part\n        );\n      }}\n    </Chart>\n  );\n}\n\nfunction OverviewComboChart<K extends string | number, D extends LineAreaItem<K>>(\n  props: ComboChartProps<K, D>\n) {\n  return (\n    <ComboChart\n      datatip={() => ({ content: '' })}\n      zoomAndScroll=\"off\"\n      plotArea={{\n        yMajorTick: {\n          isRendered: false\n        },\n        xMajorTick: {}\n      }}\n      xAxis={{\n        tickLabel: {\n          autoRotate: false,\n          // @ts-ignore\n          isRendered: props.xAxis?.timeAxisType ? true : false\n        }\n      }}\n      series={props.series}\n      groups={props.groups}\n      getDataItem={props.getDataItem}\n      yAxis={{\n        tickLabel: {\n          isRendered: false\n        }\n      }}\n      overview=\"off\"\n    />\n  );\n}\n"],"names":["ComboChart","width","height","selectedIds","hiddenIds","highlightedIds","hideAndShowBehavior","orientation","yAxis","series","groups","isStacked","getDataItem","selectionMode","drilling","dataItemGaps","dataLabelEffect","props","direction","forcedColors","useUser","isHighContrast","filteredBarSeries","filter","currentSeries","type","isRtl","isLog","scale","timeAxisType","xAxis","hiddenSet","Set","selectedSet","highlightedSet","isHoriz","colors","getColorRamp","renderedSeries","getSeriesData","length","renderedGetDataItem","seriesIndex","groupIndex","value","isSplitDualY","y2Axis","split","markers","getMarkers","allLineSegmentCoords","hasBar","hasCenteredSeries","hasUncenteredSeries","hasArea","reduce","acc","s","lineType","_jsx","jsx","Chart","defaultOverviewContentRenderer","OverviewComboChart","findNearest","xScale","yScale","y2Scale","findNearestDataPoint","offset","dataWidth","transform","getDataItemPos","axisStepWidth","averageGroupZ","gapRatio","_getBarPosition","getBarPosition","undefined","getLineAreaChartItemPosition","getMarkerInfo","color","getItemColor","markerType","getMarkerType","renderGridLinesInFront","getNavUtil","startIndex","endIndex","getLineAreaChartNavUtil","getGapRatio","getStartAndEndAxesOffset","groupCount","children","xStartIndex","xEndIndex","groupsInfo","activeId","focusedItemInfo","hoveredItemInfo","isPointInsideMarquee","getTextDimensions","defaultFontSize","getItemAriaLabel","plotAreaClipPathId","barSeriesIndex","leafGroups","map","item","_Fragment","Fragment","valueSeries","index","isAssociatedToY2","associatedYAxis","areaOpacity","isAreaRendered","isContrastLineNeeded","lineSegmentCoords","getLineAreaSegments","isBottomSegmentCurved","isHighlighted","size","has","id","prevCoords","prevValue","newValue","j","_jsxs","slice","_","BarGroup","splitDualY","isDrillEnabled","barGapRatio","getBarGapRatio","group","isSelectionEnabled","AreaSeries","areaColor","isHorizontal","areaColorOpacity","bottomCoords","some","lineSegments","groupWidth","LineSeries","lineColor","colorSchemeVars","dvt","contrastLine","lineWidth","lineStyle","MarkersWithLabel","focusedItemIndex","isFocusVisible","isDataCursorEnabled","dataCursorStyle","isMarkerDisplayed","hoveredItemIndex","isCurrent","datatip","content","zoomAndScroll","plotArea","yMajorTick","isRendered","xMajorTick","tickLabel","autoRotate","overview"],"mappings":"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"}