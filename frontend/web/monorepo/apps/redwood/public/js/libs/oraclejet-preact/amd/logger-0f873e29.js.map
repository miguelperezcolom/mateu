{"version":3,"file":"logger-0f873e29.js","sources":["../../src/utils/UNSAFE_logger/logLevels.ts","../../src/utils/UNSAFE_logger/sessionStorage.ts","../../src/utils/UNSAFE_logger/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2011 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * Log level none (least verbose)\n */\nexport const NONE = 0;\n/**\n * Log level error\n */\nexport const ERROR = 1;\n/**\n * Log level warn\n */\nexport const WARN = 2;\n/**\n * Log level info\n */\nexport const INFO = 3;\n/**\n * Log level log\n */\nexport const LOG = 4;\n","/**\n * @license\n * Copyright (c) 2011 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { NONE, ERROR, WARN, INFO, LOG } from './logLevels';\nimport { LogLevelType } from './logger';\n\n/*\n * Helper method that retrieves and parses session storage setting\n */\nconst _getSessionStorage = () => {\n  let logLevel: LogLevelType | undefined;\n  try {\n    const sessionValue = window?.sessionStorage?.getItem('ojet.logLevel');\n    switch (sessionValue) {\n      case 'none':\n        logLevel = NONE;\n        break;\n      case 'error':\n        logLevel = ERROR;\n        break;\n      case 'warning':\n        logLevel = WARN;\n        break;\n      case 'info':\n        logLevel = INFO;\n        break;\n      case 'log':\n        logLevel = LOG;\n        break;\n      default:\n        logLevel = undefined;\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  return logLevel;\n};\n\n/**\n * SessionStorage setting\n */\nexport const sessionStorageLevel = _getSessionStorage();\n","/**\n * @license\n * Copyright (c) 2011 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { sessionStorageLevel } from './sessionStorage';\nimport { NONE, ERROR, WARN, INFO, LOG } from './logLevels';\n\n/**\n * Logger object that writes into the native browser console or a custom writer, if a custom writer is specified.\n * When any of the logging methods is called, it compares the level of the message to the level of the logger and\n * logs the message if the logger level is at least as verbose as the message level.\n *\n * If the logging level is changed at a later point, the Logger will use the modified level for the subsequent log operations.\n *\n * The logging level can be overridden via sessionStorage.setItem() call for the current browser session.\n * Use 'ojet.logLevel' as the key with one of the following values: 'none' (least verbose), 'error', 'warning', 'info', 'log' (most verbose).\n * Set the value in the browser console and refresh the browser in order for the value to take effect.\n */\n\n/**\n * Acceptable values for the log level\n */\nexport type LogLevelType = typeof NONE | typeof ERROR | typeof WARN | typeof INFO | typeof LOG;\n\n/**\n * Acceptable values for the logger method\n */\ntype LogMethodType = 'log' | 'info' | 'warn' | 'error';\n\n/**\n * A type for the function that generates arguments for the Logger methods - 'log', 'info', 'warn', 'error', 'writer'.\n * You can pass this function to the logger method to avoid argument manipulation before log level is checked.\n */\ntype LogArgsFn = () => any | any[];\n\n/**\n * Function type for the Logger methods - 'log', 'info', 'warn', 'error', 'writer'.\n * The first argument might be a function that returns arguments for logging, or\n * it might be a JavaScript string containing zero or more substitution strings.\n * When a callback function is specified as an argument, it will be lazily invoked\n * only if the logger level is at least as verbose as the message level.\n * We recommend using a function callback in Logger calls\n * to skip expensive manipulations of string arguments when log level is insuficient.\n */\ntype LogFn = (message?: any | LogArgsFn, ...optionalParams: any[]) => void;\n\n/**\n * A type of the custom writer that can be passed to the Preact logger.\n * The writer should implement the following methods in order to be used - log, warn, info, error.\n */\nexport type LoggerType = {\n  log: LogFn;\n  warn: LogFn;\n  info: LogFn;\n  error: LogFn;\n  write?: never;\n};\n/**\n * An alternative type of the custom writer that can be passed to the Preact logger.\n * The writer should implement method 'write' in order to be used.\n * The method will get log level as a first argument in addition to other logging arguments.\n */\nexport type LoggerAltType = {\n  write: (logLevel: LogLevelType, message?: any | LogArgsFn, ...optionalParams: any[]) => void;\n  log?: never;\n  warn?: never;\n  info?: never;\n  error?: never;\n};\n\nlet _logLevel: LogLevelType = ERROR;\nlet _writer: LoggerType | LoggerAltType | null = null;\n\n/**\n * Sets log level\n * @param level NONE=0, ERROR=1, WARN=2, INFO=3, LOG=4\n */\nexport const setLogLevel = (level: LogLevelType) => {\n  _logLevel = level;\n};\n\n/**\n * Gets log level\n * @returns  NONE=0, ERROR=1, WARN=2, INFO=3, LOG=4\n */\nexport const getLogLevel = (): LogLevelType => {\n  return sessionStorageLevel === undefined ? _logLevel : sessionStorageLevel;\n};\n\n/**\n * Sets a custom writer for the logger. The custom writer should be an object\n * that either implements 'log', 'info', 'warn' and 'error' methods\n * or that implements 'write' method used for all levels of logging.\n * @param writer\n */\nexport const setLogWriter = (writer: LoggerType | LoggerAltType) => {\n  _writer = writer;\n};\n\nconst _getWriter = () => {\n  let writer;\n  if (_writer) {\n    writer = _writer;\n  } else if (typeof window !== 'undefined' && window.console !== undefined) {\n    writer = window.console;\n  }\n  return writer;\n};\n\nconst _write = (\n  method: LogMethodType,\n  logLevel: LogLevelType,\n  message?: any,\n  ...optionalParams: any[]\n) => {\n  if (getLogLevel() < logLevel) {\n    return;\n  }\n  const writer = _getWriter();\n  if (writer) {\n    let args = [message];\n    if (optionalParams) {\n      args = args.concat(optionalParams);\n    }\n    if (args.length === 1 && args[0] instanceof Function) {\n      const msg = args[0]();\n      args = Array.isArray(msg) ? msg : [msg];\n    }\n\n    if ((writer as LoggerAltType)['write']) {\n      args.unshift(logLevel);\n      (writer as LoggerAltType)['write'](...(args as [LogLevelType, any, any]));\n    } else {\n      (writer as LoggerType)[method].apply(writer, args);\n    }\n  }\n};\n\n/**\n * Outputs log messages to the browser console or custom writer.\n */\nexport const log: LogFn = _write.bind(null, 'log', LOG);\n/**\n * Outputs info messages to the browser console or custom writer.\n */\nexport const info: LogFn = _write.bind(null, 'info', INFO);\n/**\n * Outputs warn messages to the browser console or custom writer.\n */\nexport const warn: LogFn = _write.bind(null, 'warn', WARN);\n/**\n * Outputs error messages to the browser console or custom writer.\n */\nexport const error: LogFn = _write.bind(null, 'error', ERROR);\n"],"names":["sessionStorageLevel","logLevel","sessionValue","window","sessionStorage","getItem","undefined","e","_getSessionStorage","_logLevel","_writer","getLogLevel","_write","method","message","optionalParams","writer","console","_getWriter","args","concat","length","Function","msg","Array","isArray","unshift","apply","log","bind","info","warn","error","level"],"mappings":"6CAWa,MCmCAA,EAhCc,MACzB,IAAIC,EACJ,IACE,MAAMC,EAAeC,QAAQC,gBAAgBC,QAAQ,iBACrD,OAAQH,GACN,IAAK,OACHD,EDTY,ECUZ,MACF,IAAK,QACHA,EDRa,ECSb,MACF,IAAK,UACHA,EDPY,ECQZ,MACF,IAAK,OACHA,EDNY,ECOZ,MACF,IAAK,MACHA,EDLW,ECMX,MACF,QACEA,OAAWK,EAGhB,CAAC,MAAOC,GAAK,CAEd,OAAON,CAAQ,EAMkBO,GC2BnC,IAAIC,EF1DiB,EE2DjBC,EAA6C,KAMpC,MAQAC,EAAc,SACML,IAAxBN,EAAoCS,EAAYT,EAuBnDY,EAAS,CACbC,EACAZ,EACAa,KACGC,KAEH,GAAIJ,IAAgBV,EAClB,OAEF,MAAMe,EAnBW,MACjB,IAAIA,EAMJ,OALIN,EACFM,EAASN,EACkB,oBAAXP,aAA6CG,IAAnBH,OAAOc,UACjDD,EAASb,OAAOc,SAEXD,CAAM,EAYEE,GACf,GAAIF,EAAQ,CACV,IAAIG,EAAO,CAACL,GAIZ,GAHIC,IACFI,EAAOA,EAAKC,OAAOL,IAED,IAAhBI,EAAKE,QAAgBF,EAAK,aAAcG,SAAU,CACpD,MAAMC,EAAMJ,EAAK,KACjBA,EAAOK,MAAMC,QAAQF,GAAOA,EAAM,CAACA,EACpC,CAEIP,EAAgC,OACnCG,EAAKO,QAAQzB,GACZe,EAAgC,SAAMG,IAEtCH,EAAsBH,GAAQc,MAAMX,EAAQG,EAEhD,GAMUS,EAAahB,EAAOiB,KAAK,KAAM,MFrHzB,GEyHNC,EAAclB,EAAOiB,KAAK,KAAM,OF7HzB,GEiIPE,EAAcnB,EAAOiB,KAAK,KAAM,OFrIzB,GEyIPG,EAAepB,EAAOiB,KAAK,KAAM,QF7IzB,WAAA,SAQD,QAID,SAhBC,SAQA,2DE6DQI,IAC1BxB,EAAYwB,CAAK,iBAiBUjB,IAC3BN,EAAUM,CAAM"}