{"version":3,"file":"Checkbox-dd283124.js","sources":["../../src/UNSAFE_Checkbox/Checkbox.tsx"],"sourcesContent":["import type { ComponentChildren, ComponentProps, Ref, JSX } from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { InlineUserAssistance, UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { CheckboxControl } from '#PRIVATE_CheckboxControl';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { CheckboxRadioContext } from '#PRIVATE_CheckboxRadioField/CheckboxRadioContext';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { merge } from '#utils/UNSAFE_stringUtils';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: UnpackSignals<JSX.AriaAttributes>['aria-describedby'];\n  /**\n   * Text to provide the user with additional information.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Content associated with checkbox. This can be a label or a block of text.\n   */\n  children: ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the checkbox requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Specifies if the checkbox is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies if the checkbox is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Callback invoked each time the user changes checkbox selection.\n   */\n  onCommit: (detail: ValueUpdateDetail<boolean>) => void;\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Value of the checkbox.\n   */\n  value?: boolean;\n} & TestIdProps;\n\n/**\n * Checkbox is a single standalone checkbox control. It represents a boolean value.\n */\nexport const Checkbox = forwardRef(\n  (\n    {\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      messages,\n      onCommit,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value: propValue,\n      testId,\n      children\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    const id = useId();\n    const testIdProps = useTestId(testId);\n    const UAtestId = testId ? `${testId}-inline-user-assistance` : undefined;\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled fields\n    const hasBottomUserAssistance = !isDisabled;\n    const bottomUaId = hasBottomUserAssistance ? `${id}-bottom-ua` : undefined;\n    const ariaDescribedBy = hasBottomUserAssistance\n      ? merge([bottomUaId, propAriaDescribedBy])\n      : propAriaDescribedBy;\n\n    const onChangeHandler = useCallback(\n      (e: Event) => {\n        // return early on keyup if key isn't spacebar\n        const { key } = e as KeyboardEvent;\n        const hasKey = key !== undefined;\n\n        if (hasKey && key !== ' ') {\n          return;\n        }\n\n        const input = e.target as HTMLInputElement;\n        // While mouse clicking StyledCheckbox results in toggling the checked state on an input element, spacebar key events do not.\n        // If it is a spacebar key event, we will return the toggled value of its current state.\n        const value = hasKey ? !input.checked : input.checked;\n        const previousValue = !!propValue;\n\n        if (previousValue !== value) {\n          onCommit({\n            value,\n            previousValue\n          });\n        }\n      },\n      [onCommit, propValue]\n    );\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        !isDisabled && checkboxRef.current?.focus();\n      },\n      blur: () => {\n        const activeElement = document.activeElement as HTMLElement;\n        checkboxRef.current === activeElement && activeElement.blur();\n      }\n    }));\n\n    // TODO fix issue with tooltip and link in label\n    // \n\n    return (\n      <div {...testIdProps}>\n        <CheckboxRadioContext.Provider value={{ isFocusRingShown: !isDisabled }}>\n          <CheckboxControl\n            {...(!isDisabled && !isReadonly\n              ? {\n                  onChange: onChangeHandler,\n                  onKeyUp: onChangeHandler\n                }\n              : {})}\n            aria-describedby={ariaDescribedBy}\n            assistiveText={assistiveText}\n            columnSpan={columnSpan}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isChecked={propValue}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isRequired={isRequired}\n            ref={checkboxRef}>\n            {children}\n          </CheckboxControl>\n          {hasBottomUserAssistance ? (\n            <InlineUserAssistance\n              id={bottomUaId}\n              isRequiredShown={!isReadonly && !!isRequired && !propValue}\n              requiredAlignment=\"start\"\n              messages={messages}\n              userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n              testId={UAtestId}\n            />\n          ) : userAssistanceDensity === 'reflow' ? undefined : (\n            /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled or readonly fields */\n            <InlineUserAssistance userAssistanceDensity=\"efficient\" testId={UAtestId} />\n          )}\n        </CheckboxRadioContext.Provider>\n      </div>\n    );\n  }\n);\n"],"names":["Checkbox","forwardRef","propAriaDescribedBy","assistiveText","columnSpan","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","messages","onCommit","userAssistanceDensity","propUserAssistanceDensity","value","propValue","testId","children","ref","isFormDisabled","isFormReadonly","formUserAssistanceDensity","useFormContext","checkboxRef","useRef","id","useId","testIdProps","useTestId","UAtestId","undefined","hasBottomUserAssistance","bottomUaId","ariaDescribedBy","merge","onChangeHandler","useCallback","e","key","hasKey","input","target","checked","previousValue","useImperativeHandle","focus","current","blur","activeElement","document","_jsx","jsx","_jsxs","CheckboxRadioContext","Provider","isFocusRingShown","CheckboxControl","onChange","onKeyUp","isChecked","InlineUserAssistance","isRequiredShown","requiredAlignment"],"mappings":"mzDAmFa,MAAAA,EAAWC,EAAUA,YAChC,EAEI,mBAAoBC,EACpBC,gBACAC,aACAC,iBACAC,iBACAC,WAAYC,EACZC,WAAYC,EACZC,cAAa,EACbC,WACAC,WACAC,sBAAuBC,EACvBC,MAAOC,EACPC,SACAC,YAEFC,EAA4B,QAE5B,MACEb,WAAYc,EACZZ,WAAYa,EACZR,sBAAuBS,GACrBC,EAAAA,iBAEEC,EAAcC,SAAyB,MACvCC,EAAKC,EAAAA,QACLC,EAAcC,YAAUZ,GACxBa,EAAWb,EAAS,GAAGA,gCAAkCc,EAGzDzB,EAAaC,GAAkBa,EAC/BZ,EAAaC,GAAkBY,EAC/BR,EAAwBC,GAA6BQ,EAGrDU,GAA2B1B,EAC3B2B,EAAaD,EAA0B,GAAGN,mBAAiBK,EAC3DG,EAAkBF,EACpBG,IAAM,CAACF,EAAYhC,IACnBA,EAEEmC,EAAkBC,eACrBC,IAEC,MAAMC,IAAEA,GAAQD,EACVE,OAAiBT,IAARQ,EAEf,GAAIC,GAAkB,MAARD,EACZ,OAGF,MAAME,EAAQH,EAAEI,OAGV3B,EAAQyB,GAAUC,EAAME,QAAUF,EAAME,QACxCC,IAAkB5B,EAEpB4B,IAAkB7B,GACpBH,EAAS,CACPG,QACA6B,iBAEH,GAEH,CAAChC,EAAUI,IAgBb,OAbA6B,EAAmBA,oBAAC1B,GAAK,KAAO,CAC9B2B,MAAO,MACJxC,GAAckB,EAAYuB,SAASD,OAAO,EAE7CE,KAAM,KACJ,MAAMC,EAAgBC,SAASD,cAC/BzB,EAAYuB,UAAYE,GAAiBA,EAAcD,MAAM,MAQ/DG,EAASC,IAAA,MAAA,IAAAxB,EACPV,SAAAmC,OAACC,EAAAA,qBAAqBC,SAAQ,CAACxC,MAAO,CAAEyC,kBAAmBlD,GAAYY,SAAA,CACrEiC,EAAAA,IAACM,EAAAA,gBACK,IAAEnD,GAAeE,EAKjB,CAAA,EAJA,CACEkD,SAAUtB,EACVuB,QAASvB,GAGG,mBAAAF,EAClBhC,cAAeA,EACfC,WAAYA,EACZC,eAAgBA,EAChBC,eAAgBA,EAChBuD,UAAW5C,EACXV,WAAYA,EACZE,WAAYA,EACZE,WAAYA,EACZS,IAAKK,EACJN,SAAAA,IAEFc,EACCmB,EAACC,IAAAS,uBACC,CAAAnC,GAAIO,EACJ6B,iBAAkBtD,KAAgBE,IAAeM,EACjD+C,kBAAkB,QAClBpD,SAAUA,EACVE,sBAAiD,WAA1BA,EAAqC,SAAW,YACvEI,OAAQa,IAEkB,WAA1BjB,OAAqCkB,EAGvCoB,EAAAA,IAACU,EAAoBA,qBAAA,CAAChD,sBAAsB,YAAYI,OAAQa,QAItE"}