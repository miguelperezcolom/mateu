{"version":3,"file":"LoadMoreCollection-3ac9e69e.js","sources":["../../src/PRIVATE_LoadMoreCollection/LoadMoreCollection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Fragment } from 'preact';\nimport { ItemContext } from '../UNSAFE_Collection';\nimport { Collection } from '../PRIVATE_Collection';\nimport { useViewportIntersect, ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';\n\n/**\n * Props for the LoadMoreCollection component\n */\ntype Props<D> = {\n  /**\n   * A DataState object that provide information including data and metadata to the LoadMoreCollection.\n   */\n  data: D[] | null;\n\n  /**\n   * Renderer callback used to render each item\n   */\n  children: (context: ItemContext<D>) => ComponentChildren;\n\n  /**\n   * Viewport configuration including specifying the element which is used to determine what range\n   * of data to render\n   */\n  viewportConfig: ViewportConfig;\n\n  /**\n   * Whether there are still more data to load.  Internally, LoadMoreCollection will render the load\n   * more indicator at the bottom if this is true\n   */\n  hasMore: boolean;\n\n  /**\n   * Callback function to handle when user scrolls to the end of the component and there are more items to load.\n   * The function should update data prop on the component to include the next set of items fetched.\n   */\n  onLoadMore: () => void;\n\n  /**\n   * Optionally specify the custom load more indicator\n   */\n  loadMoreIndicator?: ComponentChildren;\n\n  /**\n   * Optionally provide the suggestion indicator sparkle\n   */\n  suggestions?: ComponentChildren;\n\n  /**\n   * Optionally specify how far in pixel from the bottom should load more occurs\n   */\n  loadMoreThreshold?: number;\n};\n\nexport const LOADMORE_STYLE_CLASS = 'oj-collection-loadmore';\n\nconst DEFAULT_MARGIN = 1;\nconst LOAD_MORE_SELECTOR = `.${LOADMORE_STYLE_CLASS}`;\n\n/**\n * Component that only render items in the specified viewport.\n * @param props\n */\nexport function LoadMoreCollection<D>({\n  data,\n  children,\n  viewportConfig,\n  hasMore,\n  onLoadMore,\n  loadMoreIndicator,\n  suggestions,\n  loadMoreThreshold = DEFAULT_MARGIN\n}: Props<D>) {\n  // detect if viewport has changed and it needs to re-render based on a new range\n  useViewportIntersect(\n    viewportConfig,\n    Math.max(loadMoreThreshold, DEFAULT_MARGIN),\n    0,\n    LOAD_MORE_SELECTOR,\n    () => {\n      if (data) {\n        onLoadMore();\n      }\n    }\n  );\n\n  // if DataState is invalid (including not specified), just render blank\n  if (!data) {\n    return <div />;\n  }\n\n  // might need to support elementType prop in the future to allow customization of what\n  // type of element to render for the root\n  return (\n    <Fragment>\n      {suggestions}\n      <Collection items={data}>{children}</Collection>\n      {hasMore && loadMoreIndicator}\n    </Fragment>\n  );\n}\n"],"names":["LOADMORE_STYLE_CLASS","LOAD_MORE_SELECTOR","data","children","viewportConfig","hasMore","onLoadMore","loadMoreIndicator","suggestions","loadMoreThreshold","useViewportIntersect","Math","max","_jsxs","Fragment","_jsx","jsx","Collection","items"],"mappings":"6IA4Da,MAAAA,EAAuB,yBAG9BC,EAAqB,IAAID,kDAMzB,UAAgCE,KACpCA,EAAIC,SACJA,EAAQC,eACRA,EAAcC,QACdA,EAAOC,WACPA,EAAUC,kBACVA,EAAiBC,YACjBA,EAAWC,kBACXA,EAfqB,IA+BrB,OAbAC,uBACEN,EACAO,KAAKC,IAAIH,EApBU,GAqBnB,EACAR,GACA,KACMC,GACFI,GACD,IAKAJ,EAOHW,EAAAA,KAACC,EAAAA,SAAQ,CAAAX,SAAA,CACNK,EACDO,EAAAC,IAACC,aAAW,CAAAC,MAAOhB,EAAIC,SAAGA,IACzBE,GAAWE,KATPQ,eAYX"}