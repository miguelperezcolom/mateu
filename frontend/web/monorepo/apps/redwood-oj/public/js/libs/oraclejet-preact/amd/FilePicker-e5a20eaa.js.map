{"version":3,"file":"FilePicker-e5a20eaa.js","sources":["../../src/UNSAFE_FilePicker/filePickerUtils.ts","../../src/UNSAFE_FilePicker/postValidationUtils.tsx","../../src/UNSAFE_FilePicker/useFilePickerElement.tsx","../../src/UNSAFE_FilePicker/FilePickerDefaultTriggerContent.tsx","../../src/UNSAFE_FilePicker/FilePicker.tsx"],"sourcesContent":["import { ComponentMessageItem } from '#UNSAFE_ComponentMessage';\nimport { sizeToCSS } from '#utils/UNSAFE_size';\nimport { trim } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport { BundleType } from '#resources/nls/bundle';\nimport { FilePicker } from './FilePicker';\nimport { JSX, ComponentProps } from 'preact';\n\ntype FilePickerProps = ComponentProps<typeof FilePicker>;\n\n/**\n * Returns the aria label\n */\ntype AriaLabelProps = {\n  ariaLabel: FilePickerProps['aria-label'];\n  isDisabled: FilePickerProps['isDisabled'];\n  translations: BundleType;\n  primaryText?: FilePickerProps['primaryText'];\n  secondaryText?: FilePickerProps['secondaryText'];\n  selectionMode?: FilePickerProps['selectionMode'];\n};\nexport const getAriaLabel = ({\n  ariaLabel,\n  isDisabled,\n  translations,\n  primaryText,\n  secondaryText,\n  selectionMode\n}: AriaLabelProps) => {\n  return ariaLabel\n    ? ariaLabel\n    : `${isDisabled ? '' : translations.filePicker_addFiles() + '. '}${getPrimaryText(\n        primaryText,\n        translations\n      )}. ${getSecondaryText(secondaryText, translations, selectionMode)}`;\n};\n\n/**\n * Returns the styles of the file picker\n */\nexport const getStyles = (width: FilePickerProps['width'], height: FilePickerProps['height']) => {\n  const dimStyles: JSX.CSSProperties = {\n    width: width ? sizeToCSS(width) : undefined,\n    height: height ? sizeToCSS(height) : undefined\n  };\n  return dimStyles;\n};\n\n/**\n * Returns the primary text\n */\nexport const getPrimaryText = (\n  primaryText: FilePickerProps['primaryText'],\n  translations: BundleType\n) => {\n  return primaryText ? primaryText : translations.filePicker_dropzonePrimaryText();\n};\n\n/**\n * Returns the secondary text text\n */\nexport const getSecondaryText = (\n  secondaryText: FilePickerProps['secondaryText'],\n  translations: BundleType,\n  selectionMode: FilePickerProps['selectionMode']\n) => {\n  const defaultSecondaryText =\n    selectionMode === 'multiple'\n      ? translations.filePicker_dropzoneSecondaryTextMultiple()\n      : translations.filePicker_dropzoneSecondaryText();\n  return secondaryText ? secondaryText : defaultSecondaryText;\n};\n\n/**\n * Takes in a list of files and returns a list of accepted files and\n * a list of rejected files based on file type\n */\nexport const validateTypes = (\n  files: FileList,\n  accept: FilePickerProps['accept'],\n  translations: BundleType\n) => {\n  const accepted = [];\n  const rejected = [];\n  let file: File;\n  let type: string;\n  if (files) {\n    for (let i = 0; i < files.length; i++) {\n      file = files[i];\n      const name = file.name;\n      type = translations.filePicker_unknownFileTypeUploadError();\n      if (name) {\n        const nameSplit = name.split('.');\n        type = nameSplit.length > 1 ? '.' + nameSplit.pop() : type;\n      }\n      type = file.type ? file.type : type;\n      // If type isn't already in one of the lists, add it\n      if (accepted.indexOf(type) === -1 && rejected.indexOf(type) === -1) {\n        if (_acceptFile(file, accept)) {\n          accepted.push(type);\n        } else {\n          rejected.push(type);\n        }\n      }\n    }\n  }\n  return { accepted, rejected };\n};\n\n/**\n * Creates a file list\n */\nexport const createFileList = (origList: FileList | DataTransferItemList) => {\n  const descriptor: Record<string | number, PropertyDescriptor> = {\n    length: { value: origList.length },\n    item: {\n      value(index: number): File {\n        return (this as unknown as FileList)[index];\n      }\n    }\n  };\n  for (let i = 0; i < origList.length; i++) {\n    descriptor[i] = { value: origList[i], enumerable: true };\n  }\n\n  return Object.create(FileList.prototype, descriptor);\n};\n\n/**\n * Returns false if selected multiple files when in single file selection mode\n */\nexport const validateSelectionMode = (\n  files: FileList,\n  selectionMode: FilePickerProps['selectionMode']\n) => {\n  return selectionMode !== 'single' || files.length === 1;\n};\n\n/**\n * Returns the correct message if mime type validation has failed\n */\nexport const getMimeTypeValidationMessages = (\n  rejected: Array<string>,\n  translations: BundleType\n): ComponentMessageItem[] => {\n  const messages: ComponentMessageItem[] = [];\n  if (rejected.length === 1) {\n    messages.push({\n      severity: 'error',\n      summary: translations.filePicker_singleTypeUploadError({\n        fileType: rejected[0]\n      })\n    });\n  } else {\n    messages.push({\n      severity: 'error',\n      summary: translations.filePicker_multipleFileTypeUploadError({\n        fileTypes: rejected.join(translations.plural_separator())\n      })\n    });\n  }\n  return messages;\n};\n\n/**\n * Returns true if file passes mimetype validation\n */\nconst _acceptFile = (file: File, accept: FilePickerProps['accept']) => {\n  const acceptProp = accept;\n  if (!acceptProp || acceptProp.length === 0 || !file) {\n    return true;\n  }\n\n  let fileAccept;\n  for (let i = 0; i < acceptProp.length; i++) {\n    fileAccept = trim(acceptProp[i]) as string;\n    if (!fileAccept) {\n      return true;\n    } else if (fileAccept.startsWith('.', 0)) {\n      // when dragover, only MIME type is available, file name is undefined\n      // to lowerCase is to make the string comparison case insensitive\n      if (!file.name || (file.name && file.name.toLowerCase().endsWith(fileAccept.toLowerCase()))) {\n        return true;\n      }\n    } else if (!file.type) {\n      return false;\n    } else if (fileAccept === 'image/*') {\n      if (file.type.startsWith('image/', 0)) {\n        return true;\n      }\n    } else if (fileAccept === 'video/*') {\n      if (file.type.startsWith('video/', 0)) {\n        return true;\n      }\n    } else if (fileAccept === 'audio/*') {\n      if (file.type.startsWith('audio/', 0)) {\n        return true;\n      }\n    } else if (file.type === fileAccept) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ComponentMessageItem } from '#UNSAFE_ComponentMessage';\n\nimport { createFileList } from './filePickerUtils';\nimport { RejectDetail, CommitDetail } from './FilePicker';\n\n/**\n * Calls the onReject callback when invalid files are selected.\n * For invalid dragged files, this function will return a promise resolver that\n * should be called when the invalid files are no longer dragged over the filepicker.\n */\nexport const fireRejectAction = (\n  messages: ComponentMessageItem[],\n  isDrag: boolean,\n  onReject?: (detail: RejectDetail) => void\n) => {\n  let resolver;\n  const dragPromise = isDrag\n    ? new Promise<void>((resolve) => {\n        resolver = resolve;\n      })\n    : null;\n\n  onReject?.({\n    messages,\n    until: dragPromise\n  });\n  return resolver;\n};\n\n/**\n * Calls the onCommit callback when all files are valid.\n */\nexport const handleFilesAdded = (files: FileList, onCommit?: (detail: CommitDetail) => void) => {\n  // Bug 28503874 - filepicker: filelist cleared after the handler returns\n  // Note: the parameter \"files\" is a direct reference to the embedded Input element's property\n  // which could be reset or changed.\n  // we need to return a copy of FileList just in case apps hold on to a reference to FileList\n  const list = createFileList(files);\n  onCommit?.({\n    files: list\n  });\n};\n","import { pickFiles } from '#utils/UNSAFE_filePickerUtils';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { ComponentMessageItem } from '#UNSAFE_ComponentMessage';\nimport { BundleType } from '#resources/nls/bundle';\n\nimport { FilePicker, CommitDetail, RejectDetail } from './FilePicker';\nimport {\n  validateTypes,\n  getMimeTypeValidationMessages,\n  createFileList,\n  validateSelectionMode\n} from './filePickerUtils';\nimport { fireRejectAction, handleFilesAdded } from './postValidationUtils';\n\nimport { RefObject, ComponentProps } from 'preact';\nimport { useRef, StateUpdater, Dispatch } from 'preact/hooks';\n\ntype FilePickerProps = ComponentProps<typeof FilePicker>;\n\ntype FilePickerElementProps = FilePickerProps & {\n  translations: BundleType;\n};\n\n/**\n * The file picker helper method for non-disabled filepickers.\n */\nexport const useFilepickerElementHelper = (\n  props: FilePickerElementProps,\n  rootRef: RefObject<HTMLDivElement>,\n  setValidity?: Dispatch<StateUpdater<'NA' | 'valid' | 'invalid'>>\n) => {\n  const { callback, validation } = clickCallbackUtils(props);\n  const { pressProps } = usePress(callback);\n\n  const dragAndDropProps = useDragAndDropEvents(\n    props.accept,\n    props.selectionMode,\n    fireRejectAction,\n    handleFilesAdded,\n    rootRef,\n    props.translations,\n    props.onCommit,\n    props.onReject,\n    setValidity\n  );\n  return {\n    validation,\n    dragAndDropProps,\n    pressProps\n  };\n};\n\ntype ClickProps = {\n  accept?: FilePickerProps['accept'];\n  capture?: FilePickerProps['capture'];\n  selectionMode?: FilePickerProps['selectionMode'];\n  onCommit?: FilePickerProps['onCommit'];\n  onReject?: FilePickerProps['onReject'];\n  translations: BundleType;\n};\n\nconst clickCallbackUtils = (props: ClickProps) => {\n  /**\n   * Callback function when the filepicker is clicked.\n   */\n  const handleSelectingFiles = (event: Event) => {\n    // Bug 27775173 - within firefox browser cannot tab past filepicker without file selector\n    // window opening\n    // only launching the file picker if click or 'Enter' was pressed\n    if (\n      event.type === 'click' ||\n      (event.type === 'keyup' && (event as KeyboardEvent).code === 'Enter')\n    ) {\n      // Bug 26907138 - form submit event is triggered when the file upload button is clicked\n      event.preventDefault();\n\n      pickFiles(_handleClickValidation, {\n        accept: props.accept,\n        selectionMode: props.selectionMode ?? 'multiple',\n        capture: props.capture ?? 'none'\n      });\n    }\n  };\n\n  /**\n   * Handles file validation from selecting files through the file dialog\n   */\n  const _handleClickValidation = (files: FileList) => {\n    if (files.length > 0) {\n      const rejected = validateTypes(files, props.accept, props.translations).rejected;\n      if (rejected.length > 0) {\n        fireRejectAction(\n          getMimeTypeValidationMessages(rejected, props.translations),\n          false,\n          props.onReject\n        );\n      } else {\n        handleFilesAdded(files, props.onCommit);\n      }\n    }\n  };\n  return {\n    callback: handleSelectingFiles,\n    validation: _handleClickValidation\n  };\n};\n\nconst useDragAndDropEvents = (\n  accept: FilePickerProps['accept'],\n  selectionMode: FilePickerProps['selectionMode'],\n  fireRejectAction: (\n    messages: ComponentMessageItem[],\n    isDrag: boolean,\n    onReject?: (detail: RejectDetail) => void\n  ) => (() => void) | undefined,\n  handleFilesAdded: (files: FileList, onCommit?: (detail: CommitDetail) => void) => void,\n  rootRef: RefObject<HTMLDivElement>,\n  translations: BundleType,\n  onCommit?: (detail: CommitDetail) => void,\n  onReject?: (detail: RejectDetail) => void,\n  // setValidity not set for custom filepicker\n  setValidity?: Dispatch<StateUpdater<'NA' | 'valid' | 'invalid'>>\n) => {\n  const inDropZone = useRef<boolean>(false);\n  const isDroppable = useRef<boolean>(false);\n  const dragPromiseResolver = useRef<() => void>();\n\n  /**\n   * Drag Enter handler called when a dragged file enter the filepicker dropzone\n   */\n  const _handleDragEnter = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  /**\n   * Drag over handler called when a file is dragged over the filepicker\n   */\n  const _handleDragOver = (event: DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (inDropZone.current) {\n      return;\n    }\n\n    const browser = getClientHints().browser;\n    inDropZone.current = true;\n    isDroppable.current = true;\n    // Safari doesn't provide the data for the files on drag over so validation cannot be done until drop\n    if (browser !== 'safari') {\n      if (!event.dataTransfer) {\n        return;\n      }\n      const files = createFileList(event.dataTransfer.items);\n      let messages = [] as ComponentMessageItem[];\n      const selectionModeValid = validateSelectionMode(files, selectionMode);\n      const droppable = validateTypes(files, accept, translations);\n      if (selectionModeValid && droppable.rejected.length === 0) {\n        // validation passes\n        setValidity?.('valid');\n      } else {\n        isDroppable.current = false;\n        if (selectionModeValid) {\n          // mimetype Validation fails\n          messages = getMimeTypeValidationMessages(droppable.rejected, translations);\n        } else {\n          // selected multiple files in single selection mode\n          messages.push({\n            severity: 'error',\n            summary: translations.filePicker_singleFileUploadError()\n          });\n        }\n        setValidity?.('invalid');\n        dragPromiseResolver.current = fireRejectAction(messages, true, onReject);\n      }\n    } else {\n      setValidity?.('valid');\n    }\n  };\n\n  /**\n   * Drag leave handler is called when the dragged file leaves the filepicker dropzone\n   */\n  const _handleDragLeave = (event: DragEvent, mimeTypeDropFail = false) => {\n    if (!inDropZone.current) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    if (!rootRef.current?.contains(event.relatedTarget as Node)) {\n      inDropZone.current = false;\n      setValidity?.('NA');\n      // There's only a promise if validation failed on dragover\n      if (!isDroppable.current && !mimeTypeDropFail) {\n        dragPromiseResolver.current?.();\n      }\n    }\n  };\n\n  /**\n   * Drop file handler is called when a file is dropped on the filepicker dropzone\n   */\n  const _handleFileDrop = (event: DragEvent) => {\n    if (inDropZone.current) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!event.dataTransfer) {\n        inDropZone.current = false;\n        return;\n      }\n      const files = createFileList(event.dataTransfer.files);\n      let mimeTypeDropFail = false;\n      if (isDroppable.current) {\n        let messages: ComponentMessageItem[] = [];\n        if (validateSelectionMode(files, selectionMode)) {\n          const droppable = validateTypes(files, accept, translations);\n          if (droppable.rejected.length > 0) {\n            // mimetype Validation fails\n            messages = getMimeTypeValidationMessages(droppable.rejected, translations);\n            mimeTypeDropFail = true;\n          }\n        } else {\n          messages.push({\n            severity: 'error',\n            summary: translations.filePicker_singleFileUploadError()\n          });\n        }\n        if (messages.length > 0) {\n          isDroppable.current = false;\n          fireRejectAction(messages, false, onReject);\n        }\n        if (isDroppable.current) {\n          handleFilesAdded(files, onCommit);\n        }\n      }\n      _handleDragLeave(event, mimeTypeDropFail);\n    }\n  };\n\n  return {\n    onDragEnter: _handleDragEnter,\n    onDragOver: _handleDragOver,\n    onDragLeave: _handleDragLeave,\n    onDrop: _handleFileDrop\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BundleType } from '#resources/nls/bundle';\nimport { FilePicker } from './FilePicker';\nimport { ComponentProps } from 'preact';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { FilePickerStyles } from './themes/FilePickerStyles.css';\nimport { FilePickerRedwoodTheme } from './themes/redwood/FilePickerTheme';\nimport { getPrimaryText, getSecondaryText } from './filePickerUtils';\n\ntype FilePickerProps = ComponentProps<typeof FilePicker>;\n\n/**\n * Default content of the file picker\n */\nexport const FilePickerDefaultTriggerContent = ({\n  isDisabled,\n  primaryText,\n  secondaryText,\n  translations,\n  selectionMode\n}: Pick<FilePickerProps, 'isDisabled' | 'primaryText' | 'secondaryText' | 'selectionMode'> & {\n  translations: BundleType;\n}) => {\n  const {\n    styles: {\n      disabledPrimaryTextStyle,\n      primaryTextStyle,\n      disabledSecondaryTextStyle,\n      secondaryTextStyle\n    }\n  } = useComponentTheme<never, FilePickerStyles>(FilePickerRedwoodTheme);\n  return (\n    <>\n      <div class={isDisabled ? disabledPrimaryTextStyle : primaryTextStyle}>\n        {getPrimaryText(primaryText, translations)}\n      </div>\n      <div class={isDisabled ? disabledSecondaryTextStyle : secondaryTextStyle}>\n        {getSecondaryText(secondaryText, translations, selectionMode)}\n      </div>\n    </>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { Size } from '#utils/UNSAFE_size';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { ComponentMessageItem } from '#UNSAFE_ComponentMessage';\n\nimport { getAriaLabel, getStyles } from './filePickerUtils';\nimport { useFilepickerElementHelper } from './useFilePickerElement';\n\nimport { ComponentChildren } from 'preact';\nimport { useState, useRef, useImperativeHandle } from 'preact/hooks';\nimport { ForwardedRef } from 'preact/compat';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { FilePickerStyles, FilePickerVariantOptions } from './themes/FilePickerStyles.css';\nimport { useInteractionStyle } from '#hooks/UNSAFE_useInteractionStyle';\nimport { FilePickerRedwoodTheme } from './themes/redwood/FilePickerTheme';\nimport { FilePickerDefaultTriggerContent } from './FilePickerDefaultTriggerContent';\n// TODO: Andy's comment below JET-53230\n// The FilePicker supports two very different use cases: default and custom file pickers. Should we consider dropping the wrapper and instead exporting the two underlying components (with the appropriate property types) directly?\n// If not, perhaps we should look into defining the Props type as a discriminated union such that primaryText/secondaryText props are only valid when children is not specified?\n\ntype Props = TestIdProps & {\n  /**\n   * An array of strings of allowed MIME types or file extensions that can be uploaded; this is unlike the accept attribute of the html &lt;input> element that accepts a simple comma-delimited string. If not specified, all file types will be accepted.\n   * <p>Note: If accept is specified, files with empty string type will be rejected if no match found in the \"accept\" value.   */\n  accept?: string[];\n\n  /**\n   * Specifies the preferred facing mode for the device's\n   * <a href=\"https://www.w3.org/TR/html-media-capture/#dom-htmlinputelement-capture\">media capture</a> mechanism;\n   * This is most often used to provide direct camera access on mobile devices.  Note that the accept attribute must\n   * be specified and have an associated capture control type (e.g.[\"image/*\"]) for the capture attribute to take effect.  Support may vary by browser.\n   *\n   */\n  capture?: 'user' | 'environment' | 'implementation' | 'none';\n\n  /**\n   * Disables the filepicker if set to <code class=\"prettyprint\">true</code>.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * The primary text for the default file picker.\n   */\n  primaryText?: string;\n\n  /**\n   * The secondary text for the default file picker.\n   */\n  secondaryText?: string;\n  /**\n   * Whether to allow single or multiple file selection.\n   */\n  selectionMode?: 'multiple' | 'single';\n\n  /**\n   * A label to be used for accessibility purposes. This will be used for the aria-label of the DOM element.\n   */\n  'aria-label'?: string;\n\n  /**\n   * Property that triggers a callback immediately when a set of files have been committed\n   */\n  onCommit?: (detail: CommitDetail) => void;\n\n  /**\n   * Property that triggers a callback immediately when a set of files have been rejected\n   */\n  onReject?: (detail: RejectDetail) => void;\n\n  /**\n   * Width of the File Picker\n   */\n  width?: Size;\n\n  /**\n   * Height of the File Picker\n   */\n  height?: Size;\n\n  /**\n   * If the children is provided, its contents replace the default filepicker.  Filepicker will still set role and aria-label, but\n   * the application is responsible for setting the tabindex.\n   */\n  children?: ComponentChildren;\n};\n\nexport type CommitDetail = {\n  files: FileList;\n};\n\nexport type RejectDetail = {\n  /**\n   * Messages that should be displayed to the user (e.g. in an oj-messages component) describing rejected files.\n   */\n  messages: ComponentMessageItem[];\n\n  /**\n   * This property may be populated with a Promise to provide short-term feedback during a user interaction (typically drag and drop); the feedback should be cleared upon the resolution of this Promise.\n   */\n  until: Promise<void> | null;\n};\n\n/**\n * A file picker displays a clickable dropzone for selecting files from the device storage.\n */\nexport function FilePicker({\n  capture = 'none',\n  isDisabled = false,\n  selectionMode = 'multiple',\n  children,\n  ...otherProps\n}: Props) {\n  // this ref is added only for testing purposes.  Allows the test to directly\n  // call certain functions that should be tested\n  const testHandlersRef = (otherProps as any).__testHandlerSymbol;\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const props = { capture, selectionMode, translations, ...otherProps };\n  if (isDisabled) {\n    return <DisabledFilePicker {...props}>{children}</DisabledFilePicker>;\n  }\n  return children ? (\n    <CustomFilePicker testHandlersRef={testHandlersRef} {...props}>\n      {children}\n    </CustomFilePicker>\n  ) : (\n    <DefaultFilePicker testHandlersRef={testHandlersRef} {...props} />\n  );\n}\n\ntype FilePickerProps = Props & {\n  translations: BundleType;\n};\n\ntype DndProps = {\n  onDragEnter: (event: Event) => void;\n  onDragOver: (event: DragEvent) => void;\n  onDragLeave: (event: DragEvent, mimeTypeDropFail: boolean) => void;\n  onDrop: (event: DragEvent) => void;\n};\n\nexport type TestHandlersRef = ForwardedRef<\n  DndProps & {\n    onClickSelected: (files: FileList) => void;\n  }\n>;\n\ntype TestHandlerProps = {\n  // this ref is populated only in tests\n  testHandlersRef?: TestHandlersRef;\n};\n\ntype DefaultProps = Omit<FilePickerProps, 'isDisabled' | 'children'> & TestHandlerProps;\n\n/**\n * The default file picker element.\n */\nconst DefaultFilePicker = (props: DefaultProps) => {\n  const testIdProps = useTestId(props.testId);\n  const { interactionProps, applyActiveStyle, applyHoverStyle, applyPseudoHoverStyle } =\n    useInteractionStyle({ isDisabled: false });\n  const {\n    classes,\n    styles: {\n      maxWidth,\n      inner,\n      activeStyle,\n      innerNeedsEventsHoverStyle,\n      innerPseudoHoverStyle,\n      invalidDrop,\n      validDrop\n    }\n  } = useComponentTheme<FilePickerVariantOptions, FilePickerStyles>(FilePickerRedwoodTheme, {\n    hoveredState: applyHoverStyle ? 'isHover' : undefined,\n    pseudoHoveredState: applyPseudoHoverStyle ? 'isPseudoHover' : undefined\n  });\n  const innerInteractiveClasses = [\n    applyActiveStyle ? activeStyle : '',\n    applyHoverStyle ? innerNeedsEventsHoverStyle : '',\n    applyPseudoHoverStyle ? innerPseudoHoverStyle : ''\n  ];\n  const [validity, setValidity] = useState<'NA' | 'valid' | 'invalid'>('NA');\n\n  // class added to change bg/border color based on if file is valid on drag and drop\n  const validityClass =\n    validity === 'valid' ? validDrop : validity === 'invalid' ? invalidDrop : undefined;\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  const { validation, dragAndDropProps, pressProps } = useFilepickerElementHelper(\n    props,\n    rootRef,\n    setValidity\n  );\n  const mergedEventProps = mergeProps(pressProps, interactionProps);\n\n  // These are backdoor handles that are used for testing purposes only\n  useSetupTestRef(dragAndDropProps, validation, props.testHandlersRef || null);\n  const wrapperClasses = classNames([classes, props.width === undefined && maxWidth]);\n  const { isTabbable } = useTabbableMode();\n  const { primaryText, secondaryText, translations, selectionMode, width, height } = props;\n  return (\n    <div\n      {...testIdProps}\n      {...mergedEventProps}\n      class={wrapperClasses}\n      tabIndex={isTabbable ? 0 : -1}\n      role=\"button\"\n      aria-label={getAriaLabel({\n        ariaLabel: props['aria-label'],\n        isDisabled: false,\n        translations,\n        primaryText,\n        secondaryText,\n        selectionMode\n      })}\n      ref={rootRef}\n      style={getStyles(width, height)}>\n      <div\n        class={classNames([inner, validityClass, ...innerInteractiveClasses])}\n        {...dragAndDropProps}>\n        <FilePickerDefaultTriggerContent {...props} isDisabled={false} />\n      </div>\n    </div>\n  );\n};\n\ntype DisabledProps = Omit<\n  FilePickerProps,\n  'accept' | 'capture' | 'onCommit' | 'onReject' | 'isDisabled'\n>;\n\n/**\n * The disabled file picker element.\n */\nconst DisabledFilePicker = ({\n  children,\n  primaryText,\n  secondaryText,\n  translations,\n  width,\n  height,\n  testId,\n  ...props\n}: DisabledProps) => {\n  const testIdProps = useTestId(testId);\n  const {\n    classes,\n    styles: { maxWidth, inner, noChildrenMargin }\n  } = useComponentTheme<FilePickerVariantOptions, FilePickerStyles>(FilePickerRedwoodTheme, {\n    disabledState: 'isDisabled'\n  });\n  return (\n    <div\n      class={classNames([classes, inner, noChildrenMargin, width === undefined && maxWidth])}\n      role=\"button\"\n      aria-label={getAriaLabel({\n        ariaLabel: props['aria-label'],\n        isDisabled: true,\n        translations,\n        primaryText,\n        secondaryText\n      })}\n      aria-hidden=\"true\"\n      {...testIdProps}\n      style={getStyles(width, height)}>\n      {children || (\n        <FilePickerDefaultTriggerContent\n          secondaryText={secondaryText}\n          primaryText={primaryText}\n          {...props}\n          isDisabled={true}\n          translations={translations}\n        />\n      )}\n    </div>\n  );\n};\n\ntype CustomProps = Omit<FilePickerProps, 'isDisabled' | 'primaryText' | 'secondaryText'> &\n  TestHandlerProps;\n\n/**\n * The custom file picker element.\n */\nconst CustomFilePicker = (props: CustomProps) => {\n  const testIdProps = useTestId(props.testId);\n  const { interactionProps, applyHoverStyle, applyPseudoHoverStyle } = useInteractionStyle({\n    isDisabled: false\n  });\n  const {\n    classes,\n    styles: { maxWidth, noChildrenMargin }\n  } = useComponentTheme<FilePickerVariantOptions, FilePickerStyles>(FilePickerRedwoodTheme, {\n    hoveredState: applyHoverStyle ? 'isHover' : undefined,\n    pseudoHoveredState: applyPseudoHoverStyle ? 'isPseudoHover' : undefined\n  });\n  const rootRef = useRef<HTMLDivElement>(null);\n  const { validation, dragAndDropProps, pressProps } = useFilepickerElementHelper(props, rootRef);\n  const mergedEventProps = mergeProps(pressProps, dragAndDropProps, interactionProps);\n\n  // These are backdoor handles that are used for testing purposes only\n  useSetupTestRef(dragAndDropProps, validation, props.testHandlersRef || null);\n\n  const wrapperClasses = classNames([\n    classes,\n    noChildrenMargin,\n    props.width === undefined && maxWidth\n  ]);\n  const { translations, selectionMode } = props;\n  const { isTabbable } = useTabbableMode();\n  return (\n    <div\n      class={classNames([wrapperClasses])}\n      tabIndex={isTabbable ? undefined : -1}\n      role=\"button\"\n      aria-label={getAriaLabel({\n        ariaLabel: props['aria-label'],\n        isDisabled: false,\n        translations,\n        selectionMode\n      })}\n      ref={rootRef}\n      style={getStyles(props.width, props.height)}\n      {...testIdProps}\n      {...mergedEventProps}>\n      {props.children}\n    </div>\n  );\n};\n\n/**\n * Only called for testing purposes, sets up the test ref that\n * allows for backdoor access to certain methods\n */\nconst useSetupTestRef = (\n  dragAndDropProps: DndProps,\n  validation: (files: FileList) => void,\n  testHandlersRef: TestHandlersRef\n) => {\n  useImperativeHandle(testHandlersRef, () => ({\n    onDragEnter: dragAndDropProps.onDragEnter,\n    onDragOver: dragAndDropProps.onDragOver,\n    onDrop: dragAndDropProps.onDrop,\n    onDragLeave: dragAndDropProps.onDragLeave,\n    onClickSelected: validation\n  }));\n};\n"],"names":["getAriaLabel","ariaLabel","isDisabled","translations","primaryText","secondaryText","selectionMode","filePicker_addFiles","getPrimaryText","getSecondaryText","getStyles","width","height","sizeToCSS","undefined","filePicker_dropzonePrimaryText","defaultSecondaryText","filePicker_dropzoneSecondaryTextMultiple","filePicker_dropzoneSecondaryText","validateTypes","files","accept","accepted","rejected","file","type","i","length","name","filePicker_unknownFileTypeUploadError","nameSplit","split","pop","indexOf","_acceptFile","push","createFileList","origList","descriptor","value","item","index","this","enumerable","Object","create","FileList","prototype","validateSelectionMode","getMimeTypeValidationMessages","messages","severity","summary","filePicker_singleTypeUploadError","fileType","filePicker_multipleFileTypeUploadError","fileTypes","join","plural_separator","acceptProp","fileAccept","trim","f","startsWith","toLowerCase","endsWith","fireRejectAction","isDrag","onReject","resolver","dragPromise","Promise","resolve","until","handleFilesAdded","onCommit","list","useFilepickerElementHelper","props","rootRef","setValidity","callback","validation","clickCallbackUtils","pressProps","usePress","dragAndDropProps","useDragAndDropEvents","_handleClickValidation","event","code","preventDefault","pickFiles","capture","inDropZone","useRef","isDroppable","dragPromiseResolver","_handleDragLeave","mimeTypeDropFail","current","stopPropagation","contains","relatedTarget","onDragEnter","onDragOver","browser","getClientHints","dataTransfer","items","selectionModeValid","droppable","filePicker_singleFileUploadError","onDragLeave","onDrop","FilePickerDefaultTriggerContent","styles","disabledPrimaryTextStyle","primaryTextStyle","disabledSecondaryTextStyle","secondaryTextStyle","useComponentTheme","FilePickerRedwoodTheme","_jsxs","_jsx","class","children","DefaultFilePicker","testIdProps","useTestId","testId","interactionProps","applyActiveStyle","applyHoverStyle","applyPseudoHoverStyle","useInteractionStyle","classes","maxWidth","inner","activeStyle","innerNeedsEventsHoverStyle","innerPseudoHoverStyle","invalidDrop","validDrop","hoveredState","pseudoHoveredState","innerInteractiveClasses","validity","useState","validityClass","mergedEventProps","mergeProps","useSetupTestRef","testHandlersRef","wrapperClasses","classNames","isTabbable","useTabbableMode","tabIndex","role","ref","style","jsx","DisabledFilePicker","noChildrenMargin","disabledState","CustomFilePicker","useImperativeHandle","onClickSelected","otherProps","__testHandlerSymbol","useTranslationBundle"],"mappings":"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"}