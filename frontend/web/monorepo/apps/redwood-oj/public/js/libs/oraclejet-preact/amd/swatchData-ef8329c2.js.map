{"version":3,"file":"swatchData-ef8329c2.js","sources":["../../src/utils/UNSAFE_color/color.ts","../../src/utils/UNSAFE_color/swatchData.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { getNamedColor } from '../PRIVATE_colorUtils/colorUtils';\nimport { DataType } from 'csstype';\n\nexport type ColorValueHex = `#${string}`;\nexport type ColorValue = DataType.NamedColor | ColorValueHex | 'TRANSPARENT';\n\n/**\n * Convert a color keyword to hex value.\n * If the keyword is not valid, return an empty string.\n * @param value\n * @returns\n */\nfunction convertKeywordToHex(value: string): string {\n  try {\n    return getNamedColor(value);\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Returns true if the value is 'transparent'\n * @param value\n * @returns\n */\nfunction isTransparent(value: string | ColorValue): boolean {\n  if (value && value.length && value.toUpperCase() === 'TRANSPARENT') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Check if the value is a valid named color.\n * @param value\n * @returns\n */\nfunction isNamedColor(value: string): boolean {\n  try {\n    return getNamedColor(value).length > 0;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Parse a color value and return a hex string or 'TRANSPARENT'.\n * ie, 'blue' => '#0000FF'\n * If not valid keyword, returns ''\n * @param value\n * @returns\n */\nexport function parseColorValue(value?: string): string {\n  if (!value) {\n    return '';\n  }\n  value = value.trim();\n  // check for 'transparent' or 'TRANSPARENT' a valid CSS keyword\n  if (isTransparent(value)) {\n    return value;\n  }\n  // check for named color\n  if (isNamedColor(value)) {\n    return convertKeywordToHex(value).toUpperCase();\n  }\n  // check for string '#xxxxxx' with '#' up to 3, 4,  6, 8 hex digits all valid css colors\n  if (/^([#]([0-9A-Fa-f]{3}|[0-9A-Fa-f]{4}|[0-9A-Fa-f]{6}|[0-9A-Fa-f]{8}))$/.test(value)) {\n    return value.toUpperCase();\n  }\n  return '';\n}\n\n/** Get the ColorValue from a string\n */\nexport function getColorValue(value?: string): ColorValue {\n  return parseColorValue(value) as ColorValue;\n}\n\n/**\n * Can convert array to all hex values and 'transparent'\n * as desired.\n * @param palette\n * @returns\n */\nexport function convertPalette(palette: Array<ColorValue>): Array<ColorValue> {\n  return palette.map((x) => getColorValue(x));\n}\n\n/**\n * More 'transparent' to first position\n * @param palette\n * @returns\n */\nexport function sortPalette(palette: Array<ColorValue>): Array<ColorValue> {\n  const uniqueArray = [...new Set(palette)];\n  const p = uniqueArray.map((str) => str?.toLowerCase()) as Array<ColorValue>;\n  const i = p.indexOf('transparent');\n  switch (i) {\n    case 0:\n    case -1:\n      return p;\n    default: {\n      const f = p.filter((str) => str?.toLowerCase() !== 'transparent');\n      return ['transparent', ...f];\n    }\n  }\n}\n\n/**\n * Return true if the color params represent 2 different colors.\n */\nexport const colorsAreDifferent = (\n  c1: ColorValue | undefined,\n  c2: ColorValue | undefined,\n  isExpandable = false\n) => {\n  const c1_empty = !c1 || !c1.length;\n  const c2_empty = !c2 || !c2.length;\n\n  // If both colors are empty, return false.\n  if (c1_empty && c2_empty) {\n    return false;\n  }\n\n  // If one is empty and the other isn't, return true.\n  if ((c1_empty && !c2_empty) || (!c1_empty && c2_empty)) {\n    return true;\n  }\n  if (\n    isExpandable &&\n    getExpandedColorValue(c1 as string, true) !== getExpandedColorValue(c2 as string, true)\n  ) {\n    return true;\n  }\n\n  if (c1 !== c2) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Return true if the color value is a valid hex color or 'TRANSPARENT'\n * Valid values to type include\n * - '#xxxxxx'\n * - '#xxxxxxxx'\n * - 'TRANSPARENT'\n * - 'transparent'\n * - named color (e.g. 'blue', 'red', etc.)\n * @param value\n * @returns\n */\nexport const isValidColorValue = (value: string): boolean => {\n  const rgb = value ? parseColorValue(value) : '';\n  return rgb ? rgb.length === 7 || rgb.length === 9 || isTransparent(rgb) : false;\n};\n\n/**\n * Convert a color value to an 8 digit hex value.\n * If the value is a valid hex color, it will return the value with an alpha channel of 'FF'.\n * If the value is not valid, it will return an empty string.\n * @param value\n * @returns\n */\nexport const getEightDigitHex = (value: ColorValue): ColorValue => {\n  // First check if this is a complete value and return that\n  if (isValidColorValue(value)) {\n    const retVal = getColorValue(value);\n    if (retVal.length === 9) {\n      return retVal;\n    } else if (retVal.length === 7) {\n      return (retVal + 'FF') as ColorValue; // add alpha channel\n    }\n  }\n  return '' as ColorValue; // return empty string for invalid values\n};\n\n/**\n * Convert a color value to an 6 digit hex value.\n * If any other alpha, return empty string.\n * @param value\n * @returns\n */\nexport const getSixDigitHex = (value: ColorValue): ColorValue => {\n  // First check if this is a complete value and return that\n  if (isValidColorValue(value)) {\n    const retVal = getColorValue(value);\n    if (/^([#]([0-9A-Fa-f]{6}))$/.test(retVal)) {\n      return retVal;\n    } else if (/^([#]([0-9A-Fa-f]{8}))$/.test(retVal)) {\n      return retVal.substring(0, 7) as ColorValue;\n    }\n  }\n  return '' as ColorValue; // return empty string for invalid values\n};\n\n/**\n * Returns true if value is an 8 digit hex value\n * @param value\n * @returns\n */\nexport const isEightDigitHex = (value: ColorValue): boolean => {\n  return /^([#]([0-9A-Fa-f]{8}))$/.test(value);\n};\n\n// /**\n//  * Returns true if value is an 6 digit hex value\n//  * @param value\n//  * @returns\n//  */\n// const isSixDigitHex = (value: ColorValue): boolean => {\n//   return (/^([#]([0-9A-Fa-f]{6}))$/.test(value));\n// }\n\n/**\n * Returns the intended color value for a partially specified color value.\n * Can request 8 or 6 digit hex rgb return values.  Note that 'transparent' is\n * always returned unconverted as it is a valid css value and requested to stay\n * untouched for ux reasons.  Finds first valid hex substring and applies\n * heuristics.\n *\n * Returns '' if the value is not valid.\n * @param value\n * @returns\n */\nexport const getExpandedColorValue = (\n  value?: string | ColorValue,\n  hasEightDigitHex = false\n): ColorValue => {\n  if (!value) {\n    return '' as ColorValue;\n  }\n  if (isTransparent(value)) {\n    return value as ColorValue;\n  }\n  // Return eight digit hex results\n  if (hasEightDigitHex) {\n    // First check if this is a complete value and return that\n    if (isValidColorValue(value)) {\n      return getEightDigitHex(getColorValue(value));\n    }\n    // Now implement desired behavior for partially specified color values\n\n    // strip leading hash\n    const nohash = value[0] === '#' ? value.substring(1) : value;\n    // Ux request is to strip all non-hex characters first , upper-case, and then apply heuristics\n    const val = nohash?.match(/[0-9A-Fa-f]+/)?.[0].toUpperCase() ?? '';\n\n    // A -> #AAAAAAFF\n    if (/^([0-9A-F]{1})$/.test(val)) {\n      return ('#' + val + val + val + val + val + val + 'FF') as ColorValue;\n    }\n\n    // AB -> #ABABABFF\n    if (/^([0-9A-F]{2})$/.test(val)) {\n      return ('#' + val[0] + val[1] + val[0] + val[1] + val[0] + val[1] + 'FF') as ColorValue;\n    }\n\n    // ABC -> #AABBCCFF\n    if (/^([0-9A-F]{3})$/.test(val)) {\n      return ('#' + val[0] + val[0] + val[1] + val[1] + val[2] + val[2] + 'FF') as ColorValue;\n    }\n\n    // ABCF -> #AABBCCFF\n    if (/^([0-9A-F]{4})$/.test(val)) {\n      return ('#' +\n        val[0] +\n        val[0] +\n        val[1] +\n        val[1] +\n        val[2] +\n        val[2] +\n        val[3] +\n        val[3]) as ColorValue;\n    }\n\n    // ABCDEF -> #ABCDEFFF\n    if (/^([0-9A-F]{6})$/.test(val)) {\n      return ('#' + val[0] + val[1] + val[2] + val[3] + val[4] + val[5] + 'FF') as ColorValue;\n    }\n\n    // ABCDEFFF -> #ABCDEFFF\n    if (/^([0-9A-F]{8})$/.test(val)) {\n      return ('#' +\n        val[0] +\n        val[1] +\n        val[2] +\n        val[3] +\n        val[4] +\n        val[5] +\n        val[6] +\n        val[7]) as ColorValue;\n    }\n  } else {\n    // 6 digit hex path return\n    // First check if this is a complete value and return that\n    if (isValidColorValue(value)) {\n      return getSixDigitHex(getColorValue(value));\n    }\n\n    // strip leading hash\n    const nohash = value[0] === '#' ? value.substring(1) : value;\n    // Ux request is to strip all non-hex characters first , upper-case, and then apply heuristics\n    const val = nohash?.match(/[0-9A-Fa-f]+/)?.[0].toUpperCase() ?? '';\n\n    // A -> #AAAAAA\n    if (/^([0-9A-F]{1})$/.test(val)) {\n      return ('#' + val + val + val + val + val + val) as ColorValue;\n    }\n\n    // AB -> #ABABAB\n    if (/^([0-9A-F]{2})$/.test(val)) {\n      return ('#' + val[0] + val[1] + val[0] + val[1] + val[0] + val[1]) as ColorValue;\n    }\n\n    // ABC -> #AABBCC\n    if (/^([0-9A-F]{3})$/.test(val)) {\n      return ('#' + val[0] + val[0] + val[1] + val[1] + val[2] + val[2]) as ColorValue;\n    }\n\n    // ABCDEF -> #ABCDEF\n    if (/^([0-9A-F]{6})$/.test(val)) {\n      return ('#' + val[0] + val[1] + val[2] + val[3] + val[4] + val[5]) as ColorValue;\n    }\n  }\n\n  return '' as ColorValue;\n};\n","import { type ColorValue } from './color';\n\n/**\n * unique colormap const\n */\nexport const uniqueColorMap = {\n  transparent: 'transparent',\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faEbd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffE4c4',\n  black: '#000000',\n  blanchedalmond: '#ffEbcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2bE2',\n  brown: '#a52a2a',\n  burlywood: '#dEb887',\n  cadetblue: '#5f9Ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691E',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495Ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#E9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkturquoise: '#00cEd1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dodgerblue: '#1E90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0E68c',\n  lavender: '#E6E6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8E6',\n  lightcoral: '#f08080',\n  lightcyan: '#E0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgreen: '#90EE90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cEfa',\n  lightslategray: '#778899',\n  lightsteelblue: '#b0c4dE',\n  lightyellow: '#ffffE0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0E6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370db',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68EE',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffE4E1',\n  moccasin: '#ffE4b5',\n  navajowhite: '#ffdEad',\n  navy: '#000080',\n  oldlace: '#fdf5E6',\n  olive: '#808000',\n  olivedrab: '#6b8E23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#EEE8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afEEEE',\n  palevioletred: '#db7093',\n  papayawhip: '#ffEfd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169E1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2E8b57',\n  seashell: '#fff5EE',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87cEEb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40E0d0',\n  violet: '#EE82EE',\n  wheat: '#f5dEb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32'\n};\n\nexport const defaultRedwoodNoFillPaletteValues: Array<ColorValue> = [\n  'transparent',\n  '#FFFFFF',\n  '#F4F4F4',\n  '#D5D5D5',\n  '#909090',\n  '#4B4B4B',\n  '#000000',\n  '#E6B0AA',\n  '#EDBB99',\n  '#F9E79F',\n  '#A9DFBF',\n  '#AED6F1',\n  '#D7BDE2',\n  '#F9B3E2',\n  '#CD6155',\n  '#F98C45',\n  '#F4D03F',\n  '#52BE80',\n  '#5DADE2',\n  '#AF7AC5',\n  '#E55FB9',\n  '#81261D',\n  '#853500',\n  '#A3850A',\n  '#19713E',\n  '#246A98',\n  '#6C3E7F',\n  '#932970'\n] as const;\n\nexport const defaultRedwoodPaletteValues: Array<ColorValue> = [\n  '#FFFFFF',\n  '#F4F4F4',\n  '#D5D5D5',\n  '#909090',\n  '#6E6E6E',\n  '#4B4B4B',\n  '#000000',\n  '#E6B0AA',\n  '#EDBB99',\n  '#F9E79F',\n  '#A9DFBF',\n  '#AED6F1',\n  '#D7BDE2',\n  '#F9B3E2',\n  '#CD6155',\n  '#F98C45',\n  '#F4D03F',\n  '#52BE80',\n  '#5DADE2',\n  '#AF7AC5',\n  '#E55FB9',\n  '#81261D',\n  '#853500',\n  '#A3850A',\n  '#19713E',\n  '#246A98',\n  '#6C3E7F',\n  '#932970'\n];\n\nexport type NamedColor = keyof typeof uniqueColorMap;\n\n/**\n * Returns a color definition string from the named color.\n * @param {String} name  The color name.\n * @returns A hex or RGBA color string.\n */\nexport const getNamedColor = (name: string) =>\n  uniqueColorMap[name.trim().toUpperCase() as NamedColor];\n\nexport const uniqueColorValues = Object.values(uniqueColorMap);\n"],"names":["isTransparent","value","length","toUpperCase","parseColorValue","trim","getNamedColor","isNamedColor","convertKeywordToHex","test","getColorValue","isValidColorValue","rgb","getEightDigitHex","retVal","getSixDigitHex","substring","getExpandedColorValue","hasEightDigitHex","nohash","val","match","uniqueColorMap","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Object","values","c1","c2","isExpandable","c1_empty","c2_empty","palette","map","x","p","Set","str","toLowerCase","indexOf","filter"],"mappings":"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"}