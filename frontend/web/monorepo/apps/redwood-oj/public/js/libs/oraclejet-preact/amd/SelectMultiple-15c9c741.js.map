{"version":3,"file":"SelectMultiple-15c9c741.js","sources":["../../src/UNSAFE_SelectMultiple/SelectMultipleDesktopDropdown.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/TextTag.tsx","../../src/UNSAFE_SelectMultiple/TextTagList.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileDropdown.tsx","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport type { PositionData } from '#UNSAFE_Floating';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport type { CollectionRendererProps } from './SelectMultiple.types';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  assistiveText?: string;\n  collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n  collectionRendererContext: CollectionRendererProps<K, D>;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  dropdownRef: RefObject<HTMLDivElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isDropdownAbove: boolean;\n  isEmptyResults: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  label: string;\n  mainFieldRef: RefObject<HTMLDivElement>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  onAddToListAction?: () => void;\n  onAutoDismiss: ((event?: Event | undefined) => void) | ((event?: Event | undefined) => void);\n  onPosition: (data: PositionData) => void;\n};\n\nexport function SelectMultipleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  collectionRenderer,\n  collectionRendererContext,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  label,\n  mainFieldRef,\n  userAssistanceDensity,\n  onAddToListAction,\n  onAutoDismiss,\n  onPosition\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      </TabbableModeContext.Provider>\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n        {translations.select_addToList()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      anchorRef={mainFieldRef}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { selectedValueCountStyles } from './themes/SelectedValuesCountStyles.css';\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div\n      class={selectedValueCountStyles.base}\n      onKeyDown={onKeyDown}\n      onKeyUp={onKeyUp}\n      onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = TestIdProps &\n  Pick<\n    TextFieldProps,\n    | 'compactUserAssistance'\n    | 'contentVariant'\n    | 'id'\n    | 'inlineUserAssistance'\n    | 'label'\n    | 'labelEdge'\n    | 'labelStartWidth'\n    | 'mainFieldRef'\n    | 'onBlur'\n    | 'onFocus'\n    | 'onMouseDown'\n    | 'rootRef'\n    | 'statusVariant'\n    | 'styleVariant'\n  >;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  columnSpan?: LayoutColumnSpan;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  columnSpan,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = isBackButtonShown ? (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      size=\"xs\"\n      variant=\"ghost\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  ) : null;\n\n  const clearButton = isClearButtonShown ? (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size=\"sm\"\n      variant=\"ghost\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  ) : null;\n\n  const dropdownArrow = isDropdownArrowShown ? (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      onClick={onDropdownArrowClick}\n      testId={`${passThroughTextFieldProps.testId}_dropdownarrow`}\n    />\n  ) : null;\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      columnSpan={columnSpan}\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { preventDefault } from '../PRIVATE_SelectCommon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { Text } from '../UNSAFE_Text';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { isBackspaceOrDelete } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textTagStyles } from './themes/TextTagStyles.css';\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = {\n  /**\n   * The label for the text tag\n   */\n  children: string;\n\n  /**\n   * Specifies whether to show the remove icon\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * Indicates whether the component is focused\n   */\n  isFocused?: boolean;\n\n  /**\n   * Specifies if the TextTag component is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Callback to be invoked when Delete/Backspace is pressed\n   */\n  onRemoveAction?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when clicking on the text tag\n   */\n  onSelect?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when the remove icon is clicked\n   */\n  onRemoveIconClick?: (value: V) => void;\n\n  /**\n   * The value of the text tag\n   */\n  value: V;\n};\n\n/**\n * The component for rendering selectable/removable TextTag\n *\n * @param param0 The props for the TextTag component\n */\nexport function TextTag<V>({\n  children,\n  removeIcon = 'never',\n  isSelected = false,\n  onRemoveAction,\n  onSelect,\n  onRemoveIconClick,\n  isFocused,\n  value\n}: Props<V>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const navigationTextId = useId();\n\n  const rootClasses = classNames([textTagStyles.base, isSelected && textTagStyles.selected]);\n\n  const onRemoveActionCallback = useCallback(() => {\n    onRemoveAction?.(value);\n  }, [value, onRemoveAction]);\n  const onSelectCallback = useCallback(() => {\n    onSelect?.(value);\n  }, [value, onSelect]);\n  const onRemoveIconClickCallback = useCallback(() => {\n    onRemoveIconClick?.(value);\n  }, [value, onRemoveIconClick]);\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isBackspaceOrDelete(event)) {\n        onRemoveActionCallback();\n        return;\n      }\n    },\n    [onRemoveActionCallback]\n  );\n\n  useEffect(() => {\n    if (isFocused && isSelected) {\n      spanRef.current?.focus();\n      spanRef.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocused, isSelected]);\n\n  return (\n    <>\n      <span\n        ref={spanRef}\n        class={rootClasses}\n        tabIndex={-1}\n        onClick={onSelectCallback}\n        onKeyUp={onKeyUp}\n        // Kill mouse down event to prevent focus transfer done by the parent container.\n        // We will programmatically take back focus in response to the onClick event.\n        onMouseDown={preventDefault}\n        role=\"option\"\n        aria-describedby={navigationTextId}\n        aria-selected={isSelected ? 'true' : 'false'}>\n        <Text size=\"md\" variant=\"inherit\">\n          {children}\n        </Text>\n        {removeIcon === 'always' && (\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <IconButton size=\"xs\" variant=\"ghost\" onAction={onRemoveIconClickCallback}>\n              <CloseIcon />\n            </IconButton>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n      <HiddenAccessible id={navigationTextId}>\n        {translations.selectMultiple_removeSelectedTagInstructionText()}\n      </HiddenAccessible>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = ['maxWidth'] as const;\ntype SupportedDimensions = (typeof supportedDimensions)[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // \n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n","import { ComponentProps, Ref } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isAddToListShown?: boolean;\n    isKeyboardNavigable?: boolean;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    selectedValuesKeyboardNavDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isAddToListShown,\n  isKeyboardNavigable,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  selectedValuesKeyboardNavDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const addToListAccText = isAddToListShown ? translations.select_addToListAvailable() : undefined;\n\n  // Add the text tags navigation accessible text to the aria description for the input if there\n  // are any selected values and the component is keyboard navigable.\n  // Also add an aria live region if the status changes while the input already has focus because\n  // at that time the aria description will not be read out again.  Remove the aria live region\n  // when the input loses focus.\n  const accTextTagsNav =\n    isKeyboardNavigable && displayValue && displayValue.length > 0\n      ? translations.selectMultiple_highlightSelectedTagsInstructionText()\n      : undefined;\n  const { isInputFocused } = useFormFieldContext();\n  const [prevAccTextTagsNav, setPrevAccTextTagsNav] = useState(accTextTagsNav);\n  const [isAccTextTagsNavLive, setIsAccTextTagsNavLive] = useState(false);\n  isInputFocused &&\n  isTextTagListShown &&\n  !prevAccTextTagsNav &&\n  accTextTagsNav &&\n  !isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(true)\n    : !isInputFocused && isAccTextTagsNavLive\n    ? setIsAccTextTagsNavLive(false)\n    : {};\n  if (prevAccTextTagsNav !== accTextTagsNav) {\n    setPrevAccTextTagsNav(accTextTagsNav);\n  }\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          hasEndContent={true}\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      {\n        // Add the text tags navigation accessible text to the aria description for the input\n        // if there are any selected values and the component is keyboard navigable.\n        // (Don't add it if we're adding a live region for the same text because then it\n        // gets read out twice by the screen reader, for some reason.)\n        isTextTagListShown && accTextTagsNav && !isAccTextTagsNavLive && (\n          <HiddenAccessible\n            id={selectedValuesKeyboardNavDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {accTextTagsNav}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n      {\n        // Add an aria live region for the text tags navigation accessible text if the status\n        // changes while the input already has focus because at that time the aria description\n        // will not be read out again.\n        // (Add the region itself whenever the text tags are shown so that it's already in the\n        // DOM when we want to populate it with text.  If we dynamically add the region itself\n        // at that time, the screen reader (JAWS) may not read it at all, for some reason.)\n        isTextTagListShown && (\n          <LiveRegion>{isAccTextTagsNavLive ? accTextTagsNav : undefined}</LiveRegion>\n        )\n      }\n      {isAddToListShown ? <LiveRegion>{addToListAccText}</LiveRegion> : undefined}\n    </>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({\n  isDropdownSelectedOnlyView = false,\n  valueItems\n}: Props<K, D>) {\n  const STABLE_dataStateFactory = useEffectEvent((isDropdownSelectedOnlyView: boolean) =>\n    !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : ({\n          offset: 0,\n          totalSize: valueItems.length,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n          // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n          // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n          //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n        } as DataState<K, D>)\n  );\n\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  // STABLE_dataStateFactory is guaranteed to be stable, so its reference will not change between\n  // renders.\n  const data = useMemo(() => {\n    return STABLE_dataStateFactory(isDropdownSelectedOnlyView);\n  }, [STABLE_dataStateFactory, isDropdownSelectedOnlyView]);\n\n  return {\n    data,\n    onLoadRange: undefined\n  };\n}\n","import {\n  createKeysFromValueItems,\n  isSearchTextEmptyOrUndefined,\n  useCollectionRenderer,\n  type UseCollectionRendererSelectMultipleParams\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { equals } from 'ramda';\nimport type { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\ntype SelectedValuesCountOnToggle = NonNullable<\n  ComponentProps<typeof SelectedValuesCount>['onToggle']\n>;\n\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: RefObject<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n};\n\nexport function useMobileDropdown<K extends string | number, D extends Record<string, any>>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems,\n  onCommit,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(\n    createKeysFromValueItems(valueItems)\n  );\n  const [isInternalSelectedOnlyView, setIsInternalSelectedOnlyView] = useState(\n    isDropdownSelectedOnlyView\n  );\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys?.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems?.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData } = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback<\n    UseCollectionRendererSelectMultipleParams<K, D>['onCurrentKeyChange']\n  >(\n    (detail) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectedKeysChange = useCallback<\n    UseCollectionRendererSelectMultipleParams<K, D>['onSelectedKeysChange']\n  >(\n    (detail) => {\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(detail.value);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, detail.value);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const onSelectedValuesCountToggle = useCallback<SelectedValuesCountOnToggle>(\n    ({ value = false }) => {\n      setIsInternalSelectedOnlyView((currentIsInternalSelectedOnlyView) => {\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (currentIsInternalSelectedOnlyView !== value) {\n          stopFiltering();\n        }\n        return value;\n      });\n    },\n    [setIsInternalSelectedOnlyView, stopFiltering]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(createKeysFromValueItems(valueItems));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: createKeysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n    }\n  }, [isDropdownOpen]);\n\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n  if (prevValueItems !== valueItems) {\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    if (!isDropdownOpen) {\n      setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n        const nextDropdownSelectedKeys = createKeysFromValueItems(valueItems);\n        // since valueItems can be a different array with the same values and createKeysFromValueItems\n        // will create a new set every time, compare the value and update the set only if the\n        // values have changed\n        return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n          ? prevDropdownSelectedKeys\n          : nextDropdownSelectedKeys;\n      });\n    }\n    setPrevValueItems(valueItems);\n  }\n\n  const collectionRendererContext = useCollectionRenderer<K, D>({\n    currentKey: currentRow.rowKey,\n    onCurrentKeyChange,\n    onSelectedKeysChange,\n    searchText: userInput,\n    selectedKeys: dropdownSelectedKeys,\n    selectedOnlyData\n  });\n\n  return {\n    collectionRendererContext,\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isSearchTextEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView: isInternalSelectedOnlyView,\n      isSelectedValuesCountShown:\n        (dropdownSelectedKeys?.size ?? 0) > 0 || isInternalSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys?.size ?? 0,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    },\n    selectedValuesCountProps: {\n      onSelectedValuesCountToggle\n    },\n    isDropdownSelectedOnlyView: isInternalSelectedOnlyView\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { Separator } from '#UNSAFE_Separator';\nimport { TextFieldInput } from '#UNSAFE_TextField';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { View } from '#UNSAFE_View';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { Handle } from '@oracle/oraclejet-internal-utilities/typeUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport type { Dispatch, StateUpdater } from 'preact/hooks';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport type { CollectionRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { TextTagList } from './TextTagList';\nimport { useMobileDropdown } from './useMobileDropdown';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  'aria-describedby'?: string;\n  'aria-label'?: string;\n  assistiveText?: string;\n  collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n  data?: DataState<K, D> | null;\n  dropdownId: string;\n  enabledElementRef: RefObject<HTMLElement>;\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  isAddToListShown?: boolean;\n  isDisabled?: boolean;\n  isEmptyResults: boolean;\n  isFocused: boolean;\n  isLoading: boolean;\n  isOpen: boolean;\n  isReadonly?: false;\n  isRequired?: boolean;\n  isSelectedOnlyView: boolean;\n  itemText: ItemTextType<K, D>;\n  label: string;\n  liveRegionText?: string;\n  placeholder?: TextFieldInputProps['placeholder'];\n  propIsLoading?: boolean;\n  selectedValuesDescriptionId?: string;\n  setDropdownOpen: Dispatch<StateUpdater<boolean>>;\n  setUserInput: Dispatch<StateUpdater<string | undefined>>;\n  stopFiltering: () => void;\n  textAlign?: TextFieldInputProps['textAlign'];\n  textTagListRef: RefObject<TextTagListHandle>;\n  userAssistanceDensity?: UserAssistanceDensityType;\n  userInput?: string;\n  valueItems?: Item<K, D>[];\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  onAddToListAction?: () => void;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  onFieldBlur?: (event: FocusEvent) => void;\n  onFieldFocus?: (event: FocusEvent) => void;\n  onFieldInput?: SelectMultipleFieldInputProps['onInput'];\n  onFieldKeyDown?: SelectMultipleFieldInputProps['onKeyDown'];\n  onFieldKeyUp?: SelectMultipleFieldInputProps['onKeyUp'];\n};\n\nexport function SelectMultipleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  collectionRenderer,\n  data,\n  dropdownId,\n  enabledElementRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isDisabled,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen,\n  isReadonly,\n  isRequired,\n  isSelectedOnlyView: propIsSelectedOnlyView,\n  itemText,\n  label,\n  liveRegionText,\n  placeholder,\n  propIsLoading,\n  selectedValuesDescriptionId,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  textTagListRef,\n  userAssistanceDensity,\n  userInput,\n  valueItems,\n  virtualKeyboard,\n  onAddToListAction,\n  onCommit,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const {\n    collectionRendererContext,\n    footerProps: mobileDropdownFooterProps,\n    selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n    selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps,\n    selectedValuesCountProps: mobileDropdownSelectedValueCountProps\n  } = useMobileDropdown<K, D>({\n    data,\n    inputRef: enabledElementRef,\n    isDropdownOpen: isOpen,\n    isDropdownSelectedOnlyView: propIsSelectedOnlyView,\n    itemText,\n    textTagListRef,\n    userInput,\n    valueItems,\n    onCommit,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering\n  });\n\n  // for dropdown field\n  const {\n    formFieldContext: mobileDropdownFormFieldContext,\n    inputProps: mobileDropdownInputProps,\n    labelProps: mobileDropdownLabelProps,\n    textFieldProps: mobileDropdownTextFieldProps,\n    userAssistanceProps: mobileDropdownUserAssistanceProps\n  } = useTextField({\n    ariaDescribedBy,\n    helpSourceLink,\n    helpSourceText,\n    isDisabled: false,\n    isFocused,\n    isLoading,\n    isReadonly: false,\n    isRequiredShown: false,\n    labelEdge: 'inside',\n    styleVariant: 'default',\n    value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  mobileDropdownFormFieldContext.hasValue =\n    propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...mobileDropdownUserAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n          <View>\n            <SelectMultipleField\n              fieldLabel={label}\n              onBlur={onFieldBlur}\n              onFocus={onFieldFocus}\n              {...mobileDropdownFieldLabelProps}\n              {...mobileDropdownTextFieldProps}\n              {...mobileDropdownSelectMultipleFieldProps}\n              {...mobileDropdownSelectedValueCountProps}>\n              <SelectMultipleFieldInput\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                selectedValuesDescriptionId={selectedValuesDescriptionId}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n                {...mobileDropdownInputProps}\n                {...mobileDropdownSelectMultipleFieldInputProps}\n              />\n            </SelectMultipleField>\n          </View>\n          {dropdownInlineUserAssistance}\n          {addToListContent}\n        </FormFieldContext.Provider>\n      }\n      footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n      id={dropdownId}\n      isOpen={isOpen}\n      labelId={mobileDropdownLabelProps.id}>\n      <DropdownList hasTopGap={!addToListContent} hasBottomGap={true} isLoading={data === null}>\n        {dropdownListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isMobile,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  type UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { useFocusableTextField, type FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { Size } from '#utils/UNSAFE_size';\nimport type { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport {\n  Fragment,\n  type VNode,\n  type ComponentChildren,\n  type ComponentProps,\n  type Ref\n} from 'preact';\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from 'preact/compat';\nimport type { CollectionRendererProps, ItemRendererProps } from './SelectMultiple.types';\nimport { SelectMultipleDesktopDropdown } from './SelectMultipleDesktopDropdown';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileDropdown } from './SelectMultipleMobileDropdown';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\nimport { defaultTextAlignForVariant } from '#utils/PRIVATE_formControlUtils';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Render function for the collection in the dropdown.\n   */\n  collectionRenderer?: (\n    collectionRendererProps: CollectionRendererProps<K, D>\n  ) => ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      collectionRenderer,\n      columnSpan,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign ?? defaultTextAlignForVariant(variant);\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const enabledElementRef = useRef<HTMLElement>(null);\n    const readonlyElementRef = useRef<HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused: origIsFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    useImperativeHandle(ref!, () => focusMethods, [focusMethods]);\n\n    const {\n      addToListEventHandlers,\n      ariaProps,\n      collectionRendererContext,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isAddToListShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      selectedValuesKeyboardNavDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textFieldRef,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      addToList,\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onCommit,\n      onFilter,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp =\n      labelEdge !== 'none' ? (\n        <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n          {label}\n        </Label>\n      ) : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined,\n      labelText: labelEdge === 'inside' && !isDisabled ? label : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : isReadonly ? (\n        <InlineUserAssistance\n          fieldLabel={label}\n          messages={messages}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const defaultCollectionRenderer = useCallback(\n      ({\n        currentRowKeyOverride,\n        onPersistCurrentRowKey,\n        onSelectedChange,\n        searchText,\n        selected,\n        selectedOnlyData\n      }: CollectionRendererProps<K, D>) => (\n        <DefaultList<K, D>\n          aria-label={label ?? ''}\n          currentItemVariant=\"highlight\"\n          currentKey={currentRowKeyOverride}\n          data={selectedOnlyData ?? propData}\n          itemRenderer={itemRenderer}\n          itemText={itemText}\n          searchText={selectedOnlyData ? undefined : isUserFiltering ? searchText : undefined}\n          selectedKeys={selected}\n          selectionMode=\"multiple\"\n          onCurrentKeyChange={onPersistCurrentRowKey}\n          onLoadRange={selectedOnlyData ? undefined : onLoadRange}\n          onSelectionChange={onSelectedChange}\n        />\n      ),\n      [isUserFiltering, itemRenderer, itemText, label, onLoadRange, propData]\n    );\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          formVariant={variant}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          onBlur={inputProps.onBlur}\n          onFocus={inputProps.onFocus}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainFieldInput = !isPhoneMainFieldInput ? (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isAddToListShown={isAddToListShown}\n        isKeyboardNavigable={!isDisabled && !isMobile()}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        selectedValuesKeyboardNavDescriptionId={selectedValuesKeyboardNavDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectMultipleMobileDropdown<K, D>\n        aria-describedby={ariaProps.ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        // We always pass the whole data here. As the change made in the mobile dropdown\n        // exists only in the mobile dropdown, we let it decide how to render the data.\n        data={propData}\n        dropdownId={dropdownId}\n        enabledElementRef={enabledElementRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        isRequired={isRequired}\n        isSelectedOnlyView={isDropdownSelectedOnlyView}\n        itemText={itemText}\n        label={label}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        setDropdownOpen={setDropdownOpen}\n        setUserInput={setUserInput}\n        stopFiltering={stopFiltering}\n        textAlign={textAlign}\n        textTagListRef={textTagListProps.textTagListRef}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        valueItems={valueItems}\n        virtualKeyboard={virtualKeyboard}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onCommit={onCommit}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n      />\n    ) : (\n      <SelectMultipleDesktopDropdown\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        collectionRendererContext={collectionRendererContext}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            rootRef={textFieldRef}\n            selectedValuesCount={valueItems?.length}\n            testId={testId}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {mainFieldInput}\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n) as {\n  <K extends string | number, D extends Record<string, any>>(\n    props: Props<K, D> & { ref?: Ref<FocusableHandle> }\n  ): VNode<any> | null;\n}; // forwardRef will remove generics, so we cast it explicitly to preserve generics.\n\nexport type SelectMultipleProps<K extends string | number, D extends Record<string, any>> = Props<\n  K,\n  D\n>;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  UseCollectionRendererSelectMultipleParams,\n  createKeysFromValueItems,\n  isBeforeDataFetch,\n  isPhone,\n  isSearchTextEmptyOrUndefined,\n  useCollectionRenderer,\n  useSelectCommon\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { KEYS, isControlOrFunctionKey } from '#utils/PRIVATE_keyboardUtils';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { merge } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport type { Handle } from '@oracle/oraclejet-internal-utilities/typeUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useHiddenTestMethod } from '#hooks/UNSAFE_useHiddenTestMethod';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'addToList' | 'aria-describedby' | 'isDisabled' | 'isReadonly' | 'onAddToListAction' | 'onFilter'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: RefObject<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K extends string | number, D extends Record<string, any>>({\n  addToList,\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onCommit,\n  onFilter,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isSearchTextEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRowKeyRef,\n    currentRowOverride,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRowOverride,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n\n  const [prevIsDropdownOpen, setPrevIsDropdownOpen] = useState(isDropdownOpen);\n  const [prevValueItems, setPrevValueItems] = useState(valueItems);\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K> | undefined>(\n    createKeysFromValueItems<K, D>(valueItems)\n  );\n\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  const isAddToListShown =\n    addToList === 'on' && isUserFiltering && searchText != null && searchText.length > 0;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const selectedValuesKeyboardNavDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesKeyboardNavDescriptionId,\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowKey?: K): currentRowKey is K => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isSearchTextEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  // JET-60789, JET-62113: Create a changeValue method that can be called by a test adapter to\n  // simulate a user changing the value. This method calls the onCommit callback, just like what\n  // would happen if a user (or test) made a change through the UI.\n  const textFieldRef = useRef<HTMLElement>(null);\n  const changeValue = useCallback(\n    (value?: Set<K>) => {\n      // We always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI.\n      if (!isReadonly && !isDisabled) {\n        onCommit({ value, previousValue: selectedKeys });\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly or disabled');\n    },\n    [isDisabled, isReadonly, onCommit, selectedKeys]\n  );\n  // Expose _changeValue as a hidden method on the root DOM.\n  useHiddenTestMethod({\n    elementRef: isReadonly ? mainFieldRef : textFieldRef,\n    method: changeValue,\n    name: '_changeValue'\n  });\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB: {\n              // if there are multiple tabbable elements in the dropdown, like the list and\n              // the add to list link, then leave the dropdown open when tabbing among them\n              const isShift = keyboardEvent.shiftKey;\n              const tabbableElems = getDropdownTabbableElems();\n              if (tabbableElems && tabbableElems.length > 1) {\n                const firstTabbableElem = tabbableElems[0];\n                const lastTabbableElem = tabbableElems[tabbableElems.length - 1];\n                // check if tabbing forwards and focus is not on the last tabbable elem or\n                // tabbing backwards and focus is not on the first tabbable elem,\n                // then keep the dropdown open and simply return\n                if (\n                  (!isShift && document.activeElement !== lastTabbableElem) ||\n                  (isShift && document.activeElement !== firstTabbableElem)\n                ) {\n                  setDropdownOpen(true);\n                  return;\n                }\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [\n      getDropdownTabbableElems,\n      hasSelectedValuesCount,\n      inputRef,\n      isDropdownOpen,\n      removeDropdown,\n      setDropdownOpen\n    ]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if this is on a mobile device (only phone and not a tablet device), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown and there are no results, trigger the add to list link\n          if (isAddToListShown && isEmptyResults) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRowKeyRef.current)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRowKeyRef.current);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRowKeyRef,\n      direction,\n      handleAddToListAction,\n      hasSelectedValuesCount,\n      inputRef,\n      isAddToListShown,\n      isDropdownOpen,\n      isEmptyResults,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  // (don't need to set selectedKeys here on first render because the state was initialized with\n  // the correct value)\n  if (prevValueItems !== valueItems) {\n    const keys = createKeysFromValueItems<K, D>(valueItems);\n    setSelectedKeys(keys);\n  }\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n    setDropdownSelectedOnlyView(false);\n  }\n\n  const onSelectedKeysChange = useCallback<\n    UseCollectionRendererSelectMultipleParams<K, D>['onSelectedKeysChange']\n  >(\n    (detail) => {\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(detail.value);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: detail.value, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  const collectionRendererContext = useCollectionRenderer<K, D>({\n    currentKey: currentRowOverride.rowKey,\n    onCurrentKeyChange,\n    onSelectedKeysChange,\n    searchText,\n    selectedKeys,\n    selectedOnlyData: selectedOnlyDataProps.data\n  });\n\n  // clear the current item when the dropdown opens\n  if (isDropdownOpen && !prevIsDropdownOpen) {\n    setCurrentRowOverride({ rowKey: undefined });\n  }\n\n  // when the dropdown closes, if the user input is empty, reset filtering\n  const isDropdownClosing = prevIsDropdownOpen && !isDropdownOpen;\n  if (isDropdownClosing && !userInput) {\n    stopFiltering();\n  }\n\n  // We need to highlight the first result whenever the data changes\n  // We cannot use state for the prevData and update it during the render as it is\n  // returned by a useMemo hook.\n  // There is a bug in preact where if a return value of a useMemo is used for\n  // updating a state during the render, it creates an infinite render cycle.\n  // See https://github.com/preactjs/preact/issues/4422.\n  // Till this issue is fixed, we need to use a ref for this use case.\n  const prevData = useRef(data);\n  if (prevData.current !== data) {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = data?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRowOverride({\n        rowKey: isSearchTextEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n\n    prevData.current = data;\n  }\n\n  if (prevIsDropdownOpen !== isDropdownOpen) {\n    setPrevIsDropdownOpen(isDropdownOpen);\n  }\n  if (prevValueItems !== valueItems) {\n    setPrevValueItems(valueItems);\n  }\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionRendererContext,\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    selectedValuesKeyboardNavDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textFieldRef,\n    textTagListProps,\n    userInput\n  };\n}\n"],"names":["SelectMultipleDesktopDropdown","assistiveText","collectionRenderer","collectionRendererContext","data","dropdownId","dropdownRef","helpSourceLink","helpSourceText","isAddToListShown","isDisabled","isDropdownAbove","isEmptyResults","isOpen","isReadonly","label","mainFieldRef","userAssistanceDensity","onAddToListAction","onAutoDismiss","onPosition","translations","useTranslationBundle","dropdownInlineUserAssistance","undefined","_jsx","TabbableModeContext","Provider","value","isTabbable","children","jsx","DropdownUserAssistance","fieldLabel","dropdownListContent","EmptyResults","addToListContent","_jsxs","onMouseDown","preventDefault","Separator","LinkItem","isHighlighted","onAction","select_addToList","Dropdown","id","anchorRef","DropdownList","hasBottomGap","isLoading","SelectedValuesCount","ariaLabel","count","onKeyDown","onKeyUp","passThroughProps","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","VALUE_COUNT","class","selectedValueCountStyles","base","Chip","SelectMultipleField","columnSpan","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","isDropdownSelectedOnlyView","isSelectedValuesCountShown","selectedValuesCount","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","onSelectedValuesCountKeyDown","onSelectedValuesCountKeyUp","onSelectedValuesCountMouseDown","onSelectedValuesCountToggle","passThroughTextFieldProps","useFormFieldContext","backButton","IconButton","selectMultiple_back","size","variant","NavLeft","clearButton","formControl_clear","CancelS","dropdownArrow","DropdownArrow","onClick","testId","endContent","Flex","align","justify","gap","isSelected","onToggle","TextField","startContent","mainContent","TextTag","removeIcon","onRemoveAction","onSelect","onRemoveIconClick","isFocused","spanRef","useRef","navigationTextId","useId","rootClasses","classNames","textTagStyles","selected","onRemoveActionCallback","useCallback","onSelectCallback","onRemoveIconClickCallback","event","isBackspaceOrDelete","useEffect","current","focus","scrollIntoView","block","jsxs","ref","tabIndex","role","Text","CloseIcon","SvgClose","HiddenAccessible","selectMultiple_removeSelectedTagInstructionText","supportedInterpolations","Array","from","x","dimensionInterpolations","styleInterpolations","mergeInterpolations","TextTagList","forwardRef","props","onExitNavigation","onRemove","divRef","selectedTags","setSelectedTags","useState","direction","useUser","currentSelectedTagIndex","lastTag","at","lastTagMeta","index","length","selectTagAtIndex","key","clearSelection","previousSelectedTags","onTagRemoveIconClick","onTagRemoveAction","valuesToRemove","includes","push","onTagSelect","findIndex","tag","onTagKeyDown","code","isSelectAll","map","handleOnFocus","handleOnBlur","focusProps","useFocusWithin","onBlurWithin","useImperativeHandle","blur","scrollTo","left","scrollWidth","styles","textTagListStyles","textTagListBase","textTagListInsideLabel","style","SelectMultipleFieldInput","displayValue","isKeyboardNavigable","isTextTagListShown","isUserFiltering","liveRegionText","selectedValuesDescriptionId","selectedValuesKeyboardNavDescriptionId","textTagListData","textTagListRef","userInput","virtualKeyboard","passThroughTextFieldInputProps","addToListAccText","select_addToListAvailable","accTextTagsNav","selectMultiple_highlightSelectedTagsInstructionText","isInputFocused","prevAccTextTagsNav","setPrevAccTextTagsNav","isAccTextTagsNavLive","setIsAccTextTagsNavLive","_Fragment","Fragment","selectMultiple_selectedValues","maxWidth","flex","TextFieldInput","autoComplete","hasPrefix","hasEndContent","spellcheck","type","isHidden","LiveRegion","MobileDropdownFooter","onApply","mobileDropdownFooterStyles","Button","display","edge","selectMultiple_apply","useDisplayValues","itemText","valueItems","separator","plural_separator","useMemo","displayValues","selectedItems","arValues","values","mapFunc","itemContext","renderItemText","mappedArray","Set","createDisplayValues","concatenatedDisplayValues","join","concatDisplayValues","textTags","item","createTextTags","useSelectedOnlyData","STABLE_dataStateFactory","useEffectEvent","offset","totalSize","sizePrecision","valueItem","metadata","onLoadRange","updateCache","cache","keys","forEach","has","set","SelectMultipleMobileDropdown","ariaDescribedBy","enabledElementRef","isRequired","isSelectedOnlyView","propIsSelectedOnlyView","placeholder","propIsLoading","setDropdownOpen","setUserInput","stopFiltering","textAlign","onCommit","onFieldBlur","onFieldFocus","onFieldInput","onFieldKeyDown","onFieldKeyUp","footerProps","mobileDropdownFooterProps","selectMultipleFieldInputProps","mobileDropdownSelectMultipleFieldInputProps","selectMultipleFieldProps","mobileDropdownSelectMultipleFieldProps","selectedValuesCountProps","mobileDropdownSelectedValueCountProps","inputRef","isDropdownOpen","currentRow","setCurrentRow","rowKey","dropdownSelectedKeys","setDropdownSelectedKeys","createKeysFromValueItems","isInternalSelectedOnlyView","setIsInternalSelectedOnlyView","dataCache","Map","currentValueItems","items","find","get","dropdownInputRef","selectedOnlyData","onCurrentKeyChange","detail","onSelectedKeysChange","currentIsInternalSelectedOnlyView","closeDropdown","clear","previousValue","onTextTagRemove","newSelectedKeys","delete","onTextTagExitNavigation","setTimeout","prevValueItems","setPrevValueItems","prevDropdownSelectedKeys","nextDropdownSelectedKeys","equals","useCollectionRenderer","currentKey","searchText","selectedKeys","hasEmptyLabel","isSearchTextEmptyOrUndefined","styleVariant","useMobileDropdown","formFieldContext","mobileDropdownFormFieldContext","inputProps","mobileDropdownInputProps","labelProps","mobileDropdownLabelProps","textFieldProps","mobileDropdownTextFieldProps","userAssistanceProps","mobileDropdownUserAssistanceProps","useTextField","isRequiredShown","labelEdge","hasValue","mobileDropdownFieldLabelProps","Label","SelectMobileDropdown","header","FormFieldContext","View","onBlur","onFocus","onInput","footer","labelId","hasTopGap","SelectMultiple","addToList","propAriaDescribedBy","propData","propIsDisabled","propIsReadonly","itemRenderer","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onFilter","propTextAlign","propUserAssistanceDensity","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","defaultTextAlignForVariant","readonlyElementRef","origIsFocused","methods","focusMethods","useFocusableTextField","addToListEventHandlers","ariaProps","dropdownArrowEventHandlers","dropdownEventHandlers","hasSelectedValuesCount","inputEventHandlers","isDataFetched","mouseProps","textFieldRef","textTagListProps","propIsFocused","setDropdownSelectedOnlyView","selectedOnlyDataProps","handleOnFilter","args","currentRowKeyRef","currentRowOverride","getDropdownTabbableElems","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","handleUpDownArrowKeys","setCurrentRowOverride","useSelectCommon","prevIsDropdownOpen","setPrevIsDropdownOpen","setSelectedKeys","isBeforeDataFetch","handleAddToListAction","combinedAriaDescribedBy","merge","removeDropdown","parentElement","removeChild","shouldSelectCurrentRow","currentRowKey","selectRow","newValue","changeValue","Promise","reject","resolve","useHiddenTestMethod","elementRef","method","name","myHandleDropdownAutoDismiss","keyboardEvent","KEYS","TAB","isShift","shiftKey","tabbableElems","firstTabbableElem","lastTabbableElem","document","activeElement","chipRef","myHandleMainFieldKeyDown","isControlOrFunctionKey","stopPropagation","LEFT","HTMLInputElement","selectionStart","selectionEnd","RIGHT","ENTER","NUMPAD_ENTER","isPhone","querySelector","handleSelectedValuesCountKeyDown","UP","DOWN","ESC","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","onTextTagListExitNavigation","onTextTagListRemove","mergeProps","prevData","firstResultKey","useSelectMultiple","useLoadingIndicatorTimer","baseId","labelComp","forId","fieldLabelProps","labelText","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","defaultCollectionRenderer","currentRowKeyOverride","onPersistCurrentRowKey","onSelectedChange","DefaultList","currentItemVariant","selectionMode","onSelectionChange","ReadonlyTextFieldInput","as","formVariant","ReadonlyTextField","onFocusOut","onFocusIn","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","shouldShowDropdown","mainFieldInput","SelectMobileFieldInput","isMobile","isTablet","dropdown","rootRef"],"mappings":"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"}