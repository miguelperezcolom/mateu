{"version":3,"file":"EnvironmentProvider-fb09fcfb.js","sources":["../../src/UNSAFE_Environment/EnvironmentProvider.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  CompleteEnvironmentType,\n  DefaultEnvironment,\n  Environment,\n  EnvironmentContext,\n  RootEnvironment\n} from './EnvironmentContext';\nimport { useContext, useMemo } from 'preact/hooks';\n\nimport { ComponentChildren } from 'preact';\nimport { LayerManager } from '../UNSAFE_Layer/LayerManager';\n\n// EnvironmentProvider properties\nexport declare type ProviderProperties<Env extends RootEnvironment | Environment> = {\n  environment?: Env;\n  children?: ComponentChildren;\n};\n\n// Custom merge function\nfunction mergeEnvironment(\n  env1: CompleteEnvironmentType,\n  env2: Partial<RootEnvironment> | undefined\n) {\n  const userValue = Object.assign({}, env1.user, env2?.user);\n  const themeValue = Object.assign({}, env1.theme, env2?.theme);\n\n  // Merge translation values - one level merge\n  const targetTranslations = Object.assign({}, env1.translations);\n  const sourceTranslations = env2?.translations || {};\n  Object.keys(sourceTranslations).forEach((key) => {\n    let newVal = sourceTranslations[key];\n    if (targetTranslations[key]) {\n      // merge is needed\n      newVal = Object.assign({}, targetTranslations[key], newVal);\n    }\n    targetTranslations[key] = newVal;\n  });\n\n  return {\n    user: userValue,\n    theme: themeValue,\n    translations: targetTranslations,\n    colorScheme: env2?.colorScheme ?? env1.colorScheme,\n    scale: env2?.scale ?? env1.scale,\n    currentBgColor: env2?.currentBgColor ?? env1.currentBgColor,\n    mode: env2?.mode ?? env1.mode,\n    density: env2?.density ?? env1.density\n  };\n}\n\n/**\n * The RootEnvironmentProvider component bootstraps essential services and\n * must be placed at the root of any application using components from '@oracle/oraclejet-preact'.\n * Minimally, the application must load the appropriate translation bundle for the user's locale\n * and set it on the RootEnvironmentProvider.\n */\nexport function RootEnvironmentProvider({\n  children,\n  environment\n}: ProviderProperties<RootEnvironment>) {\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(DefaultEnvironment, environment),\n    [environment]\n  );\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>\n      <LayerManager>{children}</LayerManager>\n    </EnvironmentContext.Provider>\n  );\n}\n\n/**\n * The EnvironmentProvider is a component that should be used by the application when there is a need to overwrite\n * environment values for a subtree.\n * The component receives an Environment object that will be merged into the values provided by the nearest ancestor Provider.\n * The new environment will be passed to the component's children.\n * Note that some environment values cannot be overwritten. See the description of the Environment type for the list of values\n * that can be replaced.\n */\nexport function EnvironmentProvider({ children, environment }: ProviderProperties<Environment>) {\n  const consumerEnv = useContext(EnvironmentContext);\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(consumerEnv, environment),\n    [consumerEnv, environment]\n  );\n\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>{children}</EnvironmentContext.Provider>\n  );\n}\n"],"names":["mergeEnvironment","env1","env2","userValue","Object","assign","user","themeValue","theme","targetTranslations","translations","sourceTranslations","keys","forEach","key","newVal","colorScheme","scale","currentBgColor","mode","density","children","environment","consumerEnv","useContext","EnvironmentContext","mergedEnvironment","useMemo","_jsx","jsx","Provider","value","DefaultEnvironment","LayerManager"],"mappings":"0IA2BA,SAASA,EACPC,EACAC,GAEA,MAAMC,EAAYC,OAAOC,OAAO,CAAA,EAAIJ,EAAKK,KAAMJ,GAAMI,MAC/CC,EAAaH,OAAOC,OAAO,CAAA,EAAIJ,EAAKO,MAAON,GAAMM,OAGjDC,EAAqBL,OAAOC,OAAO,CAAA,EAAIJ,EAAKS,cAC5CC,EAAqBT,GAAMQ,cAAgB,GAUjD,OATAN,OAAOQ,KAAKD,GAAoBE,SAASC,IACvC,IAAIC,EAASJ,EAAmBG,GAC5BL,EAAmBK,KAErBC,EAASX,OAAOC,OAAO,CAAA,EAAII,EAAmBK,GAAMC,IAEtDN,EAAmBK,GAAOC,CAAM,IAG3B,CACLT,KAAMH,EACNK,MAAOD,EACPG,aAAcD,EACdO,YAAad,GAAMc,aAAef,EAAKe,YACvCC,MAAOf,GAAMe,OAAShB,EAAKgB,MAC3BC,eAAgBhB,GAAMgB,gBAAkBjB,EAAKiB,eAC7CC,KAAMjB,GAAMiB,MAAQlB,EAAKkB,KACzBC,QAASlB,GAAMkB,SAAWnB,EAAKmB,QAEnC,iCA+BoCC,SAAEA,EAAQC,YAAEA,IAC9C,MAAMC,EAAcC,aAAWC,EAAAA,oBACzBC,EAAoBC,WACxB,IAAM3B,EAAiBuB,EAAaD,IACpC,CAACC,EAAaD,IAGhB,OACEM,EAAAC,IAACJ,EAAkBA,mBAACK,SAAQ,CAACC,MAAOL,EAAiBL,SAAGA,GAE5D,sCAjCwCA,SACtCA,EAAQC,YACRA,IAEA,MAAMI,EAAoBC,EAAOA,SAC/B,IAAM3B,EAAiBgC,EAAkBA,mBAAEV,IAC3C,CAACA,IAEH,OACEM,EAACC,IAAAJ,EAAkBA,mBAACK,UAASC,MAAOL,EAAiBL,SACnDO,MAACK,EAAYA,aAAA,CAAAZ,SAAEA,KAGrB"}