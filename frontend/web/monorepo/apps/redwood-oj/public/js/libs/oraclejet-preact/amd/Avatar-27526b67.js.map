{"version":3,"file":"Avatar-27526b67.js","sources":["../../src/UNSAFE_Avatar/Avatar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { AvatarStyles, AvatarVariantOptions } from './themes/AvatarStyles.css';\n\nimport { AvatarRedwoodTheme } from './themes/redwood/AvatarTheme';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { globalImages } from '#ImageVars.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\n\ntype AvatarProps = {\n  /**\n   * Specifies the source for the image of the avatar.  Will only be displayed if no icon component is specified as a child.  Image will be rendered as a\n   * background image.\n   */\n  src?: string;\n  /**\n   * Specifies the initials of the avatar.  Will only be displayed if both the src attribute and the child icon component are not specified.\n   */\n  initials?: string;\n  /**\n   * Specifies the background of the avatar. The default value of this property is theme driven.\n   */\n  background?:\n    | 'neutral'\n    | 'orange'\n    | 'green'\n    | 'teal'\n    | 'blue'\n    | 'slate'\n    | 'pink'\n    | 'purple'\n    | 'lilac'\n    | 'gray';\n\n  /**\n   * Specifies the size of the avatar. The default value of this property is theme driven.\n   */\n  size?: '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\n  /**\n   * Specifies the shape of the avatar. Can be square or circle.  The default value of this\n   * property varies by theme.\n   */\n  shape?: 'square' | 'circle';\n  /**\n   * Aria-label does not need to be set if associated information is available to assistive technologies elsewhere on the page,\n   * for example if a person's name is shown next to the avatar.\n   * Otherwise aria-label must be set to make the page accessible.\n   *\n   *  If aria-label is set, role will internally be set to 'img'.\n   */\n  'aria-label'?: string;\n  /**\n   * Specifies the Avatar content.\n   */\n  children?: ComponentChildren;\n};\n\n/**\n * An avatar represents a person or entity as initials or an image.\n */\nexport function Avatar({ children, src, ...otherProps }: AvatarProps) {\n  if (src && !children) {\n    return <ImageAvatar src={src} {...otherProps}></ImageAvatar>;\n  } else {\n    return <ContentAvatar {...otherProps}>{children}</ContentAvatar>;\n  }\n}\n\nconst ImageAvatar = ({ src, ...otherProps }: AvatarProps) => {\n  const {\n    styles: { base, image }\n  } = useComponentTheme<never, AvatarStyles>(AvatarRedwoodTheme);\n  const imageClasses = classNames([base, image]);\n  return (\n    <AvatarWrapper {...otherProps}>\n      <div class={imageClasses} style={{ backgroundImage: `url(${src})` }}></div>\n    </AvatarWrapper>\n  );\n};\n\nconst ContentAvatar = ({ children, initials, ...otherProps }: AvatarProps) => {\n  const {\n    styles: { baseStyle, content, initialsStyle, icon }\n  } = useComponentTheme<never, AvatarStyles>(AvatarRedwoodTheme);\n\n  const contentClasses = [baseStyle, content, initials ? initialsStyle : icon];\n\n  const childContent = initials || children;\n  return (\n    <AvatarWrapper {...otherProps}>\n      <div aria-hidden=\"true\" class={classNames(contentClasses)}>\n        {childContent}\n      </div>\n    </AvatarWrapper>\n  );\n};\n\nconst AvatarWrapper = ({ background, size, shape, children, ...props }: AvatarProps) => {\n  const { classes } = useComponentTheme<AvatarVariantOptions>(AvatarRedwoodTheme, {\n    shape,\n    size,\n    background\n  });\n\n  const wrapperClasses = classNames([classes, globalImages]);\n  if (props['aria-label']) {\n    return (\n      <div aria-label={props['aria-label']} role=\"img\" class={wrapperClasses}>\n        {children}\n      </div>\n    );\n  } else {\n    return <div class={wrapperClasses}>{children}</div>;\n  }\n};\n"],"names":["ImageAvatar","src","otherProps","styles","base","image","useComponentTheme","AvatarRedwoodTheme","imageClasses","classNames","_jsx","AvatarWrapper","children","jsx","class","style","backgroundImage","ContentAvatar","initials","baseStyle","content","initialsStyle","icon","contentClasses","childContent","background","size","shape","props","classes","wrapperClasses","globalImages","role"],"mappings":"2MA2EA,MAAMA,EAAc,EAAGC,SAAQC,MAC7B,MACEC,QAAQC,KAAEA,EAAIC,MAAEA,IACdC,EAAAA,kBAAuCC,EAAAA,oBACrCC,EAAeC,EAAUA,WAAC,CAACL,EAAMC,IACvC,OACEK,MAACC,EAAa,IAAKT,EACjBU,SAAAF,EAAAG,IAAA,MAAA,CAAKC,MAAON,EAAcO,MAAO,CAAEC,gBAAiB,OAAOf,SAE7D,EAGEgB,EAAgB,EAAGL,WAAUM,cAAahB,MAC9C,MACEC,QAAQgB,UAAEA,EAASC,QAAEA,EAAOC,cAAEA,EAAaC,KAAEA,IAC3ChB,oBAAuCC,EAAAA,oBAErCgB,EAAiB,CAACJ,EAAWC,EAASF,EAAWG,EAAgBC,GAEjEE,EAAeN,GAAYN,EACjC,OACEF,EAAAA,IAACC,EAAa,IAAKT,EACjBU,SAAAF,EAAAA,IAAA,MAAA,CAAA,cAAiB,OAAOI,MAAOL,EAAAA,WAAWc,GAAeX,SACtDY,KAGL,EAGEb,EAAgB,EAAGc,aAAYC,OAAMC,QAAOf,cAAagB,MAC7D,MAAMC,QAAEA,GAAYvB,EAAiBA,kBAAuBC,qBAAoB,CAC9EoB,QACAD,OACAD,eAGIK,EAAiBrB,EAAUA,WAAC,CAACoB,EAASE,EAAAA,eAC5C,OAAIH,EAAM,cAENlB,EAAiBG,IAAA,MAAA,CAAA,aAAAe,EAAM,cAAeI,KAAK,MAAMlB,MAAOgB,WACrDlB,IAIEF,EAAAA,WAAKI,MAAOgB,EAAiBlB,SAAAA,GACrC,WArDG,UAAiBA,SAAEA,EAAQX,IAAEA,KAAQC,IACzC,OAAID,IAAQW,EACHF,EAAAA,IAACV,EAAY,CAAAC,IAAKA,KAASC,IAE3BQ,EAAAA,IAACO,EAAa,IAAKf,EAAaU,SAAAA,GAE3C"}