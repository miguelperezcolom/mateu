{"version":3,"file":"UNSAFE_useContainerBreakpointValues.js","sources":["../../../src/hooks/UNSAFE_useContainerBreakpointValues/useContainerBreakpointValues.ts"],"sourcesContent":["import { useContainerBreakpoints } from '../UNSAFE_useContainerBreakpoints';\nimport { defaultBreakpoints, Breakpoints } from '../UNSAFE_useBreakpoints';\n\n/*\n * This allows a user to define key/value pairs that map to each breakpoint.\n * The user's custom value is returned when the specific breakpoint is reached.\n */\ntype DefaultBreakpoints = keyof typeof defaultBreakpoints;\ntype DefaultType<T> = Record<DefaultBreakpoints, T>;\ntype Responsive<V> = Partial<DefaultType<V>>;\n\n/*\n * Custom hook to allow the user to define custom values that are returned if a breakpoint is reached.\n * The Responsive object is a set of one or more key/value pairs, with each breakpoint as a key.\n */\nexport function useContainerBreakpointValues<V>(\n  breakpointValues: Responsive<V>,\n  breakpoints: Breakpoints = defaultBreakpoints\n) {\n  const { breakpointMatches, ref } = useContainerBreakpoints(breakpoints);\n\n  const result = Object.entries(breakpointValues).reduce((p, c) => {\n    const key = c[0]; // first entry in breakpoint values is the key\n    return breakpointMatches[key] ? c : p; // if current breakpoint is true, return it, else stay with previous\n  });\n\n  const breakpoint = result[1]; // second entry in breakpoint values is the value\n\n  return { breakpoint, ref };\n}\n"],"names":["breakpointValues","breakpoints","defaultBreakpoints","breakpointMatches","ref","useContainerBreakpoints","breakpoint","Object","entries","reduce","p","c","key"],"mappings":"6KAgBEA,EACAC,EAA2BC,sBAE3B,MAAMC,kBAAEA,EAAiBC,IAAEA,GAAQC,EAAuBA,wBAACJ,GAS3D,MAAO,CAAEK,WAPMC,OAAOC,QAAQR,GAAkBS,QAAO,CAACC,EAAGC,KACzD,MAAMC,EAAMD,EAAE,GACd,OAAOR,EAAkBS,GAAOD,EAAID,CAAC,IAGb,GAELN,MACvB"}