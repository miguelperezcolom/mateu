{"version":3,"file":"MeterBar-e417440c.js","sources":["../../src/UNSAFE_MeterBar/meterUtils.ts","../../src/UNSAFE_MeterBar/ReferenceLines.tsx","../../src/UNSAFE_MeterBar/ThresholdBar.tsx","../../src/UNSAFE_MeterBar/MeterBarWithDimensions.tsx","../../src/UNSAFE_MeterBar/MeterBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { RefObject } from 'preact';\nimport { ReferenceLine } from '#utils/UNSAFE_meterUtils';\nimport { xUnits } from '#UNSAFE_Theme/utils';\nimport { meterBarVars } from './themes/MeterBarContract.css';\nimport { Size, sizeToCSS } from '#utils/UNSAFE_size';\n\nconst FIT_REF_BAR_PROTRUSION = 16;\n\nconst MAX_VERTICAL_LABEL_WIDTH_IN_XUNITS = 15;\n\nconst REF_LINE_LENGTH_IN_XUNITS = 5;\n\nconst LABEL_GAP = 4;\n\ntype Dimensions = {\n  width: number;\n  height: number;\n};\n\n/**\n * Returns the metric value of the clicked point.\n * @param event The PointerEvent\n * @param dimensionsRef RefObject to stored dimensions of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param step The step value of the meter bar.\n * @param orientation The orientation of the meter bar.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The metric value of the clicked point.\n */\nexport function getValue(\n  event: PointerEvent,\n  dimensionsRef: RefObject<Dimensions>,\n  min: number,\n  max: number,\n  step: number,\n  orientation?: 'horizontal' | 'vertical',\n  isRtl?: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims || dims.width === 0) {\n    return undefined;\n  }\n\n  let val;\n\n  if (orientation === 'horizontal') {\n    const width = event.offsetX;\n    val = min + ((max - min) * (isRtl ? dims.width - width : width)) / dims.width;\n  } else {\n    const height = dims.height - event.offsetY;\n    val = min + ((max - min) * height) / dims.height;\n  }\n  val = Math.round(val / step) * step;\n  return Math.max(min, Math.min(max, val));\n}\n\n/**\n * Returns the true dimension of the meter bar after first render. All dimensions are 0 for initial render.\n * @param element The meter bar track HTML element\n * @returns The dimension of the meter bar.\n */\nexport function getDimensions(element: HTMLElement | null): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const trackDims = element.getBoundingClientRect();\n\n  return {\n    width: trackDims.width,\n    height: trackDims.height\n  };\n}\n\n/**\n * Returns object with 'start' and 'end' keys. Value for each key will be true if at least one ref line with correposnding position is present in meter bar.\n * @param lines The array of reference lines.\n * @returns Returns object with start and end keys.\n */\nexport function getRefLinesInfo(lines?: ReferenceLine[]): {\n  start: boolean;\n  end: boolean;\n} {\n  let refLineInfo = { start: false, end: false };\n  if (lines) {\n    refLineInfo = lines.reduce((acc, cur) => {\n      acc.start = acc.start || cur.position === 'start';\n      acc.end = acc.end || cur.position === 'end' || cur.position == null;\n      return acc;\n    }, refLineInfo);\n  }\n  return refLineInfo;\n}\n\nexport const getMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopStyle: string,\n  barTrackMarginStartStyle: string,\n  barTrackMarginBottomStyle: string,\n  barTrackMarginEndStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopStyle : barTrackMarginStartStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomStyle : barTrackMarginEndStyle);\n  }\n  return className;\n};\n\nexport const getFitMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopFitStyle: string,\n  barTrackMarginStartFitStyle: string,\n  barTrackMarginBottomFitStyle: string,\n  barTrackMarginEndFitStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopFitStyle : barTrackMarginStartFitStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomFitStyle : barTrackMarginEndFitStyle);\n  }\n  return className;\n};\n\nexport const getFitTrackWidth = function (\n  info: { start: boolean; end: boolean },\n  maxLabelWidth: number,\n  width?: number,\n  isHoriz?: boolean\n) {\n  if (width) {\n    if (info.start && !isHoriz) {\n      width = width - FIT_REF_BAR_PROTRUSION;\n    }\n\n    if (info.end && !isHoriz) {\n      width = width - FIT_REF_BAR_PROTRUSION;\n    }\n  }\n\n  if (maxLabelWidth && width) {\n    width -= 2 * maxLabelWidth + 2 * LABEL_GAP;\n  }\n\n  return width;\n};\n\nexport const getFitTrackHeight = function (\n  info: { start: boolean; end: boolean },\n  maxLabelHeight: number,\n  height?: number,\n  isHoriz?: boolean\n) {\n  if (height) {\n    if (info.start && isHoriz) {\n      height = height - FIT_REF_BAR_PROTRUSION;\n    }\n    if (info.end && isHoriz) {\n      height = height - FIT_REF_BAR_PROTRUSION;\n    }\n  }\n\n  if (maxLabelHeight && height) {\n    height -= 2 * maxLabelHeight + 2 * LABEL_GAP;\n  }\n  return height;\n};\n\nexport const getFitMarginStyle = function (\n  maxLabelWidth: number,\n  maxLabelHeight: number,\n  isHoriz: boolean\n) {\n  const refMargin = `${xUnits(4)} + ${LABEL_GAP}px`;\n  if (isHoriz) {\n    return `calc(${refMargin} + ${maxLabelHeight}px) 0 calc(${refMargin} + ${maxLabelHeight}px) 0`;\n  }\n\n  return `0 calc(${refMargin} + ${maxLabelWidth}px) 0 calc(${refMargin} + ${maxLabelWidth}px)`;\n};\n\n/**\n * Returns the translation offset for the reference line label\n */\nexport function getReferenceLineLabelTranslationOffset(\n  isLeft: boolean,\n  isBottom: boolean,\n  isHoriz: boolean,\n  isRtl: boolean,\n  isStartPos: boolean,\n  length?: string,\n  size?: string\n) {\n  const refLineLength = length || xUnits(REF_LINE_LENGTH_IN_XUNITS);\n  const barSize = size || meterBarVars.size;\n  const overHang = `calc(${refLineLength} - ${barSize})`;\n\n  if (isHoriz) {\n    if (isStartPos) {\n      return `${isLeft ? '-50%' : '50%'} calc(-100% - ${overHang} - ${LABEL_GAP}px)`;\n    } else {\n      return `${isLeft ? '-50%' : '50%'} calc(${refLineLength} + ${LABEL_GAP}px)`;\n    }\n  } else {\n    if (isRtl) {\n      return isStartPos\n        ? `calc(100% + ${overHang} + ${LABEL_GAP}px) ${isBottom ? '50%' : '-50%'}`\n        : `calc(0px - ${refLineLength} - ${LABEL_GAP}px) ${isBottom ? '50%' : '-50%'}`;\n    } else {\n      return isStartPos\n        ? `calc(-100% - ${overHang} - ${LABEL_GAP}px) ${isBottom ? '50%' : '-50%'}`\n        : `calc(${refLineLength} + ${LABEL_GAP}px) ${isBottom ? '50%' : '-50%'}`;\n    }\n  }\n}\n\n/**\n * Returns the margin needed to accomodate reference line and label in a sized meter circle.\n */\nexport function getSizedMargin(\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  hasReferenceLine: boolean,\n  hasReferenceLineLabel: boolean,\n  maxRefLabelDims: { width: number; height: number }\n) {\n  const marginValue = `calc(${xUnits(REF_LINE_LENGTH_IN_XUNITS)} - ${meterBarVars.size})`;\n\n  const gap = LABEL_GAP;\n\n  const hasBothPosition = info.start && info.end;\n\n  if (hasReferenceLineLabel) {\n    return isHoriz\n      ? `calc(${maxRefLabelDims.height + gap}px + ${marginValue}) 0 calc(${\n          maxRefLabelDims.height + gap\n        }px + ${marginValue}) 0`\n      : `0 calc(${maxRefLabelDims.width + gap}px + ${marginValue}) 0 calc(${\n          maxRefLabelDims.width + gap\n        }px + ${marginValue})`;\n  } else if (hasReferenceLine) {\n    if (hasBothPosition) {\n      return isHoriz ? `${marginValue} 0 ${marginValue}` : `0 ${marginValue} 0 ${marginValue}`;\n    } else if (info.start && !info.end) {\n      return isHoriz ? `${marginValue} 0 0 0` : `0 ${marginValue} 0 0`;\n    } else if (!info.start && info.end) {\n      return isHoriz ? `0 0 ${marginValue} 0` : `0 0 0 ${marginValue}`;\n    }\n  }\n  return undefined;\n}\n\nexport function getComponentStyle(\n  isFit: boolean,\n  isHoriz: boolean,\n  length: Size,\n  maxRefLabelDims: { width: number; height: number },\n  fitTrackHeight?: number,\n  fitTrackWidth?: number\n) {\n  return {\n    width: isFit ? fitTrackWidth : isHoriz ? sizeToCSS(length) : undefined,\n    height: isFit ? fitTrackHeight : isHoriz ? undefined : sizeToCSS(length),\n    margin: isFit\n      ? getFitMarginStyle(maxRefLabelDims.width, maxRefLabelDims.height, isHoriz)\n      : undefined\n  };\n}\n\nexport function getReferenceLineAlignmentStyle(\n  isLeft: boolean,\n  isRtl: boolean,\n  maxLabelWidth: number,\n  percentage: number\n) {\n  return {\n    left: isLeft ? `max(${maxLabelWidth}px, ${isRtl ? 100 - percentage : percentage}%)` : undefined,\n    right: !isLeft\n      ? `max(${maxLabelWidth}px, ${isRtl ? percentage : 100 - percentage}%)`\n      : undefined\n  };\n}\n\nexport function getReferenceLineTranslation(isHoriz: boolean, isRtl: boolean, percent: number) {\n  if (percent === 0 && !isRtl) {\n    return;\n  }\n  if (percent === 100) {\n    if (isRtl) return isHoriz ? '3px' : '0 3px';\n    return isHoriz ? '-2px' : '0 2px';\n  }\n  return isHoriz ? (isRtl ? '1px 0' : '-1px 0') : isRtl ? '0 -1px' : '0 1px';\n}\n\nexport function getReferenceLinePosition(\n  isHoriz: boolean,\n  isLeft: boolean,\n  isBottom: boolean,\n  isRtl: boolean,\n  percent: number,\n  maxLabelWidth: number,\n  maxLabelHeight: number\n) {\n  return {\n    ...(isHoriz ? getReferenceLineAlignmentStyle(isLeft, isRtl, maxLabelWidth / 2, percent) : {}),\n    bottom: isHoriz\n      ? undefined\n      : isBottom\n      ? `max(${maxLabelHeight / 2 - LABEL_GAP}px, ${percent}%)`\n      : undefined,\n    top: isHoriz\n      ? undefined\n      : !isBottom\n      ? `max(${maxLabelHeight / 2 - LABEL_GAP}px, ${100 - percent}%)`\n      : undefined,\n    maxWidth: !isHoriz ? xUnits(MAX_VERTICAL_LABEL_WIDTH_IN_XUNITS) : undefined\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { VisThresholdsColors } from '#utils/UNSAFE_meterUtils';\nimport { getVisThresholdColor } from '#utils/UNSAFE_meterUtils';\nimport { CSSProperties } from 'preact/compat';\nimport {\n  getReferenceLineLabelTranslationOffset,\n  getReferenceLinePosition,\n  getReferenceLineTranslation\n} from './meterUtils';\n\ntype ReferenceLineProps = {\n  orientation: 'horizontal' | 'vertical';\n  percent: number;\n  position?: 'start' | 'end';\n  color?: ColorProps['color'] | VisThresholdsColors;\n  length?: string;\n  label?: string;\n  maxLabelWidth: number;\n  maxLabelHeight: number;\n  trackSize: string;\n  labelStyle?: Partial<CSSStyleDeclaration>;\n};\n\nexport function ReferenceLineBar({\n  orientation,\n  percent,\n  color,\n  position,\n  length,\n  label,\n  maxLabelWidth,\n  maxLabelHeight,\n  trackSize,\n  labelStyle\n}: ReferenceLineProps) {\n  const isHoriz = orientation === 'horizontal';\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const isStartPos = position === 'start';\n  const percentage = `${percent}%`;\n  const width = isHoriz ? undefined : length;\n  const height = isHoriz ? length : undefined;\n  const isLeft = (percent < 50 && !isRtl) || (percent > 50 && isRtl);\n  const isBottom = percent < 50;\n  return (\n    <>\n      <div\n        class={classNames([\n          styles.referenceLinesBaseStyle,\n          isHoriz ? styles.referenceLinesHorizontalStyle : styles.referenceLinesVerticalStyle,\n          isStartPos\n            ? isHoriz\n              ? styles.referenceLinesHoriontalStartStyle\n              : isRtl\n              ? styles.referenceLinesVerticalStartRtlStyle\n              : styles.referenceLinesVerticalStartLtrStyle\n            : ''\n        ])}\n        style={{\n          left: isHoriz && !isRtl ? percentage : undefined,\n          right: isHoriz && isRtl ? percentage : undefined,\n          bottom: isHoriz ? undefined : percentage,\n          backgroundColor: getVisThresholdColor(color),\n          width,\n          height,\n          translate: getReferenceLineTranslation(isHoriz, isRtl, percent)\n        }}></div>\n\n      {label && (\n        <div\n          className={styles.labelDivStyle}\n          style={{\n            ...getReferenceLinePosition(\n              isHoriz,\n              isLeft,\n              isBottom,\n              isRtl,\n              percent,\n              maxLabelWidth,\n              maxLabelHeight\n            ),\n            translate: getReferenceLineLabelTranslationOffset(\n              isLeft,\n              isBottom,\n              isHoriz,\n              isRtl,\n              isStartPos,\n              length,\n              trackSize\n            ),\n            ...(labelStyle as CSSProperties)\n          }}>\n          {label}\n        </div>\n      )}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { JSX } from 'preact';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { styles } from './themes/MeterBarStyles.css';\nimport { VisThresholdsColors, getVisThresholdColor } from '#utils/UNSAFE_meterUtils';\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'class'>;\ntype ThresholdBarProps = IntrinsicProps & {\n  color?: ColorProps['color'] | VisThresholdsColors;\n  length: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport function ThresholdBar({ color, length, orientation, ...otherProps }: ThresholdBarProps) {\n  const { direction } = useUser();\n  const isHoriz = orientation === 'horizontal';\n  const isRtl = direction === 'rtl';\n\n  return (\n    <div\n      class={classNames([\n        styles.thresholdBarBaseStyle,\n        isHoriz\n          ? isRtl\n            ? styles.thresholdBarHorizontalBarTrackSectionRtlStyle\n            : styles.thresholdBarHorizontalBarTrackSectionLtrStyle\n          : styles.thresholdBarVerticalBarTrackSectionStyle,\n        otherProps.class\n      ])}\n      style={{\n        width: isHoriz ? length : '100%',\n        height: isHoriz ? '100%' : length,\n        backgroundColor: getVisThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useEffect, useMemo, useRef } from 'preact/hooks';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '#hooks/PRIVATE_useVisMeterEvents';\n\nimport {\n  getMeterAriaProps,\n  validateRange,\n  getTrackAndIndicatorColor\n} from '#utils/PRIVATE_meterUtils';\n\nimport { ReferenceLine, Threshold } from '#utils/UNSAFE_meterUtils';\nimport { BarTrack, BarValue } from '#PRIVATE_Meter';\nimport {\n  getDimensions,\n  getFitMarginClass,\n  getRefLinesInfo,\n  getValue,\n  getFitTrackWidth,\n  getFitTrackHeight,\n  getComponentStyle,\n  getSizedMargin\n} from './meterUtils';\nimport { ReferenceLineBar } from './ReferenceLines';\nimport { ThresholdBar } from './ThresholdBar';\nimport { MeterBarProps } from './meterBar.types';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { MeterBarStyles, MeterBarVariantOptions } from './themes/MeterBarStyles.css';\nimport { MeterBarRedwoodTheme } from './themes/redwood/MeterBarTheme';\nimport { useTestId } from '#hooks/UNSAFE_useTestId';\nimport { meterBarVars } from './themes/MeterBarContract.css';\nimport { xUnits } from '#UNSAFE_Theme';\nimport {\n  getDefaultReferenceLineLabelFontSize,\n  getMaxRefLabelDims,\n  hasLabelledReferenceLine\n} from '#utils/PRIVATE_meterUtils/meterUtils';\nimport { useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { useCssVars } from '#hooks/PRIVATE_useCssVars';\nimport { typographyVars } from '@oracle/oraclejet-internal-theme-contract/themeContract.css';\n\ntype MeterBarWithDimensionsProps = Omit<MeterBarProps, 'width' | 'height'> & {\n  width?: number;\n  height?: number;\n};\n\nexport function MeterBarWithDimensions({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  length = '100%',\n  width,\n  height,\n  size,\n  orientation = 'horizontal',\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  testId,\n  baseline,\n  isReadonly,\n  ...props\n}: MeterBarWithDimensionsProps) {\n  const testIdProps = useTestId(testId);\n\n  validateRange(min, max, value, step, isReadonly, baseline);\n  const currentInputRef = useRef<number>();\n\n  const isHoriz = orientation === 'horizontal';\n  const barTrackRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n  const { direction, forcedColors } = useUser();\n  const isRtl = direction === 'rtl';\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput) {\n      dimensionsRef.current = getDimensions(barTrackRef.current);\n    }\n  }, [size, length, orientation, props.onCommit, props.onInput]);\n\n  const { textMeasureContent, getTextDimensions } = useTextDimensions();\n\n  const getValueFromEvent = (event: PointerEvent): number | undefined => {\n    // only evaluate value from bar track\n    if (event.target == barTrackRef.current) {\n      return getValue(event, dimensionsRef, min, max, step, orientation, isRtl);\n    }\n    return;\n  };\n\n  const isPointerActiveRef = useRef(false);\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    barTrackRef,\n    currentInputRef,\n    isPointerActiveRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    isPointerActiveRef,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaLabelProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds,\n    isReadonly\n  );\n  const mergedProps = mergeProps(\n    pointerEventsProps,\n    keyboardEventsProps,\n    datatipProps,\n    ariaLabelProps\n  );\n  const resolvedBaseline = baseline !== undefined ? Math.max(min, Math.min(baseline, max)) : min;\n  const baselineOffsetPercent = ((resolvedBaseline - min) * 100) / (max - min);\n  const valueBarOffsetPercent = ((value - min) * 100) / (max - min);\n\n  const valueBarStartOffset = Math.min(baselineOffsetPercent, valueBarOffsetPercent);\n  const valueBarLength = `${Math.abs(baselineOffsetPercent - valueBarOffsetPercent)}%`;\n\n  const valueBarSize = `${Math.max(0, Math.min(1, indicatorSize)) * 100}%`;\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const refLineInfo = getRefLinesInfo(props.referenceLines);\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n\n  const {\n    classes,\n    styles: {\n      interactiveStyle,\n\n      barValueBaseStyle,\n      barValueVerticalStyle,\n      barValueHorizontalStyle,\n      barValueHighContrastStyle,\n\n      barTrackBaseStyle,\n\n      barTrackHorizontalSizeStyle,\n      barTrackVerticalSizeStyle,\n      barTrackBorderStyle,\n\n      barTrackMarginTopFitStyle,\n      barTrackMarginStartFitStyle,\n      barTrackMarginBottomFitStyle,\n      barTrackMarginEndFitStyle,\n\n      trackSectionHorizontalFirstStyle,\n      trackSectionHorizontalLastStyle,\n\n      trackSectionVerticalFirstStyle,\n      trackSectionVerticalLastStyle,\n\n      trackSectionRoundedCornersStyle\n    }\n  } = useComponentTheme<MeterBarVariantOptions, MeterBarStyles>(MeterBarRedwoodTheme, {\n    size,\n    orientation\n  });\n\n  const isFit = size === 'fit';\n  const hasReferenceLabel = hasLabelledReferenceLine(props.referenceLines);\n  const fontSize = getDefaultReferenceLineLabelFontSize('sm');\n\n  const meterBarCssVars = useMemo(\n    () => [\n      {\n        tokenVar: fontSize,\n        key: 'labelFontSize',\n        cssProp: 'font-size'\n      },\n      {\n        tokenVar: typographyVars.body.md.lineHeight,\n        key: 'lineHeight',\n        cssProp: 'line-height'\n      }\n    ],\n    [fontSize]\n  );\n\n  const { resolvedVars, cssContent } = useCssVars(meterBarCssVars);\n\n  const { dims, maxRefLabelDims } = getMaxRefLabelDims(\n    resolvedVars['fontSize'],\n    resolvedVars['lineHeight'],\n    props.referenceLines,\n    getTextDimensions\n  );\n\n  const fitTrackWidth = getFitTrackWidth(refLineInfo, maxRefLabelDims.width, width, isHoriz);\n  const fitTrackHeight = getFitTrackHeight(refLineInfo, maxRefLabelDims.height, height, isHoriz);\n  const fitTrackSize = isHoriz ? fitTrackHeight : fitTrackWidth;\n\n  return (\n    <>\n      <div\n        tabIndex={!isTabbable ? -1 : 0}\n        {...testIdProps}\n        {...mergedProps}\n        style={getComponentStyle(\n          isFit,\n          isHoriz,\n          length,\n          maxRefLabelDims,\n          fitTrackHeight,\n          fitTrackWidth\n        )}\n        class={classNames([\n          classes,\n          ...(isFit\n            ? getFitMarginClass(\n                refLineInfo,\n                isHoriz,\n                barTrackMarginTopFitStyle,\n                barTrackMarginStartFitStyle,\n                barTrackMarginBottomFitStyle,\n                barTrackMarginEndFitStyle\n              )\n            : [])\n        ])}>\n        <BarTrack\n          ref={barTrackRef}\n          orientation={orientation}\n          color={\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? 'transparent'\n              : trackColor\n          }\n          class={classNames([\n            barTrackBaseStyle,\n            isInteractive ? interactiveStyle : '',\n            isHoriz ? barTrackHorizontalSizeStyle : barTrackVerticalSizeStyle,\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? undefined\n              : barTrackBorderStyle\n          ])}\n          style={{\n            margin: !isFit\n              ? getSizedMargin(\n                  refLineInfo,\n                  isHoriz,\n                  !!props.referenceLines?.length,\n                  hasReferenceLabel,\n                  maxRefLabelDims\n                )\n              : undefined\n          }}>\n          {thresholdDisplay === 'all' &&\n            props.thresholds\n              ?.filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n              .sort((a, b) => a.max - b.max)\n              .map((threshold: Threshold, index, thresholds) => {\n                const diff =\n                  index === 0 ? threshold.max - min : threshold.max - thresholds[index - 1].max;\n                const trackSectionLastStyle = isHoriz\n                  ? trackSectionHorizontalLastStyle\n                  : trackSectionVerticalLastStyle;\n                let trackSectionStyleClass =\n                  index === 0\n                    ? isHoriz\n                      ? trackSectionHorizontalFirstStyle\n                      : trackSectionVerticalFirstStyle\n                    : '';\n                if (threshold.max === max)\n                  trackSectionStyleClass =\n                    index === 0\n                      ? trackSectionRoundedCornersStyle // Single threshold from min to max\n                      : trackSectionLastStyle;\n                return (\n                  <>\n                    <ThresholdBar\n                      class={trackSectionStyleClass}\n                      orientation={orientation}\n                      length={`${(diff * 100) / (max - min)}%`}\n                      color={threshold.color}\n                    />\n                    {isTrackRendered && index === thresholds.length - 1 && threshold.max < max ? (\n                      <ThresholdBar\n                        class={trackSectionLastStyle}\n                        color={trackColor}\n                        orientation={orientation}\n                        length={`${((max - thresholds[index].max) * 100) / (max - min)}%`}\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                );\n              })}\n          <BarValue\n            left={isHoriz && !isRtl ? `${valueBarStartOffset}%` : undefined}\n            bottom={!isHoriz ? `${valueBarStartOffset}%` : undefined}\n            right={isHoriz && isRtl ? `${valueBarStartOffset}%` : undefined}\n            width={isHoriz ? valueBarLength : '100%'}\n            height={isHoriz ? '100%' : valueBarLength}\n            length={valueBarLength}\n            size={valueBarSize}\n            orientation={orientation}\n            class={classNames([\n              barValueBaseStyle,\n              isHoriz ? barValueHorizontalStyle : barValueVerticalStyle,\n              forcedColors === 'active' ? barValueHighContrastStyle : ''\n            ])}\n            color={indicatorColor}\n          />\n          {props.referenceLines?.map((refLine: ReferenceLine, index: number) => (\n            <ReferenceLineBar\n              label={refLine.label}\n              labelStyle={{\n                fontSize: resolvedVars['labelFontSize'],\n                ...refLine.labelStyle\n              }}\n              color={refLine.color}\n              maxLabelWidth={dims[index]?.width}\n              maxLabelHeight={dims[index]?.height}\n              orientation={orientation}\n              percent={((refLine.value - min) * 100) / (max - min)}\n              position={refLine.position}\n              trackSize={isFit ? `${fitTrackSize}px` : meterBarVars.size}\n              length={isFit ? `calc(${xUnits(4)} + ${fitTrackSize}px)` : undefined}\n            />\n          ))}\n        </BarTrack>\n      </div>\n      {cssContent}\n      {datatipContent}\n      {textMeasureContent}\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { MeterBarWithDimensions } from './MeterBarWithDimensions';\nimport { MeterBarProps } from './meterBar.types';\n\n/**\n * A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterBar({ orientation, length, size, ...props }: MeterBarProps) {\n  return (\n    <>\n      {size === 'fit' ? (\n        <TrackResizeContainer width=\"100%\" height=\"100%\">\n          {(width, height) => (\n            <MeterBarWithDimensions\n              width={width}\n              height={height}\n              orientation={orientation}\n              size={size}\n              {...props}\n            />\n          )}\n        </TrackResizeContainer>\n      ) : (\n        <MeterBarWithDimensions size={size} length={length} orientation={orientation} {...props} />\n      )}\n    </>\n  );\n}\n"],"names":["getDimensions","element","width","height","trackDims","getBoundingClientRect","getFitMarginClass","info","isHoriz","barTrackMarginTopFitStyle","barTrackMarginStartFitStyle","barTrackMarginBottomFitStyle","barTrackMarginEndFitStyle","className","start","push","end","getFitMarginStyle","maxLabelWidth","maxLabelHeight","refMargin","xUnits","getReferenceLineLabelTranslationOffset","isLeft","isBottom","isRtl","isStartPos","length","size","refLineLength","overHang","meterBarVars","getSizedMargin","hasReferenceLine","hasReferenceLineLabel","maxRefLabelDims","marginValue","hasBothPosition","getComponentStyle","isFit","fitTrackHeight","fitTrackWidth","sizeToCSS","undefined","margin","getReferenceLineAlignmentStyle","percentage","left","right","getReferenceLineTranslation","percent","getReferenceLinePosition","bottom","top","maxWidth","ReferenceLineBar","orientation","color","position","label","trackSize","labelStyle","direction","useUser","_jsxs","jsxs","_Fragment","Fragment","children","_jsx","class","classNames","styles","referenceLinesBaseStyle","referenceLinesHorizontalStyle","referenceLinesVerticalStyle","referenceLinesHoriontalStartStyle","referenceLinesVerticalStartRtlStyle","referenceLinesVerticalStartLtrStyle","style","backgroundColor","getVisThresholdColor","translate","labelDivStyle","ThresholdBar","otherProps","thresholdBarBaseStyle","thresholdBarHorizontalBarTrackSectionRtlStyle","thresholdBarHorizontalBarTrackSectionLtrStyle","thresholdBarVerticalBarTrackSectionStyle","MeterBarWithDimensions","max","min","value","step","isTrackRendered","thresholdDisplay","indicatorSize","testId","baseline","isReadonly","props","testIdProps","useTestId","validateRange","currentInputRef","useRef","barTrackRef","dimensionsRef","forcedColors","useEffect","onCommit","onInput","current","textMeasureContent","getTextDimensions","useTextDimensions","isPointerActiveRef","pointerEventsProps","usePointerEvents","event","target","dims","val","offsetX","offsetY","Math","round","getValue","keyboardEventsProps","useKeyboardEvents","datatipContent","datatipProps","useMeterDatatip","datatip","ariaLabelProps","getMeterAriaProps","thresholds","mergedProps","mergeProps","baselineOffsetPercent","valueBarOffsetPercent","valueBarStartOffset","valueBarLength","abs","valueBarSize","trackColor","indicatorColor","getTrackAndIndicatorColor","refLineInfo","lines","reduce","acc","cur","getRefLinesInfo","referenceLines","isInteractive","isTabbable","useTabbableMode","classes","interactiveStyle","barValueBaseStyle","barValueVerticalStyle","barValueHorizontalStyle","barValueHighContrastStyle","barTrackBaseStyle","barTrackHorizontalSizeStyle","barTrackVerticalSizeStyle","barTrackBorderStyle","trackSectionHorizontalFirstStyle","trackSectionHorizontalLastStyle","trackSectionVerticalFirstStyle","trackSectionVerticalLastStyle","trackSectionRoundedCornersStyle","useComponentTheme","MeterBarRedwoodTheme","hasReferenceLabel","hasLabelledReferenceLine","fontSize","getDefaultReferenceLineLabelFontSize","meterBarCssVars","useMemo","tokenVar","key","cssProp","typographyVars","body","md","lineHeight","resolvedVars","cssContent","useCssVars","getMaxRefLabelDims","getFitTrackWidth","getFitTrackHeight","fitTrackSize","jsx","tabIndex","BarTrack","ref","filter","threshold","sort","a","b","map","index","diff","trackSectionLastStyle","trackSectionStyleClass","BarValue","refLine","TrackResizeContainer"],"mappings":"ouBAsEM,SAAUA,EAAcC,GAC5B,IAAKA,EACH,MAAO,CACLC,MAAO,EACPC,OAAQ,GAGZ,MAAMC,EAAYH,EAAQI,wBAE1B,MAAO,CACLH,MAAOE,EAAUF,MACjBC,OAAQC,EAAUD,OAEtB,CA0CO,MAAMG,EAAoB,SAC/BC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAY,GASlB,OAPIN,EAAKO,OACPD,EAAUE,KAAKP,EAAUC,EAA4BC,GAGnDH,EAAKS,KACPH,EAAUE,KAAKP,EAAUG,EAA+BC,GAEnDC,CACT,EA8CaI,EAAoB,SAC/BC,EACAC,EACAX,GAEA,MAAMY,EAAY,GAAGC,SAAO,WAC5B,OAAIb,EACK,QAAQY,OAAeD,eAA4BC,OAAeD,SAGpE,UAAUC,OAAeF,eAA2BE,OAAeF,MAC5E,EAKgB,SAAAI,EACdC,EACAC,EACAhB,EACAiB,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAgBF,GAAUN,EAAMA,OApMN,GAsM1BS,EAAW,QAAQD,OADTD,GAAQG,EAAYA,aAACH,QAGrC,OAAIpB,EACEkB,EACK,GAAGH,EAAS,OAAS,sBAAsBO,WAE3C,GAAGP,EAAS,OAAS,cAAcM,WAGxCJ,EACKC,EACH,eAAeI,YAA8BN,EAAW,MAAQ,SAChE,cAAcK,YAAmCL,EAAW,MAAQ,SAEjEE,EACH,gBAAgBI,YAA8BN,EAAW,MAAQ,SACjE,QAAQK,YAAmCL,EAAW,MAAQ,QAGxE,CAKM,SAAUQ,EACdzB,EACAC,EACAyB,EACAC,EACAC,GAEA,MAAMC,EAAc,QAAQf,SArOI,QAqOmCU,EAAYA,aAACH,QAI1ES,EAAkB9B,EAAKO,OAASP,EAAKS,IAE3C,GAAIkB,EACF,OAAO1B,EACH,QAAQ2B,EAAgBhC,OA3Od,SA2OkCiC,aAC1CD,EAAgBhC,OA5OR,SA6OFiC,OACR,UAAUD,EAAgBjC,MA9OhB,SA8OmCkC,aAC3CD,EAAgBjC,MA/OR,SAgPFkC,KACP,GAAIH,EAAkB,CAC3B,GAAII,EACF,OAAO7B,EAAU,GAAG4B,OAAiBA,IAAgB,KAAKA,OAAiBA,IACtE,GAAI7B,EAAKO,QAAUP,EAAKS,IAC7B,OAAOR,EAAU,GAAG4B,UAAsB,KAAKA,QAC1C,IAAK7B,EAAKO,OAASP,EAAKS,IAC7B,OAAOR,EAAU,OAAO4B,MAAkB,SAASA,GAEtD,CAEH,CAEgB,SAAAE,EACdC,EACA/B,EACAmB,EACAQ,EACAK,EACAC,GAEA,MAAO,CACLvC,MAAOqC,EAAQE,EAAgBjC,EAAUkC,EAASA,UAACf,QAAUgB,EAC7DxC,OAAQoC,EAAQC,EAAiBhC,OAAUmC,EAAYD,EAASA,UAACf,GACjEiB,OAAQL,EACJtB,EAAkBkB,EAAgBjC,MAAOiC,EAAgBhC,OAAQK,QACjEmC,EAER,CAEM,SAAUE,EACdtB,EACAE,EACAP,EACA4B,GAEA,MAAO,CACLC,KAAMxB,EAAS,OAAOL,QAAoBO,EAAQ,IAAMqB,EAAaA,WAAiBH,EACtFK,MAAQzB,OAEJoB,EADA,OAAOzB,QAAoBO,EAAQqB,EAAa,IAAMA,MAG9D,UAEgBG,EAA4BzC,EAAkBiB,EAAgByB,GAC5E,GAAgB,IAAZA,GAAkBzB,EAGtB,OAAgB,MAAZyB,EACEzB,EAAcjB,EAAU,MAAQ,QAC7BA,EAAU,OAAS,QAErBA,EAAWiB,EAAQ,QAAU,SAAYA,EAAQ,SAAW,OACrE,CAEgB,SAAA0B,EACd3C,EACAe,EACAC,EACAC,EACAyB,EACAhC,EACAC,GAEA,MAAO,IACDX,EAAUqC,EAA+BtB,EAAQE,EAAOP,EAAgB,EAAGgC,GAAW,GAC1FE,OAAQ5C,OACJmC,EACAnB,EACA,OAAOL,EAAiB,EArTd,QAqTkC+B,WAC5CP,EACJU,IAAK7C,GAEAgB,OADDmB,EAEA,OAAOxB,EAAiB,EA1Td,QA0TkC,IAAM+B,MAEtDI,SAAW9C,OAAuDmC,EAA7CtB,SAhUkB,IAkU3C,CChTM,SAAUkC,GAAiBC,YAC/BA,EAAWN,QACXA,EAAOO,MACPA,EAAKC,SACLA,EAAQ/B,OACRA,EAAMgC,MACNA,EAAKzC,cACLA,EAAaC,eACbA,EAAcyC,UACdA,EAASC,WACTA,IAEA,MAAMrD,EAA0B,eAAhBgD,GACVM,UAAEA,GAAcC,EAAAA,UAChBtC,EAAsB,QAAdqC,EACRpC,EAA0B,UAAbgC,EACbZ,EAAa,GAAGI,KAChBhD,EAAQM,OAAUmC,EAAYhB,EAC9BxB,EAASK,EAAUmB,OAASgB,EAC5BpB,EAAU2B,EAAU,KAAOzB,GAAWyB,EAAU,IAAMzB,EACtDD,EAAW0B,EAAU,GAC3B,OACEc,EACEC,KAAAC,EAAAC,SAAA,CAAAC,SAAA,CAAAC,EAAAA,IAAA,MAAA,CACEC,MAAOC,aAAW,CAChBC,EAAAA,OAAOC,wBACPjE,EAAUgE,EAAMA,OAACE,8BAAgCF,EAAAA,OAAOG,4BACxDjD,EACIlB,EACEgE,EAAAA,OAAOI,kCACPnD,EACA+C,EAAAA,OAAOK,oCACPL,EAAAA,OAAOM,oCACT,KAENC,MAAO,CACLhC,KAAMvC,IAAYiB,EAAQqB,OAAaH,EACvCK,MAAOxC,GAAWiB,EAAQqB,OAAaH,EACvCS,OAAQ5C,OAAUmC,EAAYG,EAC9BkC,gBAAiBC,EAAoBA,qBAACxB,GACtCvD,QACAC,SACA+E,UAAWjC,EAA4BzC,EAASiB,EAAOyB,MAG1DS,GACCU,MACE,MAAA,CAAAxD,UAAW2D,EAAAA,OAAOW,cAClBJ,MAAO,IACF5B,EACD3C,EACAe,EACAC,EACAC,EACAyB,EACAhC,EACAC,GAEF+D,UAAW5D,EACTC,EACAC,EACAhB,EACAiB,EACAC,EACAC,EACAiC,MAEEC,GACLO,SACAT,MAKX,CCtFgB,SAAAyB,GAAa3B,MAAEA,EAAK9B,OAAEA,EAAM6B,YAAEA,KAAgB6B,IAC5D,MAAMvB,UAAEA,GAAcC,EAAAA,UAChBvD,EAA0B,eAAhBgD,EACV/B,EAAsB,QAAdqC,EAEd,OACEO,MAAA,MAAA,CACEC,MAAOC,EAAAA,WAAW,CAChBC,EAAAA,OAAOc,sBACP9E,EACIiB,EACE+C,EAAAA,OAAOe,8CACPf,EAAAA,OAAOgB,8CACThB,EAAAA,OAAOiB,yCACXJ,EAAWf,QAEbS,MAAO,CACL7E,MAAOM,EAAUmB,EAAS,OAC1BxB,OAAQK,EAAU,OAASmB,EAC3BqD,gBAAiBC,EAAoBA,qBAACxB,KAG9C,CCgBM,SAAUiC,GAAuBC,IACrCA,EAAM,IAAGC,IACTA,EAAM,EAACC,MACPA,EAAQ,EAACC,KACTA,EAAO,EAACnE,OACRA,EAAS,OAAMzB,MACfA,EAAKC,OACLA,EAAMyB,KACNA,EAAI4B,YACJA,EAAc,aAAYuC,gBAC1BA,GAAkB,EAAIC,iBACtBA,EAAmB,MAAKC,cACxBA,EAAgB,EAACC,OACjBA,EAAMC,SACNA,EAAQC,WACRA,KACGC,IAEH,MAAMC,EAAcC,YAAUL,GAE9BM,EAAaA,cAACZ,EAAKD,EAAKE,EAAOC,EAAMM,EAAYD,GACjD,MAAMM,EAAkBC,EAAAA,SAElBlG,EAA0B,eAAhBgD,EACVmD,EAAcD,SAAuB,MACrCE,EAAgBF,EAAMA,OAAC1G,EAAc,QACrC8D,UAAEA,EAAS+C,aAAEA,GAAiB9C,EAAOA,UACrCtC,EAAsB,QAAdqC,EAEdgD,EAAAA,WAAU,MACJT,EAAMU,UAAYV,EAAMW,WAC1BJ,EAAcK,QAAUjH,EAAc2G,EAAYM,SACnD,GACA,CAACrF,EAAMD,EAAQ6B,EAAa6C,EAAMU,SAAUV,EAAMW,UAErD,MAAME,mBAAEA,EAAkBC,kBAAEA,GAAsBC,EAAiBA,oBAU7DC,EAAqBX,UAAO,GAE5BY,EAAqBC,EAAAA,iBACzB1B,GAXyB2B,IAEzB,GAAIA,EAAMC,QAAUd,EAAYM,QAC9B,OH9DU,SACdO,EACAZ,EACAhB,EACAD,EACAG,EACAtC,EACA/B,GAEA,MAAMiG,EAAOd,EAAcK,QAC3B,IAAKS,GAAuB,IAAfA,EAAKxH,MAChB,OAGF,IAAIyH,EAEJ,GAAoB,eAAhBnE,EAA8B,CAChC,MAAMtD,EAAQsH,EAAMI,QACpBD,EAAM/B,GAAQD,EAAMC,IAAQnE,EAAQiG,EAAKxH,MAAQA,EAAQA,GAAUwH,EAAKxH,KACzE,MAECyH,EAAM/B,GAAQD,EAAMC,IADL8B,EAAKvH,OAASqH,EAAMK,SACEH,EAAKvH,OAG5C,OADAwH,EAAMG,KAAKC,MAAMJ,EAAM7B,GAAQA,EACxBgC,KAAKnC,IAAIC,EAAKkC,KAAKlC,IAAID,EAAKgC,GACrC,CGqCaK,CAASR,EAAOZ,EAAehB,EAAKD,EAAKG,EAAMtC,EAAa/B,EAE9D,GAQPkF,EACAF,EACAY,EACAhB,EAAMU,SACNV,EAAMW,SAGFiB,EAAsBC,EAAAA,kBAC1BrC,EACAD,EACAD,EACAG,EACAW,EACAJ,EAAMU,SACNV,EAAMW,UAGFmB,eAAEA,EAAcC,aAAEA,IAAiBC,EAAeA,gBACtDxC,EACAwB,EACAhB,EAAMiC,QACNjC,EAAM,qBAGFkC,GAAiBC,EAAiBA,kBACtC3C,EACAD,EACAD,EACAU,EAAM,cACNA,EAAM,mBACNA,EAAMoC,WACNrC,GAEIsC,GAAcC,EAAAA,WAClBrB,EACAW,EACAG,GACAG,IAGIK,GAAoD,WADpBjG,IAAbwD,EAAyB2B,KAAKnC,IAAIC,EAAKkC,KAAKlC,IAAIO,EAAUR,IAAQC,GACxCA,IAAeD,EAAMC,GAClEiD,GAAyC,KAAfhD,EAAQD,IAAeD,EAAMC,GAEvDkD,GAAsBhB,KAAKlC,IAAIgD,GAAuBC,IACtDE,GAAiB,GAAGjB,KAAKkB,IAAIJ,GAAwBC,OAErDI,GAA4D,IAA1CnB,KAAKnC,IAAI,EAAGmC,KAAKlC,IAAI,EAAGK,IAA3B,KACfiD,WAAEA,GAAUC,eAAEA,IAAmBC,EAAAA,0BACrCvD,EACAG,EACAK,EAAM6C,WACN7C,EAAM8C,eACN9C,EAAMoC,YAGFY,GH3EF,SAA0BC,GAI9B,IAAID,EAAc,CAAEvI,OAAO,EAAOE,KAAK,GAQvC,OAPIsI,IACFD,EAAcC,EAAMC,QAAO,CAACC,EAAKC,KAC/BD,EAAI1I,MAAQ0I,EAAI1I,OAA0B,UAAjB2I,EAAI/F,SAC7B8F,EAAIxI,IAAMwI,EAAIxI,KAAwB,QAAjByI,EAAI/F,UAAsC,MAAhB+F,EAAI/F,SAC5C8F,IACNH,IAEEA,CACT,CG8DsBK,CAAgBrD,EAAMsD,gBACpCC,GAAgBvD,EAAMU,UAAYV,EAAMW,SACxC6C,WAAEA,IAAeC,EAAAA,mBAEjBC,QACJA,GACAvF,QAAQwF,iBACNA,GAAgBC,kBAEhBA,GAAiBC,sBACjBA,GAAqBC,wBACrBA,GAAuBC,0BACvBA,GAAyBC,kBAEzBA,GAAiBC,4BAEjBA,GAA2BC,0BAC3BA,GAAyBC,oBACzBA,GAAmB/J,0BAEnBA,GAAyBC,4BACzBA,GAA2BC,6BAC3BA,GAA4BC,0BAC5BA,GAAyB6J,iCAEzBA,GAAgCC,gCAChCA,GAA+BC,+BAE/BA,GAA8BC,8BAC9BA,GAA6BC,gCAE7BA,KAEAC,EAAAA,kBAA0DC,EAAAA,qBAAsB,CAClFnJ,OACA4B,gBAGIjB,GAAiB,QAATX,EACRoJ,GAAoBC,EAAAA,yBAAyB5E,EAAMsD,gBACnDuB,GAAWC,uCAAqC,MAEhDC,GAAkBC,EAAAA,SACtB,IAAM,CACJ,CACEC,SAAUJ,GACVK,IAAK,gBACLC,QAAS,aAEX,CACEF,SAAUG,EAAcA,eAACC,KAAKC,GAAGC,WACjCL,IAAK,aACLC,QAAS,iBAGb,CAACN,MAGGW,aAAEA,GAAYC,WAAEA,IAAeC,EAAUA,WAACX,KAE1C1D,KAAEA,GAAIvF,gBAAEA,IAAoB6J,EAAAA,mBAChCH,GAAuB,SACvBA,GAAyB,WACzBxF,EAAMsD,eACNxC,GAGI1E,GHvFwB,SAC9BlC,EACAW,EACAhB,EACAM,GAgBA,OAdIN,IACEK,EAAKO,QAAUN,IACjBN,GA3IyB,IA8IvBK,EAAKS,MAAQR,IACfN,GA/IyB,KAmJzBgB,GAAiBhB,IACnBA,GAAS,EAAIgB,EAAgB,GAGxBhB,CACT,CGkEwB+L,CAAiB5C,GAAalH,GAAgBjC,MAAOA,EAAOM,GAC5EgC,GHjEyB,SAC/BjC,EACAY,EACAhB,EACAK,GAcA,OAZIL,IACEI,EAAKO,OAASN,IAChBL,GAlKyB,IAoKvBI,EAAKS,KAAOR,IACdL,GArKyB,KAyKzBgB,GAAkBhB,IACpBA,GAAU,EAAIgB,EAAiB,GAE1BhB,CACT,CG8CyB+L,CAAkB7C,GAAalH,GAAgBhC,OAAQA,EAAQK,GAChF2L,GAAe3L,EAAUgC,GAAiBC,GAEhD,OACEuB,OACEE,EAAAA,SAAA,CAAAE,SAAA,CAAAC,EAAA+H,IAAA,MAAA,CACEC,SAAWxC,GAAkB,GAAJ,KACrBvD,KACAoC,GACJ3D,MAAOzC,EACLC,GACA/B,EACAmB,EACAQ,GACAK,GACAC,IAEF6B,MAAOC,EAAAA,WAAW,CAChBwF,MACIxH,GACAjC,EACE+I,GACA7I,EACAC,GACAC,GACAC,GACAC,IAEF,KACJwD,SACFJ,EAACC,KAAAqI,EAAQA,SACP,CAAAC,IAAK5F,EACLnD,YAAaA,EACbC,OACGsC,GAAyC,QAArBC,GAA8BK,EAAMoC,WACrD,cACAS,GAEN5E,MAAOC,aAAW,CAChB8F,GACAT,GAAgBI,GAAmB,GACnCxJ,EAAU8J,GAA8BC,IACvCxE,GAAyC,QAArBC,GAA8BK,EAAMoC,gBACrD9F,EACA6H,KAENzF,MAAO,CACLnC,OAASL,QAQLI,EAPAX,EACEqH,GACA7I,IACE6F,EAAMsD,gBAAgBhI,OACxBqJ,GACA7I,KAIPiC,SAAA,CAAqB,QAArB4B,GACCK,EAAMoC,YACF+D,QAAQC,GAAyBA,EAAU9G,IAAMC,GAAO6G,EAAU9G,KAAOA,IAC1E+G,MAAK,CAACC,EAAGC,IAAMD,EAAEhH,IAAMiH,EAAEjH,MACzBkH,KAAI,CAACJ,EAAsBK,EAAOrE,KACjC,MAAMsE,EACM,IAAVD,EAAcL,EAAU9G,IAAMC,EAAM6G,EAAU9G,IAAM8C,EAAWqE,EAAQ,GAAGnH,IACtEqH,EAAwBxM,EAC1BkK,GACAE,GACJ,IAAIqC,EACQ,IAAVH,EACItM,EACEiK,GACAE,GACF,GAMN,OALI8B,EAAU9G,MAAQA,IACpBsH,EACY,IAAVH,EACIjC,GACAmC,GAENhJ,6BACEK,EAAAA,IAACe,GACCd,MAAO2I,EACPzJ,YAAaA,EACb7B,OAAmB,IAAPoL,GAAepH,EAAMC,GAAzB,IACRnC,MAAOgJ,EAAUhJ,QAElBsC,GAAmB+G,IAAUrE,EAAW9G,OAAS,GAAK8K,EAAU9G,IAAMA,EACrEtB,MAACe,EAAY,CACXd,MAAO0I,EACPvJ,MAAOyF,GACP1F,YAAaA,EACb7B,OAA4C,KAA/BgE,EAAM8C,EAAWqE,GAAOnH,MAAeA,EAAMC,GAAlD,MAGV,KAGJ,IAERvB,EAAAA,IAAC6I,EAAAA,UACCnK,KAAMvC,IAAYiB,EAAQ,GAAGqH,WAAyBnG,EACtDS,OAAS5C,OAAsCmC,EAA5B,GAAGmG,MACtB9F,MAAOxC,GAAWiB,EAAQ,GAAGqH,WAAyBnG,EACtDzC,MAAOM,EAAUuI,GAAiB,OAClC5I,OAAQK,EAAU,OAASuI,GAC3BpH,OAAQoH,GACRnH,KAAMqH,GACNzF,YAAaA,EACbc,MAAOC,aAAW,CAChB0F,GACAzJ,EAAU2J,GAA0BD,GACnB,WAAjBrD,EAA4BuD,GAA4B,KAE1D3G,MAAO0F,KAER9C,EAAMsD,gBAAgBkD,KAAI,CAACM,EAAwBL,IAClDzI,EAAA+H,IAAC7I,EAAgB,CACfI,MAAOwJ,EAAQxJ,MACfE,WAAY,CACVqH,SAAUW,GAA4B,iBACnCsB,EAAQtJ,YAEbJ,MAAO0J,EAAQ1J,MACfvC,cAAewG,GAAKoF,IAAQ5M,MAC5BiB,eAAgBuG,GAAKoF,IAAQ3M,OAC7BqD,YAAaA,EACbN,QAAkC,KAAvBiK,EAAQtH,MAAQD,IAAeD,EAAMC,GAChDlC,SAAUyJ,EAAQzJ,SAClBE,UAAWrB,GAAQ,GAAG4J,OAAmBpK,EAAYA,aAACH,KACtDD,OAAQY,GAAQ,QAAQlB,EAAAA,OAAO,QAAQ8K,aAAoBxJ,WAKlEmJ,GACA3D,EACAjB,IAGP,YCtWgB,UAAS1D,YAAEA,EAAW7B,OAAEA,EAAMC,KAAEA,KAASyE,IACvD,OACEhC,EACG+H,IAAAlI,WAAA,CAAAE,SAAS,QAATxC,EACCyC,EAAA+H,IAACgB,uBAAqB,CAAAlN,MAAM,OAAOC,OAAO,OAAMiE,SAC7C,CAAClE,EAAOC,IACPkE,EAAAA,IAACqB,GACCxF,MAAOA,EACPC,OAAQA,EACRqD,YAAaA,EACb5B,KAAMA,KACFyE,MAKVhC,MAACqB,EAAuB,CAAA9D,KAAMA,EAAMD,OAAQA,EAAQ6B,YAAaA,KAAiB6C,KAI1F"}