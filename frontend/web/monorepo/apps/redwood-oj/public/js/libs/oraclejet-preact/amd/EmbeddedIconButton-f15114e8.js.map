{"version":3,"file":"EmbeddedIconButton-f15114e8.js","sources":["../../src/PRIVATE_EmbeddedIconButton/EmbeddedIconButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '../UNSAFE_ButtonLabelLayout';\n\ntype AriaProps =\n  | {\n      /**\n       * The ID of an element (or space separated IDs of multiple elements) that\n       * describes the button.\n       */\n      'aria-describedby'?: string;\n\n      /**\n       * Whether the button should be hidden from screen readers. When true, no aria-label is required.\n       */\n      'aria-hidden'?: false;\n\n      /**\n       * accessibleLabel - the aria label\n       */\n      'aria-label': string;\n    }\n  | {\n      'aria-describedby'?: string;\n\n      'aria-hidden': true;\n\n      'aria-label'?: string;\n    };\n\ntype BaseProps = {\n  /**\n   * Specifies the icon for the button.\n   */\n  children?: ComponentChild;\n\n  /**\n   * Specifies that the button element should be disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n   */\n  onAction?: () => void | null;\n\n  /**\n   * The size indicates how large the button is rendered. Note that only the ghost variant supports the xs size.\n   * @default 'sm'\n   */\n  size?: 'xs' | 'sm';\n};\n\ntype Props = BaseProps & AriaProps;\n\nexport const EmbeddedIconButton = ({\n  isDisabled = false,\n  size = 'sm',\n  onAction,\n  'aria-label': accessibleLabel,\n  'aria-describedby': ariaDescribedBy,\n  'aria-hidden': ariaHidden = false,\n  ...props\n}: Props) => {\n  return (\n    <BaseButton\n      elementDetails={{ type: 'span', isFocusable: false }}\n      isDisabled={isDisabled}\n      size={size}\n      variant={'ghost'}\n      styling={['min']}\n      onAction={onAction}\n      aria-describedby={ariaDescribedBy}\n      aria-hidden={ariaHidden}\n      aria-label={accessibleLabel}>\n      <ButtonLabelLayout\n        display={'icons'}\n        startIcon={props.children}\n        size={size}></ButtonLabelLayout>\n    </BaseButton>\n  );\n};\n"],"names":["isDisabled","size","onAction","accessibleLabel","ariaDescribedBy","ariaHidden","props","_jsx","jsx","BaseButton","elementDetails","type","isFocusable","variant","styling","children","ButtonLabelLayout","display","startIcon"],"mappings":"oJA+DkC,EAChCA,cAAa,EACbC,OAAO,KACPC,WACA,aAAcC,EACd,mBAAoBC,EACpB,cAAeC,GAAa,KACzBC,KAGDC,EAAAC,IAACC,EAAUA,WAAA,CACTC,eAAgB,CAAEC,KAAM,OAAQC,aAAa,GAC7CZ,WAAYA,EACZC,KAAMA,EACNY,QAAS,QACTC,QAAS,CAAC,OACVZ,SAAUA,EACQ,mBAAAE,EACL,cAAAC,EACD,aAAAF,EACZY,SAAAR,EAAAA,IAACS,EAAiBA,kBAChB,CAAAC,QAAS,QACTC,UAAWZ,EAAMS,SACjBd,KAAMA"}