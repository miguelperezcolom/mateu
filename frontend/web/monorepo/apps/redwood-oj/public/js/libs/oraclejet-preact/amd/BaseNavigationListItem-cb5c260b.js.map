{"version":3,"file":"BaseNavigationListItem-cb5c260b.js","sources":["../../src/UNSAFE_NavigationListCommon/NavigationListContext.ts","../../src/UNSAFE_NavigationListCommon/useNavigationListContext.ts","../../src/UNSAFE_NavigationListCommon/useNavigationListItem.ts","../../src/UNSAFE_NavigationListCommon/BaseNavigationListItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { NavigationListProps } from './NavigationListProps';\n\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n\nexport type NavigationListContextProps<K extends string | number> = Pick<\n  NavigationListProps<K>,\n  'selection' | 'onSelectionChange' | 'onRemove'\n> & {\n  currentKey?: K;\n  showFocusRing: boolean;\n  onCurrentKeyChange:\n    | (<K extends string | number>(detail: CurrentKeyDetail<K>) => void)\n    | undefined;\n  navigationListItemPrefix: string;\n};\n\n/**\n * Context used to pass navlist information without having to pass it to navlist children props.\n * We want to communicate information down to any interested navlist item children.\n */\n\nconst NavigationListContext = createContext<NavigationListContextProps<string | number>>(null!);\n\nexport { NavigationListContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\nimport { NavigationListContext } from './NavigationListContext';\n\n/**\n * Utility hook for consuming the NavigationListContext\n *\n * @returns The value of NavigationListContext provider\n */\nfunction useNavigationListContext() {\n  return useContext(NavigationListContext);\n}\n\nexport { useNavigationListContext };\n","import { useCallback } from 'preact/hooks';\n\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useNavigationListContext } from './useNavigationListContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from '../UNSAFE_NavigationList/themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\nconst flexItemStyleInterpolations = mergeInterpolations<FlexitemProps>([\n  ...Object.values(flexitemInterpolations)\n]);\nconst { class: labelContainerFlexItemClasses, ...labelContainerFlexItemStyle } =\n  flexItemStyleInterpolations({\n    alignSelf: 'center'\n  });\n\nexport function useNavigationListItem<K extends string | number>({ itemKey }: { itemKey: K }) {\n  const { onSelectionChange, selection, currentKey, showFocusRing, navigationListItemPrefix } =\n    useNavigationListContext();\n\n  //Selection and focus state\n  const isCurrent = currentKey === itemKey;\n\n  const isSelected = selection === itemKey;\n\n  //Styling\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle, applyActiveStyle } =\n    useInteractionStyle();\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const {\n    classes: listItemClasses,\n    styles: { labelContainerClasses }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme,\n    {\n      focusRing: showFocusRing ? 'isFocusRing' : 'notFocusRing',\n      current: isCurrent ? 'isCurrent' : 'notCurrtent',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      direction: isRtl ? 'isRtl' : 'notRtl',\n      hybridHover: applyHoverStyle ? 'isHybridHover' : 'notHybridHover',\n      pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      active: applyActiveStyle ? 'isActive' : 'notActive'\n    }\n  );\n\n  //Item handlers\n  const handlePress = useCallback(() => {\n    onSelectionChange?.({ value: itemKey as K, reason: 'pointer' });\n  }, [itemKey, onSelectionChange]);\n\n  //Legacy navlist makes selection on keyDown, but since preact tabbar made selection after keyUp, will do the same\n  //for preact navlist\n  const { pressProps } = usePress(handlePress);\n\n  return {\n    itemId: navigationListItemPrefix + itemKey,\n    itemHandlers: mergeProps(interactionProps, pressProps /*,onFocusProps*/),\n    itemClasses: classNames([listItemClasses]),\n    isSelected,\n    labelContainerClasses: classNames([labelContainerClasses, labelContainerFlexItemClasses]),\n    labelContainerStyle: labelContainerFlexItemStyle\n  };\n}\n","import { useRef } from 'preact/hooks';\n\nimport { Text } from '../UNSAFE_Text';\n\nimport { useNavigationListItem } from './useNavigationListItem';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Badge } from '../UNSAFE_Badge';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { WarningS } from '../UNSAFE_RedwoodIcons/WarningS';\nimport { ErrorS } from '../UNSAFE_RedwoodIcons/ErrorS';\nimport { InformationS } from '../UNSAFE_RedwoodIcons/InformationS';\nimport { SuccessS } from '../UNSAFE_RedwoodIcons/SuccessS';\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from '../UNSAFE_NavigationList/themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\nimport { ComponentChildren } from 'preact';\n\ntype Severity = 'warning' | 'info' | 'none' | 'error' | 'confirmation';\ntype AriaProps = {\n  /**\n   * Accepts the panel element's ID associated with the item\n   **/\n  'aria-controls'?: string;\n};\n\nexport type BaseNavigationListItemProps<K extends string | number> = {\n  /**\n   * Key of the NavigationListItem.\n   */\n  itemKey: K;\n  /**\n   * Label of the NavigationListItem.\n   */\n  label?: string;\n  /**\n   * The content to be rendered inside the Badge component.\n   */\n  badge?: string;\n  /**\n   * The content to be rendered inside the Text component as a metadata.\n   */\n  metadata?: string;\n  /**\n   * The status icon to be rendered after the label.\n   */\n  severity?: Severity;\n  /**\n   * The content to be rendered for remove icon\n   */\n  removeIcon?: ComponentChildren;\n  /**\n   * Sets the URL that the hyperlink points to. If there is no valid URL use \"#\" for href value to navigate to the top of the page.\n   */\n  href?: string;\n} & AriaProps;\n\nconst onClickLink = (event: MouseEvent) => {\n  event.preventDefault();\n};\n/*TODO: JET-58535. Add ripple effect when touching navigationListItem. */\nexport function BaseNavigationListItem<K extends string | number>({\n  itemKey,\n  label,\n  badge,\n  metadata,\n  severity = 'none',\n  removeIcon,\n  href,\n  'aria-controls': ariaControls\n}: BaseNavigationListItemProps<K>) {\n  const itemRef = useRef<HTMLDivElement| null>(null);\n\n  //Logic of the component handled here\n  const {\n    itemId,\n    itemHandlers,\n    itemClasses,\n    isSelected,\n    labelContainerClasses,\n    labelContainerStyle\n  } = useNavigationListItem({\n    itemKey\n  });\n\n  const severityRequirement = !(severity === 'none' || severity === undefined);\n\n  const IconComponent = (severityValue: Severity) => {\n    switch (severityValue) {\n      case 'error':\n        return <ErrorS color=\"danger\" />;\n      case 'warning':\n        return <WarningS color=\"warning\" />;\n      case 'info':\n        return <InformationS color=\"info\" />;\n      case 'confirmation':\n        return <SuccessS color=\"success\" />;\n      default:\n        return null;\n    }\n  };\n\n  const {\n    styles: { iconLabelContainer, iconContainer, navigationItemMetadata, navigationListItemLink }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme\n  );\n\n  const navigationItemMatadata = classNames([navigationItemMetadata]);\n  const navigationItemLinkClass = classNames([navigationListItemLink]);\n\n  const endIconContainerClasses = classNames([iconLabelContainer, iconContainer]);\n  const {\n    styles: { navigationlistRemoveIcon }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme\n  );\n\n  const removeClass = classNames([navigationlistRemoveIcon]);\n\n  const isComplexItem = metadata || severityRequirement || badge;\n  const isLinkItem = href != null;\n\n  const labelRenderer = () => {\n    return (\n      <>\n        <span class={labelContainerClasses} style={labelContainerStyle}>\n          <Text size=\"inherit\" weight=\"inherit\" variant=\"inherit\">\n            {label}\n          </Text>\n        </span>\n        <Flex gap=\"2x\" align=\"center\" justify=\"end\" flex=\"1 1 auto\">\n          {removeIcon && !isLinkItem && <span class={removeClass}>{removeIcon}</span>}\n        </Flex>\n      </>\n    );\n  };\n\n  const complexItemRenderer = () => {\n    return (\n      <>\n        {label && (\n          <span class={labelContainerClasses} style={labelContainerStyle}>\n            <Text size=\"inherit\" weight=\"inherit\" variant=\"inherit\">\n              {label}\n            </Text>\n          </span>\n        )}\n        {(metadata || severityRequirement || badge || removeIcon) && (\n          <Flex gap=\"2x\" align=\"center\" justify=\"end\" flex=\"1 1 auto\">\n            {' '}\n            {badge && (\n              <span class={endIconContainerClasses}>\n                <Badge size=\"md\" variant=\"neutralSubtle\">\n                  {badge}\n                </Badge>\n              </span>\n            )}\n            {metadata && (\n              <span class={navigationItemMatadata}>\n                <Text>{'( ' + metadata + ' )'}</Text>\n              </span>\n            )}\n            {severityRequirement && (\n              <span class={endIconContainerClasses}>{IconComponent(severity)}</span>\n            )}\n            {removeIcon && !isLinkItem && <span class={removeClass}>{removeIcon}</span>}\n          </Flex>\n        )}\n      </>\n    );\n  };\n  const navlistItemRenderer = () => {\n    return (\n      <div\n        role=\"tab\"\n        {...itemHandlers}\n        data-oj-key={itemKey}\n        id={itemId}\n        class={itemClasses}\n        aria-selected={isSelected}\n        ref={itemRef}\n        aria-controls={ariaControls}>\n        {isComplexItem ? complexItemRenderer() : labelRenderer()}\n      </div>\n    );\n  };\n  const navlistLinkItemRenderer = () => {\n    return (\n      <div ref={itemRef} {...itemHandlers} class={itemClasses}>\n        <a\n          tabindex={-1}\n          role=\"tab\"\n          data-oj-key={itemKey}\n          id={itemId}\n          class={navigationItemLinkClass}\n          aria-selected={isSelected}\n          aria-controls={ariaControls}\n          href={href}\n          onClick={onClickLink}>\n          {isComplexItem ? complexItemRenderer() : labelRenderer()}\n        </a>\n      </div>\n    );\n  };\n  return isLinkItem ? navlistLinkItemRenderer() : navlistItemRenderer();\n}\n"],"names":["NavigationListContext","createContext","useNavigationListContext","useContext","flexItemStyleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","labelContainerFlexItemClasses","labelContainerFlexItemStyle","alignSelf","onClickLink","event","preventDefault","itemKey","label","badge","metadata","severity","removeIcon","href","ariaControls","itemRef","useRef","itemId","itemHandlers","itemClasses","isSelected","labelContainerClasses","labelContainerStyle","onSelectionChange","selection","currentKey","showFocusRing","navigationListItemPrefix","isCurrent","interactionProps","applyPseudoHoverStyle","applyHoverStyle","applyActiveStyle","useInteractionStyle","direction","useUser","isRtl","classes","listItemClasses","styles","useComponentTheme","NavigationListItemRedwoodTheme","focusRing","current","selected","hybridHover","pseudoHover","active","handlePress","useCallback","value","reason","pressProps","usePress","mergeProps","classNames","useNavigationListItem","severityRequirement","undefined","IconComponent","severityValue","_jsx","ErrorS","SvgErrorS","color","WarningS","SvgWarningS","InformationS","SvgInformationS","SuccessS","SvgSuccessS","iconLabelContainer","iconContainer","navigationItemMetadata","navigationListItemLink","navigationItemMatadata","navigationItemLinkClass","endIconContainerClasses","navigationlistRemoveIcon","removeClass","isComplexItem","isLinkItem","labelRenderer","_jsxs","_Fragment","children","style","jsx","Text","size","weight","variant","Flex","gap","align","justify","flex","complexItemRenderer","Badge","ref","tabindex","role","id","onClick"],"mappings":"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"}