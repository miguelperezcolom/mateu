{"version":3,"file":"BarGroup-c171e6cb.js","sources":["../../src/UNSAFE_BarChart/Bar.tsx","../../src/UNSAFE_BarChart/utils/barItemUtils.ts","../../src/UNSAFE_BarChart/utils/barLayoutUtils.ts","../../src/UNSAFE_BarChart/utils/barItemLabelUtils.ts","../../src/UNSAFE_BarChart/BarChartStackLabel.tsx","../../src/UNSAFE_BarChart/BarLabel.tsx","../../src/UNSAFE_BarChart/BarGroup.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { classNames } from '#utils/UNSAFE_classNames';\n\ntype BarProps = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDimmed: boolean;\n  activeId?: string;\n  isPointerEnabled: boolean;\n  fill: ColorProps['color'];\n  stroke?: ColorProps['color'];\n  strokeWidth?: number;\n  seriesIndex: number;\n  groupIndex: number;\n  'aria-label'?: string;\n};\n\nconst HOVERED_INNER_INSET = 1.5;\nconst SELECTED_INNER_INSET = 2.5;\n\n/**\n * The rect representing the bar item.\n * @param props\n * @returns\n */\nexport function Bar(props: BarProps) {\n  const isInteractive = props.isSelected || props.isFocused;\n\n  if (isInteractive) {\n    return <InteractiveBar {...props} />;\n  }\n\n  return (\n    <rect\n      x={props.x}\n      y={props.y}\n      data-oj-private-series-index={props.seriesIndex}\n      data-oj-private-group-index={props.groupIndex}\n      data-oj-private-object=\"bar\"\n      aria-label={props['aria-label']}\n      role={props['aria-label'] ? 'img' : undefined}\n      id={props.activeId}\n      style={{\n        width: props.width,\n        height: props.height,\n        fill: props.fill,\n        stroke: props.stroke,\n        strokeWidth: props.strokeWidth\n      }}\n      class={classNames([\n        props.isPointerEnabled ? styles.cursorEnable : undefined,\n        props.isDimmed ? styles.dimmed : undefined\n      ])}\n    />\n  );\n}\n\n/**\n * The selected or hovered selected bar.\n */\nexport function InteractiveBar(props: BarProps) {\n  const { x, y, width, height, fill, isSelected, isFocused } = props;\n  const inset = isSelected ? SELECTED_INNER_INSET : HOVERED_INNER_INSET;\n  return (\n    <g\n      id={props.activeId}\n      data-oj-private-object=\"bar\"\n      data-oj-private-series-index={props.seriesIndex}\n      data-oj-private-group-index={props.groupIndex}\n      className={props.isDimmed ? styles.dimmed : ''}\n      role={props['aria-label'] ? 'img' : undefined}\n      aria-label={props['aria-label']}>\n      <rect\n        x={x}\n        y={y}\n        class={classNames([isSelected ? styles.selectedBorder : ''])}\n        style={{\n          width: width,\n          height: height,\n          fill: !isSelected && isFocused ? fill : undefined\n        }}></rect>\n      <rect\n        x={x + inset}\n        y={y + inset}\n        class={classNames([\n          styles.contrastBorder,\n          props.isPointerEnabled ? styles.cursorEnable : undefined\n        ])}\n        style={{\n          width: width - 2 * inset,\n          height: height - 2 * inset,\n          fill: fill\n        }}></rect>\n    </g>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { BarItemData, BarSeriesData } from '../barChart.types';\n\nexport function getBarProps<K, D>(\n  item: BarItemData<K>,\n  series: BarSeriesData<K, D>,\n  seriesColor: ColorProps['color']\n) {\n  const fill = item.color || series.color || seriesColor;\n  const stroke = item.borderColor || series.borderColor;\n  return { fill, stroke };\n}\n\n/**\n * Returns the coordinate of bar rect.\n * @param x1 The bar start coordinate in x axis.\n * @param x2 The bar end coordinate in x axis.\n * @param endCoord The coordinate of bar top in y axis.\n * @param baselineCoord The coordinate of bar base in y axis.\n * @param isHoriz Whether the chart is horizontal chart.\n * @returns\n */\nexport function getRectCoord(\n  x1: number,\n  x2: number,\n  endCoord: number,\n  baselineCoord: number,\n  isHoriz: boolean\n) {\n  let x: number;\n  let y: number;\n  let width: number;\n  let height: number;\n\n  let x_1 = x1;\n  let x_2 = x2;\n\n  // Bar width has to be at least 1px to prevent disappearing bars\n  let barWidth = x2 - x1;\n  if (barWidth < 1) {\n    x_1 = Math.floor(x_1);\n    x_2 = x_1 + 1;\n    barWidth = 1;\n  }\n\n  if (!isHoriz) {\n    x = x_1;\n    y = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(x_2 - x_1);\n    height = Math.abs(baselineCoord - endCoord);\n  } else {\n    y = x_1;\n    x = endCoord > baselineCoord ? baselineCoord : endCoord;\n    width = Math.abs(baselineCoord - endCoord);\n    height = Math.abs(x_2 - x_1);\n  }\n\n  return { x, y, width, height };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getBarGapsInfo } from './barSeriesUtils';\nimport { getRectCoord } from './barItemUtils';\nimport { BarItemData, BarSeriesData } from '../barChart.types';\nimport { Scale, Group, ChartSeriesData } from '#utils/UNSAFE_visTypes/chart';\n\n/**\n * Returns the base and end coordinate of the bar.\n * @param value The value of the bar item.\n * @param yScale The yscale.\n * @param isStacked Whether the bar chart is stacked or not.\n * @param isLog Whether the y axis is in log scale.\n * @param itemsGaps The gap between data item.\n * @param negCummulativeValue The negative cummulative value of the group.\n * @param posCummulativeValue The positive cummulative value of the group.\n * @returns\n */\nexport function getBaseAndEndCoord(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  itemsGaps: number,\n  negCummulativeValue: number,\n  posCummulativeValue: number\n) {\n  let baselineCoord;\n  let endCoord;\n  if (isStacked) {\n    baselineCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n    negCummulativeValue += value < 0 ? value : 0;\n    posCummulativeValue += value > 0 ? value : 0;\n    endCoord = yScale.transform(value < 0 ? negCummulativeValue : posCummulativeValue);\n\n    baselineCoord += endCoord > baselineCoord ? itemsGaps : -itemsGaps;\n  } else {\n    baselineCoord = isLog ? yScale.range()[0] : yScale.transform(0);\n    endCoord = yScale.transform(value);\n  }\n  return { baselineCoord, endCoord };\n}\n\nexport function getBarPosition<K extends string | number, D extends BarItemData<K>>(\n  series: BarSeriesData<K, D>[],\n  groups: Group[],\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  xScale: Scale,\n  yScale: Scale,\n  y2Scale: Scale,\n  hiddenIds: Set<number | string> | undefined,\n  dataItemGaps: number,\n  axisStepWidth: number,\n  averageGroupZ: number,\n  barGapRatio: number,\n  isLog: boolean,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean,\n  isSplitDualY: boolean,\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps'\n) {\n  const seriesY = series.filter((series) => series.associatedYAxis !== 'y2');\n  const seriesY2 = series.filter((s) => s.associatedYAxis === 'y2');\n  const numSeriesY = seriesY.length;\n  const numSeriesY2 = seriesY2.length;\n\n  return (seriesIndex: number, groupIndex: number) => {\n    const seriesItem = series[seriesIndex];\n    const isAssociatedToY2 = seriesItem.associatedYAxis === 'y2';\n    const numOfSeries = series.length;\n    let yPosCumulativeValue = 0;\n    let yNegCumulativeValue = 0;\n    let y2PosCumulativeValue = 0;\n    let y2NegCumulativeValue = 0;\n    for (let index = 0; index < numOfSeries; index += 1) {\n      const item = getDataItem(index, groupIndex);\n      let xVal = groupIndex;\n      if (timeAxisType) {\n        const val =\n          timeAxisType === 'mixedFrequency'\n            ? getDataItem(seriesIndex, groupIndex)?.x\n            : groups[groupIndex].id;\n        xVal = new Date(val!).getTime();\n      }\n      if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n        continue;\n      }\n      const groupCenter = xScale.transform(xVal);\n      const splitIndex = (isAssociatedToY2 ? seriesY2 : seriesY).findIndex(\n        (value) => value.id === seriesItem.id\n      );\n      const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n        isSplitDualY ? splitIndex : index,\n        groupIndex,\n        series[index],\n        axisStepWidth,\n        averageGroupZ,\n        getDataItem,\n        barGapRatio,\n        isSplitDualY ? numSeriesY : series.length,\n        isSplitDualY ? numSeriesY2 : series.length,\n        dataItemGaps,\n        isStacked,\n        isRtl,\n        isHoriz\n      );\n      const x1 = groupCenter + offset;\n      const x2 = x1 + barWidth;\n\n      const { baselineCoord, endCoord } = getBaseAndEndCoord(\n        item.value,\n        isAssociatedToY2 ? y2Scale : yScale,\n        isStacked,\n        isLog,\n        itemsGaps,\n        isAssociatedToY2 ? y2NegCumulativeValue : yNegCumulativeValue,\n        isAssociatedToY2 ? y2PosCumulativeValue : yPosCumulativeValue\n      );\n      if (isAssociatedToY2) {\n        y2NegCumulativeValue += item.value < 0 ? item.value : 0;\n        y2PosCumulativeValue += item.value > 0 ? item.value : 0;\n      } else {\n        yNegCumulativeValue += item.value < 0 ? item.value : 0;\n        yPosCumulativeValue += item.value > 0 ? item.value : 0;\n      }\n\n      if (seriesIndex === index) {\n        return getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n      }\n    }\n    return;\n  };\n}\n\n/**\n * Returns the center coordinate of the bar item.\n * @param value\n * @param yScale\n * @param isStacked\n * @param isLog\n * @param dataItemGaps\n * @param negCummValue\n * @param posCummValue\n * @returns\n */\nexport function getBarCenterCoordinate(\n  value: number,\n  yScale: Scale,\n  isStacked: boolean,\n  isLog: boolean,\n  dataItemGaps: number,\n  negCummValue: number,\n  posCummValue: number\n) {\n  const { baselineCoord, endCoord } = getBaseAndEndCoord(\n    value,\n    yScale,\n    isStacked,\n    isLog,\n    dataItemGaps,\n    negCummValue,\n    posCummValue\n  );\n  return (baselineCoord + endCoord) / 2;\n}\n\nexport function getSeriesOffsetAndWidth<K extends string | number, D extends BarItemData<K>>(\n  axisStepWidth: number,\n  averageGroupZ: number,\n  series: ChartSeriesData<K, D>[],\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  barGapRatio: number,\n  dataItemGaps: number,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const seriesY = series.filter((series) => series.associatedYAxis !== 'y2');\n  const numSeriesY = seriesY.length;\n  const numSeriesY2 = series.length - numSeriesY;\n  return (seriesIndex: number, groupIndex: number) => {\n    const { offset, barWidth } = getBarGapsInfo(\n      seriesIndex,\n      groupIndex,\n      series[seriesIndex],\n      axisStepWidth,\n      averageGroupZ,\n      getDataItem,\n      barGapRatio,\n      numSeriesY,\n      numSeriesY2,\n      dataItemGaps,\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n    return { offset, dataWidth: barWidth };\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\n\nconst LABEL_OFFSET = 2;\n\nfunction getValueCoord(isHoriz: boolean, isRtl: boolean, isNegative: boolean, barDims: Dimension) {\n  if (isHoriz) {\n    return (isNegative && !isRtl) || (!isNegative && isRtl) ? barDims.x : barDims.x + barDims.width;\n  }\n  return isNegative ? barDims.height + barDims.y : barDims.y;\n}\n\nexport function getLabelProps(\n  isHoriz: boolean,\n  isRtl: boolean,\n  isNegative: boolean,\n  barDims: Dimension,\n  dataLabelPosition: 'insideBarEdge' | 'outsideBarEdge' | 'center',\n  labelDims?: Dimension\n) {\n  if (!labelDims) {\n    return {};\n  }\n\n  const valueCoord = getValueCoord(isHoriz, isRtl, isNegative, barDims);\n\n  if (dataLabelPosition === 'insideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord + (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET + 2),\n      x: isHoriz\n        ? valueCoord -\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  if (dataLabelPosition === 'outsideBarEdge') {\n    return {\n      y: isHoriz\n        ? barDims.y + barDims.height / 2\n        : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n      x: isHoriz\n        ? valueCoord +\n          ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n            (labelDims.width / 2 + LABEL_OFFSET)\n        : barDims.x + barDims.width / 2\n    };\n  }\n\n  return {\n    x: barDims.x + barDims.width / 2,\n    y: barDims.y + barDims.height / 2\n  };\n}\n\nexport function canFitLabel(\n  isHoriz: boolean,\n  labelDims: Dimension,\n  barDims: Dimension,\n  labelPos: 'insideBarEdge' | 'outsideBarEdge' | 'center'\n) {\n  if (isHoriz) {\n    if (labelDims.height > barDims.height) {\n      return false;\n    }\n    if (labelPos != 'outsideBarEdge') {\n      return labelDims.width < barDims.width;\n    }\n    return true;\n  }\n\n  if (labelDims.width > barDims.width) {\n    return false;\n  }\n\n  if (labelPos != 'outsideBarEdge') {\n    return labelDims.height < barDims.height;\n  }\n  return true;\n}\n\nexport const getStackLabelProps = (\n  groupCenterCoord: number,\n  valueCoord: number,\n  isNegative: boolean,\n  isHoriz: boolean,\n  isRtl: boolean,\n  labelDims: Dimension\n) => {\n  return {\n    y: isHoriz\n      ? groupCenterCoord\n      : valueCoord - (isNegative ? -1 : 1) * (labelDims.height / 2 + LABEL_OFFSET),\n    x: isHoriz\n      ? valueCoord +\n        ((isNegative && !isRtl) || (!isNegative && isRtl) ? -1 : 1) *\n          (labelDims.width / 2 + LABEL_OFFSET)\n      : groupCenterCoord\n  };\n};\n","import { Scale, Group } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { VisTextStyle } from '#utils/UNSAFE_visUtils';\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getStackLabelProps } from './utils/barItemLabelUtils';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions/textDimensionsUtils';\n\ntype Props<K, D extends BarItemData<K>> = {\n  groupCenter: number;\n  labelStyle?: VisTextStyle;\n  yScale: Scale;\n  defaultFontSize: string;\n  getStackLabel: NonNullable<BarChartProps<K, D>['getStackLabel']>;\n  group: Group;\n  isRtl: boolean;\n  posValue: number;\n  negValue: number;\n  posItemsData: D[];\n  isHoriz: boolean;\n  negItemsData: D[];\n  getTextDimensions: (text: string, font: Font) => Dimension;\n};\n\nexport function StackLabels<K, D extends BarItemData<K>>({\n  groupCenter,\n  getStackLabel,\n  group,\n  posValue,\n  negValue,\n  posItemsData,\n  yScale,\n  isHoriz,\n  isRtl,\n  negItemsData,\n  defaultFontSize,\n  labelStyle,\n  getTextDimensions\n}: Props<K, D>) {\n  const positiveStackLabel = getStackLabel({\n    group,\n    value: posValue,\n    data: posItemsData\n  });\n\n  // default style used for text dims calc. should match with styles.stackLabelStyle\n  const stackLabelStyle = { fontSize: defaultFontSize, fontWeight: 'bold', ...labelStyle };\n\n  const negativeStackLabel =\n    negValue < 0\n      ? getStackLabel?.({\n          group,\n          value: negValue,\n          data: negItemsData\n        })\n      : '';\n\n  const posProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(posValue),\n    false,\n    isHoriz,\n    isRtl,\n    getTextDimensions(positiveStackLabel, stackLabelStyle)\n  );\n  const negProps = getStackLabelProps(\n    groupCenter,\n    yScale.transform(negValue),\n    true,\n    isHoriz,\n    isRtl,\n    getTextDimensions(negativeStackLabel, stackLabelStyle)\n  );\n\n  return (\n    <>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...posProps}>\n        {positiveStackLabel}\n      </text>\n      <text class={styles.stackLabelStyle} style={stackLabelStyle} {...negProps}>\n        {negativeStackLabel}\n      </text>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions';\nimport { BarItemData } from './barChart.types';\nimport { styles } from '#PRIVATE_Chart/themes/ChartStyles.css';\nimport { canFitLabel, getLabelProps } from './utils/barItemLabelUtils';\nimport { VNode } from 'preact';\nimport { getContrastingTextColor } from '#utils/PRIVATE_colorUtils/colorUtils';\n\ntype Props<K> = {\n  item: BarItemData<K>;\n  seriesColor?: string;\n  isStacked: boolean;\n  defaultFontSize: string;\n  isHoriz: boolean;\n  barDim: Dimension;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  isRtl: boolean;\n};\n\nexport function BarLabel<K>({\n  item,\n  seriesColor,\n  isStacked,\n  defaultFontSize,\n  barDim,\n  isRtl,\n  isHoriz,\n  getTextDimensions\n}: Props<K>) {\n  let label: VNode | null = null;\n  const position =\n    !item.labelPosition || (item.labelPosition === 'outsideBarEdge' && isStacked)\n      ? 'center'\n      : item.labelPosition;\n  const labelString = item.label;\n  const color = item.color || seriesColor;\n  const needsContrastColor = isStacked || !(position === 'outsideBarEdge');\n\n  if (\n    position != 'none' &&\n    labelString &&\n    getTextDimensions &&\n    !(isStacked && position === 'outsideBarEdge')\n  ) {\n    const labelStyle = {\n      fontSize: defaultFontSize,\n      fill: needsContrastColor ? getContrastingTextColor(color!) : undefined,\n      ...item.labelStyle\n    };\n    const labelDims = getTextDimensions(labelString, labelStyle);\n    const canFit = canFitLabel(isHoriz, labelDims, barDim, position || 'center');\n    label = canFit ? (\n      <text\n        class={styles.dataLabelStyle}\n        style={labelStyle}\n        {...getLabelProps(\n          isHoriz,\n          isRtl,\n          item.value < 0,\n          barDim,\n          position || 'center',\n          getTextDimensions?.(labelString, labelStyle)\n        )}>\n        {labelString}\n      </text>\n    ) : null;\n  }\n\n  return label;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Bar } from './Bar';\nimport { BarItemData, BarSeriesData, StackLabelContext } from './barChart.types';\nimport { getBarProps, getRectCoord } from './utils/barItemUtils';\nimport { ColorProps } from '#utils/UNSAFE_interpolations/colors';\nimport { getBarGapsInfo } from './utils/barSeriesUtils';\nimport { getBaseAndEndCoord } from './utils/barLayoutUtils';\nimport { getMixedFreqGroupCenter } from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport { Info, Scale, Group } from '#utils/UNSAFE_visTypes/chart';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { VisTextStyle, supportsMobileScreenReader } from '#utils/UNSAFE_visUtils';\nimport { Font } from '#hooks/PRIVATE_useTextDimensions';\nimport { StackLabels } from './BarChartStackLabel';\nimport { BarLabel } from './BarLabel';\nimport { JSX } from 'preact/jsx-runtime';\n\ntype BarGroupProps<K, D> = {\n  splitDualY: boolean;\n  yScale: Scale;\n  y2Scale: Scale;\n  xScale: Scale;\n  colors: ColorProps['color'][];\n  series: BarSeriesData<K, D>[];\n  group: Group;\n  timeAxisType?: 'enabled' | 'skipGaps' | 'mixedFrequency';\n  focusedItemInfo?: Info;\n  hoveredItemInfo?: Info;\n  isSelectionEnabled: boolean;\n  selectedIds?: Set<K>;\n  hiddenIds?: Set<K>;\n  highlightedIds?: Set<K>;\n  groupIndex: number;\n  barGapRatio: number;\n  dataItemGaps: number;\n  axisStepWidth: number;\n  averageGroupZ: number;\n  isStacked: boolean;\n  activeId?: string;\n  orientation: 'horizontal' | 'vertical';\n  isDrillEnabled: boolean;\n  isLog: boolean;\n  isRtl: boolean;\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined;\n  isPointInsideMarquee: ((id: K, point: { x: number; y: number }) => boolean) | undefined;\n  getTextDimensions?: (text: string, style: Font) => Dimension;\n  defaultFontSize: string;\n  stacklabelStyle?: VisTextStyle;\n  getStackLabel?: (context: StackLabelContext<D>) => string;\n  seriesIndex?: number;\n  plotAreaClipPathId?: string;\n  getItemAriaLabel: (\n    data: D,\n    seriesIndex: number,\n    groupIndex: number,\n    isSelectionEnabled: boolean,\n    isSelected: boolean,\n    isDrillable: boolean\n  ) => string;\n};\n\nexport function BarGroup<K extends string | number, D extends BarItemData<K>>({\n  yScale,\n  y2Scale,\n  xScale,\n  colors,\n  series,\n  groupIndex,\n  hiddenIds,\n  barGapRatio,\n  dataItemGaps,\n  axisStepWidth,\n  averageGroupZ,\n  highlightedIds,\n  selectedIds,\n  isPointInsideMarquee,\n  orientation,\n  isLog,\n  activeId,\n  getDataItem,\n  isRtl,\n  isStacked,\n  isSelectionEnabled,\n  focusedItemInfo,\n  hoveredItemInfo,\n  isDrillEnabled,\n  group,\n  timeAxisType,\n  getTextDimensions,\n  defaultFontSize,\n  stacklabelStyle,\n  getStackLabel,\n  getItemAriaLabel,\n  splitDualY,\n  seriesIndex,\n  plotAreaClipPathId\n}: BarGroupProps<K, D>) {\n  const isHoriz = orientation === 'horizontal';\n  const items: JSX.Element[] = [];\n  const seriesY = series.filter((s) => s.associatedYAxis !== 'y2');\n  const seriesY2 = series.filter((s) => s.associatedYAxis === 'y2');\n  const labels: JSX.Element[] = [];\n\n  const numSeriesY = seriesY.length;\n  const numSeriesY2 = series.length - numSeriesY;\n\n  let yPosCumulativeValue = isLog ? yScale.domain()[0] : 0;\n  let yNegCumulativeValue = 0;\n\n  const yPositiveValueItems: D[] = [];\n  const yNegativeValueItems: D[] = [];\n\n  let y2PosCumulativeValue = isLog ? y2Scale.domain()[0] : 0;\n  let y2NegCumulativeValue = 0;\n\n  const y2PositiveValueItems: D[] = [];\n  const y2NegativeValueItems: D[] = [];\n\n  const isStackLabelRendered = isStacked && !!getStackLabel && timeAxisType != 'mixedFrequency';\n\n  let groupCenter =\n    timeAxisType != 'mixedFrequency'\n      ? xScale.transform(timeAxisType != undefined ? new Date(group.id).getTime() : groupIndex)\n      : undefined;\n\n  let isAssociatedToY2;\n  const processSeries = (_seriesIndex: number) => {\n    isAssociatedToY2 = series[_seriesIndex].associatedYAxis === 'y2';\n    const item = getDataItem(_seriesIndex, groupIndex);\n    if (!item || hiddenIds?.has(item.id) || (isLog && item.value <= 0)) {\n      return;\n    }\n\n    if (timeAxisType === 'mixedFrequency') {\n      groupCenter = getMixedFreqGroupCenter<K, D>(xScale, item);\n    }\n\n    const isFocused =\n      focusedItemInfo?.groupIndex === groupIndex &&\n      focusedItemInfo?.seriesIndex === _seriesIndex &&\n      focusedItemInfo?.isFocusVisible;\n    const isHovered =\n      hoveredItemInfo?.groupIndex === groupIndex &&\n      hoveredItemInfo?.seriesIndex === _seriesIndex &&\n      hoveredItemInfo?.isCurrent;\n    const isFocusVisible = !!isFocused || (!!isHovered && isSelectionEnabled);\n    const isActive = (isFocused && focusedItemInfo.isCurrent) || isHovered;\n    const isHighlighted =\n      highlightedIds === undefined || highlightedIds.size === 0 || highlightedIds.has(item.id);\n\n    const isDrillable = item.drilling === 'on' || (item.drilling != 'off' && isDrillEnabled);\n\n    const { barWidth, offset, itemsGaps } = getBarGapsInfo(\n      splitDualY\n        ? (isAssociatedToY2 ? seriesY2 : seriesY).findIndex(\n            (value) => value.id === series[_seriesIndex].id\n          )\n        : _seriesIndex,\n      groupIndex,\n      series[_seriesIndex],\n      axisStepWidth,\n      averageGroupZ,\n      getDataItem,\n      barGapRatio,\n      splitDualY ? numSeriesY : series.length,\n      splitDualY ? numSeriesY2 : series.length,\n      dataItemGaps,\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n    const x1 = groupCenter! + offset;\n    const x2 = x1 + barWidth;\n\n    const { baselineCoord, endCoord } = getBaseAndEndCoord(\n      item.value,\n      isAssociatedToY2 ? y2Scale : yScale,\n      isStacked,\n      isLog,\n      itemsGaps,\n      isAssociatedToY2 ? y2NegCumulativeValue : yNegCumulativeValue,\n      isAssociatedToY2 ? y2PosCumulativeValue : yPosCumulativeValue\n    );\n\n    if (isAssociatedToY2) {\n      y2NegCumulativeValue += item.value < 0 ? item.value : 0;\n      y2PosCumulativeValue += item.value > 0 ? item.value : 0;\n    } else {\n      yNegCumulativeValue += item.value < 0 ? item.value : 0;\n      yPosCumulativeValue += item.value > 0 ? item.value : 0;\n    }\n\n    if (isStackLabelRendered) {\n      if (item.value >= 0) {\n        if (isAssociatedToY2) {\n          y2PositiveValueItems.push(item);\n        } else {\n          yPositiveValueItems.push(item);\n        }\n      } else {\n        if (isAssociatedToY2) {\n          y2NegativeValueItems.push(item);\n        } else {\n          yNegativeValueItems.push(item);\n        }\n      }\n    }\n\n    const barprops = getBarProps(item, series[_seriesIndex], colors?.[_seriesIndex]);\n    const rectParam = getRectCoord(x1, x2, endCoord, baselineCoord, isHoriz);\n    const isSelected = isPointInsideMarquee\n      ? isPointInsideMarquee?.(item.id, {\n          x: rectParam.x + rectParam.width / 2,\n          y: rectParam.y\n        })\n      : selectedIds?.has(item.id!);\n\n    const ariaLabel =\n      supportsMobileScreenReader || isActive\n        ? getItemAriaLabel(\n            item,\n            _seriesIndex,\n            groupIndex,\n            isSelectionEnabled,\n            !!isSelected,\n            isDrillable\n          )\n        : '';\n\n    items.push(\n      <Bar\n        {...rectParam}\n        {...barprops}\n        seriesIndex={_seriesIndex}\n        groupIndex={groupIndex}\n        isFocused={isFocusVisible}\n        activeId={isActive ? activeId : ''}\n        aria-label={ariaLabel}\n        isDimmed={!isHighlighted}\n        isSelected={!!isSelected}\n        isPointerEnabled={isDrillable || isSelectionEnabled}\n        key={`${groupIndex};${_seriesIndex}`}\n      />\n    );\n    labels.push(\n      <BarLabel\n        item={item}\n        isRtl={isRtl}\n        seriesColor={colors[_seriesIndex % 12]}\n        isStacked={isStacked}\n        defaultFontSize={defaultFontSize}\n        barDim={rectParam}\n        isHoriz={isHoriz}\n        getTextDimensions={getTextDimensions}\n      />\n    );\n  };\n\n  if (seriesIndex !== undefined) {\n    processSeries(seriesIndex);\n  } else {\n    series.forEach((_, index) => processSeries(index));\n  }\n\n  return (\n    <>\n      <g clip-path={plotAreaClipPathId}>{items}</g>\n      {labels}\n      {isStackLabelRendered && getTextDimensions && (\n        <StackLabels\n          group={group}\n          isRtl={isRtl}\n          yScale={isAssociatedToY2 ? y2Scale : yScale}\n          getStackLabel={getStackLabel}\n          defaultFontSize={defaultFontSize}\n          getTextDimensions={getTextDimensions}\n          posItemsData={isAssociatedToY2 ? y2PositiveValueItems : yPositiveValueItems}\n          negItemsData={isAssociatedToY2 ? y2NegativeValueItems : yNegativeValueItems}\n          isHoriz={isHoriz}\n          groupCenter={groupCenter!}\n          labelStyle={stacklabelStyle}\n          posValue={isAssociatedToY2 ? y2PosCumulativeValue : yPosCumulativeValue}\n          negValue={isAssociatedToY2 ? y2NegCumulativeValue : yNegCumulativeValue}\n        />\n      )}\n    </>\n  );\n}\n"],"names":["Bar","props","isSelected","isFocused","_jsx","jsx","InteractiveBar","x","y","seriesIndex","groupIndex","role","undefined","id","activeId","style","width","height","fill","stroke","strokeWidth","class","classNames","isPointerEnabled","styles","cursorEnable","isDimmed","dimmed","inset","_jsxs","jsxs","className","children","selectedBorder","contrastBorder","getRectCoord","x1","x2","endCoord","baselineCoord","isHoriz","x_1","x_2","barWidth","Math","floor","abs","getBaseAndEndCoord","value","yScale","isStacked","isLog","itemsGaps","negCummulativeValue","posCummulativeValue","transform","range","getLabelProps","isRtl","isNegative","barDims","dataLabelPosition","labelDims","valueCoord","getValueCoord","getStackLabelProps","groupCenterCoord","StackLabels","groupCenter","getStackLabel","group","posValue","negValue","posItemsData","negItemsData","defaultFontSize","labelStyle","getTextDimensions","positiveStackLabel","data","stackLabelStyle","fontSize","fontWeight","negativeStackLabel","posProps","negProps","_Fragment","Fragment","BarLabel","item","seriesColor","barDim","label","position","labelPosition","labelString","color","getContrastingTextColor","canFit","labelPos","canFitLabel","dataLabelStyle","y2Scale","xScale","colors","series","hiddenIds","barGapRatio","dataItemGaps","axisStepWidth","averageGroupZ","highlightedIds","selectedIds","isPointInsideMarquee","orientation","getDataItem","isSelectionEnabled","focusedItemInfo","hoveredItemInfo","isDrillEnabled","timeAxisType","stacklabelStyle","getItemAriaLabel","splitDualY","plotAreaClipPathId","items","seriesY","filter","s","associatedYAxis","seriesY2","labels","numSeriesY","length","numSeriesY2","yPosCumulativeValue","domain","yNegCumulativeValue","yPositiveValueItems","yNegativeValueItems","y2PosCumulativeValue","y2NegCumulativeValue","y2PositiveValueItems","y2NegativeValueItems","isStackLabelRendered","isAssociatedToY2","Date","getTime","processSeries","_seriesIndex","has","getMixedFreqGroupCenter","isFocusVisible","isHovered","isCurrent","isActive","isHighlighted","size","isDrillable","drilling","offset","getBarGapsInfo","findIndex","push","barprops","borderColor","getBarProps","rectParam","ariaLabel","supportsMobileScreenReader","_createElement","key","forEach","_","index","negCummValue","posCummValue","groups","isSplitDualY","seriesItem","numOfSeries","xVal","val","splitIndex","dataWidth"],"mappings":"2NAsCM,SAAUA,EAAIC,GAGlB,OAFsBA,EAAMC,YAAcD,EAAME,UAGvCC,EAACC,IAAAC,EAAmB,IAAAL,IAI3BG,cACEG,EAAGN,EAAMM,EACTC,EAAGP,EAAMO,EAAC,+BACoBP,EAAMQ,YAAW,8BAClBR,EAAMS,WACZ,yBAAA,MACX,aAAAT,EAAM,cAClBU,KAAMV,EAAM,cAAgB,WAAQW,EACpCC,GAAIZ,EAAMa,SACVC,MAAO,CACLC,MAAOf,EAAMe,MACbC,OAAQhB,EAAMgB,OACdC,KAAMjB,EAAMiB,KACZC,OAAQlB,EAAMkB,OACdC,YAAanB,EAAMmB,aAErBC,MAAOC,EAAAA,WAAW,CAChBrB,EAAMsB,iBAAmBC,SAAOC,kBAAeb,EAC/CX,EAAMyB,SAAWF,SAAOG,YAASf,KAIzC,CAKM,SAAUN,EAAeL,GAC7B,MAAMM,EAAEA,EAACC,EAAEA,EAACQ,MAAEA,EAAKC,OAAEA,EAAMC,KAAEA,EAAIhB,WAAEA,EAAUC,UAAEA,GAAcF,EACvD2B,EAAQ1B,EA5Ca,IADD,IA8C1B,OACE2B,EACEC,KAAA,IAAA,CAAAjB,GAAIZ,EAAMa,SAAQ,yBACK,MAAK,+BACEb,EAAMQ,0CACPR,EAAMS,WACnCqB,UAAW9B,EAAMyB,SAAWF,EAAMA,OAACG,OAAS,GAC5ChB,KAAMV,EAAM,cAAgB,WAAQW,EAAS,aACjCX,EAAM,cAAa+B,SAAA,CAC/B5B,EAAAA,YACEG,EAAGA,EACHC,EAAGA,EACHa,MAAOC,EAAAA,WAAW,CAACpB,EAAasB,EAAMA,OAACS,eAAiB,KACxDlB,MAAO,CACLC,MAAOA,EACPC,OAAQA,EACRC,MAAOhB,GAAcC,EAAYe,OAAON,KAE5CR,EAAAA,IACE,OAAA,CAAAG,EAAGA,EAAIqB,EACPpB,EAAGA,EAAIoB,EACPP,MAAOC,EAAAA,WAAW,CAChBE,EAAAA,OAAOU,eACPjC,EAAMsB,iBAAmBC,SAAOC,kBAAeb,IAEjDG,MAAO,CACLC,MAAOA,EAAQ,EAAIY,EACnBX,OAAQA,EAAS,EAAIW,EACrBV,KAAMA,OAIhB,CC9EM,SAAUiB,EACdC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIjC,EACAC,EACAQ,EACAC,EAEAwB,EAAML,EACNM,EAAML,EAGNM,EAAWN,EAAKD,EAmBpB,OAlBIO,EAAW,IACbF,EAAMG,KAAKC,MAAMJ,GACjBC,EAAMD,EAAM,EACZE,EAAW,GAGRH,GAMHhC,EAAIiC,EACJlC,EAAI+B,EAAWC,EAAgBA,EAAgBD,EAC/CtB,EAAQ4B,KAAKE,IAAIP,EAAgBD,GACjCrB,EAAS2B,KAAKE,IAAIJ,EAAMD,KARxBlC,EAAIkC,EACJjC,EAAI8B,EAAWC,EAAgBA,EAAgBD,EAC/CtB,EAAQ4B,KAAKE,IAAIJ,EAAMD,GACvBxB,EAAS2B,KAAKE,IAAIP,EAAgBD,IAQ7B,CAAE/B,IAAGC,IAAGQ,QAAOC,SACxB,CC1CgB,SAAA8B,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIf,EACAD,EAYJ,OAXIY,GACFX,EAAgBU,EAAOM,UAAUP,EAAQ,EAAIK,EAAsBC,GACnED,GAAuBL,EAAQ,EAAIA,EAAQ,EAC3CM,GAAuBN,EAAQ,EAAIA,EAAQ,EAC3CV,EAAWW,EAAOM,UAAUP,EAAQ,EAAIK,EAAsBC,GAE9Df,GAAiBD,EAAWC,EAAgBa,GAAaA,IAEzDb,EAAgBY,EAAQF,EAAOO,QAAQ,GAAKP,EAAOM,UAAU,GAC7DjB,EAAWW,EAAOM,UAAUP,IAEvB,CAAET,gBAAeD,WAC1B,CC5BgB,SAAAmB,EACdjB,EACAkB,EACAC,EACAC,EACAC,EACAC,GAEA,IAAKA,EACH,MAAO,GAGT,MAAMC,EAnBR,SAAuBvB,EAAkBkB,EAAgBC,EAAqBC,GAC5E,OAAIpB,EACMmB,IAAeD,IAAYC,GAAcD,EAASE,EAAQrD,EAAIqD,EAAQrD,EAAIqD,EAAQ5C,MAErF2C,EAAaC,EAAQ3C,OAAS2C,EAAQpD,EAAIoD,EAAQpD,CAC3D,CAcqBwD,CAAcxB,EAASkB,EAAOC,EAAYC,GAE7D,MAA0B,kBAAtBC,EACK,CACLrD,EAAGgC,EACCoB,EAAQpD,EAAIoD,EAAQ3C,OAAS,EAC7B8C,GAAcJ,GAAc,EAAI,IAAMG,EAAU7C,OAAS,EA3B9C,EA2BiE,GAChFV,EAAGiC,EACCuB,GACEJ,IAAeD,IAAYC,GAAcD,GAAU,EAAI,IACtDI,EAAU9C,MAAQ,EA/BV,GAgCX4C,EAAQrD,EAAIqD,EAAQ5C,MAAQ,GAIV,mBAAtB6C,EACK,CACLrD,EAAGgC,EACCoB,EAAQpD,EAAIoD,EAAQ3C,OAAS,EAC7B8C,GAAcJ,GAAc,EAAI,IAAMG,EAAU7C,OAAS,EAxC9C,GAyCfV,EAAGiC,EACCuB,GACEJ,IAAeD,IAAYC,GAAcD,GAAU,EAAI,IACtDI,EAAU9C,MAAQ,EA5CV,GA6CX4C,EAAQrD,EAAIqD,EAAQ5C,MAAQ,GAI7B,CACLT,EAAGqD,EAAQrD,EAAIqD,EAAQ5C,MAAQ,EAC/BR,EAAGoD,EAAQpD,EAAIoD,EAAQ3C,OAAS,EAEpC,CA4BO,MAAMgD,EAAqB,CAChCC,EACAH,EACAJ,EACAnB,EACAkB,EACAI,KAEO,CACLtD,EAAGgC,EACC0B,EACAH,GAAcJ,GAAc,EAAI,IAAMG,EAAU7C,OAAS,EA5F5C,GA6FjBV,EAAGiC,EACCuB,GACEJ,IAAeD,IAAYC,GAAcD,GAAU,EAAI,IACtDI,EAAU9C,MAAQ,EAhGR,GAiGbkD,ICnFQ,SAAAC,GAAyCC,YACvDA,EAAWC,cACXA,EAAaC,MACbA,EAAKC,SACLA,EAAQC,SACRA,EAAQC,aACRA,EAAYxB,OACZA,EAAMT,QACNA,EAAOkB,MACPA,EAAKgB,aACLA,EAAYC,gBACZA,EAAeC,WACfA,EAAUC,kBACVA,IAEA,MAAMC,EAAqBT,EAAc,CACvCC,QACAtB,MAAOuB,EACPQ,KAAMN,IAIFO,EAAkB,CAAEC,SAAUN,EAAiBO,WAAY,UAAWN,GAEtEO,EACJX,EAAW,EACPH,IAAgB,CACdC,QACAtB,MAAOwB,EACPO,KAAML,IAER,GAEAU,EAAWnB,EACfG,EACAnB,EAAOM,UAAUgB,IACjB,EACA/B,EACAkB,EACAmB,EAAkBC,EAAoBE,IAElCK,EAAWpB,EACfG,EACAnB,EAAOM,UAAUiB,IACjB,EACAhC,EACAkB,EACAmB,EAAkBM,EAAoBH,IAGxC,OACEnD,EAAAC,KAAAwD,EAAAC,SAAA,CAAAvD,SAAA,CACE5B,EAAMC,IAAA,OAAA,CAAAgB,MAAOG,EAAAA,OAAOwD,gBAAiBjE,MAAOiE,KAAqBI,WAC9DN,IAEH1E,EAAAC,IAAA,OAAA,CAAMgB,MAAOG,EAAAA,OAAOwD,gBAAiBjE,MAAOiE,KAAqBK,EAC9DrD,SAAAmD,MAIT,UCzDgBK,GAAYC,KAC1BA,EAAIC,YACJA,EAAWxC,UACXA,EAASyB,gBACTA,EAAegB,OACfA,EAAMjC,MACNA,EAAKlB,QACLA,EAAOqC,kBACPA,IAEA,IAAIe,EAAsB,KAC1B,MAAMC,GACHJ,EAAKK,eAAyC,mBAAvBL,EAAKK,eAAsC5C,EAC/D,SACAuC,EAAKK,cACLC,EAAcN,EAAKG,MACnBI,EAAQP,EAAKO,OAASN,EAG5B,GACc,QAAZG,GACAE,GACAlB,KACE3B,GAA0B,mBAAb2C,GACf,CACA,MAAMjB,EAAa,CACjBK,SAAUN,EACVzD,KAVuBgC,KAA4B,mBAAb2C,GAUXI,0BAAwBD,QAAUpF,KAC1D6E,EAAKb,YAGJsB,EFOJ,SACJ1D,EACAsB,EACAF,EACAuC,GAEA,OAAI3D,IACEsB,EAAU7C,OAAS2C,EAAQ3C,UAGf,kBAAZkF,GACKrC,EAAU9C,MAAQ4C,EAAQ5C,SAKjC8C,EAAU9C,MAAQ4C,EAAQ5C,SAId,kBAAZmF,GACKrC,EAAU7C,OAAS2C,EAAQ3C,OAGtC,CE/BmBmF,CAAY5D,EADTqC,EAAkBkB,EAAanB,GACFe,EAAQE,GAAY,UACnED,EAAQM,EACN9F,EAAAA,IAAA,OAAA,CACEiB,MAAOG,EAAAA,OAAO6E,eACdtF,MAAO6D,KACHnB,EACFjB,EACAkB,EACA+B,EAAKzC,MAAQ,EACb2C,EACAE,GAAY,SACZhB,IAAoBkB,EAAanB,IAClC5C,SACA+D,IAED,IACL,CAED,OAAOH,CACT,YCVgB,UAA8D3C,OAC5EA,EAAMqD,QACNA,EAAOC,OACPA,EAAMC,OACNA,EAAMC,OACNA,EAAM/F,WACNA,EAAUgG,UACVA,EAASC,YACTA,EAAWC,aACXA,EAAYC,cACZA,EAAaC,cACbA,EAAaC,eACbA,EAAcC,YACdA,EAAWC,qBACXA,EAAoBC,YACpBA,EAAW/D,MACXA,EAAKrC,SACLA,EAAQqG,YACRA,EAAWzD,MACXA,EAAKR,UACLA,EAASkE,mBACTA,EAAkBC,gBAClBA,EAAeC,gBACfA,EAAeC,eACfA,EAAcjD,MACdA,EAAKkD,aACLA,EAAY3C,kBACZA,EAAiBF,gBACjBA,EAAe8C,gBACfA,EAAepD,cACfA,EAAaqD,iBACbA,EAAgBC,WAChBA,EAAUlH,YACVA,EAAWmH,mBACXA,IAEA,MAAMpF,EAA0B,eAAhB0E,EACVW,EAAuB,GACvBC,EAAUrB,EAAOsB,QAAQC,GAA4B,OAAtBA,EAAEC,kBACjCC,EAAWzB,EAAOsB,QAAQC,GAA4B,OAAtBA,EAAEC,kBAClCE,EAAwB,GAExBC,EAAaN,EAAQO,OACrBC,EAAc7B,EAAO4B,OAASD,EAEpC,IAAIG,EAAsBpF,EAAQF,EAAOuF,SAAS,GAAK,EACnDC,EAAsB,EAE1B,MAAMC,EAA2B,GAC3BC,EAA2B,GAEjC,IAAIC,GAAuBzF,EAAQmD,EAAQkC,SAAS,GAAK,EACrDK,GAAuB,EAE3B,MAAMC,GAA4B,GAC5BC,GAA4B,GAE5BC,GAAuB9F,KAAemB,GAAiC,kBAAhBmD,EAE7D,IAKIyB,GALA7E,GACc,kBAAhBoD,EACIjB,EAAOhD,UAA0B3C,MAAhB4G,EAA4B,IAAI0B,KAAK5E,EAAMzD,IAAIsI,UAAYzI,QAC5EE,EAGN,MAAMwI,GAAiBC,IACrBJ,GAA4D,OAAzCxC,EAAO4C,GAAcpB,gBACxC,MAAMxC,EAAO0B,EAAYkC,EAAc3I,GACvC,IAAK+E,GAAQiB,GAAW4C,IAAI7D,EAAK5E,KAAQsC,GAASsC,EAAKzC,OAAS,EAC9D,OAGmB,mBAAjBwE,IACFpD,GAAcmF,EAAuBA,wBAAOhD,EAAQd,IAGtD,MAAMtF,EACJkH,GAAiB3G,aAAeA,GAChC2G,GAAiB5G,cAAgB4I,GACjChC,GAAiBmC,eACbC,EACJnC,GAAiB5G,aAAeA,GAChC4G,GAAiB7G,cAAgB4I,GACjC/B,GAAiBoC,UACbF,IAAmBrJ,KAAgBsJ,GAAarC,EAChDuC,EAAYxJ,GAAakH,EAAgBqC,WAAcD,EACvDG,OACehJ,IAAnBmG,GAAwD,IAAxBA,EAAe8C,MAAc9C,EAAeuC,IAAI7D,EAAK5E,IAEjFiJ,GAAgC,OAAlBrE,EAAKsE,UAAuC,OAAjBtE,EAAKsE,UAAqBxC,GAEnE5E,SAAEA,GAAQqH,OAAEA,GAAM5G,UAAEA,IAAc6G,EAAcA,eACpDtC,GACKsB,GAAmBf,EAAWJ,GAASoC,WACrClH,GAAUA,EAAMnC,KAAO4F,EAAO4C,GAAcxI,KAE/CwI,EACJ3I,EACA+F,EAAO4C,GACPxC,EACAC,EACAK,EACAR,EACAgB,EAAaS,EAAa3B,EAAO4B,OACjCV,EAAaW,EAAc7B,EAAO4B,OAClCzB,EACA1D,EACAQ,EACAlB,GAEIJ,GAAKgC,GAAe4F,GACpB3H,GAAKD,GAAKO,IAEVJ,cAAEA,GAAaD,SAAEA,IAAaS,EAClC0C,EAAKzC,MACLiG,GAAmB3C,EAAUrD,EAC7BC,EACAC,EACAC,GACA6F,GAAmBJ,GAAuBJ,EAC1CQ,GAAmBL,GAAuBL,GAGxCU,IACFJ,IAAwBpD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,EACtD4F,IAAwBnD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,IAEtDyF,GAAuBhD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,EACrDuF,GAAuB9C,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,GAGnDgG,KACEvD,EAAKzC,OAAS,EACZiG,GACFH,GAAqBqB,KAAK1E,GAE1BiD,EAAoByB,KAAK1E,GAGvBwD,GACFF,GAAqBoB,KAAK1E,GAE1BkD,EAAoBwB,KAAK1E,IAK/B,MAAM2E,YL1MR3E,EACAgB,EACAf,GAIA,MAAO,CAAExE,KAFIuE,EAAKO,OAASS,EAAOT,OAASN,EAE5BvE,OADAsE,EAAK4E,aAAe5D,EAAO4D,YAE5C,CKmMqBC,CAAY7E,EAAMgB,EAAO4C,GAAe7C,IAAS6C,IAC5DkB,GAAYpI,EAAaC,GAAIC,GAAIC,GAAUC,GAAeC,GAC1DtC,GAAa+G,EACfA,IAAuBxB,EAAK5E,GAAI,CAC9BN,EAAGgK,GAAUhK,EAAIgK,GAAUvJ,MAAQ,EACnCR,EAAG+J,GAAU/J,IAEfwG,GAAasC,IAAI7D,EAAK5E,IAEpB2J,GACJC,EAAAA,4BAA8Bd,EAC1BjC,EACEjC,EACA4D,EACA3I,EACA0G,IACElH,GACF4J,IAEF,GAENjC,EAAMsC,KACJO,gBAAC1K,EAAG,IACEuK,MACAH,GACJ3J,YAAa4I,EACb3I,WAAYA,EACZP,UAAWqJ,EACX1I,SAAU6I,EAAW7I,EAAW,GACpB,aAAA0J,GACZ9I,UAAWkI,EACX1J,aAAcA,GACdqB,iBAAkBuI,IAAe1C,EACjCuD,IAAK,GAAGjK,KAAc2I,OAG1BlB,EAAOgC,KACL/J,MAACoF,EACC,CAAAC,KAAMA,EACN/B,MAAOA,EACPgC,YAAac,EAAO6C,EAAe,IACnCnG,UAAWA,EACXyB,gBAAiBA,EACjBgB,OAAQ4E,GACR/H,QAASA,EACTqC,kBAAmBA,IAEtB,EASH,YANoBjE,IAAhBH,EACF2I,GAAc3I,GAEdgG,EAAOmE,SAAQ,CAACC,EAAGC,IAAU1B,GAAc0B,KAI3CjJ,EACEC,KAAAwD,EAAAC,SAAA,CAAAvD,SAAA,CAAA5B,EAAAA,IAAA,IAAA,CAAA,YAAcwH,EAAkB5F,SAAG6F,IAClCM,EACAa,IAAwBnE,GACvBzE,EAACC,IAAA8D,EACC,CAAAG,MAAOA,EACPZ,MAAOA,EACPT,OAAQgG,GAAmB3C,EAAUrD,EACrCoB,cAAeA,EACfM,gBAAiBA,EACjBE,kBAAmBA,EACnBJ,aAAcwE,GAAmBH,GAAuBJ,EACxDhE,aAAcuE,GAAmBF,GAAuBJ,EACxDnG,QAASA,EACT4B,YAAaA,GACbQ,WAAY6C,EACZlD,SAAU0E,GAAmBL,GAAuBL,EACpD/D,SAAUyE,GAAmBJ,GAAuBJ,MAK9D,2BJ7IgB,SACdzF,EACAC,EACAC,EACAC,EACAyD,EACAmE,EACAC,GAEA,MAAMzI,cAAEA,EAAaD,SAAEA,GAAaS,EAClCC,EACAC,EACAC,EACAC,EACAyD,EACAmE,EACAC,GAEF,OAAQzI,EAAgBD,GAAY,CACtC,mBA1HgB,SACdmE,EACAwE,EACA9D,EACAZ,EACAtD,EACAqD,EACAI,EACAE,EACAC,EACAC,EACAH,EACAxD,EACAD,EACAQ,EACAlB,EACA0I,EACA1D,GAEA,MAAMM,EAAUrB,EAAOsB,QAAQtB,GAAsC,OAA3BA,EAAOwB,kBAC3CC,EAAWzB,EAAOsB,QAAQC,GAA4B,OAAtBA,EAAEC,kBAClCG,EAAaN,EAAQO,OACrBC,EAAcJ,EAASG,OAE7B,MAAO,CAAC5H,EAAqBC,KAC3B,MAAMyK,EAAa1E,EAAOhG,GACpBwI,EAAkD,OAA/BkC,EAAWlD,gBAC9BmD,EAAc3E,EAAO4B,OAC3B,IAAIE,EAAsB,EACtBE,EAAsB,EACtBG,EAAuB,EACvBC,EAAuB,EAC3B,IAAK,IAAIiC,EAAQ,EAAGA,EAAQM,EAAaN,GAAS,EAAG,CACnD,MAAMrF,EAAO0B,EAAY2D,EAAOpK,GAChC,IAAI2K,EAAO3K,EACX,GAAI8G,EAAc,CAChB,MAAM8D,EACa,mBAAjB9D,EACIL,EAAY1G,EAAaC,IAAaH,EACtC0K,EAAOvK,GAAYG,GACzBwK,EAAO,IAAInC,KAAKoC,GAAMnC,SACvB,CACD,IAAK1D,GAAQiB,GAAW4C,IAAI7D,EAAK5E,KAAQsC,GAASsC,EAAKzC,OAAS,EAC9D,SAEF,MAAMoB,EAAcmC,EAAOhD,UAAU8H,GAC/BE,GAActC,EAAmBf,EAAWJ,GAASoC,WACxDlH,GAAUA,EAAMnC,KAAOsK,EAAWtK,MAE/B8B,SAAEA,EAAQqH,OAAEA,EAAM5G,UAAEA,GAAc6G,EAAcA,eACpDiB,EAAeK,EAAaT,EAC5BpK,EACA+F,EAAOqE,GACPjE,EACAC,EACAK,EACAR,EACAuE,EAAe9C,EAAa3B,EAAO4B,OACnC6C,EAAe5C,EAAc7B,EAAO4B,OACpCzB,EACA1D,EACAQ,EACAlB,GAEIJ,EAAKgC,EAAc4F,EACnB3H,EAAKD,EAAKO,GAEVJ,cAAEA,EAAaD,SAAEA,GAAaS,EAClC0C,EAAKzC,MACLiG,EAAmB3C,EAAUrD,EAC7BC,EACAC,EACAC,EACA6F,EAAmBJ,EAAuBJ,EAC1CQ,EAAmBL,EAAuBL,GAU5C,GARIU,GACFJ,GAAwBpD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,EACtD4F,GAAwBnD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,IAEtDyF,GAAuBhD,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,EACrDuF,GAAuB9C,EAAKzC,MAAQ,EAAIyC,EAAKzC,MAAQ,GAGnDvC,IAAgBqK,EAClB,OAAO3I,EAAaC,EAAIC,EAAIC,EAAUC,EAAeC,EAExD,CACM,CAEX,qCAmCEqE,EACAC,EACAL,EACAU,EACAR,EACAC,EACA1D,EACAQ,EACAlB,GAEA,MACM4F,EADU3B,EAAOsB,QAAQtB,GAAsC,OAA3BA,EAAOwB,kBACtBI,OACrBC,EAAc7B,EAAO4B,OAASD,EACpC,MAAO,CAAC3H,EAAqBC,KAC3B,MAAMsJ,OAAEA,EAAMrH,SAAEA,GAAasH,EAAAA,eAC3BxJ,EACAC,EACA+F,EAAOhG,GACPoG,EACAC,EACAK,EACAR,EACAyB,EACAE,EACA1B,EACA1D,EACAQ,EACAlB,GAEF,MAAO,CAAEwH,SAAQwB,UAAW7I,EAAU,CAE1C"}