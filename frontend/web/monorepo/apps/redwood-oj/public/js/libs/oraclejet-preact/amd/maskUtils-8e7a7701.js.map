{"version":3,"file":"maskUtils-8e7a7701.js","sources":["../../src/utils/PRIVATE_dayUtils/maskUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BCP47Locale, CalendarUtils } from '../../UNSAFE_IntlDateTime';\nimport type { CalendarWidthNames } from '../../UNSAFE_IntlDateTime';\nimport type { CalendarDate, DatePlaceholders, IsoMonth } from '../../UNSAFE_InputDateMask';\nimport { checkIsValidIsoYear, checkNoCalendarExtension } from '#utils/UNSAFE_calendarDateUtils';\n\nconst NUMBERS_ONLY_REGEXP = /\\d/;\n\n/**\n * Replace placeholders in the masks array with their translated equivalents.\n */\nconst translateCustomMasks = (\n  masks: DatePlaceholders,\n  monthPlaceholder: string,\n  dayPlaceholder: string,\n  yearPlaceholder: string\n): DatePlaceholders => {\n  return masks.map((p: Intl.DateTimeFormatPart) => {\n    switch (p.type) {\n      case 'month':\n        return { ...p, value: monthPlaceholder };\n      case 'day':\n        return { ...p, value: dayPlaceholder };\n      case 'year':\n        return { ...p, value: yearPlaceholder };\n      default:\n        return { ...p, value: p.value.trim() };\n    }\n  }) as DatePlaceholders;\n};\n\n/**\n * Return month names for the Gregorian calendar.\n */\nconst getMonthNamesGregorian = (\n  locale: BCP47Locale,\n  style: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) => {\n  const cal = CalendarUtils.getCalendar(locale, 'gregory');\n  const _monthNamesFormatMap = {\n    short: 'abbreviated',\n    narrow: 'narrow',\n    long: 'wide'\n  } as const;\n  const calType: NonNullable<CalendarWidthNames> = _monthNamesFormatMap[style];\n  const months = cal.months['stand-alone'][calType];\n  return months;\n};\n\nconst cachedMonthNames = new Map<string, object>();\n\n/**\n * Return month name for the given locale, month, year, and style (long | short | narrow).\n * If year is unknown, pass '*'. We'll have to figure out how to handle this when we add support\n * for multiple calendars, where the number of months in a year can vary. The year is unused for\n * Gregorian calendars because the number of months is always 12.\n */\nconst getMonthName = (\n  locale: BCP47Locale,\n  month: IsoMonth,\n  year: number | '*',\n  style: NonNullable<Intl.DateTimeFormatOptions['weekday']>\n) => {\n  if (year !== '*') {\n    checkIsValidIsoYear(year);\n  }\n  checkNoCalendarExtension(locale);\n\n  let monthNames = cachedMonthNames.get(`${locale}-${style}`);\n  if (!monthNames) {\n    monthNames = getMonthNamesGregorian(locale, style);\n    cachedMonthNames.set(`${locale}-${style}`, monthNames);\n  }\n  const monthIndex = '' + month;\n  return (monthNames as any)[monthIndex];\n};\n\n/**\n * Return year, month, and day for Today.\n */\nconst getTodayAsCalendarDate = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return { year, month, day };\n};\n\n/**\n * Return true if the specified string contains numbers only.\n */\nconst isNumberOnlyString = (s: string) => {\n  return NUMBERS_ONLY_REGEXP.test(s);\n};\n\n/**\n * Return true if the date params represent 2 different calendar dates.\n */\nconst calendarDatesAreDifferent = (d1: CalendarDate | undefined, d2: CalendarDate | undefined) => {\n  const d1_empty = !d1 || (!d1.day && !d1.month && !d1.year);\n  const d2_empty = !d2 || (!d2.day && !d2.month && !d2.year);\n\n  // If both dates are empty, return false.\n  if (d1_empty && d2_empty) {\n    return false;\n  }\n\n  // If one is empty and the other isn't, return true.\n  if ((d1_empty && !d2_empty) || (!d1_empty && d2_empty)) {\n    return true;\n  }\n\n  // Return true if any of the segment values don't match.\n  const d1_day = d1?.day;\n  const d1_month = d1?.month;\n  const d1_year = d1?.year;\n  const d2_day = d2?.day;\n  const d2_month = d2?.month;\n  const d2_year = d2?.year;\n  if (d1_day !== d2_day || d1_month !== d2_month || d1_year !== d2_year) {\n    return true;\n  }\n\n  return false;\n};\n\nexport {\n  calendarDatesAreDifferent,\n  getMonthName,\n  getTodayAsCalendarDate,\n  isNumberOnlyString,\n  translateCustomMasks\n};\n"],"names":["NUMBERS_ONLY_REGEXP","cachedMonthNames","Map","d1","d2","d1_empty","day","month","year","d2_empty","d1_day","d1_month","d1_year","d2_day","d2_month","d2_year","locale","style","checkIsValidIsoYear","checkNoCalendarExtension","monthNames","get","cal","CalendarUtils","getCalendar","calType","short","narrow","long","months","getMonthNamesGregorian","set","date","Date","getFullYear","getMonth","getDate","s","test","masks","monthPlaceholder","dayPlaceholder","yearPlaceholder","map","p","type","value","trim"],"mappings":"kIAaA,MAAMA,EAAsB,KA2CtBC,EAAmB,IAAIC,gCAiDK,CAACC,EAA8BC,KAC/D,MAAMC,GAAYF,IAAQA,EAAGG,MAAQH,EAAGI,QAAUJ,EAAGK,KAC/CC,GAAYL,IAAQA,EAAGE,MAAQF,EAAGG,QAAUH,EAAGI,KAGrD,GAAIH,GAAYI,EACd,OAAO,EAIT,GAAKJ,IAAaI,IAAeJ,GAAYI,EAC3C,OAAO,EAIT,MAAMC,EAASP,GAAIG,IACbK,EAAWR,GAAII,MACfK,EAAUT,GAAIK,KACdK,EAAST,GAAIE,IACbQ,EAAWV,GAAIG,MACfQ,EAAUX,GAAII,KACpB,OAAIE,IAAWG,GAAUF,IAAaG,GAAYF,IAAYG,CAIlD,iBAlEO,CACnBC,EACAT,EACAC,EACAS,KAEa,MAATT,GACFU,EAAmBA,oBAACV,GAEtBW,EAAwBA,yBAACH,GAEzB,IAAII,EAAanB,EAAiBoB,IAAI,GAAGL,KAAUC,KAC9CG,IACHA,EApC2B,EAC7BJ,EACAC,KAEA,MAAMK,EAAMC,EAAaA,cAACC,YAAYR,EAAQ,WAMxCS,EALuB,CAC3BC,MAAO,cACPC,OAAQ,SACRC,KAAM,QAE8DX,GAEtE,OADeK,EAAIO,OAAO,eAAeJ,EAC5B,EAwBEK,CAAuBd,EAAQC,GAC5ChB,EAAiB8B,IAAI,GAAGf,KAAUC,IAASG,IAG7C,OAAQA,EADW,GAAKb,EACc,2BAMT,KAC7B,MAAMyB,EAAO,IAAIC,KAIjB,MAAO,CAAEzB,KAHIwB,EAAKE,cAGH3B,MAFDyB,EAAKG,WAAa,EAEV7B,IADV0B,EAAKI,UACU,uBAMDC,GACnBrC,EAAoBsC,KAAKD,0BAjFL,CAC3BE,EACAC,EACAC,EACAC,IAEOH,EAAMI,KAAKC,IAChB,OAAQA,EAAEC,MACR,IAAK,QACH,MAAO,IAAKD,EAAGE,MAAON,GACxB,IAAK,MACH,MAAO,IAAKI,EAAGE,MAAOL,GACxB,IAAK,OACH,MAAO,IAAKG,EAAGE,MAAOJ,GACxB,QACE,MAAO,IAAKE,EAAGE,MAAOF,EAAEE,MAAMC,QACjC"}