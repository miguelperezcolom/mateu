{"version":3,"file":"SelectorWebElement.js","sourceRoot":"","sources":["SelectorWebElement.ts"],"names":[],"mappings":";;;AAAA,2DAAwC;AACxC,qEAAkE;AAElE;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,+CAAsB;IAC5D,qBAAqB;IAErB;;;;;;;OAOG;IACH,KAAK,CAAC,UAAU;QACd,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,uBAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QACnD,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9C,CAAC;CACF;AAhBD,gDAgBC","sourcesContent":["import { By } from 'selenium-webdriver';\nimport { SelectorWebElementBase } from './SelectorWebElementBase';\n\n/**\n * The component WebElement for [oj-c-selector](../../jsdocs/oj-c.Selector.html).\n * Do not instantiate this class directly, instead, use\n * [findSelector](../functions/findSelector.html).\n */\nexport class SelectorWebElement extends SelectorWebElementBase {\n  // Put overrides here\n\n  /**\n   * Gets the selected value of the selector.\n   * @return boolean selection checked state.\n   * Note test authors should not use this method to check whether an item is selected\n   * when this is used with ListView or other collection components.\n   * Rather, tests should use the test adapter method on ListView (or other collection) to get the selection\n   * and check whether the item key is in it.\n   */\n  async isSelected(): Promise<boolean> {\n    const checkbox = await this.findElements(By.xpath('.//input'));\n    const l = checkbox[0].getAttribute('aria-checked');\n    return (await l) === 'false' ? false : true;\n  }\n}\n"]}