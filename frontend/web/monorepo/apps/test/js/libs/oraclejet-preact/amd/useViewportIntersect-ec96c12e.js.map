{"version":3,"file":"useViewportIntersect-ec96c12e.js","sources":["../../src/hooks/UNSAFE_useViewportIntersect/useViewportIntersect.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useLayoutEffect } from 'preact/hooks';\n\n/**\n * Configuration about the viewport.  For now, it only has a field that returns the viewport element.\n */\nexport type ViewportConfig = {\n  scroller: () => HTMLElement | null;\n};\n\n/**\n * Hook to detect when the specified viewport element intersects elements that matches the specified css selector.\n * This is currently used by IncrementalLoader and VirtualizeViewportCollection.\n * Note options to IntersectionObsever such as rootMargin is not exposed now but can be added in the future as\n * needed.  (for example, with sticky footer we want to specify a wider margin so it won't trigger intersect)\n *\n * @param viewport an object which provide information about the viewport including what the viewport element is\n * @param onIntersect callback when an intersection with an element that has the specified target\n *                    style class occurred\n * @param targetSelector the CSS querySelector string used to identify the element where IntersectionObserver\n *                       observes\n * @param margin the top and bottom margin surrounding the viewport element in which the intersect detection takes into account.\n */\nexport function useViewportIntersect(\n  viewport: ViewportConfig,\n  margin = 0,\n  threshold = 0,\n  targetSelector: string,\n  onIntersect: () => void,\n  onNotIntersect?: (entry: IntersectionObserverEntry) => void\n) {\n  // create an IntersectionObserver.  Note for now we are creating it on every render (instead of once\n  // on mounted) due to an issue we encountered where sometimes IntersectionObserver will not invoke\n  // the intersect callback (possibly due to the root might have been detach/re-attached?), see JET-49951.\n  // NEED useLayoutEffect here rather than useEffect to handle race conditions where notifications can be\n  // received AFTER a render completes but BEFORE any corresponding useEffects run to cleanup old references.\n  useLayoutEffect(() => {\n    let observer: IntersectionObserver;\n    const root = viewport.scroller();\n    if (root) {\n      const options = {\n        // specifying null to cause ResizeObserver to use document viewport\n        root: root === document.body || root === document.documentElement ? null : root,\n        rootMargin: `${margin}px 0px`,\n        threshold: [threshold]\n      };\n      observer = new IntersectionObserver((entries) => {\n        for (const entry of entries) {\n          if (\n            entry.isIntersecting ||\n            // manually check intersection here, because rootMargin is ignored when scroller is not explicitly defined,\n            // e.g. using document.documentElement, which leads to intersection is not correctly detected during\n            // keyboard navigation. https://w3c.github.io/IntersectionObserver/#dom-intersectionobserver-rootmargin\n            (margin > 0 &&\n              !options.root &&\n              entry.rootBounds?.bottom &&\n              entry.boundingClientRect.top <= entry.rootBounds?.bottom)\n          ) {\n            onIntersect();\n            return;\n          }\n          if (entry.intersectionRatio > 0 && !entry.isIntersecting && onNotIntersect) {\n            onNotIntersect(entry);\n            return;\n          }\n        }\n      }, options);\n\n      // start observing the element with certain class is scrolled into viewport\n      root.querySelectorAll(targetSelector).forEach((target) => {\n        observer.observe(target);\n      });\n    }\n\n    return () => {\n      observer?.disconnect();\n    };\n  });\n}\n"],"names":["viewport","margin","threshold","targetSelector","onIntersect","onNotIntersect","useLayoutEffect","observer","root","scroller","options","document","body","documentElement","rootMargin","IntersectionObserver","entries","entry","isIntersecting","rootBounds","bottom","boundingClientRect","top","intersectionRatio","querySelectorAll","forEach","target","observe","disconnect"],"mappings":"8FA8BEA,EACAC,EAAS,EACTC,EAAY,EACZC,EACAC,EACAC,GAOAC,EAAAA,iBAAgB,KACd,IAAIC,EACJ,MAAMC,EAAOR,EAASS,WACtB,GAAID,EAAM,CACR,MAAME,EAAU,CAEdF,KAAMA,IAASG,SAASC,MAAQJ,IAASG,SAASE,gBAAkB,KAAOL,EAC3EM,WAAY,GAAGb,UACfC,UAAW,CAACA,IAEdK,EAAW,IAAIQ,sBAAsBC,IACnC,IAAK,MAAMC,KAASD,EAAS,CAC3B,GACEC,EAAMC,gBAILjB,EAAS,IACPS,EAAQF,MACTS,EAAME,YAAYC,QAClBH,EAAMI,mBAAmBC,KAAOL,EAAME,YAAYC,OAGpD,YADAhB,IAGF,GAAIa,EAAMM,kBAAoB,IAAMN,EAAMC,gBAAkBb,EAE1D,YADAA,EAAeY,EAGlB,IACAP,GAGHF,EAAKgB,iBAAiBrB,GAAgBsB,SAASC,IAC7CnB,EAASoB,QAAQD,EAAO,GAE3B,CAED,MAAO,KACLnB,GAAUqB,YAAY,CACvB,GAEL"}