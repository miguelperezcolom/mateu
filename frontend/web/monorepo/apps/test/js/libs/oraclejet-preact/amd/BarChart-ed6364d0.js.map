{"version":3,"file":"BarChart-ed6364d0.js","sources":["../../src/UNSAFE_BarChart/utils/barNavUtils.ts","../../src/UNSAFE_BarChart/OverviewBarChart.tsx","../../src/UNSAFE_BarChart/BarChart.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Info, ItemInfo } from '#utils/UNSAFE_visTypes/chart';\nimport {\n  getNextItemInGroup,\n  getNextItemInSeries,\n  getPrevItemInGroup,\n  getPrevItemInSeries\n} from '#utils/PRIVATE_chartUtils/navUtils';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\n\ntype isItemNavigableType = (seriesIndex: number, groupIndex: number) => boolean;\n\n/**\n * Get next item in unstacked bar chart.\n * @param info\n * @param viewportEndIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getNextItem(\n  info: ItemInfo,\n  viewportEndIndex: number,\n  numSeries: number,\n  isNavigable: isItemNavigableType\n): ItemInfo | undefined {\n  const nextItemInGroup = getNextItemInGroup(info, numSeries, isNavigable);\n  if (nextItemInGroup) return nextItemInGroup;\n\n  if (info.groupIndex < viewportEndIndex) {\n    let nextItem: ItemInfo | undefined = { seriesIndex: 0, groupIndex: info.groupIndex + 1 };\n    if (isNavigable(nextItem.seriesIndex, nextItem.groupIndex)) return nextItem;\n    nextItem = getNextItem(nextItem, viewportEndIndex, numSeries, isNavigable);\n    if (nextItem) return nextItem;\n  }\n  return;\n}\n\n/**\n * Get prev item in unstacked bar chart.\n * @param info\n * @param viewportStartIndex\n * @param numSeries\n * @param isNavigable\n * @returns\n */\nexport function getPreviousItem(\n  info: ItemInfo,\n  viewportStartIndex: number,\n  numSeries: number,\n  isNavigable: (seriesIndex: number, groupIndex: number) => boolean\n) {\n  const prevItemInGroup = getPrevItemInGroup(info, isNavigable);\n  if (prevItemInGroup) return prevItemInGroup;\n\n  if (info.groupIndex > viewportStartIndex) {\n    let prevItem = { groupIndex: info.groupIndex - 1, seriesIndex: numSeries - 1 };\n    if (isNavigable(prevItem.seriesIndex, prevItem.groupIndex)) return prevItem;\n    prevItem = getPreviousItem(prevItem, viewportStartIndex, numSeries, isNavigable);\n    if (prevItem) return prevItem;\n  }\n  return info;\n}\n\nexport function getBarChartNavUtil<K, D extends BarItemData<K>>(\n  getDataItem: (seriesIndex: number, groupIndex: number) => D | undefined,\n  numSeries: number,\n  viewportStartIndex: number,\n  viewportEndIndex: number,\n  isStacked: boolean,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const isItemNavigable = (seriesIndex: number, groupIndex: number) => {\n    const barItem = getDataItem(seriesIndex, groupIndex);\n    return Boolean(barItem);\n  };\n\n  const getNextChartItem = (\n    itemInfo: Info,\n    arrow: 'ArrowLeft' | 'ArrowRight' | 'ArrowDown' | 'ArrowUp'\n  ): Info => {\n    if (\n      !isStacked &&\n      (((arrow === 'ArrowDown' || arrow === 'ArrowUp') && !isHoriz) ||\n        ((arrow === 'ArrowLeft' || arrow === 'ArrowRight') && isHoriz))\n    ) {\n      return itemInfo;\n    }\n\n    let newInfo: Info | undefined;\n    // TODO: this is just to keep typescript happy.\n    // figure out consistent typing while doing type cleanup.\n    const info = {\n      groupIndex: itemInfo.groupIndex!,\n      seriesIndex: itemInfo.seriesIndex!\n    };\n\n    if (info.groupIndex! < viewportStartIndex) {\n      info.groupIndex = viewportStartIndex;\n      return info;\n    } else if (info.groupIndex! > viewportEndIndex) {\n      info.groupIndex = viewportEndIndex;\n      return info;\n    }\n\n    if (isStacked) {\n      if ((arrow === 'ArrowLeft' && !isHoriz) || (arrow === 'ArrowUp' && isHoriz)) {\n        newInfo =\n          isRtl && !isHoriz\n            ? getNextItemInSeries(info, viewportEndIndex, isItemNavigable)\n            : getPrevItemInSeries(info, viewportStartIndex, isItemNavigable);\n      } else if ((arrow === 'ArrowRight' && !isHoriz) || (arrow === 'ArrowDown' && isHoriz)) {\n        newInfo =\n          isRtl && !isHoriz\n            ? getPrevItemInSeries(info, viewportStartIndex, isItemNavigable)\n            : getNextItemInSeries(info, viewportEndIndex, isItemNavigable);\n      } else if ((arrow === 'ArrowDown' && !isHoriz) || (arrow === 'ArrowLeft' && isHoriz)) {\n        newInfo =\n          isRtl && isHoriz\n            ? getNextItemInGroup(info, numSeries, isItemNavigable)\n            : getPrevItemInGroup(info, isItemNavigable);\n      } else if ((arrow === 'ArrowUp' && !isHoriz) || (arrow === 'ArrowRight' && isHoriz)) {\n        newInfo =\n          isRtl && isHoriz\n            ? getPrevItemInGroup(info, isItemNavigable)\n            : getNextItemInGroup(info, numSeries, isItemNavigable);\n      }\n    } else {\n      if (!isHoriz) {\n        if (arrow === 'ArrowRight') {\n          newInfo = isRtl\n            ? getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable)\n            : getNextItem(info, viewportEndIndex, numSeries, isItemNavigable);\n        } else if (arrow === 'ArrowLeft') {\n          newInfo = isRtl\n            ? getNextItem(info, viewportEndIndex, numSeries, isItemNavigable)\n            : getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable);\n        }\n      } else {\n        if (arrow === 'ArrowDown') {\n          newInfo = getNextItem(info, viewportEndIndex, numSeries, isItemNavigable);\n        } else if (arrow === 'ArrowUp') {\n          newInfo = getPreviousItem(info, viewportStartIndex, numSeries, isItemNavigable);\n        }\n      }\n    }\n    return newInfo || info;\n  };\n\n  return getNextChartItem;\n}\n","import { BarChart } from './BarChart';\nimport { BarChartProps, BarItemData } from './barChart.types';\n\nexport function OverviewBarChart<K extends string | number, D extends BarItemData<K>>(\n  props: BarChartProps<K, D>\n) {\n  return (\n    <BarChart\n      datatip={() => ({ content: '' })}\n      zoomAndScroll=\"off\"\n      plotArea={{\n        yMajorTick: {\n          isRendered: false\n        },\n        xMajorTick: {}\n      }}\n      xAxis={{\n        tickLabel: {\n          autoRotate: false,\n          // @ts-ignore\n          isRendered: props.xAxis?.timeAxisType ? true : false\n        }\n      }}\n      series={props.series}\n      groups={props.groups}\n      getDataItem={props.getDataItem}\n      yAxis={{\n        tickLabel: {\n          isRendered: false\n        }\n      }}\n      overview=\"off\"\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { BarChartProps, BarItemData } from './barChart.types';\nimport { getBarGapRatio } from './utils/barSeriesUtils';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { BarGroup } from './BarGroup';\nimport {\n  findNearestDataPoint,\n  getStartAndEndAxesOffset\n} from '#utils/PRIVATE_chartUtils/layoutUtils';\nimport {\n  getBarCenterCoordinate,\n  getBarPosition,\n  getSeriesOffsetAndWidth\n} from './utils/barLayoutUtils';\nimport { getBarChartNavUtil } from './utils/barNavUtils';\nimport { Chart } from '#PRIVATE_Chart';\nimport { TimeAxisProps, Scale } from '#utils/UNSAFE_visTypes/chart';\nimport { getItemColor } from '#utils/PRIVATE_chartUtils/dataStyleUtils';\nimport { OverviewBarChart } from './OverviewBarChart';\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\n\n/**\n * A Bar chart displays information graphically using rectangular bars with heights or lengths proportional to the values that they represent,\n * making relationships among the data easier to understand.\n */\nexport function BarChart<K extends string | number, D extends BarItemData<K>>({\n  width,\n  height,\n  selectedIds = [],\n  hiddenIds = [],\n  highlightedIds,\n  hideAndShowBehavior = 'none',\n  orientation = 'vertical',\n  yAxis,\n  series,\n  groups,\n  isStacked = false,\n  getDataItem,\n  selectionMode = 'none',\n  drilling = 'off',\n  dataItemGaps = 0.5,\n  ...props\n}: BarChartProps<K, D>) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const hiddenSet = new Set(hiddenIds);\n  const isHoriz = orientation === 'horizontal';\n  const timeAxisType = (props.xAxis as TimeAxisProps)?.timeAxisType;\n  const selectedSet = new Set(selectedIds);\n  const highlightedSet = new Set(highlightedIds);\n  const getGapRatio = (startIndex: number, endIndex: number) => {\n    return getBarGapRatio(isStacked, startIndex, endIndex);\n  };\n  const getNextChartItemFunc = (startIndex: number, endIndex: number) => {\n    return getBarChartNavUtil(\n      getDataItem,\n      series.length,\n      startIndex,\n      endIndex,\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n  };\n  const isSplitDualY = typeof props.y2Axis?.split === 'number';\n  const getDataItemPos = (\n    xScale: Scale,\n    yScale: Scale,\n    y2Scale: Scale,\n    axisStepWidth: number,\n    averageGroupZ: number,\n    gapRatio: number\n  ) => {\n    return getBarPosition(\n      series,\n      groups,\n      getDataItem,\n      xScale,\n      yScale,\n      y2Scale,\n      hiddenSet,\n      dataItemGaps,\n      axisStepWidth,\n      averageGroupZ,\n      gapRatio,\n      yAxis?.scale === 'log',\n      isStacked,\n      isRtl,\n      isHoriz,\n      isSplitDualY,\n      timeAxisType\n    );\n  };\n\n  const findNearest = (\n    xScale: Scale,\n    yScale: Scale,\n    y2Scale: Scale,\n    axisStepWidth: number,\n    averageGroupZ: number,\n    gapRatio: number\n  ) => {\n    const getSeriesDataInfo = getSeriesOffsetAndWidth(\n      axisStepWidth,\n      averageGroupZ,\n      series,\n      getDataItem,\n      gapRatio,\n      dataItemGaps,\n      isStacked,\n      isRtl,\n      isHoriz\n    );\n    return findNearestDataPoint(\n      series,\n      groups,\n      xScale,\n      yScale,\n      getDataItem,\n      isStacked,\n      getSeriesDataInfo,\n      getBarCenterCoordinate,\n      yAxis?.scale === 'log',\n      dataItemGaps,\n      hiddenSet,\n      timeAxisType,\n      y2Scale\n    );\n  };\n\n  const getMarkerColorAndType = (seriesIndex: number, groupIndex: number) => {\n    return {\n      color: getItemColor(seriesIndex, groupIndex, series, getDataItem),\n      type: 'circle' as const\n    };\n  };\n\n  const getOffset = (groupCount: number) => {\n    return getStartAndEndAxesOffset(false, false, isHoriz, groupCount, true);\n  };\n\n  return (\n    <Chart\n      width={width}\n      height={height}\n      selectedIds={selectedSet}\n      hiddenIds={hiddenIds}\n      hideAndShowBehavior={hideAndShowBehavior}\n      orientation={orientation}\n      yAxis={yAxis}\n      series={series}\n      groups={groups}\n      isStacked={isStacked}\n      getDataItem={getDataItem}\n      selectionMode={selectionMode}\n      drilling={drilling}\n      renderGridLinesInFront={false}\n      findNearest={findNearest}\n      getDataItemPos={getDataItemPos}\n      getNavUtil={getNextChartItemFunc}\n      getGapRatio={getGapRatio}\n      getMarkerInfo={getMarkerColorAndType}\n      isRtl={isRtl}\n      getStartAndEndAxesOffset={getOffset}\n      defaultOverviewContentRenderer={() => {\n        return <OverviewBarChart series={series} groups={groups} getDataItem={getDataItem} />;\n      }}\n      {...props}>\n      {({\n        groupsInfo,\n        xStartIndex,\n        xEndIndex,\n        xScale,\n        yScale,\n        y2Scale,\n        gapRatio,\n        activeId,\n        focusedItemInfo,\n        hoveredItemInfo,\n        axisStepWidth,\n        averageGroupZ,\n        isPointInsideMarquee,\n        getTextDimensions,\n        defaultFontSize,\n        colors,\n        getItemAriaLabel,\n        plotAreaClipPathId\n      }) => {\n        return (\n          <g clipPath={`url(#${plotAreaClipPathId})`}>\n            {groupsInfo\n              .slice(xStartIndex, xEndIndex + 1)\n              .map(({ item: group }: GroupLevelItem, index: number) => (\n                <BarGroup\n                  yScale={yScale}\n                  splitDualY={isSplitDualY}\n                  y2Scale={y2Scale}\n                  xScale={xScale}\n                  groupIndex={index + xStartIndex}\n                  selectedIds={selectedSet}\n                  hiddenIds={hiddenSet}\n                  highlightedIds={highlightedIds ? highlightedSet : highlightedIds}\n                  isDrillEnabled={drilling === 'on'}\n                  series={series}\n                  barGapRatio={gapRatio}\n                  dataItemGaps={dataItemGaps}\n                  isPointInsideMarquee={isPointInsideMarquee}\n                  isStacked={isStacked}\n                  axisStepWidth={axisStepWidth}\n                  averageGroupZ={averageGroupZ!}\n                  group={group}\n                  timeAxisType={(props.xAxis as TimeAxisProps)?.timeAxisType}\n                  colors={colors}\n                  activeId={activeId}\n                  isLog={yAxis?.scale === 'log'}\n                  orientation={orientation}\n                  getDataItem={getDataItem}\n                  isSelectionEnabled={selectionMode != 'none'}\n                  isRtl={isRtl}\n                  focusedItemInfo={focusedItemInfo}\n                  hoveredItemInfo={hoveredItemInfo}\n                  getTextDimensions={getTextDimensions}\n                  defaultFontSize={defaultFontSize}\n                  getStackLabel={props.getStackLabel}\n                  getItemAriaLabel={getItemAriaLabel}\n                />\n              ))}\n          </g>\n        );\n      }}\n    </Chart>\n  );\n}\n"],"names":["getNextItem","info","viewportEndIndex","numSeries","isNavigable","nextItemInGroup","getNextItemInGroup","groupIndex","nextItem","seriesIndex","getPreviousItem","viewportStartIndex","prevItemInGroup","getPrevItemInGroup","prevItem","OverviewBarChart","props","_jsx","BarChart","datatip","content","zoomAndScroll","plotArea","yMajorTick","isRendered","xMajorTick","xAxis","tickLabel","autoRotate","timeAxisType","series","groups","getDataItem","yAxis","overview","width","height","selectedIds","hiddenIds","highlightedIds","hideAndShowBehavior","orientation","isStacked","selectionMode","drilling","dataItemGaps","direction","useUser","isRtl","hiddenSet","Set","isHoriz","selectedSet","highlightedSet","isSplitDualY","y2Axis","split","Chart","renderGridLinesInFront","findNearest","xScale","yScale","y2Scale","axisStepWidth","averageGroupZ","gapRatio","getSeriesDataInfo","getSeriesOffsetAndWidth","findNearestDataPoint","getBarCenterCoordinate","scale","getDataItemPos","getBarPosition","getNavUtil","startIndex","endIndex","isItemNavigable","barItem","Boolean","itemInfo","arrow","newInfo","getNextItemInSeries","getPrevItemInSeries","getBarChartNavUtil","length","getGapRatio","getBarGapRatio","getMarkerInfo","color","getItemColor","type","getStartAndEndAxesOffset","groupCount","defaultOverviewContentRenderer","jsx","children","groupsInfo","xStartIndex","xEndIndex","activeId","focusedItemInfo","hoveredItemInfo","isPointInsideMarquee","getTextDimensions","defaultFontSize","colors","getItemAriaLabel","plotAreaClipPathId","clipPath","slice","map","item","group","index","BarGroup","splitDualY","isDrillEnabled","barGapRatio","isLog","isSelectionEnabled","getStackLabel"],"mappings":"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"}