{"version":3,"file":"AspectRatio-06435b1e.js","sources":["../../src/UNSAFE_AspectRatio/AspectRatio.tsx"],"sourcesContent":["import { VNode } from 'preact';\n\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { ratios, variant } from './AspectRatioStyles.css';\n\n// AspectRatio uses the common padding-bottom as a percentage\n// hack to get aspect-ratio to work.\n// CSS now has an aspect-ratio attribute that makes this super easy.\n// aspect-ratio is supported in all major browsers, most recently in Safari 15.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\n// However, it isn't until jet 14 that we drop support for Safari 14.\n// When jet 14 comes out we can replace the padding-bottom hack with aspect-ratio css property.\n// Also a user could just put aspect-ratio directly on their dom, instead of wrapping\n// it inside this AspectRatio component.\n\ntype Ratio = (typeof ratios)[number];\n\nconst dimensions = ['maxWidth', 'minWidth', 'width'] as const;\n\ntype Dimension = (typeof dimensions)[number];\n\n// This component has some StyleInterpolationProps. Those are the width properties of the DimensionProps.\ntype StyleInterpolationProps = Pick<DimensionProps, Dimension>;\n\ntype AspectRatioProps = StyleInterpolationProps & {\n  /**\n   * The boxâ€™s preferred aspect ratio is the specified ratio of width / height. When ratio is 1/1\n   * it is a square.\n   */\n  ratio?: Ratio;\n  /**\n   * The child.\n   */\n  children: VNode<any>;\n};\n\n// Create an array [dimensionInterpolations['maxWidth'], dimensionInterpolations['width'], dimensionInterpolations['minWidth']]\nconst widthDimensionInterpolation = Array.from(dimensions, (x) => dimensionInterpolations[x]);\nconst interpolations = mergeInterpolations<StyleInterpolationProps>(widthDimensionInterpolation);\n\n/**\n * The AspectRatio component displays its content with a certain ratio based on the dimension\n * properties. Overflow content is hidden.\n *\n * It uses a common padding-bottom hack to do this. In future versions it will\n * be implemented using the CSS's aspect-ratio property when the browsers we need to support\n * all have it. For example, Safari 15 has it, but we won't drop Safari 14 until jet 14.\n *\n */\nfunction AspectRatio({ children, ratio = '1/1', ...props }: AspectRatioProps) {\n  const { class: cls, ...styles } = interpolations(props);\n  return (\n    <div class={classNames([variant[ratio], cls])} style={styles}>\n      {children}\n    </div>\n  );\n}\n\nexport { ratios, AspectRatio };\n"],"names":["widthDimensionInterpolation","Array","from","x","dimensionInterpolations","interpolations","mergeInterpolations","children","ratio","props","class","cls","styles","_jsx","classNames","variant","style"],"mappings":"knEAoBA,MAoBMA,EAA8BC,MAAMC,KApBvB,CAAC,WAAY,WAAY,UAoBgBC,GAAMC,EAAuBA,wBAACD,KACpFE,EAAiBC,EAAAA,oBAA6CN,iBAWpE,UAAqBO,SAAEA,EAAQC,MAAEA,EAAQ,SAAUC,IACjD,MAAQC,MAAOC,KAAQC,GAAWP,EAAeI,GACjD,OACEI,EAAAA,WAAKH,MAAOI,EAAUA,WAAC,CAACC,EAAQP,GAAQG,IAAOK,MAAOJ,EACnDL,SAAAA,GAGP"}