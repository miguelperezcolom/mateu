{"version":3,"file":"LayerHost-7d4aa6d3.js","sources":["../../src/UNSAFE_Environment/EnvironmentContext.tsx","../../src/UNSAFE_Layer/LayerContext.ts","../../src/UNSAFE_Layer/LayerHost.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Theme, ThemeModifiers } from '../UNSAFE_Theme';\n\nimport { Redwood } from '../Common';\nimport { createContext } from 'preact';\n\n/**\n * Defines user specific environment\n */\ntype User = {\n  locale: string;\n  direction: 'rtl' | 'ltr';\n  forcedColors: 'none' | 'active';\n};\n\n/**\n * Defines translation bundle type.\n */\nexport type TranslationBundle = Record<string, (...args: any[]) => string>;\n\n/**\n * Defines a type for translation property which is an object where\n * - key - string - bundle id\n * - value - object - strings to functions of the type (options?: object)=>string\n *\n * Translation bundle example:\n * const bundle = {\n *  @oracle/oracle-preact-bundle: {\n *      welcome: () => 'bienvenido',\n *      success: () => 'Ã©xito'\n *  }\n * }\n */\ntype Translations = { [bundleId: string]: TranslationBundle };\n\n/**\n * Defines the mode in which the application is running. For \"test\" mode, UNSAFE_useTestId hook will\n * return a set of attributes to be rendered on the component DOM for testing purposes. Default is\n * \"production\"\n */\ntype Mode = 'test' | 'production';\n\n/**\n * Environment specified at the root level\n */\nexport type RootEnvironment = Partial<ThemeModifiers> & {\n  /**\n   * user - supports user preferences\n   */\n  user?: Partial<User>;\n  /**\n   * theme - supports theme settings\n   */\n  theme?: Theme;\n  /**\n   * translations - supports translation bundles\n   */\n  translations?: Translations;\n  /**\n   * mode - the application's configured mode\n   */\n  mode?: Mode;\n};\n\n/**\n * Environment specified at the component level\n */\nexport type Environment = Partial<ThemeModifiers> & {\n  translations?: Translations;\n};\n\nexport type CompleteEnvironmentType = ThemeModifiers & {\n  user: User;\n  theme: Theme;\n  translations?: Translations;\n  mode: Mode;\n};\n\n/**\n * Default environment created for the application\n */\nexport const DefaultEnvironment: CompleteEnvironmentType = {\n  user: {\n    locale: document.documentElement.getAttribute('lang') || 'en',\n    direction:\n      document.documentElement.getAttribute('dir')?.toLowerCase() === 'rtl' ? 'rtl' : 'ltr',\n    forcedColors: window.matchMedia?.('(forced-colors: active)')?.matches ? 'active' : 'none'\n  },\n  theme: Redwood,\n  colorScheme: 'light',\n  scale: 'lg',\n  currentBgColor: undefined,\n  mode: 'production',\n  density: 'standard'\n};\n\nexport const EnvironmentContext = createContext<CompleteEnvironmentType>(DefaultEnvironment);\n","import { createContext } from 'preact';\n\nexport type LayerLevel = 'nearestAncestor' | 'topLevel';\nexport type LayerPriority = 'popup' | 'dialog' | 'messages' | 'tooltip';\n\nexport type LayerContextProps = {\n  getRootLayerHost?: (priority?: LayerPriority) => Element;\n  getLayerHost?: (priority?: LayerPriority) => Element;\n  onLayerUnmount?: (element: HTMLElement) => void;\n};\n\nexport const LayerContext = createContext<LayerContextProps>({});\n","/**\n * The LayerHost is a div which is created in place\n * where you want to \"house\" a portaled content\n */\nimport { forwardRef } from 'preact/compat';\nimport { baseStyle } from './themes/LayerHostStyles.css';\n\nconst LayerHost = forwardRef<HTMLDivElement>((_props, ref) => {\n  return <div id=\"__root_layer_host\" role=\"presentation\" ref={ref} class={baseStyle} />;\n});\n\nLayerHost.displayName = 'Forwarded<LayerHost>';\n\nexport default LayerHost;\n"],"names":["DefaultEnvironment","user","locale","document","documentElement","getAttribute","direction","toLowerCase","forcedColors","window","matchMedia","matches","theme","Redwood","t","colorScheme","scale","currentBgColor","undefined","mode","density","EnvironmentContext","createContext","LayerContext","LayerHost","forwardRef","_props","ref","_jsx","id","role","class","baseStyle","displayName"],"mappings":"oKAwFa,MAAAA,EAA8C,CACzDC,KAAM,CACJC,OAAQC,SAASC,gBAAgBC,aAAa,SAAW,KACzDC,UACkE,QAAhEH,SAASC,gBAAgBC,aAAa,QAAQE,cAA0B,MAAQ,MAClFC,aAAcC,OAAOC,aAAa,4BAA4BC,QAAU,SAAW,QAErFC,MAAOC,EAAOC,EACdC,YAAa,QACbC,MAAO,KACPC,oBAAgBC,EAChBC,KAAM,aACNC,QAAS,YAGEC,EAAqBC,EAAaA,cAA0BtB,GC5F5DuB,EAAeD,EAAaA,cAAoB,CAAE,GCJzDE,EAAYC,EAAUA,YAAiB,CAACC,EAAQC,IAC7CC,aAAKC,GAAG,oBAAoBC,KAAK,eAAeH,IAAKA,EAAKI,MAAOC,EAAAA,cAG1ER,EAAUS,YAAc"}