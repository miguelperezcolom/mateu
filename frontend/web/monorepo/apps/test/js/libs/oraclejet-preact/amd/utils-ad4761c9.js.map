{"version":3,"file":"utils-ad4761c9.js","sources":["../../src/UNSAFE_Theme/utils.ts"],"sourcesContent":["import type { CSSVarFunction } from '@vanilla-extract/private';\nimport {\n  densityVars,\n  scaleVars\n} from '@oracle/oraclejet-internal-theme-contract/themeContract.css';\nimport { rgb as toRgbString } from '../utils/PRIVATE_colorUtils';\n// Importing this here so we can export it as extendThemeContractVars for readability\nimport { mergeDeepRight as extendThemeContractVars } from 'ramda';\n\n// Added: new types\ntype RGBType = `rgb(${CSSVarFunction})`;\ntype RGBAType = `rgba(${CSSVarFunction}, ${number})`;\ntype ColorMixType = `color-mix(in srgb, ${string} ${string}, ${string})`;\n\nconst rgb = (rgb: CSSVarFunction) => toRgbString(rgb) as RGBType;\n// TODO: create rgba function in PRIVATE_colorUtils\nconst rgba = (rgb: CSSVarFunction, alpha: number): RGBAType => `rgba(${rgb}, ${alpha})`;\nconst colorMix = (mixColor: string, mixPercent: string, baseColor: string): ColorMixType =>\n  `color-mix(in srgb, ${mixColor} ${mixPercent}, ${baseColor})`;\n\n// JET-59344 refactor of 'fallbackVar' from '@vanilla-extract/css'.\n// directly importing the function was causing vanilla-extract to be bundled into\n// the preact packages and causing issues with testing\nconst fallbackVar = (...values: [string, ...Array<string>]): CSSVarFunction => {\n  const finalValue = values.reverse().reduce((acc: string, value: string) => {\n    if (acc === '') {\n      acc = String(value);\n    } else {\n      if (typeof value !== 'string' || !/^var\\(--.*\\)$/.test(value)) {\n        throw new Error(`Invalid variable name: ${value}`);\n      }\n\n      acc = value.replace(/\\)$/, `, ${acc})`);\n    }\n    return acc;\n  }, '');\n\n  return finalValue as CSSVarFunction;\n};\n\n// For the default, where no scale var is specified, we use rem units, so that it will scale based on the root font-size.\nconst scaleFallback = () => fallbackVar(scaleVars.size.units, '0.25rem');\nconst xUnits = (unit: number) =>\n  unit === 1 ? scaleFallback() : `calc(${unit} * ${scaleFallback()})`;\n\n// For the default, where no density var is specified, we set it to 0px.\nconst densityFallback = () => fallbackVar(densityVars.density.units, '0px');\nconst densityUnits = (unit: number) =>\n  unit === 1 ? densityFallback() : `calc(${unit} * ${densityFallback()})`;\n\nconst min = (val: string, minVal: string): string => `min(${val},${minVal})`;\nconst max = (val: string, minVal: string): string => `max(${val},${minVal})`;\n\nexport {\n  colorMix,\n  rgb,\n  rgba,\n  xUnits,\n  densityUnits,\n  fallbackVar,\n  min,\n  max,\n  extendThemeContractVars\n};\n\nexport type { RGBType, RGBAType };\n"],"names":["fallbackVar","values","reverse","reduce","acc","value","String","test","Error","replace","scaleFallback","scaleVars","size","units","densityFallback","densityVars","density","mixColor","mixPercent","baseColor","unit","val","minVal","rgb","toRgbString","alpha"],"mappings":"wGAcM,MASAA,EAAc,IAAIC,IACHA,EAAOC,UAAUC,QAAO,CAACC,EAAaC,KACvD,GAAY,KAARD,EACFA,EAAME,OAAOD,OACR,CACL,GAAqB,iBAAVA,IAAuB,gBAAgBE,KAAKF,GACrD,MAAM,IAAIG,MAAM,0BAA0BH,KAG5CD,EAAMC,EAAMI,QAAQ,MAAO,KAAKL,KACjC,CACD,OAAOA,CAAG,GACT,IAMCM,EAAgB,IAAMV,EAAYW,EAAAA,UAAUC,KAAKC,MAAO,WAKxDC,EAAkB,IAAMd,EAAYe,EAAAA,YAAYC,QAAQH,MAAO,kBA7BpD,CAACI,EAAkBC,EAAoBC,IACtD,sBAAsBF,KAAYC,MAAeC,oBA6B7BC,GACX,IAATA,EAAaN,IAAoB,QAAQM,OAAUN,6BAGzC,CAACO,EAAaC,IAA2B,OAAOD,KAAOC,WADvD,CAACD,EAAaC,IAA2B,OAAOD,KAAOC,WApCtDC,GAAwBC,EAAWD,IAACA,UAEpC,CAACA,EAAqBE,IAA4B,QAAQF,MAAQE,cA0B/DL,GACL,IAATA,EAAaV,IAAkB,QAAQU,OAAUV"}