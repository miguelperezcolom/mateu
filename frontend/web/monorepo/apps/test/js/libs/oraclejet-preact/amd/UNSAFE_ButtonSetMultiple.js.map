{"version":3,"file":"UNSAFE_ButtonSetMultiple.js","sources":["../../src/UNSAFE_ButtonSetMultiple/ButtonSetMultiple.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { ButtonSetContext } from '../hooks/UNSAFE_useButtonSetContext';\nimport { ButtonSet } from '#UNSAFE_ButtonSet/ButtonSet';\n\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport {\n  LayoutWidths,\n  processGlobals,\n  type ButtonIntrinsicProps\n} from '../utils/UNSAFE_buttonUtils';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\nexport type ButtonSetMultipleProps = ButtonIntrinsicProps &\n  WidthProps &\n  TestIdProps & {\n    /**\n     * The children are an array of buttonSetItems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Value of the selected checkbox option.\n     */\n    value?: Array<string>;\n\n    /**\n     * Callback invoked each time the user changes selected option.\n     */\n    onCommit: (detail: ValueUpdateDetail<Array<string>>) => void;\n\n    /**\n     * Specifies that the buttonsetsingle element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Indicates in what states the buttonsetsingle has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttonsetsingles are a more prominent variation. Borderless\n     * buttonsetsingles are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttonsetsingles are salient, but lighter weight than\n     * solid buttonsetsingles. Outlined buttonsetsingles are useful for secondary actions.\",\n     */\n    variant?: 'outlined' | 'borderless';\n\n    /**\n     * The size indicates how large the buttonsetsingle is rendered.\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Display indicates whether only the label, icons, or all elements should be rendered by the buttonsetsingle.\n     */\n    display?: 'label' | 'all' | 'icons';\n\n    /**\n     * aria-label - label for accessibility\n     */\n    'aria-label'?: string;\n\n    /**\n     * aria-labelledby - label for accessibility\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * aria-controls - specifies what this buttonset control controls.\n     */\n    'aria-controls'?: string;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the buttonsetsingle.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * The layoutWidth specifies each buttonSetItem's width.\n     * Auto: The width of each Button is automatically determined to fit its contents. (flex auto)\n     * Equal:  The width of the Buttonset is equally distributed to all contained Buttons. (flex 1)\n     */\n    layoutWidth?: LayoutWidths;\n  };\n\n/**\n * ButtonSet allow users to select the state of one or more related options.\n */\nexport const ButtonSetMultiple = forwardRef(\n  (\n    {\n      children,\n      value: buttonSetItemValue,\n      onCommit,\n      display = 'all',\n      testId,\n      size = 'md',\n      isDisabled = false,\n      variant = 'outlined',\n      layoutWidth = 'auto',\n      'aria-label': accessibleLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: ButtonSetMultipleProps,\n    ref?: Ref<HTMLSpanElement>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n\n    return (\n      <ButtonSetContext.Provider\n        value={{\n          variant: variant,\n          size: size,\n          isDisabled: isDisabled,\n          layoutWidth: layoutWidth,\n          inputType: 'checkbox',\n          inputName: useId(),\n          display: display,\n          width: width,\n          buttonSetValue: buttonSetItemValue,\n          onCommit: onCommit\n        }}>\n        <ButtonSet\n          ref={ref}\n          width={width}\n          testId={testId}\n          aria-label={accessibleLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={ariaDescribedBy}\n          aria-controls={ariaControls}\n          {...globalEventProps}>\n          {children}\n        </ButtonSet>\n      </ButtonSetContext.Provider>\n    );\n  }\n);\n\nButtonSetMultiple.displayName = 'ButtonSetMultiple';\n"],"names":["ButtonSetMultiple","forwardRef","children","value","buttonSetItemValue","onCommit","display","testId","size","isDisabled","variant","layoutWidth","accessibleLabel","ariaLabelledBy","ariaControls","ariaDescribedBy","width","props","ref","globalEventProps","processGlobals","_jsx","ButtonSetContext","Provider","inputType","inputName","useId","buttonSetValue","ButtonSet","displayName"],"mappings":"ihCAmGa,MAAAA,EAAoBC,EAAAA,YAC/B,EAEIC,WACAC,MAAOC,EACPC,WACAC,UAAU,MACVC,SACAC,OAAO,KACPC,cAAa,EACbC,UAAU,WACVC,cAAc,OACd,aAAcC,EACd,kBAAmBC,EACnB,gBAAiBC,EACjB,mBAAoBC,EACpBC,WACGC,GAELC,KAEA,MAAMC,iBAAEA,GAAqBC,EAAcA,eAACH,GAE5C,OACEI,MAACC,EAAAA,iBAAiBC,SAAQ,CACxBpB,MAAO,CACLO,QAASA,EACTF,KAAMA,EACNC,WAAYA,EACZE,YAAaA,EACba,UAAW,WACXC,UAAWC,EAAAA,QACXpB,QAASA,EACTU,MAAOA,EACPW,eAAgBvB,EAChBC,SAAUA,GACXH,SACDmB,EAAAA,IAACO,EAASA,UACR,CAAAV,IAAKA,EACLF,MAAOA,EACPT,OAAQA,EACI,aAAAK,EACK,kBAAAC,EACC,mBAAAE,EACH,gBAAAD,KACXK,EACHjB,SAAAA,KAGL,IAINF,EAAkB6B,YAAc"}