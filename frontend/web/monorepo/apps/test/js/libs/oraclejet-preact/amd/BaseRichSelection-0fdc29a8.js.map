{"version":3,"file":"BaseRichSelection-0fdc29a8.js","sources":["../../src/PRIVATE_RichSelectionCommon/useRichSelectionGrid.ts","../../src/PRIVATE_RichSelectionCommon/RichLabelValueLayout.tsx","../../src/PRIVATE_RichSelectionCommon/RichSelectionField.tsx","../../src/PRIVATE_RichSelectionCommon/BaseRichSelection.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Ref } from 'preact';\nimport { useContainerBreakpoints } from '#hooks/UNSAFE_useContainerBreakpoints';\nimport {\n  useRichSelectionContext,\n  type RichSelectionContextValue\n} from '#PRIVATE_RichSelectionCommon/RichSelectionContext';\n\nconst sizes = ['xl', 'lg', 'md', 'sm', 'xs'] as const;\n\nconst columnMatrix = {\n  xl: { xl: 6, md: 4, sm: 4 },\n  lg: { xl: 4, md: 3, sm: 3 },\n  md: { xl: 3, md: 2, sm: 2 },\n  sm: { xl: 2, md: 2, sm: 2 },\n  xs: { xl: 1, md: 1, sm: 1 }\n} as const;\n\nconst breakpointSizes = {\n  xs: '0px',\n  sm: '600px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1440px'\n} as const;\n\nconst breakpointColumns = (\n  breakpoints: Record<(typeof sizes)[number], boolean>,\n  layout: RichSelectionContextValue['layout']\n) => {\n  // incrementally go from largest to smallest breakpoint\n  for (const size of sizes) {\n    if (breakpoints[size]) {\n      return columnMatrix[size][layout];\n    }\n  }\n  // defaults to xs columns if no breakpoints are true\n  return columnMatrix['xs'][layout];\n};\n/**\n * Hook to be used with rich selection items that are in a grid layout within RichSelectionField\n * @returns An object containing a ref to be placed on the container and a string\n * with the calculated grid template columns to be placed on the Grid component\n */\nconst useRichSelectionGrid = () => {\n  const context = useRichSelectionContext()!;\n  const { breakpointMatches, ref } = useContainerBreakpoints(breakpointSizes);\n\n  return {\n    ref: ref as Ref<HTMLDivElement>,\n    gridTemplateColumns:\n      context !== null ? `repeat(${breakpointColumns(breakpointMatches, context.layout)}, 1fr)` : ''\n  };\n};\n\nexport { useRichSelectionGrid };\n","import { ComponentChildren, JSX } from 'preact';\n\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { Size } from '#utils/UNSAFE_size';\nimport {\n  labelSlotStyles,\n  labelInnerStyles\n} from '../UNSAFE_LabelValueLayout/LabelValueLayoutStyles.css';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { RadioRedwoodTheme } from '#UNSAFE_RadioItem/themes/redwood/RadioTheme';\nimport { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from '#UNSAFE_TextField/themes/redwood/FormLayoutTheme';\nimport { CheckboxRedwoodTheme } from '#UNSAFE_Checkbox/themes/redwood/CheckboxTheme';\nimport { useRichSelectionContext } from '#PRIVATE_RichSelectionCommon/RichSelectionContext';\nimport { StyledLabelValueLayout } from '../UNSAFE_LabelValueLayout/StyledLabelValueLayout';\nimport { richLabelInnerStyles } from './RichLabelValueLayoutStyles.css';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { computeStartLabelWidth } from '#utils/UNSAFE_formControlUtils';\n\ntype Props = {\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Defines how the label is going to be positioned. For RichCheckboxSet or RichRadioSet the start, top and inside values are supported.\n   */\n  labelEdge?: 'start' | 'top' | 'inside';\n  /**\n   * Specifies if the parent component is a RichCheckboxSet or RichRadioSet\n   */\n  parentComponentVariant: 'richRadioSet' | 'richCheckboxSet';\n  /**\n   * Specifies if there is assistive text or links at the top of the component below the label\n   */\n  hasTopUserAssistance?: boolean;\n  /**\n   * Specifies if there is secondary text for the Rich Selection Items\n   */\n  hasSecondaryText?: boolean;\n  /**\n   * Specifies if there is media for the Rich Selection Items\n   */\n  hasMedia?: boolean;\n  /**\n   * Label content of the layout\n   */\n  label?: ComponentChildren;\n  /**\n   * Defines the label width for labelEdge 'start' ('top' is always 100%)\n   */\n  labelStartWidth?: Size;\n  /**\n   * Value content of the layout\n   */\n  children: ComponentChildren;\n};\n\n/**\n * A layout component for rendering a label and value pair, used in form components\n * such as RichCheckboxSet and RichRadioSet.\n */\nexport const RichLabelValueLayout = ({\n  columnSpan = 1,\n  label,\n  labelEdge,\n  children,\n  labelStartWidth = '33%',\n  parentComponentVariant,\n  hasTopUserAssistance = false,\n  hasSecondaryText = false,\n  hasMedia = false\n}: Props) => {\n  const { baseTheme: radioTheme } = useComponentTheme(RadioRedwoodTheme);\n  const { baseTheme: checkboxTheme } = useComponentTheme(CheckboxRedwoodTheme);\n  const { baseTheme: labelTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n  const richSelectionContext = useRichSelectionContext();\n  const isRichRadio = parentComponentVariant === 'richRadioSet';\n  const isRichCheckbox = parentComponentVariant === 'richCheckboxSet';\n  const isStart = labelEdge === 'start';\n  const isTop = labelEdge === 'top' || labelEdge === 'inside'; // 'inside' needs to pick up all 'top' styles.\n  const isInside = labelEdge === 'inside';\n\n  // JET-68190 - labelStartWidth needs to take columnSpan into account\n  const width = computeStartLabelWidth(labelStartWidth, columnSpan);\n  const valueWidth = `calc(100% - ${width})`;\n\n  const labelStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: width, width: width, maxWidth: width }\n    : {};\n\n  const valueStyles: JSX.CSSProperties = isStart\n    ? { flexBasis: valueWidth, width: valueWidth, maxWidth: valueWidth }\n    : {};\n\n  const { isFormLayout, isReadonly: isFormReadonly } = useFormContext();\n  const { isReadonly } = useFormFieldContext();\n  const isPureReadonly = (isFormLayout && isFormReadonly) || (!isFormLayout && isReadonly);\n\n  const labelStyleClasses = classNames([\n    formLayoutTheme,\n    labelSlotStyles.base,\n    isStart && labelSlotStyles.start,\n    isTop && labelSlotStyles.top,\n    isTop && hasTopUserAssistance && labelSlotStyles.topAndTopUA,\n    isTop && isPureReadonly && labelSlotStyles.topPureReadonly\n  ]);\n\n  const labelInnerClasses = classNames([\n    isRichRadio && radioTheme,\n    isRichCheckbox && checkboxTheme,\n    labelTheme,\n    formLayoutTheme,\n    labelInnerStyles.base,\n    isStart && labelInnerStyles.start,\n    isRichRadio && isInside && richLabelInnerStyles.insideRichRadioSet,\n    isRichCheckbox && isInside && richLabelInnerStyles.insideRichCheckboxSet,\n\n    // Rich Radioset\n    isRichRadio &&\n      isStart &&\n      !hasTopUserAssistance &&\n      richSelectionContext?.layout !== 'xl' &&\n      richLabelInnerStyles.startRichRadioSetWithoutTopUA,\n\n    isRichRadio &&\n      isStart &&\n      !hasTopUserAssistance &&\n      richSelectionContext?.layout === 'xl' &&\n      richLabelInnerStyles.startXLRichRadioSetWithoutTopUA,\n\n    isRichRadio &&\n      isStart &&\n      richSelectionContext?.layout === 'md' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      hasMedia &&\n      richLabelInnerStyles.startMDRichRadioSetWithoutTopUAOrSecondaryText,\n\n    isRichRadio &&\n      isStart &&\n      richSelectionContext?.layout === 'md' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      !hasMedia &&\n      richLabelInnerStyles.startMDRichRadioSetWithoutMediaTopUAOrSecondaryText,\n\n    isRichRadio &&\n      isStart &&\n      richSelectionContext?.layout === 'sm' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      hasMedia &&\n      richLabelInnerStyles.startSMRichRadioSetWithoutTopUAOrSecondaryText,\n\n    isRichRadio &&\n      isStart &&\n      richSelectionContext?.layout === 'sm' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      !hasMedia &&\n      richLabelInnerStyles.startSMRichRadioSetWithoutMediaTopUAOrSecondaryText,\n\n    // Rich Checkboxset\n    isRichCheckbox &&\n      isStart &&\n      !hasTopUserAssistance &&\n      richSelectionContext?.layout !== 'xl' &&\n      richLabelInnerStyles.startRichCheckboxSetWithoutTopUA,\n\n    isRichCheckbox &&\n      isStart &&\n      !hasTopUserAssistance &&\n      richSelectionContext?.layout === 'xl' &&\n      richLabelInnerStyles.startXLRichCheckboxSetWithoutTopUA,\n\n    isRichCheckbox &&\n      isStart &&\n      richSelectionContext?.layout === 'md' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      hasMedia &&\n      richLabelInnerStyles.startMDRichCheckboxSetWithoutTopUAOrSecondaryText,\n\n    isRichCheckbox &&\n      isStart &&\n      richSelectionContext?.layout === 'md' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      !hasMedia &&\n      richLabelInnerStyles.startMDRichCheckboxSetWithoutMediaTopUAOrSecondaryText,\n\n    isRichCheckbox &&\n      isStart &&\n      richSelectionContext?.layout === 'sm' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      hasMedia &&\n      richLabelInnerStyles.startSMRichCheckboxSetWithoutTopUAOrSecondaryText,\n\n    isRichCheckbox &&\n      isStart &&\n      richSelectionContext?.layout === 'sm' &&\n      !hasTopUserAssistance &&\n      !hasSecondaryText &&\n      !hasMedia &&\n      richLabelInnerStyles.startSMRichCheckboxSetWithoutMediaTopUAOrSecondaryText\n  ]);\n\n  return (\n    <StyledLabelValueLayout\n      // For readonly start aligned labels, we want the div that is the parent of the label to\n      // stretch to the height of the value content, including the end content (InputSensitiveText)\n      flexAlign={isReadonly && isStart ? 'stretch' : 'start'}\n      labelStyleClasses={labelStyleClasses}\n      labelStyles={labelStyles}\n      labelInnerClasses={labelInnerClasses}\n      label={label}\n      valueStyles={valueStyles}>\n      {children}\n    </StyledLabelValueLayout>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  toChildArray,\n  type ComponentChildren,\n  type ComponentProps,\n  type Ref,\n  type JSX\n} from 'preact';\nimport { forwardRef, useImperativeHandle, useMemo, useRef, useState } from 'preact/compat';\n\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '#hooks/PRIVATE_useCollectionFocusRing';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  type UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { topUAContainerStyles } from '#PRIVATE_CheckboxRadioField/CheckboxRadioFieldStyles.css';\nimport { CheckboxRadioContext } from '#PRIVATE_CheckboxRadioField/CheckboxRadioContext';\nimport { useCheckboxRadioField } from '#PRIVATE_CheckboxRadioField/useCheckboxRadioField';\nimport { layoutSpanStyles, type LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { Grid } from '#UNSAFE_Grid';\nimport { mergeRefs } from '#utils/PRIVATE_refUtils';\nimport { useRichSelectionGrid } from './useRichSelectionGrid';\nimport { View } from '#UNSAFE_View';\nimport type { Size } from '#utils/UNSAFE_size';\nimport { RichSelectionStartContext } from './RichSelectionStartContext';\nimport { RichLabelValueLayout } from './RichLabelValueLayout';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype AriaProps = Pick<UnpackSignals<JSX.AriaAttributes>, 'aria-describedby'>;\n\ntype Props = TestIdProps &\n  AriaProps & {\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n    /**\n     * baseId, used to generate other element IDs.\n     */\n    baseId: string;\n    /**\n     * <RichSelectionItems />\n     */\n    children: ComponentChildren;\n    /**\n     * Specifies how many columns to span in a FormLayout with direction === 'row'\n     */\n    columnSpan?: LayoutColumnSpan;\n    /**\n     * Value of the option.\n     */\n    hasValue?: boolean;\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n    /**\n     * Specifies if the set is disabled.\n     */\n    isDisabled?: boolean;\n    /**\n     * Specifies if the set is read-only.\n     */\n    isReadonly?: boolean;\n    /**\n     * Specifies whether the set requires a selection to be made.\n     */\n    isRequired?: boolean;\n    /**\n     * Label text for the set.\n     */\n    label: string;\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'inside' | 'start';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n    /**\n     * Specifies the parent field type.\n     */\n    parentComponentVariant: 'richRadioSet' | 'richCheckboxSet';\n    /**\n     * Specifies the ARIA role type.\n     */\n    role?: 'radiogroup' | 'group';\n    /**\n     * Specifies the density of the user assistance presentation.  It can be set to:\n     * <ul>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\n/**\n * Internal component use by rich selection components to manage focus and layout labels and messages\n */\nexport const RichSelectionField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      children,\n      columnSpan = 1,\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      labelStartWidth = '33%',\n      messages,\n      parentComponentVariant,\n      role,\n      testId,\n      userAssistanceDensity\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const testIdProps = useTestId(testId);\n    const UAtestId = `${testId}-inline-user-assistance`;\n    const UAtestIdTop = testId ? `${UAtestId}-top` : undefined;\n    const UAtestIdBottom = testId ? `${UAtestId}-bottom` : undefined;\n    const hasTopUserAssistance =\n      !isDisabled && !isReadonly && (!!assistiveText || !!helpSourceLink);\n    // we still render <InlineUserAssistance/> if density is 'efficient' or 'compact' to save space,\n    // even though we don't render user assistance for disabled fields\n    const hasBottomUserAssistance = !isDisabled;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const {\n      groupProps,\n      labelProps,\n      topUserAssistanceProps,\n      bottomUserAssistanceProps,\n      readonlyId\n    } = useCheckboxRadioField({\n      ariaDescribedBy,\n      baseId,\n      isRequired,\n      isReadonly,\n      isDisabled,\n      label,\n      labelEdge,\n      messages,\n      hasValue,\n      hasTopUserAssistance,\n      hasBottomUserAssistance,\n      parentComponentVariant: parentComponentVariant === 'richRadioSet' ? 'radioSet' : 'checkboxSet'\n    });\n\n    const [startData, setStartData] = useState({\n      hasMedia: false,\n      hasSecondaryText: false\n    });\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const readonlyLabel = translations.formControl_readOnly();\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    // the props from the hook are used for focus management on the radioset variant to allow for arrow navigation\n    // while checkboxset uses tabbing\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      groupRef,\n      parentComponentVariant === 'richRadioSet'\n        ? ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft']\n        : ['Tab']\n    );\n\n    const { gridTemplateColumns, ref: breakpointRef } = useRichSelectionGrid();\n\n    const memoizedChildren = useMemo(() => {\n      return toChildArray(children).map((child, index) => {\n        // we only need to wrap children with starting labels in context because they are the only ones\n        // that can conditionally apply min-height and set the startData\n        return labelEdge === 'start' && !hasTopUserAssistance ? (\n          // the first child is the one that will set the startData\n          <RichSelectionStartContext.Provider value={{ setStartData, isFirst: index === 0 }}>\n            {child}\n          </RichSelectionStartContext.Provider>\n        ) : (\n          child\n        );\n      });\n    }, [children, hasTopUserAssistance, labelEdge]);\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div\n            id={`${baseId}-top-ua-container`}\n            class={labelEdge === 'start' ? topUAContainerStyles.start : topUAContainerStyles.top}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps} testId={UAtestIdTop}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <View padding={['2x', 0]} width=\"100%\">\n          <Grid gridTemplateColumns={gridTemplateColumns} gap=\"6x\" role=\"list\">\n            <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n              {memoizedChildren}\n            </CheckboxRadioContext.Provider>\n          </Grid>\n        </View>\n        {hasBottomUserAssistance ? (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={userAssistanceDensity === 'reflow' ? 'reflow' : 'efficient'}\n            testId={UAtestIdBottom}\n          />\n        ) : userAssistanceDensity === 'reflow' ? undefined : (\n          /* save space for user assistance if density is 'efficient' or 'compact', even though we don't\n             render user assistance for disabled fields */\n          <InlineUserAssistance\n            id={bottomUserAssistanceProps?.id}\n            userAssistanceDensity=\"efficient\"\n            testId={UAtestIdBottom}\n          />\n        )}\n      </>\n    );\n    // The top level element needs the column span class on it.\n    const classes = layoutSpanStyles.layoutSpanColumn[columnSpan];\n\n    return (\n      <div\n        ref={mergeRefs(groupRef, breakpointRef)}\n        class={classes}\n        role={role}\n        {...groupProps}\n        {...focusRingProps}\n        {...testIdProps}>\n        {labelEdge === 'none' ? (\n          content\n        ) : (\n          <RichLabelValueLayout\n            columnSpan={columnSpan}\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            hasSecondaryText={startData.hasSecondaryText}\n            hasMedia={startData.hasMedia}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge}\n            labelStartWidth={labelStartWidth}>\n            {content}\n          </RichLabelValueLayout>\n        )}\n        {isReadonly && (\n          <HiddenAccessible id={readonlyId} isHidden={true}>\n            {readonlyLabel}\n          </HiddenAccessible>\n        )}\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport type { FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useFormFieldContextProps } from '#hooks/UNSAFE_useFormFieldContextProps';\nimport { RichSelectionField } from './RichSelectionField';\nimport { RichSelectionContext, type RichSelectionContextValue } from './RichSelectionContext';\nimport { useMessageSeverity } from '#hooks/PRIVATE_useMessageSeverity';\nimport { Size } from '#utils/UNSAFE_size';\n\ntype RichSelectionFieldProps = ComponentProps<typeof RichSelectionField>;\n\ntype Props = TestIdProps &\n  Pick<\n    RichSelectionFieldProps,\n    | 'aria-describedby'\n    | 'assistiveText'\n    | 'baseId'\n    | 'children'\n    | 'columnSpan'\n    | 'helpSourceLink'\n    | 'helpSourceText'\n    | 'isDisabled'\n    | 'isReadonly'\n    | 'isRequired'\n    | 'label'\n    | 'messages'\n    | 'userAssistanceDensity'\n  > & {\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'none' | 'top' | 'inside' | 'start';\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n    /**\n     * Specifies the layout of the cards and media\n     */\n    layout: RichSelectionContextValue['layout'];\n  } & (\n    | {\n        selection: 'single';\n        value?: string | number;\n      }\n    | {\n        selection: 'multiple';\n        value?: Set<string | number>;\n      }\n  );\n\n/**\n * Internal component used by Rich Selection components to provide context and wrap RichSelectionField\n */\nexport const BaseRichSelection = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      children,\n      columnSpan,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      layout,\n      messages,\n      selection,\n      testId,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const hasValue = value != null && (selection === 'single' || value.size > 0);\n\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const formFieldContext = useFormFieldContextProps({\n      hasValue,\n      isDisabled,\n      isReadonly\n    });\n\n    // rich selection only need to be aware of error severity\n    const messageSeverity = useMessageSeverity(messages) === 'error' ? 'error' : undefined;\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <RichSelectionContext.Provider\n          value={{\n            selection,\n            layout,\n            messageSeverity\n          }}>\n          <RichSelectionField\n            aria-describedby={ariaDescribedBy}\n            assistiveText={assistiveText}\n            baseId={baseId}\n            columnSpan={columnSpan}\n            hasValue={hasValue}\n            helpSourceLink={helpSourceLink}\n            helpSourceText={helpSourceText}\n            isDisabled={isDisabled}\n            isReadonly={isReadonly}\n            isRequired={isRequired}\n            label={label}\n            labelEdge={labelEdge}\n            labelStartWidth={labelStartWidth}\n            messages={messages}\n            parentComponentVariant={selection === 'single' ? 'richRadioSet' : 'richCheckboxSet'}\n            ref={ref}\n            role={selection === 'single' ? 'radiogroup' : 'group'}\n            testId={testId}\n            userAssistanceDensity={userAssistanceDensity}>\n            {children}\n          </RichSelectionField>\n        </RichSelectionContext.Provider>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["sizes","columnMatrix","xl","md","sm","lg","xs","breakpointSizes","breakpointColumns","breakpoints","layout","size","RichLabelValueLayout","columnSpan","label","labelEdge","children","labelStartWidth","parentComponentVariant","hasTopUserAssistance","hasSecondaryText","hasMedia","baseTheme","radioTheme","useComponentTheme","RadioRedwoodTheme","checkboxTheme","CheckboxRedwoodTheme","labelTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","richSelectionContext","useRichSelectionContext","isRichRadio","isRichCheckbox","isStart","isTop","isInside","width","computeStartLabelWidth","valueWidth","labelStyles","flexBasis","maxWidth","valueStyles","isFormLayout","isReadonly","isFormReadonly","useFormContext","useFormFieldContext","isPureReadonly","labelStyleClasses","classNames","labelSlotStyles","base","start","top","topAndTopUA","topPureReadonly","labelInnerClasses","labelInnerStyles","richLabelInnerStyles","_jsx","StyledLabelValueLayout","flexAlign","RichSelectionField","forwardRef","ariaDescribedBy","assistiveText","baseId","hasValue","helpSourceLink","helpSourceText","isDisabled","isRequired","messages","role","testId","userAssistanceDensity","ref","testIdProps","useTestId","UAtestId","UAtestIdTop","undefined","UAtestIdBottom","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","readonlyId","useCheckboxRadioField","startData","setStartData","useState","readonlyLabel","useTranslationBundle","formControl_readOnly","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","gridTemplateColumns","breakpointRef","context","breakpointMatches","useContainerBreakpoints","useRichSelectionGrid","memoizedChildren","useMemo","toChildArray","map","index","RichSelectionStartContext","Provider","value","isFirst","content","_jsxs","_Fragment","jsx","id","class","topUAContainerStyles","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","View","padding","Grid","gap","CheckboxRadioContext","InlineUserAssistance","requiredAlignment","classes","layoutSpanStyles","layoutSpanColumn","mergeRefs","Label","variant","HiddenAccessible","isHidden","BaseRichSelection","propIsDisabled","propIsReadonly","propLabelEdge","propLabelStartWidth","selection","propUserAssistanceDensity","isFormDisabled","formLabelEdge","formLabelStartWidth","formUserAssistanceDensity","formFieldContext","useFormFieldContextProps","messageSeverity","useMessageSeverity","FormFieldContext","RichSelectionContext"],"mappings":"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"}