{"version":3,"file":"useColorSchemeUtils.js","sources":["../../../../../../../node_modules/ramda/es/internal/_reduce.js","../../../../../../../node_modules/ramda/es/internal/_identity.js","../../../../../../../node_modules/ramda/es/identity.js","../../../../../../../node_modules/ramda/es/pipeWith.js","../../../../../../../node_modules/ramda/es/isNotNil.js","../../../../../src/Common/themes/__dev__/useColorSchemeUtils.ts"],"sourcesContent":["import _arrayReduce from \"./_arrayReduce.js\";\nimport _createReduce from \"./_createReduce.js\";\n\nfunction _iterableReduce(reducer, acc, iter) {\n  var step = iter.next();\n\n  while (!step.done) {\n    acc = reducer(acc, step.value);\n    step = iter.next();\n  }\n\n  return acc;\n}\n\nfunction _methodReduce(reducer, acc, obj, methodName) {\n  return obj[methodName](reducer, acc);\n}\n\nvar _reduce =\n/*#__PURE__*/\n_createReduce(_arrayReduce, _methodReduce, _iterableReduce);\n\nexport default _reduce;","export default function _identity(x) {\n  return x;\n}","import _curry1 from \"./internal/_curry1.js\";\nimport _identity from \"./internal/_identity.js\";\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      const obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\n\nvar identity =\n/*#__PURE__*/\n_curry1(_identity);\n\nexport default identity;","import _arity from \"./internal/_arity.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport head from \"./head.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport tail from \"./tail.js\";\nimport identity from \"./identity.js\";\n/**\n * Performs left-to-right function composition using transforming function. The first function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\n * first argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to pipe\n * @return {Function}\n * @see R.composeWith, R.pipe\n * @example\n *\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))\n */\n\nvar pipeWith =\n/*#__PURE__*/\n_curry2(function pipeWith(xf, list) {\n  if (list.length <= 0) {\n    return identity;\n  }\n\n  var headList = head(list);\n  var tailList = tail(list);\n  return _arity(headList.length, function () {\n    return _reduce(function (result, f) {\n      return xf.call(this, f, result);\n    }, headList.apply(this, arguments), tailList);\n  });\n});\n\nexport default pipeWith;","import isNil from \"./isNil.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n/**\n * Checks if the input value is not `null` and not `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is not `undefined` or not `null`, otherwise `false`.\n * @example\n *\n *      R.isNotNil(null); //=> false\n *      R.isNotNil(undefined); //=> false\n *      R.isNotNil(0); //=> true\n *      R.isNotNil([]); //=> true\n */\n\nvar isNotNil =\n/*#__PURE__*/\n_curry1(function isNotNil(x) {\n  return !isNil(x);\n});\n\nexport default isNotNil;","import { curry, curryN, isNotNil, pipe, pipeWith } from 'ramda';\nimport { getContrast, getLuminance, parseToRGBA, rgbaToHex } from '#utils/PRIVATE_colorUtils';\nimport { usePropertyValue } from '#hooks/PRIVATE_usePropertyValue';\nimport { useCallback } from 'react';\n\ntype ColorEncoding = (typeof colorEncodings)[number];\nconst colorEncodings = ['RGB', 'Hex'] as const;\n\nconst useColorUtils = ({\n  backgroundColor,\n  colorEncoding\n}: {\n  backgroundColor: string;\n  colorEncoding: ColorEncoding;\n}) => {\n  const [setRef, getPropertyValue] = usePropertyValue();\n  const contrastRatio = useCallback(\n    (token: string) =>\n      getContrastRatio(\n        tokenToLuminance(getPropertyValue, backgroundColor),\n        tokenToLuminance(getPropertyValue, token)\n      ),\n    [backgroundColor, getPropertyValue]\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const color = useCallback(\n    pipe(\n      tokenFromVar,\n      getPropertyValue,\n      colorEncoding === 'RGB' ? toRGBString : pipeWhileNotNil([parseToRGBA, rgbaToHex])\n    ),\n    [colorEncoding, getPropertyValue]\n  );\n\n  return {\n    setRef,\n    getColor: color,\n    getContrastRatio: contrastRatio\n  };\n};\n\n// Removes CSS var function from color.\nconst tokenFromVar = (str: string) => str.replace(/var\\(|\\)/g, '');\n\n// Adds rgb function to color.\nconst toRGBString = (str: string) =>\n  /rgb(a?)\\(/.test(str) ? str : str.split(',').length === 4 ? `rgba(${str})` : `rgb(${str})`;\n\nconst tokenToLuminance = curry((propertyValue: (s: string) => string, colorString: string) =>\n  pipe(tokenFromVar, propertyValue, getLuminance)(colorString)\n);\nconst getContrastRatio = curryN(2, (l1?: number, l2?: number) =>\n  isNotNil(l1) && isNotNil(l2) ? getContrast(l1, l2).toFixed(2) : 'NaN'\n);\nconst pipeWhileNotNil = pipeWith((f, res) => (isNotNil(res) ? f(res) : res));\n\nexport type { ColorEncoding };\nexport { colorEncodings, tokenFromVar, useColorUtils };\n"],"names":["_iterableReduce","reducer","acc","iter","step","next","done","value","_methodReduce","obj","methodName","_reduce","_createReduce","_arrayReduce","_identity","x","identity","_curry1","pipeWith","_curry2","xf","list","length","headList","head","tailList","tail","_arity","result","f","call","this","apply","arguments","pipeWith$1","isNotNil$1","isNil","tokenFromVar","str","replace","toRGBString","test","split","tokenToLuminance","curry","propertyValue","colorString","pipe","getLuminance","getContrastRatio","curryN","l1","l2","isNotNil","getContrast","toFixed","pipeWhileNotNil","res","backgroundColor","colorEncoding","setRef","getPropertyValue","usePropertyValue","contrastRatio","useCallback","token","getColor","parseToRGBA","rgbaToHex"],"mappings":"iaAGA,SAASA,EAAgBC,EAASC,EAAKC,GAGrC,IAFA,IAAIC,EAAOD,EAAKE,QAERD,EAAKE,MACXJ,EAAMD,EAAQC,EAAKE,EAAKG,OACxBH,EAAOD,EAAKE,OAGd,OAAOH,CACT,CAEA,SAASM,EAAcP,EAASC,EAAKO,EAAKC,GACxC,OAAOD,EAAIC,GAAYT,EAASC,EAClC,CAEA,IAAIS,EAEJC,EAAAA,cAAcC,EAAYA,aAAEL,EAAeR,GCpB5B,SAASc,EAAUC,GAChC,OAAOA,CACT,CCoBA,IAAIC,EAEGC,EAAAA,QAACH,GCOJI,EAEJC,EAAAA,SAAQ,SAAkBC,EAAIC,GAC5B,GAAIA,EAAKC,QAAU,EACjB,OAAON,EAGT,IAAIO,EAAWC,OAAKH,GAChBI,EAAWC,OAAKL,GACpB,OAAOM,EAAMA,OAACJ,EAASD,QAAQ,WAC7B,OAAOX,GAAQ,SAAUiB,EAAQC,GAC/B,OAAOT,EAAGU,KAAKC,KAAMF,EAAGD,EAC9B,GAAOL,EAASS,MAAMD,KAAME,WAAYR,EACxC,GACA,IAEAS,EAAehB,ECrBfiB,EAJAlB,EAAAA,SAAQ,SAAkBF,GACxB,OAAQqB,EAAAA,MAAMrB,EAChB,IClBA,MAoCMsB,EAAgBC,GAAgBA,EAAIC,QAAQ,YAAa,IAGzDC,EAAeF,GACnB,YAAYG,KAAKH,GAAOA,EAAgC,IAA1BA,EAAII,MAAM,KAAKpB,OAAe,QAAQgB,KAAS,OAAOA,KAEhFK,EAAmBC,EAAKA,OAAC,CAACC,EAAsCC,IACpEC,EAAAA,KAAKV,EAAcQ,EAAeG,EAAAA,aAAlCD,CAAgDD,KAE5CG,EAAmBC,EAAMA,OAAC,GAAG,CAACC,EAAaC,IAC/CC,EAASF,IAAOE,EAASD,GAAME,EAAAA,YAAYH,EAAIC,GAAIG,QAAQ,GAAK,QAE5DC,EAAkBtC,GAAS,CAACW,EAAG4B,IAASJ,EAASI,GAAO5B,EAAE4B,GAAOA,qBAhDhD,CAAC,MAAO,wCAET,EACpBC,kBACAC,oBAKA,MAAOC,EAAQC,GAAoBC,EAAgBA,mBAC7CC,EAAgBC,EAAAA,aACnBC,GACChB,EACEN,EAAiBkB,EAAkBH,GACnCf,EAAiBkB,EAAkBI,KAEvC,CAACP,EAAiBG,IAYpB,MAAO,CACLD,SACAM,SAXYF,EAAAA,YACZjB,EAAIA,KACFV,EACAwB,EACkB,QAAlBF,EAA0BnB,EAAcgB,EAAgB,CAACW,EAAWA,YAAEC,eAExE,CAACT,EAAeE,IAMhBZ,iBAAkBc,EACnB"}