{"version":3,"file":"useFloating-0df4b3d3.js","sources":["../../../../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../../../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../../../../node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs","../../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","../../src/hooks/PRIVATE_useFloating/useFloating.ts"],"sourcesContent":["const sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, platform };\n","/**\n * @license\n * MIT License\n *\n * Copyright (c) 2021 Floating UI contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { useLayoutEffect, useCallback, useState, useMemo, useRef, MutableRef } from 'preact/hooks';\nimport { useUser } from '../UNSAFE_useUser';\nimport { normalizePosition, reverseNormalizePosition } from '../../utils/PRIVATE_floatingUtils';\nimport {\n  computePosition,\n  offset as floatingOffset,\n  MiddlewareData,\n  Middleware,\n  Placement as FloatingPlacement,\n  MiddlewareArguments,\n  ComputePositionConfig\n} from '@floating-ui/dom';\nimport {\n  Offset,\n  Placement,\n  Rect,\n  PositionData,\n  RtlSide\n} from '../../UNSAFE_Floating/Floating.types';\n\nexport {\n  autoPlacement,\n  flip,\n  hide,\n  shift,\n  limitShift,\n  size,\n  inline,\n  detectOverflow\n} from '@floating-ui/dom';\n\ntype CornerPlacement = {\n  placement: Placement;\n  offset?: { mainAxis?: number; crossAxis?: number };\n};\n\ntype Side = 'top' | 'right' | 'bottom' | 'left';\ntype Strategy = 'absolute' | 'fixed';\ntype SideObject = {\n  [key in Side]: number;\n};\ntype FloatingOffsetValue =\n  | number\n  | {\n      /**\n       * The axis that runs along the side of the floating element.\n       * @default 0\n       */\n      mainAxis?: number;\n      /**\n       * The axis that runs along the alignment of the floating element.\n       * @default 0\n       */\n      crossAxis?: number;\n      /**\n       * When set to a number, overrides the `crossAxis` value for aligned\n       * (non-centered/base) placements and works logically. A positive number\n       * will move the floating element in the direction of the opposite edge\n       * to the one that is aligned, while a negative number the reverse.\n       * @default null\n       */\n      alignmentAxis?: number | null;\n    };\n\nexport const offset = (value?: Offset): Middleware => {\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments: MiddlewareArguments) {\n      const newFn = (args: MiddlewareArguments) => {\n        // flip middleware could be called several times, until the right space is found.\n        // Every time flip is called and overflow is detected, a possible next placement\n        // is chosen and the array of middleware (including the offset middleware) is called again\n        // with the chosen next placement.\n        // Here we detect that flip is needed and we should change the offset sign if needed.\n        const overflowsData =\n          args.middlewareData.flip?.overflows != undefined\n            ? args.middlewareData.flip?.overflows[0]\n            : null;\n        let offset;\n        if (overflowsData != null && value != null && typeof value === 'object') {\n          offset = flippedOffset(args.placement, args.initialPlacement, value);\n        }\n        if (!value) {\n          return 0;\n        }\n        const rawValue: FloatingOffsetValue = offset ?? value;\n        return rawValue;\n      };\n\n      return floatingOffset(newFn).fn(middlewareArguments);\n    }\n  };\n};\n\nconst flippedOffset = (\n  placement: FloatingPlacement,\n  initialPlacement: FloatingPlacement,\n  offset: Offset\n): Offset => {\n  const initialSide = initialPlacement.split('-')[0] as RtlSide;\n  const side = placement.split('-')[0] as RtlSide;\n  const initialAlignment = initialPlacement.split('-')[1];\n  const alignment = placement.split('-')[1];\n  // if flipped around crossAxis\n  if (\n    ((initialSide === 'right' || initialSide === 'left') &&\n      initialSide === side &&\n      initialAlignment !== alignment) ||\n    ((initialSide === 'top' || initialSide === 'bottom') &&\n      initialSide === side &&\n      initialAlignment !== alignment)\n  ) {\n    return {\n      mainAxis: offset && typeof offset === 'object' && offset.mainAxis ? offset.mainAxis : 0,\n      crossAxis: offset && typeof offset === 'object' && offset.crossAxis ? -offset.crossAxis : 0\n    };\n  } else {\n    return offset;\n  }\n};\n\ntype ClientRectObject = Rect & SideObject;\nexport type VirtualElement = {\n  getBoundingClientRect(): ClientRectObject;\n  contextElement?: any;\n};\n\ntype ReferenceType = Element | VirtualElement;\ntype UseFloatingProps<RT extends ReferenceType = ReferenceType> = Omit<\n  Partial<ComputePositionConfig>,\n  'platform' | 'placement'\n> & {\n  placement: Placement;\n  whileElementsMounted?: (\n    reference: RT,\n    floating: HTMLElement,\n    update: () => void\n  ) => void | (() => void);\n  onPosition?: (data: PositionData) => void;\n};\n\ntype UseFloatingData = {\n  placement: FloatingPlacement;\n  strategy: Strategy;\n  middlewareData: MiddlewareData;\n  x: number | null;\n  y: number | null;\n};\n\ntype UseFloatingReturn<RT extends ReferenceType = ReferenceType> = UseFloatingData & {\n  update: () => void;\n  reference: (node: RT | null) => void;\n  floating: (node: HTMLElement | null) => void;\n  refs: {\n    reference: MutableRef<RT | null>;\n    floating: MutableRef<HTMLElement | null>;\n  };\n};\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a: any, b: any) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n\n  let length, i, keys;\n\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0; ) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n\n    for (i = length; i-- !== 0; ) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n\nfunction useLatestRef<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst reverseLogicalSide = (placement: FloatingPlacement, direction: 'rtl' | 'ltr'): Placement => {\n  const side = placement.split('-')[0] as RtlSide;\n  if (side === 'top' || side === 'bottom') {\n    return placement as Placement;\n  }\n  const alignment = placement.split('-')[1];\n  const reversedPhysicalSide = reverseNormalizePosition(side, direction);\n  const alignmentSideHash = {\n    start: 'top',\n    end: 'bottom'\n  };\n  const alignmentMappedSide =\n    alignment != null\n      ? alignment.replace(/start|end/g, (matched) => (alignmentSideHash as any)[matched])\n      : null;\n\n  const placements: Array<Placement> = [\n    'top',\n    'top-start',\n    'top-end',\n    'end',\n    'end-top',\n    'end-bottom',\n    'bottom-start',\n    'bottom-end',\n    'bottom',\n    'start',\n    'start-top',\n    'start-bottom'\n  ];\n\n  const newPlacement: Placement = placements.filter(\n    (placement) =>\n      (alignmentMappedSide && placement === `${reversedPhysicalSide}-${alignmentMappedSide}`) ||\n      (!alignmentMappedSide && placement === `${reversedPhysicalSide}`)\n  )[0];\n  if (!newPlacement) {\n    return 'bottom';\n  }\n\n  return newPlacement;\n};\n\nexport const logicalSide = (placement: Placement, direction: 'rtl' | 'ltr'): FloatingPlacement => {\n  const side = placement.split('-')[0] as RtlSide;\n  const alignment = placement.split('-')[1];\n  const physicalSide = normalizePosition(side, direction);\n\n  let alignmentSideHash: any;\n  let alignmentMappedSide: string;\n  if (alignment) {\n    alignmentSideHash = {\n      top: 'start',\n      bottom: 'end'\n    };\n\n    alignmentMappedSide = alignment.replace(\n      /top|bottom/g,\n      (matched) => (alignmentSideHash as any)[matched]\n    );\n  }\n\n  const placements: Array<FloatingPlacement> = [\n    'top',\n    'right',\n    'bottom',\n    'left',\n    'top-start',\n    'right-start',\n    'bottom-start',\n    'left-start',\n    'top-end',\n    'right-end',\n    'bottom-end',\n    'left-end'\n  ];\n  const newPlacement: FloatingPlacement = placements.filter(\n    (placement) =>\n      (alignmentMappedSide && placement === `${physicalSide}-${alignmentMappedSide}`) ||\n      (!alignmentMappedSide && placement === `${physicalSide}`)\n  )[0];\n  if (!newPlacement) {\n    return 'bottom';\n  }\n\n  return newPlacement;\n};\n\nconst cornerPlacement = (placement: Placement, floating: HTMLElement): CornerPlacement => {\n  const side = placement.split('-')[0];\n  const alignment = placement.split('-')[1];\n  const corner = placement.split('-')[2];\n  if (corner == null) {\n    return { placement: placement, offset: undefined };\n  }\n\n  const placements: Array<Placement> = [\n    'top-start',\n    'start-top',\n    'bottom-start',\n    'start-bottom',\n    'top-end',\n    'end-top',\n    'bottom-end',\n    'end-bottom'\n  ];\n  const newPlacement: Placement = placements.filter(\n    (placement) => placement === `${side}-${alignment}`\n  )[0];\n  if (alignment == 'start') {\n    return { placement: newPlacement, offset: { crossAxis: -floating.offsetWidth } };\n  }\n  if (alignment == 'end') {\n    return { placement: newPlacement, offset: { crossAxis: floating.offsetWidth } };\n  }\n  if (alignment == 'top') {\n    return { placement: newPlacement, offset: { crossAxis: -floating.offsetHeight } };\n  }\n  // the last option should always be alignment == 'bottom'\n  return { placement: newPlacement, offset: { crossAxis: floating.offsetHeight } };\n};\n\nconst isOfPlacementType = (value: string): boolean => {\n  const placementTypeValues = [\n    'top',\n    'top-start',\n    'top-end',\n    'top-start-corner',\n    'top-end-corner',\n    'start',\n    'start-top',\n    'start-bottom',\n    'start-top-corner',\n    'start-bottom-corner',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'bottom-start-corner',\n    'bottom-end-corner',\n    'end',\n    'end-top',\n    'end-bottom',\n    'end-top-corner',\n    'end-bottom-corner'\n  ];\n\n  return placementTypeValues.includes(value);\n};\n\nexport function useFloating<RT extends ReferenceType = ReferenceType>({\n  middleware,\n  placement,\n  strategy,\n  onPosition,\n  whileElementsMounted\n}: UseFloatingProps): UseFloatingReturn<RT> {\n  //this should not happen, checking to just to be safe\n  if (!isOfPlacementType(placement)) {\n    placement = 'bottom';\n  }\n  const referenceRef = useRef<RT | null>(null);\n  const floatingRef = useRef<HTMLElement | null>(null);\n\n  const [reference, _setReference] = useState<RT | null>(null);\n  const [floating, _setFloating] = useState<HTMLElement | null>(null);\n\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const isMountedRef = useRef(false);\n  const { direction } = useUser();\n\n  const [data, _setData] = useState<UseFloatingData>({\n    // Setting these to `null` will allow the consumer to determine if\n    // `computePosition()` has run yet\n    x: null,\n    y: null,\n    strategy: strategy ?? 'absolute',\n    placement: 'bottom',\n    middlewareData: {}\n  });\n  const dataRef = useRef(data);\n  const setData = (data: UseFloatingData) => {\n    dataRef.current = data;\n    _setData(data);\n  };\n\n  const [latestMiddleware, setLatestMiddleware] = useState(middleware);\n\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n\n  const update = useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n\n    // map *-corner placement to normalized placement and offset\n    const floatingCornerPlacement: CornerPlacement = cornerPlacement(\n      placement,\n      floatingRef.current\n    );\n    // map start/end placements to right/left depending on the reading direction\n    const floatingUiPlacement: FloatingPlacement = logicalSide(\n      floatingCornerPlacement.placement,\n      direction\n    );\n\n    // we need a summarized offset middleware\n    const newMiddlewareArray: Array<Middleware | null | undefined | false> | undefined =\n      latestMiddleware?.map((m: Middleware | null | undefined | false) => {\n        if (m && m?.name === 'offset') {\n          if (typeof m.options === 'function') {\n            // ignore function if there are *-corner placements\n            return floatingCornerPlacement.offset == null\n              ? m\n              : offset(floatingCornerPlacement.offset);\n          }\n\n          const currentOffset =\n            typeof m.options === 'number' ? { mainAxis: m.options, crossAxis: 0 } : m.options;\n          return offset({\n            mainAxis: (currentOffset && currentOffset.mainAxis) ?? 0,\n            crossAxis:\n              ((floatingCornerPlacement.offset && floatingCornerPlacement.offset.crossAxis) ?? 0) +\n              ((currentOffset && currentOffset.crossAxis) ?? 0)\n          });\n        } else {\n          return m;\n        }\n      });\n    computePosition(referenceRef.current, floatingRef.current, {\n      middleware: newMiddlewareArray,\n      placement: floatingUiPlacement,\n      strategy\n    }).then((newData) => {\n      if (isMountedRef.current) {\n        if (\n          newData.placement !== dataRef.current.placement ||\n          newData.x !== dataRef.current.x ||\n          newData.y !== dataRef.current.y ||\n          newData.middlewareData.arrow?.x != dataRef.current.middlewareData.arrow?.x ||\n          newData.middlewareData.arrow?.y != dataRef.current.middlewareData.arrow?.y ||\n          newData.middlewareData.arrow?.centerOffset !=\n            dataRef.current.middlewareData.arrow?.centerOffset\n        ) {\n          const newMiddleware = newMiddlewareArray?.find(\n            (m) => m && m?.name === 'offset'\n          ) as Middleware;\n          const origOffset = newMiddleware?.options;\n          const reversedNewPlacement = reverseLogicalSide(newData.placement, direction);\n          const offset = newData.middlewareData.offset;\n          const mappedData = {\n            // we need to map right/left, returned from the computePosition, to start/end\n            placement: reversedNewPlacement,\n            origPlacement: placement,\n            x: newData.x,\n            y: newData.y,\n            arrow: newData.middlewareData.arrow,\n            offset: offset,\n            origOffset: origOffset\n          };\n          onPosition?.(mappedData);\n        }\n        setData(newData);\n      }\n    });\n  }, [latestMiddleware, placement, direction, strategy, onPosition]);\n\n  useLayoutEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (reference && floating) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(reference, floating, update);\n      } else {\n        update();\n      }\n    }\n  }, [reference, floating, update, whileElementsMountedRef]);\n\n  const setReference = useCallback((node: RT | null) => {\n    if (referenceRef.current !== node) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n\n  const setFloating = useCallback((node: HTMLElement | null) => {\n    if (floatingRef.current !== node) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n\n  const refs = useMemo(() => ({ reference: referenceRef, floating: floatingRef }), []);\n\n  return useMemo(\n    () => ({\n      ...data,\n      update,\n      refs,\n      reference: setReference,\n      floating: setFloating\n    }),\n    [data, update, refs, setReference, setFloating]\n  );\n}\n"],"names":["min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getOppositeAlignmentPlacement","replace","alignment","getOppositePlacement","side","getPaddingObject","padding","expandPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offset","name","fn","diffCoords","isRTL","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","data","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","window","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflow","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isContainingBlock","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","filter","some","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","list","_node$ownerDocument2","scrollableAncestor","isBody","win","concat","visualViewport","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","getViewportRect","scroll","scrollWidth","scrollHeight","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","getTrueOffsetParent","polyfill","currentNode","getContainingBlock","clippingAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","set","getClippingElementAncestors","this","_c","firstClippingAncestor","clippingRect","reduce","accRect","getElementRects","getOffsetParentFn","getDimensionsFn","getDimensions","getClientRects","Array","from","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","middlewareData","resetCount","i","length","nextX","nextY","reset","initialPlacement","computePosition$1","middlewareArguments","floatingOffset","args","undefined","flip","overflows","flippedOffset","initialSide","initialAlignment","deepEqual","a","b","toString","keys","isArray","Object","prototype","hasOwnProperty","call","key","$$typeof","logicalSide","physicalSide","normalizePosition","alignmentSideHash","alignmentMappedSide","matched","newPlacement","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","alignmentOffset","centerOffset","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","e","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","prevRefRect","frameLoop","nextRefRect","removeEventListener","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","isBasePlacement","oppositePlacement","getExpandedPlacements","push","isStart","lr","rl","tb","bt","getSideList","map","getOppositeAxisPlacements","placements","overflowsData","sides","mainAlignmentSide","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","_overflowsData$map$so","acc","mainAxisCoord","crossAxisCoord","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","limiter","maxSide","limitedCoords","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions","onPosition","whileElementsMounted","referenceRef","useRef","floatingRef","_setReference","useState","_setFloating","whileElementsMountedRef","ref","useLayoutEffect","current","useLatestRef","isMountedRef","useUser","_setData","dataRef","latestMiddleware","setLatestMiddleware","useCallback","floatingCornerPlacement","cornerPlacement","floatingUiPlacement","newMiddlewareArray","m","currentOffset","then","newData","arrow","newMiddleware","find","origOffset","reversedNewPlacement","reversedPhysicalSide","reverseNormalizePosition","reverseLogicalSide","mappedData","origPlacement","setData","setReference","setFloating","refs","useMemo"],"mappings":"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"}