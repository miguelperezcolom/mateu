{"version":3,"file":"usePressClick-b7b38da2.js","sources":["../../src/hooks/UNSAFE_usePressClick/usePressClick.ts"],"sourcesContent":["import { useCallback } from 'preact/hooks';\n\ntype PressOptions = {\n  isDisabled?: boolean;\n};\n\nconst DefaultSettings = {\n  isDisabled: false\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n *\n * @param onPressHandler function\n * @param isDisabled boolean\n * @returns\n */\n\nexport function usePressClick(\n  onPressHandler: (event: Event) => void,\n  settings: PressOptions = DefaultSettings\n): { pressProps: Record<string, any> } {\n  // Not adding any detection of repeat keyboard triggering, such as onKeyDown setting\n  // state to gate dispatch, to try to keep changes as basic as possible for now.\n  const onClick = useCallback(\n    (event: Event) => {\n      // See note above about why propagation is stopped: to prevent nested component bubbling clicks issue\n      event.stopPropagation();\n      // in legacy, we would check event.detail <= 1 to fire only once on multi-clicks,\n      // however, for now keeping this simple.\n      onPressHandler(event);\n    },\n    [onPressHandler]\n  );\n\n  const pressProps = settings?.isDisabled ? {} : { onClick };\n\n  return {\n    pressProps\n  };\n}\n"],"names":["DefaultSettings","isDisabled","onPressHandler","settings","onClick","useCallback","event","stopPropagation","pressProps"],"mappings":"8DAMA,MAAMA,EAAkB,CACtBC,YAAY,4BAYZC,EACAC,EAAyBH,GAIzB,MAAMI,EAAUC,eACbC,IAECA,EAAMC,kBAGNL,EAAeI,EAAM,GAEvB,CAACJ,IAKH,MAAO,CACLM,WAHiBL,GAAUF,WAAa,CAAA,EAAK,CAAEG,WAKnD"}