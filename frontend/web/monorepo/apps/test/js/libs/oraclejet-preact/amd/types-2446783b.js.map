{"version":3,"file":"types-2446783b.js","sources":["../../src/UNSAFE_IntlFormatParse/types.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2019 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type FormatterFunc<V> = (value: V) => string;\nexport type ParserFunc<V> = (value: string) => V;\nexport type FormatObj<V> = { format: FormatterFunc<V> };\nexport type ParseObj<V> = { parse: ParserFunc<V> };\n\n// Errors thrown during format or parse include an 'options' object in this shape.\nexport type FormatParseErrorOptions = {\n  cause?: {\n    code: string;\n    parameterMap?: Record<string, string | number>;\n  };\n};\n// Type of error thrown during format or parse.\nexport class FormatParseError extends Error {\n  readonly cause: FormatParseErrorOptions['cause'];\n  constructor(message?: string, options?: FormatParseErrorOptions) {\n    super(message); // 'Error' breaks prototype chain here\n    Object.setPrototypeOf(this, FormatParseError.prototype);\n    this.cause = options?.cause;\n  }\n}\n"],"names":["FormatParseError","Error","constructor","message","options","super","Object","setPrototypeOf","this","prototype","cause"],"mappings":"6CAqBM,MAAOA,UAAyBC,MAEpC,WAAAC,CAAYC,EAAkBC,GAC5BC,MAAMF,GACNG,OAAOC,eAAeC,KAAMR,EAAiBS,WAC7CD,KAAKE,MAAQN,GAASM,KACvB"}