{"version":3,"file":"DatePickerHeader-0572351a.js","sources":["../../src/UNSAFE_RedwoodIcons/CaretUp/CaretUp.tsx","../../src/UNSAFE_RedwoodIcons/RadioButtonSmallOn/RadioButtonSmallOn.tsx","../../src/PRIVATE_DatePickerHeader/DatePickerHeader.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates. All rights reserved.\n * https://www.oracle.com/contracts/docs/cloud_csa_online_v062223_us_eng.pdf?download=false&er=221886\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox' | 'children'>;\nconst SvgCaretUp = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path d=\"M6 15s6.043-6 6-6c-.043 0 6 6 6 6H6z\" fill=\"currentcolor\" />\n    </g>\n  </Icon>\n);\nexport { SvgCaretUp as CaretUp };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates. All rights reserved.\n * https://www.oracle.com/contracts/docs/cloud_csa_online_v062223_us_eng.pdf?download=false&er=221886\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox' | 'children'>;\nconst SvgRadioButtonSmallOn = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path d=\"M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" fill=\"currentcolor\" />\n      <path\n        d=\"M18 12a6 6 0 1 1-12 0 6 6 0 0 1 12 0zm-1.5 0a4.5 4.5 0 1 0-9 0 4.5 4.5 0 0 0 9 0z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgRadioButtonSmallOn as RadioButtonSmallOn };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Flex } from '#UNSAFE_Flex';\nimport { IconButton } from '#UNSAFE_IconButton';\nimport { CaretDown } from '#UNSAFE_RedwoodIcons/CaretDown';\nimport { CaretUp } from '#UNSAFE_RedwoodIcons/CaretUp';\nimport { ChevronLeft } from '#UNSAFE_RedwoodIcons/ChevronLeft';\nimport { ChevronRight } from '#UNSAFE_RedwoodIcons/ChevronRight';\nimport { RadioButtonSmallOn } from '#UNSAFE_RedwoodIcons/RadioButtonSmallOn';\nimport { Text } from '#UNSAFE_Text';\nimport { ToggleButton } from '#UNSAFE_ToggleButton';\nimport { View } from '#UNSAFE_View';\nimport { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { getMonthName } from '#utils/PRIVATE_dayUtils';\nimport {\n  CalendarMonthRequired,\n  getLongFormattedYearMonth,\n  getNumericFormattedYear\n} from '#utils/UNSAFE_calendarDateUtils';\nimport { ComponentProps, useMemo } from 'preact/compat';\nimport { styles } from '#PRIVATE_DatePickerHeader/themes/DatePickerHeaderStyles.css';\n\ntype ToggleButtonOnToggle = NonNullable<ComponentProps<typeof ToggleButton>['onToggle']>;\ntype IconButtonOnAction = NonNullable<ComponentProps<typeof IconButton>['onAction']>;\n\ntype ToggleButtonsProps = {\n  /**\n   * Use this property to specify how to render the header part of the component.\n   * <ul>\n   *   <li>\n   *     `'independentButtons'` - The component will show two toggle buttons,\n   *     one for the month and one for the year.\n   *   </li>\n   *   <li>\n   *     `'text'` - The component will show the month and year as text in the header.\n   *   </li>\n   * </ul>\n   * @default 'independentButtons'\n   */\n  monthYearHeader?: 'independentButtons' | 'text';\n\n  /**\n   * Use this property to specify the selection state of the header toggle buttons. This property\n   * is only applicable when the `monthYearHeader` is not set to `'text'`.\n   * <ul>\n   *   <li>\n   *     `'month'` - The month toggle button is selected. Only applicable when the\n   *     `monthYearHeader` is set to `'independentButtons'`.\n   *   </li>\n   *   <li>\n   *     `'year'` - The year toggle button is selected. Only applicable when the\n   *     `monthYearHeader` is set to `'independentButtons'`.\n   *   </li>\n   *   <li>\n   *     `'none'` - No selection.\n   *   </li>\n   * </ul>\n   * @default 'none'\n   */\n  toggleSelection?: 'month' | 'year' | 'none';\n\n  /**\n   * Accessible label for the month toggle button. Only applicable when\n   * `monthYearHeader` is set to `'individualButtons'`.\n   *\n   * Use this property to provide a screen reader accessible label for the\n   * month toggle button. For example, you might want the screen reader\n   * to read the whole month \"March\", instead of what is shown on the\n   * button - \"Mar\". Or you might want the screen reader to read additional\n   * information like, \"Current month is March, press this toggle button to\n   * view a different month.\"\n   */\n  monthToggleAccessibleLabel?: string;\n\n  /**\n   * Accessible label for the year toggle button. Only applicable when\n   * `monthYearHeader` is set to `'individualButtons'`.\n   *\n   * Use this property to provide a screen reader accessible label for the\n   * month toggle button. For example, you might want the screen reader to\n   * read additional information like, \"Current year is 2024, press this toggle\n   * button to view a different year.\"\n   */\n  yearToggleAccessibleLabel?: string;\n\n  /**\n   * A callback function to be called when the month toggle button is clicked.\n   * Only applicable when `monthYearHeader` is set to `'independentButtons'`.\n   */\n  onMonthToggle?: ToggleButtonOnToggle;\n\n  /**\n   * A callback function to be called when the year toggle button is clicked.\n   * Only applicable when `monthYearHeader` is set to `'independentButtons'`.\n   */\n  onYearToggle?: ToggleButtonOnToggle;\n};\n\ntype Props = TestIdProps &\n  ToggleButtonsProps & {\n    /**\n     * The number representing the Month. The valid values are 1-12.\n     */\n    month: CalendarMonthRequired['month'];\n\n    /**\n     * The number representing the Year in ISO format. A valid ISO year will be within the\n     * range of 0 and 9999.\n     */\n    year: CalendarMonthRequired['year'];\n\n    /**\n     * Set this property to true to hide the previous navigation button.\n     * @default false\n     */\n    isPreviousNavigationButtonHidden?: boolean;\n\n    /**\n     * Set this property to true to hide the today navigation button.\n     * @default false\n     */\n    isTodayNavigationButtonHidden?: boolean;\n\n    /**\n     * Set this property to true to hide the next navigation button.\n     * @default false\n     */\n    isNextNavigationButtonHidden?: boolean;\n\n    /**\n     * Accessible label for the previous navigation button. Only applicable when\n     * `isPreviousNavigationButtonHidden` is set to `false`.\n     *\n     * Use this property to provide a screen reader accessible label for the\n     * previous navigation button. For example, you might want the screen reader to\n     * read additional information like, \"Go to previous month.\"\n     */\n    previousNavigationAccessibleLabel: string;\n\n    /**\n     * Accessible label for the today navigation button. Only applicable when\n     * `isTodayNavigationButtonHidden` is set to `false`.\n     *\n     * Use this property to provide a screen reader accessible label for the\n     * today navigation button. For example, you might want the screen reader to\n     * read additional information like, \"Go to today.\"\n     */\n    todayNavigationAccessibleLabel: string;\n\n    /**\n     * Accessible label for the next navigation button. Only applicable when\n     * `isNextNavigationButtonHidden` is set to `false`.\n     *\n     * Use this property to provide a screen reader accessible label for the\n     * next navigation button. For example, you might want the screen reader to\n     * read additional information like, \"Go to next month.\"\n     */\n    nextNavigationAccessibleLabel: string;\n\n    /**\n     * A callback function to be called when the previous navigation button is\n     * clicked. Only applicable when `isPreviousNavigationButtonHidden` is set to `false`.\n     */\n    onPreviousNavigationAction?: IconButtonOnAction;\n\n    /**\n     * A callback function to be called when the today button is clicked. Only\n     * applicable when `isTodayNavigationButtonHidden` is set to `false`.\n     */\n    onTodayNavigationAction?: IconButtonOnAction;\n\n    /**\n     * A callback function to be called when the next navigation button is\n     * clicked. Only applicable when `isNextNavigationButtonHidden` is set to `false`.\n     */\n    onNextNavigationAction?: IconButtonOnAction;\n  };\n\n/**\n * The DatePickerHeader component can be used to render the header for the\n * DatePicker component. It shows the current month, year and some additional\n * elements based on the configuration like previous, today and next navigation\n * buttons.\n */\nexport const DatePickerHeader = ({\n  isPreviousNavigationButtonHidden = false,\n  isTodayNavigationButtonHidden = false,\n  isNextNavigationButtonHidden = false,\n  month,\n  monthToggleAccessibleLabel,\n  monthYearHeader = 'independentButtons',\n  nextNavigationAccessibleLabel,\n  previousNavigationAccessibleLabel,\n  testId,\n  todayNavigationAccessibleLabel,\n  toggleSelection = 'none',\n  year,\n  yearToggleAccessibleLabel,\n  onMonthToggle,\n  onNextNavigationAction,\n  onPreviousNavigationAction,\n  onTodayNavigationAction,\n  onYearToggle\n}: Props) => {\n  const { locale, direction } = useUser();\n\n  // format month and year to long string\n  // { month: 3, year 2024 } -> 'March 2024'\n  const longFormattedYearMonth = useMemo(\n    () => getLongFormattedYearMonth(locale, year, month),\n    [locale, month, year]\n  );\n\n  // format month and year to strings\n  // { month: 3, year 2024 } -> { monthStr: 'Mar', yearStr: '2024' }\n  const { monthStr, yearStr } = useMemo(\n    () => ({\n      monthStr: getMonthName(locale, month, year, 'short'),\n      yearStr: getNumericFormattedYear(locale, year, month)\n    }),\n    [locale, month, year]\n  );\n\n  return (\n    <Flex align=\"center\" justify=\"between\" testId={testId}>\n      <Flex>\n        {monthYearHeader === 'independentButtons' && (\n          <>\n            <div class={styles['monthYearButtonContainer']}>\n              <ToggleButton\n                aria-label={monthToggleAccessibleLabel}\n                label={monthStr}\n                endIcon={toggleSelection === 'month' ? <CaretUp /> : <CaretDown />}\n                isSelected={toggleSelection === 'month'}\n                onToggle={onMonthToggle}\n                size=\"sm\"\n                variant=\"borderless\"\n              />\n              <ToggleButton\n                aria-label={yearToggleAccessibleLabel}\n                label={yearStr}\n                endIcon={toggleSelection === 'year' ? <CaretUp /> : <CaretDown />}\n                isSelected={toggleSelection === 'year'}\n                onToggle={onYearToggle}\n                size=\"sm\"\n                variant=\"borderless\"\n              />\n            </div>\n          </>\n        )}\n        {monthYearHeader === 'text' && (\n          <View paddingInlineStart=\"3x\">\n            <Text size=\"md\" weight=\"semiBold\">\n              {longFormattedYearMonth}\n            </Text>\n          </View>\n        )}\n      </Flex>\n      <Flex>\n        {!isPreviousNavigationButtonHidden && (\n          <IconButton\n            aria-label={previousNavigationAccessibleLabel}\n            size=\"sm\"\n            variant=\"borderless\"\n            onAction={onPreviousNavigationAction}>\n            {direction === 'ltr' ? <ChevronLeft /> : <ChevronRight />}\n          </IconButton>\n        )}\n        {!isTodayNavigationButtonHidden && (\n          <IconButton\n            aria-label={todayNavigationAccessibleLabel}\n            size=\"sm\"\n            variant=\"borderless\"\n            onAction={onTodayNavigationAction}>\n            <RadioButtonSmallOn />\n          </IconButton>\n        )}\n        {!isNextNavigationButtonHidden && (\n          <IconButton\n            aria-label={nextNavigationAccessibleLabel}\n            size=\"sm\"\n            variant=\"borderless\"\n            onAction={onNextNavigationAction}>\n            {direction === 'ltr' ? <ChevronRight /> : <ChevronLeft />}\n          </IconButton>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n"],"names":["SvgCaretUp","props","_jsx","jsx","Icon","viewBox","children","fill","d","SvgRadioButtonSmallOn","_jsxs","jsxs","isPreviousNavigationButtonHidden","isTodayNavigationButtonHidden","isNextNavigationButtonHidden","month","monthToggleAccessibleLabel","monthYearHeader","nextNavigationAccessibleLabel","previousNavigationAccessibleLabel","testId","todayNavigationAccessibleLabel","toggleSelection","year","yearToggleAccessibleLabel","onMonthToggle","onNextNavigationAction","onPreviousNavigationAction","onTodayNavigationAction","onYearToggle","locale","direction","useUser","longFormattedYearMonth","useMemo","getLongFormattedYearMonth","monthStr","yearStr","getMonthName","getNumericFormattedYear","Flex","align","justify","_Fragment","class","styles","ToggleButton","label","endIcon","CaretUp","CaretDown","isSelected","onToggle","size","variant","SvgCaretDown","View","paddingInlineStart","Text","weight","IconButton","onAction","ChevronLeft","SvgChevronLeft","ChevronRight","RadioButtonSmallOn"],"mappings":"kfAYA,MAAMA,EAAcC,GAClBC,EAAAC,IAACC,EAAIA,KAAC,CAAAC,QAAQ,eAAgBJ,EAAKK,SACjCJ,EAAAA,IAAG,IAAA,CAAAK,KAAK,OACND,SAAAJ,MAAA,OAAA,CAAMM,EAAE,uCAAuCD,KAAK,qBCHpDE,EAAyBR,GAC7BC,EAAAA,IAACE,EAAAA,MAAKC,QAAQ,eAAgBJ,WAC5BS,EAAGC,KAAA,IAAA,CAAAJ,KAAK,OAAMD,SAAA,CACZJ,EAAAA,YAAMM,EAAE,sCAAsCD,KAAK,iBACnDL,MACE,OAAA,CAAAM,EAAE,oFACFD,KAAK,yCC6KmB,EAC9BK,oCAAmC,EACnCC,iCAAgC,EAChCC,gCAA+B,EAC/BC,QACAC,6BACAC,kBAAkB,qBAClBC,gCACAC,oCACAC,SACAC,iCACAC,kBAAkB,OAClBC,OACAC,4BACAC,gBACAC,yBACAC,6BACAC,0BACAC,mBAEA,MAAMC,OAAEA,EAAMC,UAAEA,GAAcC,EAAOA,UAI/BC,EAAyBC,EAAAA,SAC7B,IAAMC,EAAAA,0BAA0BL,EAAQP,EAAMR,IAC9C,CAACe,EAAQf,EAAOQ,KAKZa,SAAEA,EAAQC,QAAEA,GAAYH,EAAOA,SACnC,KAAO,CACLE,SAAUE,EAAAA,aAAaR,EAAQf,EAAOQ,EAAM,SAC5Cc,QAASE,EAAuBA,wBAACT,EAAQP,EAAMR,MAEjD,CAACe,EAAQf,EAAOQ,IAGlB,OACEb,EAAAC,KAAC6B,OAAI,CAACC,MAAM,SAASC,QAAQ,UAAUtB,OAAQA,EAAMd,SAAA,CACnDI,EAAAA,KAAC8B,EAAIA,KACF,CAAAlC,SAAA,CAAoB,uBAApBW,GACCf,MACEyC,EAAAA,SAAA,CAAArC,SAAAI,EAAAC,KAAA,MAAA,CAAKiC,MAAOC,SAAiC,yBAACvC,SAAA,CAC5CJ,MAAC4C,EAAAA,aACa,CAAA,aAAA9B,EACZ+B,MAAOX,EACPY,QAA6B,UAApB1B,EAA8BpB,EAAAA,IAAC+C,EAAU,CAAA,GAAG/C,EAACC,IAAA+C,eAAY,CAAA,GAClEC,WAAgC,UAApB7B,EACZ8B,SAAU3B,EACV4B,KAAK,KACLC,QAAQ,eAEVpD,MAAC4C,eAAY,CAAA,aACCtB,EACZuB,MAAOV,EACPW,QAA6B,SAApB1B,EAA6BpB,MAAC+C,EAAO,CAAA,GAAM/C,EAAAA,IAACgD,EAASK,aAAA,IAC9DJ,WAAgC,SAApB7B,EACZ8B,SAAUvB,EACVwB,KAAK,KACLC,QAAQ,oBAKK,SAApBrC,GACCf,EAAAA,IAACsD,EAAIA,KAAC,CAAAC,mBAAmB,KACvBnD,SAAAJ,EAAAA,IAACwD,EAAIA,KAAA,CAACL,KAAK,KAAKM,OAAO,WACpBrD,SAAA2B,SAKTvB,EAAAA,KAAC8B,EAAAA,KAAI,CAAAlC,SAAA,EACDM,GACAV,EAAAA,IAAC0D,EAAAA,WAAU,CAAA,aACGzC,EACZkC,KAAK,KACLC,QAAQ,aACRO,SAAUlC,EAA0BrB,SACrB,QAAdyB,EAAsB7B,EAAAA,IAAC4D,EAAWC,eAAA,IAAM7D,EAAAC,IAAC6D,kBAAY,CAAA,MAGxDnD,GACAX,MAAC0D,EAAAA,WACa,CAAA,aAAAvC,EACZgC,KAAK,KACLC,QAAQ,aACRO,SAAUjC,EAAuBtB,SACjCJ,EAACC,IAAA8D,EAAqB,CAAA,MAGxBnD,GACAZ,MAAC0D,EAAAA,yBACa1C,EACZmC,KAAK,KACLC,QAAQ,aACRO,SAAUnC,EAAsBpB,SACjB,QAAdyB,EAAsB7B,EAAAA,IAAC8D,EAAAA,gBAAY,CAAA,GAAM9D,EAAAC,IAAC2D,iBAAW,CAAA,UAK9D"}