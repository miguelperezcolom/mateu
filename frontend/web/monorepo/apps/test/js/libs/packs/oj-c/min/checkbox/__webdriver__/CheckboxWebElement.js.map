{"version":3,"file":"CheckboxWebElement.js","sourceRoot":"","sources":["CheckboxWebElement.ts"],"names":[],"mappings":";;;AAAA,qEAAkE;AAClE,2DAAoD;AAEpD;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,+CAAsB;IAC5D;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,KAAc;QACrC,uCAAuC;QACvC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC;YACnC,2DAA2D;YAC3D,MAAM,IAAI,0BAAK,CAAC,2BAA2B,CACzC,iFAAiF,CAClF,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,OAAO,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW,CAAC,KAAqB;QAC7C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,UAAU,EAAE,CAAC;QAEzC,IAAI,OAAO,KAAK,KAAK,EAAE,CAAC;YACtB,MAAM,KAAK,CAAC,QAAQ,CAAC,wBAAG,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;CACF;AAxCD,gDAwCC","sourcesContent":["import { CheckboxWebElementBase } from './CheckboxWebElementBase';\nimport { By, Key, error } from 'selenium-webdriver';\n\n/**\n * The component WebElement for [oj-c-checkbox](../../jsdocs/oj-c.Checkbox.html).\n * Do not instantiate this class directly, instead, use\n * [findCheckbox](../functions/findCheckbox.html).\n */\nexport class CheckboxWebElement extends CheckboxWebElementBase {\n  /**\n   * Sets the value of \"value\" property for the Checkbox component\n   * @param value The value to set for \"value\"\n   * @throws {ElementNotInteractableError} if the API is called when the control is readonly or disabled\n   */\n  public async changeValue(value: boolean): Promise<void> {\n    // Check if the control is interactable\n    if (!(await this.isInteractable())) {\n      // Cannot interact when the control is disabled or readonly\n      throw new error.ElementNotInteractableError(\n        'oj-c-checkbox: Value cannot be changed when the control is disabled or readonly'\n      );\n    }\n\n    await this.whenBusyContextReady();\n    await this.selectValue(value);\n  }\n\n  /**\n   * Checks if the Checkbox is in interactable state\n   */\n  private async isInteractable(): Promise<boolean> {\n    const isReadonly = await this.getReadonly();\n    const isDisabled = await this.getDisabled();\n    return !(isReadonly || isDisabled);\n  }\n\n  /**\n   * Toggle Checkbox value if needed\n   */\n  private async selectValue(value: boolean | null): Promise<void> {\n    const label = await this.findElement(By.css('label'));\n    const input = await label.findElement(By.css('input'));\n    const checked = await input.isSelected();\n\n    if (checked !== value) {\n      await label.sendKeys(Key.SPACE);\n    }\n  }\n}\n"]}