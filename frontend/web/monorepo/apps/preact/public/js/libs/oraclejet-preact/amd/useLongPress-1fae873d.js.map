{"version":3,"file":"useLongPress-1fae873d.js","sources":["../../src/hooks/UNSAFE_useLongPress/useLongPress.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useCallback } from 'preact/hooks';\n\ntype LongPressOptions = {\n  isDisabled?: boolean;\n  minimumTime?: number;\n};\n\ntype LongPressInfo = {\n  x: number;\n  y: number;\n};\n\ntype LongPressState = {\n  pointerDownId: number | null;\n  startTime: number;\n};\n\nconst InitialPressState = {\n  pointerDownId: null,\n  startTime: 0\n};\n\nconst DefaultMinimumTime = 250;\n\nexport function useLongPress(\n  onLongPress: (e: LongPressInfo) => void,\n  { isDisabled = false, minimumTime = DefaultMinimumTime }: LongPressOptions = {\n    isDisabled: false,\n    minimumTime: DefaultMinimumTime\n  }\n): { longPressProps: Record<string, any> } {\n  const ref = useRef<LongPressState>(InitialPressState);\n\n  const clearLongPress = useCallback(() => {\n    ref.current = InitialPressState;\n  }, []);\n\n  const onPointerDown = useCallback((e: PointerEvent) => {\n    // return if it is not a left click\n    if (e.pointerType == 'mouse' && e.button != 0) {\n      return;\n    }\n\n    ref.current = ref.current.pointerDownId\n      ? InitialPressState\n      : { pointerDownId: e.pointerId, startTime: e.timeStamp };\n  }, []);\n\n  const onPointerUp = useCallback(\n    (e: PointerEvent) => {\n      if (e.pointerId === ref.current.pointerDownId) {\n        const longPressTime = e.timeStamp - ref.current.startTime;\n        // 250ms minimum longPress time based on numbers used in Hammer\n        if (longPressTime > minimumTime) {\n          onLongPress({ x: e.offsetX, y: e.offsetY });\n        }\n      }\n      clearLongPress();\n    },\n    [onLongPress, clearLongPress, minimumTime]\n  );\n\n  const longPressProps = isDisabled\n    ? {}\n    : {\n        onPointerDown,\n        onPointerUp,\n        onPointerLeave: clearLongPress,\n        onPointerCancel: clearLongPress\n      };\n\n  return {\n    longPressProps\n  };\n}\n"],"names":["InitialPressState","pointerDownId","startTime","onLongPress","isDisabled","minimumTime","ref","useRef","clearLongPress","useCallback","current","onPointerDown","e","pointerType","button","pointerId","timeStamp","onPointerUp","x","offsetX","y","offsetY","longPressProps","onPointerLeave","onPointerCancel"],"mappings":"8DAyBA,MAAMA,EAAoB,CACxBC,cAAe,KACfC,UAAW,kBAKG,SACdC,GACAC,WAAEA,GAAa,EAAKC,YAAEA,EAJG,KAIoD,CAC3ED,YAAY,EACZC,YANuB,MASzB,MAAMC,EAAMC,SAAuBP,GAE7BQ,EAAiBC,EAAAA,aAAY,KACjCH,EAAII,QAAUV,CAAiB,GAC9B,IAEGW,EAAgBF,eAAaG,IAEZ,SAAjBA,EAAEC,aAAsC,GAAZD,EAAEE,SAIlCR,EAAII,QAAUJ,EAAII,QAAQT,cACtBD,EACA,CAAEC,cAAeW,EAAEG,UAAWb,UAAWU,EAAEI,WAAW,GACzD,IAEGC,EAAcR,eACjBG,IACC,GAAIA,EAAEG,YAAcT,EAAII,QAAQT,cAAe,CACvBW,EAAEI,UAAYV,EAAII,QAAQR,UAE5BG,GAClBF,EAAY,CAAEe,EAAGN,EAAEO,QAASC,EAAGR,EAAES,SAEpC,CACDb,GAAgB,GAElB,CAACL,EAAaK,EAAgBH,IAYhC,MAAO,CACLiB,eAVqBlB,EACnB,CAAE,EACF,CACEO,gBACAM,cACAM,eAAgBf,EAChBgB,gBAAiBhB,GAMzB"}