{
  "name": "oj-c",
  "version": "19.0.0",
  "date": "Tuesday, Aug 12, 2025",
  "time": "5:02 PM UTC",
  "components": {
    "oj-c-area-chart": {
      "name": "area-chart",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartElement"
      ],
      "description": "An area chart displays information graphically using lines and filled areas, making relationships among the data easier to understand.",
      "displayName": "Area Chart",
      "main": "oj-c/area-chart",
      "help": "oj-c.AreaChart.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/area-chart",
          "defaultColumns": 6,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-area-chart",
          "uxSpecs": [
            "area-chart"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/AreaChartWebElement.html",
          "export": "findAreaChart",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "legend.position",
            "legend.rendered",
            "stack",
            "xAxis.title",
            "yAxis.title",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the area-chart.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "17.1.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "seriesComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "displayName": "Series Comparator",
          "help": "#seriesComparator"
        },
        "groupComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "displayName": "Group Comparator",
          "help": "#groupComparator"
        },
        "stack": {
          "type": "string",
          "description": "Defines whether the data items are stacked.",
          "displayName": "Stack",
          "help": "#stack",
          "propertyEditorValues": {
            "on": {
              "description": "Data items belonging to same group will be stacked.",
              "displayName": "On"
            },
            "off": {
              "description": "Data items will not be stacked.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Drilling is enabled on data items, axis labels and legend items.",
              "displayName": "On"
            },
            "off": {
              "description": "Drilling is not enabled.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "orientation": {
          "type": "string",
          "description": "The orientation of the chart.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Chart will be horizontally oriented.",
              "displayName": "On"
            },
            "vertical": {
              "description": "Chart will be vertically oriented.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "timeAxisType": {
          "type": "string",
          "description": "The time axis type of the chart x axis.",
          "displayName": "TimeAxisType",
          "help": "#timeAxisType",
          "propertyEditorValues": {
            "enabled": {
              "description": "The regular time axis type. Time values are passed using <a target='_blank' href='oj-c.AreaChartItem.html'>oj-c-area-chart-item</a> group-id attribute.",
              "displayName": "Regular"
            },
            "mixedFrequency": {
              "description": "The mixed frequency time axis type. The mixed frequency time axis type is used when different series have different sampling frequencies. Time values are passed using <a target='_blank' href='oj-c.AreaChartItem.html'>oj-c-area-chart-item</a> x attribute.",
              "displayName": "MixedFrequency"
            },
            "skipGaps": {
              "description": "The regular time axis type. Time values are passed using <a target='_blank' href='oj-c.AreaChartItem.html'>oj-c-area-chart-item</a> group-id attribute. Gap between time values will be ignored.",
              "displayName": "SkipGaps"
            }
          },
          "enumValues": [
            "enabled",
            "mixedFrequency",
            "skipGaps"
          ]
        },
        "yAxis": {
          "type": "object",
          "description": "An object defining y axis properties.",
          "displayName": "Y Axis",
          "help": "#yAxis",
          "properties": {
            "dataMax": {
              "type": "number",
              "description": "The maximum value of the chart data.",
              "displayName": "Data Max"
            },
            "dataMin": {
              "type": "number",
              "description": "The minimum value of the chart data.",
              "displayName": "Data Min"
            },
            "max": {
              "type": "number",
              "description": "The maximum value of the y axis.",
              "displayName": "Max"
            },
            "min": {
              "type": "number",
              "description": "The minimum value of the y axis.",
              "displayName": "Min"
            },
            "majorTick": {
              "type": "object",
              "description": "The y axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The y axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The y axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of y axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of y axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in y axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "propertyEditorValues": {
                "linear": {
                  "description": "Renders linear y axis.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Renders log y axis.",
                  "displayName": "Log"
                }
              },
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "y2Axis": {
          "type": "object",
          "description": "The y2Axis options for the chart.",
          "displayName": "Y2 Axis",
          "help": "#yAxis",
          "properties": {
            "dataMax": {
              "type": "number",
              "description": "The maximum value of the chart data.",
              "displayName": "Data Max"
            },
            "dataMin": {
              "type": "number",
              "description": "The minimum value of the chart data.",
              "displayName": "Data Min"
            },
            "max": {
              "type": "number",
              "description": "The maximum value of the y axis.",
              "displayName": "Max"
            },
            "min": {
              "type": "number",
              "description": "The minimum value of the y axis.",
              "displayName": "Min"
            },
            "majorTick": {
              "type": "object",
              "description": "The y axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The y axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The y axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of y axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of y axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in y axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "propertyEditorValues": {
                "linear": {
                  "description": "Renders linear y axis.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Renders log y axis.",
                  "displayName": "Log"
                }
              },
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "splitDualY": {
          "type": "string",
          "description": "Defines whether the plot area is split into two sections.",
          "displayName": "Split Dual Y",
          "help": "#splitDualY",
          "propertyEditorValues": {
            "on": {
              "description": "Plot Area is split into two sections, one for each Y-axis.",
              "displayName": "On"
            },
            "off": {
              "description": "Plot Area is not split.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "splitterPosition": {
          "type": "number",
          "description": "Specifies the fraction of the space that is given to the Y-axis subchart.",
          "displayName": "Splitter Position",
          "help": "#splitterPosition",
          "minimum": 0,
          "maximum": 1,
          "value": 0.5
        },
        "xAxis": {
          "type": "object",
          "description": "An object defining x axis properties.",
          "displayName": "X Axis",
          "help": "#xAxis",
          "properties": {
            "majorTick": {
              "type": "object",
              "description": "The x axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The x axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The x axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object|Array<object>",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "rotation": {
                  "type": "string",
                  "description": "Whether the ticklabels can be rotated.",
                  "displayName": "Rotation",
                  "propertyEditorValues": {
                    "none": {
                      "description": "The axis labels will not be rotated.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "The axis labels might be rotated in order to fit more labels.",
                      "displayName": "auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "none"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of x axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of x axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in x axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "plotArea": {
          "type": "object",
          "description": "An object defining the style of the plot area.",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "backgroundColor": {
              "type": "string",
              "description": "The background color of the plot area.",
              "format": "color",
              "displayName": "Background Color"
            }
          }
        },
        "zoomAndScroll": {
          "type": "string",
          "description": "Specifies the zoom and scroll behavior of the chart.",
          "displayName": "Zoom And Scroll",
          "help": "#zoomAndScroll",
          "enumValues": [
            "off",
            "live"
          ]
        },
        "valueFormats": {
          "type": "object",
          "description": "An object specifying value formatting and tooltip behavior.",
          "displayName": "Value Formats",
          "help": "#valueFormats",
          "properties": {
            "group": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the group.",
              "properties": {
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "series": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the series.",
              "properties": {
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "value": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the value.",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the numerical value for the tooltip."
                },
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            }
          }
        },
        "styleDefaults": {
          "type": "object",
          "description": "An object specifying default styles for chart style attributes..",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "groupSeparators": {
              "type": "object",
              "properties": {
                "rendered": {
                  "type": "string",
                  "description": "Whether the group separator lines are rendered.",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "color": {
                  "type": "string",
                  "description": "The color of the group separator lines.",
                  "format": "color"
                }
              }
            }
          }
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "none": {
              "description": "No item can be selected.",
              "displayName": "None"
            },
            "single": {
              "description": "Single item can be selected.",
              "displayName": "Single"
            },
            "multiple": {
              "description": "Multiple items can be selected.",
              "displayName": "Multiple"
            }
          },
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<string|number>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of category string used for filtering.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "dragMode": {
          "type": "string",
          "description": "The action that is performed when a drag occurs on the chart.",
          "displayName": "Drag Mode",
          "help": "#dragMode",
          "enumValues": [
            "pan",
            "zoom",
            "select",
            "off",
            "user"
          ]
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of category string used for highlighting.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines the hide and show behavior that is performed when clicking on a leegnd item.",
          "displayName": "Hide and Show Behavior",
          "help": "#hideAndShowBehavior",
          "propertyEditorValues": {
            "withRescale": {
              "description": "Rescaling of y axis when items are hidden.",
              "displayName": "With Rescale"
            },
            "withoutRescale": {
              "description": "No rescaling of y axis when items are hidden.",
              "displayName": "Without Rescale"
            },
            "none": {
              "description": "No hide and show behavior.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "withoutRescale",
            "withRescale"
          ],
          "value": "none"
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Hovered items will be dimmed.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlighted property.",
          "displayName": "Highlight Match",
          "help": "#highlightMatch",
          "propertyEditorValues": {
            "any": {
              "description": "Any matching categories will be highlighted.",
              "displayName": "Dim"
            },
            "all": {
              "description": "Items only with all matching categories will be highlighted.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "all",
            "any"
          ],
          "value": "any"
        },
        "legend": {
          "type": "object",
          "displayName": "Legend",
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "help": "#legend",
          "properties": {
            "position": {
              "type": "string",
              "enumValues": [
                "auto",
                "end",
                "start",
                "top",
                "bottom"
              ],
              "value": "auto"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "value": "on"
            },
            "maxSize": {
              "type": "number|string"
            },
            "size": {
              "type": "number|string"
            },
            "symbolHeight": {
              "type": "number"
            },
            "symbolWidth": {
              "type": "number"
            }
          }
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "accessibleLabel": {
              "type": "string"
            },
            "items": {
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "displayName": "Item Template",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "displayName": "Series Template",
          "help": "#seriesTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "id": {
              "type": "string"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "displayName": "Group Template",
          "help": "#groupTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "ids": {
              "type": "Array<string>"
            },
            "index": {
              "type": "number"
            },
            "depth": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "help": "#event:ViewportChange",
          "displayName": "Viewport Change",
          "detail": {
            "startGroup": {
              "type": "string",
              "description": "The start group of the new viewport on a chart with categorical axis."
            },
            "endGroup": {
              "type": "string",
              "description": "The end group of the new viewport on a chart with categorical axis."
            },
            "xMax": {
              "type": "number",
              "description": "The maximum x value of the new viewport."
            },
            "xMin": {
              "type": "number",
              "description": "The minimum x value of the new viewport."
            },
            "yMax": {
              "type": "number",
              "description": "The maximum y value of the new viewport."
            },
            "yMin": {
              "type": "number",
              "description": "The minimum y value of the new viewport."
            }
          }
        },
        "ojItemDrill": {
          "description": "Triggered on a chart item (double click if selection is enabled, single click otherwise).",
          "help": "#event:ItemDrill",
          "displayName": "Item Drill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "data": {
              "type": "object",
              "description": "The data object of the drilled item.",
              "properties": {
                "id": {
                  "type": "any"
                },
                "seriesId": {
                  "type": "string",
                  "description": "The id for the series the item belongs to."
                },
                "groupId": {
                  "type": "Array<string>",
                  "description": "The array of ids for the groups the item belongs to."
                },
                "value": {
                  "type": "number",
                  "description": "The value of the data item."
                },
                "x": {
                  "type": "string",
                  "description": "The x value of the data item."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the data item."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers. Only applies to line, area, and scatter series."
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An optional array of category strings corresponding to this data item."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled for the data item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "shortDesc": {
                  "type": "string"
                }
              }
            },
            "itemData": {
              "type": "any",
              "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of ids for the groups the item belongs to.",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The value of the data item.",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "x": {
                          "type": "string",
                          "description": "The x value of the data item.",
                          "displayName": "X",
                          "help": "#x"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "assignedToY2": {
                  "type": "string",
                  "description": "Defines whether the series is associated with the y2 axis",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                },
                "groups": {
                  "type": "Array<object>"
                }
              }
            }
          }
        },
        "ojGroupDrill": {
          "description": "Triggered on a chart group drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:GroupDrill",
          "displayName": "Group Drill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                },
                "groups": {
                  "type": "Array<object>"
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of ids for the groups the item belongs to.",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The value of the data item.",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "x": {
                      "type": "string",
                      "description": "The x value of the data item.",
                      "displayName": "X",
                      "help": "#x"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojSeriesDrill": {
          "description": "Triggered on a chart series drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:SeriesDrill",
          "displayName": "Series Drill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of ids for the groups the item belongs to.",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The value of the data item.",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "x": {
                          "type": "string",
                          "description": "The x value of the data item.",
                          "displayName": "X",
                          "help": "#x"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "assignedToY2": {
                  "type": "string",
                  "description": "Defines whether the series is associated with the y2 axis",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of ids for the groups the item belongs to.",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The value of the data item.",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "x": {
                      "type": "string",
                      "description": "The x value of the data item.",
                      "displayName": "X",
                      "help": "#x"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojContextMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuAction",
          "help": "#event:ojContextMenuAction",
          "detail": {
            "menuItemKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object"
            }
          }
        },
        "ojContextMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuSelection",
          "help": "#event:ojContextMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "contextMenuContext": {
              "type": "object"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-item": {
      "name": "area-chart-item",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-item element is used to declare item properties",
      "displayName": "AreaChartItem",
      "main": "oj-c/area-chart-item",
      "help": "oj-c.AreaChartItem.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "seriesId": {
          "type": "string",
          "description": "The id for the series the item belongs to.",
          "displayName": "Series Id",
          "help": "#seriesId"
        },
        "groupId": {
          "type": "Array<string>",
          "description": "The array of ids for the groups the item belongs to.",
          "displayName": "Group Id",
          "help": "#groupId"
        },
        "value": {
          "type": "number",
          "description": "The value of the data item.",
          "displayName": "Value",
          "help": "#value"
        },
        "x": {
          "type": "string",
          "description": "The x value of the data item.",
          "displayName": "X",
          "help": "#x"
        },
        "color": {
          "type": "string",
          "description": "The color of the data item.",
          "displayName": "Color",
          "help": "#color"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "categories": {
          "type": "Array<string>",
          "description": "An optional array of category strings corresponding to this data item.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled for the data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "shortDesc": {
          "type": "string",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-series": {
      "name": "area-chart-series",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartSeriesElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-series element is used to declare series properties in the seriesTemplate",
      "displayName": "AreaChartSeries",
      "main": "oj-c/area-chart-series",
      "help": "oj-c.AreaChartSeries.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "assignedToY2": {
          "type": "string",
          "description": "Defines whether the series is associated with the y2 axis",
          "displayName": "Assigned To Y2",
          "help": "#assignedToY2",
          "enumValues": [
            "off",
            "on"
          ]
        },
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "type": "string",
          "description": "The color of the series. The chart legend item will inherit this color value.",
          "displayName": "Color",
          "help": "#color"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the series item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "value": "inherit"
        },
        "lineType": {
          "type": "string",
          "description": "The line type of the data line or area.",
          "displayName": "Line Type",
          "help": "#lineType",
          "enumValues": [
            "curved",
            "straight"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the data markers, if different from the series color.",
          "displayName": "Marker Color",
          "help": "#markerColor"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed"
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "name": {
          "type": "string",
          "description": "The name of the series, displayed in the legend and tooltips.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-area-chart-group": {
      "name": "area-chart-group",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAreaChartGroupElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-area-chart-group element is used to declare group properties in the groupTemplate",
      "displayName": "AreaChartGroup",
      "main": "oj-c/area-chart-group",
      "help": "oj-c.AreaChartGroup.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the group label.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "value": "inherit"
        },
        "name": {
          "type": "string",
          "description": "The name of the group.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the group.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-date-picker": {
      "name": "date-picker",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDatePickerElement"
      ],
      "description": "A DatePicker is a calendar interface that allows users to select a single date.",
      "displayName": "DatePicker",
      "help": "oj-c.DatePicker.html",
      "main": "oj-c/date-picker",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/date-picker"
        },
        "oracle": {
          "icon": "oj-ux-ico-date"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DatePickerWebElement.html",
          "export": "findDatePicker",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "17.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "17.1.0",
          "value": [
            "oj-date-picker"
          ]
        }
      ],
      "properties": {
        "dayFormatter": {
          "type": "function"
        },
        "daysOutsideMonth": {
          "type": "string",
          "propertyEditorValues": {
            "hidden": {
              "description": "The days outside of the current month will be hidden.",
              "displayName": "Hidden"
            },
            "selectable": {
              "description": "The days outside of the current month will be visible and selectable.",
              "displayName": "Selectable"
            }
          },
          "enumValues": [
            "hidden",
            "selectable"
          ],
          "value": "hidden"
        },
        "monthAndYearPicker": {
          "type": "string",
          "propertyEditorValues": {
            "on": {
              "description": "The month and year toggle buttons will be shown.",
              "displayName": "On"
            },
            "off": {
              "description": "The month and year toggle buttons will not be shown and the date picker renders the month and the year as text.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "on"
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date",
          "value": null
        },
        "maxWidth": {
          "type": "number|string",
          "description": "Specifies the component style maxWidth.",
          "displayName": "Max Width",
          "help": "#maxWidth"
        },
        "min": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date",
          "value": null
        },
        "readonly": {
          "type": "boolean",
          "value": false
        },
        "todayButton": {
          "type": "string",
          "propertyEditorValues": {
            "visible": {
              "description": "The 'Go to Today' button will be shown and it can be pressed to navigate to Today.",
              "displayName": "Visible"
            },
            "hidden": {
              "description": "The 'Go to Today' button will be hidden.",
              "displayName": "Hidden"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "todayTimeZone": {
          "type": "string"
        },
        "value": {
          "type": "string|null",
          "writeback": true,
          "value": null
        },
        "weekDisplay": {
          "type": "string",
          "propertyEditorValues": {
            "none": {
              "description": "The week of the year column will not be shown.",
              "displayName": "None"
            },
            "number": {
              "description": "Will show the week of the year as a number.",
              "displayName": "Number"
            }
          },
          "enumValues": [
            "number",
            "none"
          ],
          "value": "none"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies the component style width.",
          "displayName": "width",
          "help": "#width"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-dialog": {
      "name": "dialog",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDialogElement"
      ],
      "description": "A Dialog is a floating window that typically contains a header, content and footer area. A Dialog is typically modal and centered in viewport.",
      "displayName": "Dialog",
      "help": "oj-c.Dialog.html",
      "main": "oj-c/dialog",
      "status": [
        {
          "type": "supersedes",
          "since": "19.0.0",
          "value": [
            "oj-dialog"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/dialog"
        },
        "oracle": {
          "icon": "oj-ux-ico-dialog",
          "uxSpecs": [
            "dialog"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DialogWebElement.html",
          "export": "findDialog",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "18.0.0",
      "slots": {
        "header": {
          "description": "The content node to be shown within the Dialog header. If a header slot is not specified by the user, the dialog-title attribute will be used instead."
        },
        "body": {
          "description": "The content node to be shown within the Dialog body."
        },
        "footer": {
          "description": "The content node to be shown within the Dialog footer."
        }
      },
      "properties": {
        "cancelBehavior": {
          "type": "string",
          "description": "Specifies the cancel behavior of the Dialog. Note that the cancelBehavior applies to both automatic and user-defined headers.",
          "displayName": "Cancel Behavior",
          "help": "#cancelBehavior",
          "propertyEditorValues": {
            "icon": {
              "description": "A close icon will automatically be created. The dialog will close when it has focus and user presses the escape (ESC) key.",
              "displayName": "icon"
            },
            "escape": {
              "description": "The dialog will close when it has focus and user presses the escape (ESC) key. A close icon will not be created.",
              "displayName": "escape"
            },
            "none": {
              "description": "A close icon will not be created. No actions will be associated with the escape key.",
              "displayName": "none"
            }
          },
          "enumValues": [
            "none",
            "icon",
            "escape"
          ],
          "value": "none"
        },
        "dialogTitle": {
          "type": "string",
          "description": "Specifies title if header slot is not defined (custom header).",
          "displayName": "Dialog Title",
          "help": "#dialogTitle"
        },
        "dragAffordance": {
          "type": "string",
          "description": "Specifies whether the Dialog is draggable.",
          "displayName": "Drag Affordance",
          "help": "#dragAffordance",
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be draggable.",
              "displayName": "none"
            },
            "header": {
              "description": "The dialog will be draggable by the header.",
              "displayName": "header"
            }
          },
          "enumValues": [
            "none",
            "header"
          ],
          "value": "none"
        },
        "headerDecoration": {
          "type": "string",
          "description": "Specifies whether decorative stripe at the top is present.",
          "displayName": "Header Decoration",
          "help": "#headerDecoration",
          "propertyEditorValues": {
            "on": {
              "description": "Renders a textured strip at the top of the dialog header in the Redwood theme.",
              "displayName": "on"
            },
            "off": {
              "description": "No decoration is rendered.",
              "displayName": "off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "on"
        },
        "launcher": {
          "type": "string|Element",
          "description": "Specifies Dialog's launcher. After Dialog closes, it returns focus to the launcher.",
          "displayName": "Launcher",
          "help": "#launcher"
        },
        "modality": {
          "type": "string",
          "description": "Specifies modality of the Dialog.",
          "displayName": "Modality",
          "help": "#modality",
          "propertyEditorValues": {
            "modal": {
              "description": "The dialog is modal. Interactions with other page elements are disabled. Modal dialogs overlay other page elements.",
              "displayName": "on"
            },
            "modeless": {
              "description": "Defines a modeless dialog.",
              "displayName": "off"
            }
          },
          "enumValues": [
            "modal",
            "modeless"
          ],
          "value": "modal"
        },
        "opened": {
          "type": "boolean",
          "description": "Specifies whether the Dialog is open.",
          "displayName": "Opened",
          "help": "#opened",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "getterOnly"
                }
              ]
            }
          },
          "writeback": true,
          "value": false
        },
        "resizeBehavior": {
          "type": "string",
          "description": "Specifies whether the Dialog is resizable.",
          "displayName": "Resize Behavior",
          "help": "#resizeBehavior",
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be interactively resizable.",
              "displayName": "none"
            },
            "resizable": {
              "description": "\tThe dialog will be interactively resizable.",
              "displayName": "resizable"
            }
          },
          "enumValues": [
            "none",
            "resizable"
          ],
          "value": "none"
        },
        "anchor": {
          "type": "string|Element|object",
          "description": "Specifies Dialog's anchor. Dialog is placed relative to its anchor. If not specified, it is placed relative to window.",
          "displayName": "Anchor",
          "help": "#anchor"
        },
        "placement": {
          "type": "string",
          "description": "Specifies the location the dialog will appear relative to another element. If not specified, the default dialog position is \"center\" on desktop and \"bottom-start\" on phone.",
          "displayName": "Placement",
          "help": "#placement",
          "enumValues": [
            "center",
            "end",
            "start",
            "top",
            "bottom",
            "top-start",
            "top-end",
            "start-top",
            "start-bottom",
            "bottom-start",
            "bottom-end",
            "end-top",
            "end-bottom"
          ]
        },
        "offset": {
          "type": "number|object",
          "description": "Specifies displacement of the Dialog from the anchor element placement along the specified axes. The offset object consists of mainAxis and crossAxis properties. The direction in which these propertie are applied depends on the current value of the position property. If a number is used, it represents the main axis. The <code>mainAxis</code> property represents the distance between the Popup and the anchor. The <code>crossAxis</code> property represents the deviation in the opposite axis to the main axis - the skidding between the Popup and the anchor.",
          "displayName": "Offset",
          "help": "#offset"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies width of the Dialog.",
          "displayName": "Width",
          "help": "#width"
        },
        "minWidth": {
          "type": "number|string",
          "description": "Specifies minWidth of the Dialog.",
          "displayName": "Min Width",
          "help": "#minWidth"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "Specifies maxWidth of the Dialog.",
          "displayName": "Max Width",
          "help": "#maxWidth"
        },
        "height": {
          "type": "number|string",
          "description": "Specifies height of the Dialog.",
          "displayName": "Height",
          "help": "#height"
        },
        "minHeight": {
          "type": "number|string",
          "description": "Specifies minHeight of the Dialog.",
          "displayName": "Min Height",
          "help": "#minHeight"
        },
        "maxHeight": {
          "type": "number|string",
          "description": "Specifies maxHeight of the Dialog.",
          "displayName": "Max Height",
          "help": "#maxHeight"
        }
      },
      "events": {
        "ojOpen": {
          "description": "Triggered immediately after the Dialog opens.",
          "displayName": "ojOpen",
          "help": "#event:open"
        },
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the Dialog closes. Call <code class=\"prettyprint\">event.preventDefault()</code> in the event listener to veto the event synchronously, which prevents the Dialog from closing. Call <code class=\"prettyprint\">event.detail.accept(Promise.reject());</code> in the event listener to veto the event asynchronously, which prevents the Dialog from closing.",
          "displayName": "ojBeforeClose",
          "help": "#event:beforeClose",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "reason": {
              "type": "string",
              "description": "reason for closing the dialog",
              "enumValues": [
                "icon",
                "escapeKey"
              ]
            }
          }
        },
        "ojClose": {
          "description": "Triggered immediately after the Dialog closes.",
          "displayName": "ojClose",
          "help": "#event:close"
        },
        "ojFocus": {
          "description": "Triggered immediately after the Dialog receives focus.",
          "displayName": "ojFocus",
          "help": "#event:onOjFocus"
        },
        "ojDragStart": {
          "description": "Triggered immediately before the Dialog moves.",
          "displayName": "ojDragStart",
          "help": "#event:onOjDragStart",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            }
          }
        },
        "ojDragMove": {
          "description": "Triggered when the Dialog moves.",
          "displayName": "ojDragMove",
          "help": "#event:onOjDragMove",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            }
          }
        },
        "ojDragEnd": {
          "description": "Triggered immediately after the Dialog stops moving.",
          "displayName": "ojDragEnd",
          "help": "#event:onOjDragEnd",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the dragged element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            }
          }
        },
        "ojResizeStart": {
          "description": "Triggered immediately before the Dialog resizes.",
          "displayName": "ojResizeStart",
          "help": "#event:onOjResizeStart",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "originalSize": {
              "type": "object",
              "description": "original dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "size": {
              "type": "object",
              "description": "current dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            }
          }
        },
        "ojResize": {
          "description": "Triggered when the Dialog resizes.",
          "displayName": "ojResize",
          "help": "#event:onOjResize",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "originalSize": {
              "type": "object",
              "description": "original dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "size": {
              "type": "object",
              "description": "current dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            }
          }
        },
        "ojResizeEnd": {
          "description": "Triggered immediately after the Dialog stops resizing.",
          "displayName": "ojResizeEnd",
          "help": "#event:onOjResizeEnd",
          "detail": {
            "originalPosition": {
              "type": "object",
              "description": "original position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "originalSize": {
              "type": "object",
              "description": "original dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            },
            "position": {
              "type": "object",
              "description": "current position of the resized element",
              "properties": {
                "x": {
                  "type": "number",
                  "description": "x coordinate"
                },
                "y": {
                  "type": "number",
                  "description": "y coordinate"
                }
              }
            },
            "size": {
              "type": "object",
              "description": "current dimensions of the resized element",
              "properties": {
                "width": {
                  "type": "number",
                  "description": "element's width"
                },
                "height": {
                  "type": "number",
                  "description": "element's height"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-highlight-text": {
      "name": "highlight-text",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CHighlightTextElement"
      ],
      "displayName": "Highlight Text",
      "description": "A Highlight Text renders text with highlighting applied.",
      "help": "oj-c.HighlightText.html",
      "main": "oj-c/highlight-text",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "defaultColumns": 6,
          "minColumns": 2,
          "module": "oj-c/highlight-text"
        },
        "oracle": {
          "icon": "oj-ux-ico-background-color"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/HighlightTextWebElement.html",
          "export": "findHighlightText",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "text",
            "matchText"
          ]
        }
      ],
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-highlight-text"
          ]
        }
      ],
      "properties": {
        "matchText": {
          "type": "string",
          "description": "The text string to match.",
          "displayName": "Match Text",
          "help": "#matchText",
          "translatable": true
        },
        "text": {
          "type": "string",
          "description": "The text string to apply highlighting to.",
          "displayName": "Text",
          "help": "#text",
          "translatable": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-number": {
      "name": "input-number",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputNumberElement"
      ],
      "displayName": "InputNumber",
      "description": "An input number allows the user to enter a number value.",
      "help": "oj-c.InputNumber.html",
      "main": "oj-c/input-number",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-number"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-number",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-input-number",
          "uxSpecs": [
            "input-number"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputNumberWebElement.html",
          "export": "findInputNumber",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "14.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "number|null",
          "description": "The maximum allowed value",
          "displayName": "Max",
          "help": "#max"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "min": {
          "type": "number|null",
          "description": "The minimum allowed value",
          "displayName": "Min",
          "help": "#min"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "numberRangeExactMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "numberRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default NumberRangeValidator's exact message detail.",
          "displayName": "Number Range Exact Message Detail",
          "help": "#numberRangeExactMessageDetail",
          "translatable": true
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "step": {
          "type": "number",
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. If 0, no step functionality.",
          "displayName": "Step",
          "help": "#step"
        },
        "stepperVariant": {
          "type": "string",
          "description": "Variant style of step buttons. Quantitative is recommended only for non-negative integers where the step value is 1, which is common in ecommerce or procurement cases.",
          "displayName": "Stepper Variant",
          "help": "#stepperVariant",
          "propertyEditorValues": {
            "directional": {
              "description": "Displays directional buttons, grouped together and located at end of input.",
              "displayName": "Directional"
            },
            "quantitative": {
              "description": "Displays quantitative buttons, separated and located at start and end of input.",
              "displayName": "Quantitative"
            }
          },
          "enumValues": [
            "directional",
            "quantitative"
          ],
          "value": "directional"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-number uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            }
          },
          "enumValues": [
            "number",
            "auto",
            "text"
          ],
          "value": "auto"
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "transientValue": {
          "type": "number|null",
          "description": "Specifies the transient value of the component",
          "displayName": "Transient Value",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-password": {
      "name": "input-password",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputPasswordElement"
      ],
      "displayName": "InputPassword",
      "description": "An input password allows the user to enter a password.",
      "help": "oj-c.InputPassword.html",
      "main": "oj-c/input-password",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-password",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-password",
          "uxSpecs": [
            "input-password"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputPasswordWebElement.html",
          "export": "findInputPassword",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-password"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "conditional",
            "always",
            "never"
          ],
          "value": "never"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "maskIcon": {
          "type": "string",
          "description": "Represents the mask icon.",
          "displayName": "Mask Icon",
          "help": "#maskIcon",
          "propertyEditorValues": {
            "hidden": {
              "description": "The mask visibility icon is never visible.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "The mask visibility icon is always visible.",
              "displayName": "Visible"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-sensitive-text": {
      "name": "input-sensitive-text",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputSensitiveTextElement"
      ],
      "displayName": "InputSensitiveText",
      "description": "An Input Sensitive Text displays a field that allows a user to enter sensitive text that will be masked.",
      "help": "oj-c.InputSensitiveText.html",
      "main": "oj-c/input-sensitive-text",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-sensitive-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-password",
          "uxSpecs": [
            "input-text"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputSensitiveTextWebElement.html",
          "export": "findInputSensitiveText",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.1.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "conditional",
            "always",
            "never"
          ],
          "value": "never"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "displayName": "Count By",
              "help": "#length.countBy",
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length (default, if unspecified)",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length.",
                  "displayName": "Code Unit"
                }
              },
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "maskIcon": {
          "type": "string",
          "description": "Represents the mask icon.",
          "displayName": "Mask Icon",
          "help": "#maskIcon",
          "propertyEditorValues": {
            "hidden": {
              "description": "The mask visibility icon is never visible.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "The mask visibility icon is always visible.",
              "displayName": "Visible"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "maskIconLabel": {
          "type": "string",
          "description": "The text used for the screen reader to describe the mask icon toggle.",
          "displayName": "Mask Icon Label",
          "help": "#maskIconLabel",
          "translatable": true
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ]
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies the current valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "return": "void"
        },
        "focus": {
          "return": "void"
        },
        "showMessages": {
          "return": "void"
        },
        "reset": {
          "return": "void"
        },
        "validate": {
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-text": {
      "name": "input-text",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputTextElement"
      ],
      "displayName": "InputText",
      "description": "An input text allows the user to enter a text value.",
      "help": "oj-c.InputText.html",
      "main": "oj-c/input-text",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input",
          "uxSpecs": [
            "input-text"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputTextWebElement.html",
          "export": "findInputText",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "clearIcon",
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-input-text"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "clearIcon": {
          "type": "string",
          "description": "Specifies if an icon to clear the input field should be visible.",
          "displayName": "Clear Icon",
          "help": "#clearIcon",
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon will always be shown.",
              "displayName": "Always"
            },
            "never": {
              "description": "The clear icon will never be shown (default, if unspecified).",
              "displayName": "Never"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            }
          },
          "enumValues": [
            "conditional",
            "always",
            "never"
          ],
          "value": "never"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "inputPrefix": {
          "type": "string",
          "description": "The text before the input text.",
          "displayName": "Input Prefix",
          "help": "#inputPrefix",
          "translatable": true
        },
        "inputSuffix": {
          "type": "string",
          "description": "The text after the input text.",
          "displayName": "Input Suffix",
          "help": "#inputSuffix",
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "displayName": "Count By",
              "help": "#length.countBy",
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length (default, if unspecified)",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length.",
                  "displayName": "Code Unit"
                }
              },
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using 'number', you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-c-input-text uses the browser native input type='number' and when you set a value that contains a non-numeric character, browsers do not display the value. For example, '1,000' would not be shown. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "end": {
          "description": "The end slot content for the component.",
          "displayName": "End",
          "help": "#end"
        },
        "start": {
          "description": "The start slot content for the component.",
          "displayName": "Start",
          "help": "#start"
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-message-toast": {
      "name": "message-toast",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMessageToastElement"
      ],
      "displayName": "MessageToast",
      "description": "Toast messages are short, noncritical, auto-dismissible messages that communicate non-disruptive contextual messages.",
      "help": "oj-c.MessageToast.html",
      "main": "oj-c/message-toast",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "defaultColumns": 2,
          "minColumns": 1,
          "module": "oj-c/message-toast"
        },
        "oracle": {
          "icon": "oj-ux-ico-messages",
          "uxSpecs": [
            "messages-toast-jet"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/MessageToastWebElement.html",
          "export": "findMessageToast",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "14.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-messages"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider",
          "description": "Data for the Message Toast component.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext",
          "templateSlotAlias": "detailTemplate"
        },
        "iconTemplateValue": {
          "type": "string|function",
          "description": "A dynamic template key or a function that determines the icon template for the current row.",
          "displayName": "Current Icon Template",
          "help": "#iconTemplateValue",
          "dynamicSlotDef": "MessageToastTemplateContext",
          "templateSlotAlias": "iconTemplate"
        },
        "offset": {
          "type": "number|object",
          "description": "Offset for the Message Toast component's position.",
          "displayName": "Offset",
          "help": "#offset",
          "value": 0
        },
        "position": {
          "type": "string",
          "description": "Position for the Message Toast component.",
          "displayName": "Position",
          "help": "#position",
          "enumValues": [
            "top",
            "bottom",
            "top-start",
            "top-end",
            "bottom-start",
            "bottom-end",
            "top-left",
            "top-right",
            "bottom-left",
            "bottom-right"
          ],
          "value": "bottom"
        }
      },
      "dynamicSlots": {
        "MessageToastTemplateContext": {
          "description": "The dynamic template slots for the Toast message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "object",
              "properties": {
                "closeAffordance": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string"
                },
                "sound": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "autoTimeout": {
                  "type": "number|string"
                }
              }
            },
            "key": {
              "type": "string|number"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string|number"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "string|number"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "object",
              "properties": {
                "closeAffordance": {
                  "type": "string",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "none",
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                },
                "sound": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "autoTimeout": {
                  "type": "number|string"
                }
              }
            },
            "key": {
              "type": "string|number"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string|number"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "string|number"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-multiple": {
      "name": "select-multiple",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectMultipleElement"
      ],
      "displayName": "SelectMultiple",
      "description": "A select multiple is a dropdown list that supports multiple selections and search filtering.",
      "help": "oj-c.SelectMultiple.html",
      "main": "oj-c/select-multiple",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/select-multiple",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-multiple-items"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SelectMultipleWebElement.html",
          "export": "findSelectMultiple",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItems"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-select-many"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "slots": {
        "collectionTemplate": {
          "description": "The collectionTemplate slot is used to specify the template for rendering the items in the dropdown.",
          "displayName": "collectionTemplate",
          "help": "#collectionTemplate",
          "maxItems": 1,
          "preferredContent": [
            "CTableElement"
          ],
          "data": {
            "data": {
              "type": "DataProvider|null"
            },
            "searchText": {
              "type": "string"
            },
            "currentRowOverride": {
              "type": "object",
              "properties": {
                "rowKey": {
                  "type": "string|number"
                }
              }
            },
            "onCurrentRowChanged": {
              "type": "function"
            },
            "selected": {
              "type": "object"
            },
            "onSelectedChanged": {
              "type": "function"
            }
          }
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "searchText": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "selectedKeys": {
              "type": "object"
            },
            "onSelectedKeysChanged": {
              "type": "function"
            }
          }
        }
      },
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for SelectMultiple.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "matchBy": {
          "type": "Array<string>|null",
          "description": "List of text filter matching behaviors to use when filtering.",
          "displayName": "Match By",
          "help": "#matchBy",
          "value": null
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "value": {
          "type": "Set<string|number>|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItems": {
          "type": "Map<string|number, object>|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Items",
          "help": "#valueItems",
          "extension": {
            "vbdt": {
              "keyedProperties": {
                "keys": {
                  "type": "string|number"
                },
                "values": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "string|number"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number",
                              "propertyEditorValues": {
                                "error": {},
                                "confirmation": {},
                                "info": {},
                                "warning": {},
                                "fatal": {}
                              }
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "string|number"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "_selectItemsByValue": {
          "description": "This method imitates an option selection from the dropdown by using keys of items from the options. This is used by the WebElement implementation of oj-c-select-multiple.",
          "params": [
            {
              "name": "value",
              "description": "The value to be selected",
              "type": "Set<any>|null"
            }
          ],
          "return": "Promise"
        },
        "UNSAFE_focusAndOpenDropdown": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-select-single": {
      "name": "select-single",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectSingleElement"
      ],
      "displayName": "SelectSingle",
      "description": "A select single is a dropdown list that supports single selection and search filtering.",
      "help": "oj-c.SelectSingle.html",
      "main": "oj-c/select-single",
      "status": [
        {
          "type": "supersedes",
          "since": "19.0.0",
          "value": [
            "oj-select-single"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/select-single",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-single-items"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SelectSingleWebElement.html",
          "export": "findSelectSingle",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "placeholder",
            "readonly",
            "required",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "itemText",
            "value",
            "valueItem"
          ]
        }
      ],
      "since": "14.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "advancedSearch": {
          "type": "string",
          "description": "Specifies whether the advanced search link is shown in the dropdown when the user filters.",
          "displayName": "Advanced Search",
          "help": "#advancedSearch",
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for SelectSingle.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "15.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "itemText": {
          "type": "string|number|function",
          "description": "Specifies how to get the text string to render for a data item.",
          "displayName": "Item Text",
          "help": "#itemText",
          "required": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "matchBy": {
          "type": "Array<string>|null",
          "description": "List of text filter matching behaviors to use when filtering.",
          "displayName": "Match By",
          "help": "#matchBy",
          "value": null
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "value": {
          "type": "string|number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "valueItem": {
          "type": "object|null",
          "description": "The current value of the element and its associated data.",
          "displayName": "Value Item",
          "help": "#valueItem",
          "properties": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "string|number"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string|number"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number",
                      "propertyEditorValues": {
                        "error": {},
                        "confirmation": {},
                        "info": {},
                        "warning": {},
                        "fatal": {}
                      }
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "string|number"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          },
          "writeback": true,
          "value": null
        },
        "virtualKeyboard": {
          "type": "string",
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers",
          "displayName": "Virtual Keyboard",
          "help": "#virtualKeyboard",
          "propertyEditorValues": {
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. Note that on Android and Windows Mobile, the 'number' keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use (default, if unspecified).",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "URL"
            }
          },
          "enumValues": [
            "number",
            "search",
            "auto",
            "url",
            "text",
            "email",
            "tel"
          ],
          "value": "auto"
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "collectionTemplate": {
          "description": "The collectionTemplate slot is used to specify the template for rendering the items in the dropdown.",
          "displayName": "collectionTemplate",
          "help": "#collectionTemplate",
          "maxItems": 1,
          "preferredContent": [
            "CTableElement",
            "CListViewElement"
          ],
          "data": {
            "data": {
              "type": "DataProvider|null"
            },
            "searchText": {
              "type": "string"
            },
            "currentRowOverride": {
              "type": "object",
              "properties": {
                "rowKey": {
                  "type": "string|number"
                }
              }
            },
            "onCurrentRowChanged": {
              "type": "function"
            },
            "selected": {
              "type": "object"
            },
            "onRowAction": {
              "type": "function"
            }
          }
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "searchText": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "events": {
        "ojAdvancedSearchAction": {
          "description": "Event triggered when the user clicks or presses Enter on the advanced search link in the dropdown.",
          "displayName": "onOjAdvancedSearchAction",
          "help": "#event:advancedSearchAction",
          "detail": {
            "searchText": {
              "type": "string"
            }
          }
        },
        "ojValueAction": {
          "description": "Event triggered when a value is submitted by the user, even if the value is the same as the previous value.",
          "displayName": "onOjValueAction",
          "help": "#event:valueAction",
          "detail": {
            "itemContext": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "key": {
                  "type": "string|number"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "previousValue": {
              "type": "string|number|null"
            },
            "value": {
              "type": "string|number|null"
            }
          }
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "_doAdvancedSearchAction": {
          "description": "This method imitates triggering the advanced search link in the dropdown. This is used by the WebElement implementation of oj-c-select-single.",
          "params": [
            {
              "name": "searchText",
              "description": "The search text to include in the event",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "_selectItemByValue": {
          "description": "This method imitates an option selection from the dropdown by using the key of an item. This is used by the WebElement implementation of oj-c-select-single.",
          "params": [
            {
              "name": "value",
              "description": "The value to be selected",
              "type": "any"
            }
          ],
          "return": "Promise"
        },
        "UNSAFE_focusAndOpenDropdown": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-text-area": {
      "name": "text-area",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTextAreaElement"
      ],
      "displayName": "TextArea",
      "description": "A text area allows the user to enter a multi-line text value.",
      "help": "oj-c.TextArea.html",
      "main": "oj-c/text-area",
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/text-area",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-area"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TextAreaWebElement.html",
          "export": "findTextArea",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-text-area"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "value": null
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "length": {
          "type": "object",
          "description": "Defines the length limit for the field",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "type": "string",
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "value": "codePoint"
            },
            "counter": {
              "type": "string",
              "enumValues": [
                "none",
                "remaining"
              ],
              "value": "remaining"
            },
            "max": {
              "type": "number|null",
              "value": null
            }
          }
        },
        "maxRows": {
          "type": "number",
          "description": "The maximum number of visible text lines of the textarea.",
          "displayName": "Max Rows",
          "help": "#maxRows"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to set on the element.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "resizeBehavior": {
          "type": "string",
          "description": "Defines the resizeBehavior of the textarea.",
          "displayName": "Resize Behavior",
          "help": "#resizeBehavior",
          "propertyEditorValues": {
            "horizontal": {
              "description": "The textarea will be resizable in the horizontal direction only.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "The textarea will be resizable in the vertical direction only.",
              "displayName": "Vertical"
            },
            "both": {
              "description": "The textarea will be interactively resizable both horizontally and vertically.",
              "displayName": "Both"
            },
            "none": {
              "description": "The textarea will not be resizable by the user.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "both",
            "none",
            "horizontal",
            "vertical"
          ],
          "value": "none"
        },
        "rows": {
          "type": "number",
          "description": "The number of visible text lines in the textarea.",
          "displayName": "Rows",
          "help": "#rows"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "any",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-bar": {
      "name": "progress-bar",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CProgressBarElement"
      ],
      "description": "A progress bar allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Bar",
      "help": "oj-c.ProgressBar.html",
      "main": "oj-c/progress-bar",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-progress-bar"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/progress-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-progress-linear",
          "uxSpecs": [
            "progress-bar"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ProgressBarWebElement.html",
          "export": "findProgressBar",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Bar.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the progress bar is on the top edge of a container",
          "displayName": "edge",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Not attached progress bar (default, if unspecified)",
              "displayName": "Not Attached Progress Bar"
            },
            "top": {
              "description": "Progress Bar at Top Edge of container",
              "displayName": "Progress Bar Top Edge Container"
            }
          },
          "enumValues": [
            "none",
            "top"
          ],
          "value": "none"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-circle": {
      "name": "progress-circle",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CProgressCircleElement"
      ],
      "description": "A progress circle allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Circle",
      "help": "oj-c.ProgressCircle.html",
      "main": "oj-c/progress-circle",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-progress-circle"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/progress-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "progress-bar"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ProgressCircleWebElement.html",
          "export": "findProgressCircle",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "13.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Circle.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the progress circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small progress circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium progress circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large progress circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-avatar": {
      "name": "avatar",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CAvatarElement"
      ],
      "description": "An avatar represents a person or entity as initials or an image.",
      "displayName": "Avatar",
      "help": "oj-c.Avatar.html",
      "main": "oj-c/avatar",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-avatar"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/avatar"
        },
        "oracle": {
          "icon": "oj-ux-ico-avatar",
          "uxSpecs": [
            "avatar"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/AvatarWebElement.html",
          "export": "findAvatar",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "size",
            "background"
          ]
        }
      ],
      "since": "13.0.0",
      "properties": {
        "background": {
          "type": "string",
          "description": "Specifies the background of the avatar.",
          "displayName": "Background",
          "help": "#background",
          "propertyEditorValues": {
            "neutral": {
              "description": "Neutral background (default, if unspecified)",
              "displayName": "Neutral"
            },
            "orange": {
              "description": "Orange background",
              "displayName": "Orange"
            },
            "green": {
              "description": "Green background",
              "displayName": "Green"
            },
            "teal": {
              "description": "Teal background",
              "displayName": "Teal"
            },
            "blue": {
              "description": "Blue background",
              "displayName": "Blue"
            },
            "slate": {
              "description": "Slate background",
              "displayName": "Slate"
            },
            "pink": {
              "description": "Pink background",
              "displayName": "Pink"
            },
            "purple": {
              "description": "Purple background",
              "displayName": "Purple"
            },
            "lilac": {
              "description": "Lilac background",
              "displayName": "Lilac"
            },
            "gray": {
              "description": "Gray background",
              "displayName": "Gray"
            }
          },
          "enumValues": [
            "blue",
            "gray",
            "green",
            "orange",
            "pink",
            "purple",
            "teal",
            "neutral",
            "slate",
            "lilac"
          ],
          "value": "neutral"
        },
        "initials": {
          "type": "string|null",
          "description": "Specifies the initials of the avatar.",
          "displayName": "Initials",
          "help": "#initials",
          "translatable": true
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the avatar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "2xs": {
              "description": "extra, extra small avatar",
              "displayName": "Extra Extra Small"
            },
            "xs": {
              "description": "extra small avatar",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small avatar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium avatar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large avatar",
              "displayName": "Large"
            },
            "xl": {
              "description": "extra large avatar",
              "displayName": "Extra Large"
            },
            "2xl": {
              "description": "extra, extra large avatar",
              "displayName": "Extra Extra Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg",
            "xs",
            "2xs",
            "xl",
            "2xl"
          ],
          "value": "md"
        },
        "src": {
          "type": "string|null",
          "description": "Specifies the source for the image of the avatar.",
          "displayName": "Src",
          "help": "#src"
        },
        "iconClass": {
          "type": "string",
          "description": "The icon class to be displayed.",
          "displayName": "Icon Class",
          "help": "#iconClass"
        },
        "shape": {
          "type": "string",
          "description": "Specifies the shape of the avatar.",
          "displayName": "Shape",
          "help": "#shape",
          "propertyEditorValues": {
            "square": {
              "description": "square avatar (default, if unspecified)",
              "displayName": "Square Avatar"
            },
            "circle": {
              "description": "circular avatar",
              "displayName": "Circular Avatar"
            }
          },
          "enumValues": [
            "square",
            "circle"
          ],
          "value": "square"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-button": {
      "name": "button",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CButtonElement"
      ],
      "description": "Buttons direct users to initiate or take actions and work with a single tap, click, or keystroke.",
      "displayName": "Button",
      "help": "oj-c.Button.html",
      "main": "oj-c/button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/button"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ButtonWebElement.html",
          "export": "findButton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "tooltip",
            "display",
            "chroming",
            "size",
            "width",
            "edge",
            "disabled"
          ]
        }
      ],
      "since": "13.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-button"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "help": "#label",
          "required": true,
          "translatable": true
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "help": "#tooltip",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "help": "#width"
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "help": "#size",
          "propertyEditorValues": {
            "xs": {
              "description": "Display an extra small button.  Only supported for component developers with ghost chroming in icon display mode.",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg",
            "xs"
          ],
          "value": "md"
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the button is attached to an edge. For example setting edge='bottom' can be used to attach a button to the bottom of a card. The button is then stretched to 100% width, and borders adjusted.",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Display a default standalone button.",
              "displayName": "Small"
            },
            "bottom": {
              "description": "Stretch the button to 100% width and adjust borders for usage at bottom of container.",
              "displayName": "Bottom"
            }
          },
          "enumValues": [
            "none",
            "bottom"
          ],
          "value": "none"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has variants in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "ghost": {
              "description": "Ghost buttons are the least prominent variation. Ghost buttons are useful for performing low-priority tasks, such as manipulating the UI.",
              "displayName": "Ghost"
            },
            "borderless": {
              "description": "Borderless buttons are a more prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            },
            "danger": {
              "description": "A Danger button alerts the user to a dangerous situation.",
              "displayName": "Danger"
            }
          },
          "enumValues": [
            "solid",
            "borderless",
            "outlined",
            "ghost",
            "callToAction",
            "danger"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-button element accepts DOM nodes as children with the endIcon slot.",
          "help": "#endIcon"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "help": "#event:action"
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "click": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-rating-gauge": {
      "name": "rating-gauge",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRatingGaugeElement"
      ],
      "description": "Rating gauges are typically used to display or accept user feedback on a product or service.",
      "displayName": "Rating Gauge",
      "main": "oj-c/rating-gauge",
      "help": "oj-c.RatingGauge.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-rating-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/rating-gauge"
        },
        "oracle": {
          "icon": "oj-ux-ico-gauge-rating",
          "uxSpecs": [
            "gauge"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/RatingGaugeWebElement.html",
          "export": "findRatingGauge",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "max",
            "step"
          ]
        }
      ],
      "since": "13.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby",
            "described-by",
            "labelled-by"
          ]
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the gauge.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 5
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "disabled": {
          "type": "boolean",
          "help": "#disabled",
          "displayName": "Disabled",
          "value": false
        },
        "changed": {
          "type": "boolean",
          "description": "Whether there has been a value entered by the user even if it is the same as the initial value.",
          "displayName": "Changed",
          "help": "#changed",
          "writeback": true,
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the Rating Gauge.",
          "displayName": "Value",
          "help": "#value",
          "minimum": 0,
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#help"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the rating gauge items.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Rating Gauge",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Rating Gauge (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Rating Gauge",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "color": {
          "type": "string",
          "description": "Specifies the color of the rating gauge items.",
          "displayName": "Color",
          "help": "#color",
          "propertyEditorValues": {
            "neutral": {
              "description": "neutral color Rating Gauge (default, if unspecified)",
              "displayName": "Neutral"
            },
            "gold": {
              "description": "gold color Rating Gauge",
              "displayName": "Gold"
            }
          },
          "enumValues": [
            "gold",
            "neutral"
          ],
          "value": "neutral"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "tooltip": {
          "type": "string",
          "displayName": "Tooltip",
          "help": "#tooltip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-collapsible": {
      "name": "collapsible",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCollapsibleElement"
      ],
      "description": "A collapsible displays a header that can be expanded to show its content.",
      "displayName": "Collapsible",
      "help": "oj-c.Collapsible.html",
      "main": "oj-c/collapsible",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/collapsible"
        },
        "oracle": {
          "icon": "oj-ux-ico-collapsible",
          "uxSpecs": [
            "collapsible"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/CollapsibleWebElement.html",
          "export": "findCollapsible",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "expanded",
            "iconPosition",
            "variant"
          ]
        }
      ],
      "since": "14.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the collapsible. The oj-c-collapsible element accepts plain text or DOM nodes as children for the default slot.",
          "help": "#Default"
        },
        "header": {
          "description": "The header slot is the collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.",
          "help": "#header"
        }
      },
      "properties": {
        "disabled": {
          "type": "boolean",
          "description": "Disables the collapsible if set to true.",
          "help": "#disabled",
          "value": false
        },
        "expanded": {
          "type": "boolean",
          "description": "Specifies if the content is expanded.",
          "help": "#expanded",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "getterOnly"
                }
              ]
            }
          },
          "writeback": true,
          "value": false
        },
        "iconPosition": {
          "type": "string",
          "description": "Controls placement of the icon in the header.",
          "help": "#iconPosition",
          "propertyEditorValues": {
            "start": {
              "description": "icon position is start (default, if unspecified)",
              "displayName": "Start"
            },
            "end": {
              "description": "icon position is end",
              "displayName": "End"
            }
          },
          "enumValues": [
            "end",
            "start"
          ],
          "value": "start"
        },
        "variant": {
          "type": "string",
          "description": "Controls display of the optional divider below the header.",
          "help": "#variant",
          "propertyEditorValues": {
            "basic": {
              "description": "basic, no divider (default, if unspecified)",
              "displayName": "Basic"
            },
            "horizontal-rule": {
              "description": "displays a horizontal divider between the header and content",
              "displayName": "Horizontal Rule"
            }
          },
          "enumValues": [
            "basic",
            "horizontal-rule"
          ],
          "value": "basic"
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is collapsed.",
          "help": "#event:beforeCollapse",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojBeforeExpand": {
          "cancelable": true,
          "description": "Triggered immediately before the collapsible is expanded.",
          "help": "#event:beforeExpand",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after the collapsible has been collapsed.",
          "help": "#event:collapse",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after the collapsible has been expanded (after animation completes).",
          "help": "#event:expand",
          "detail": {
            "target": {
              "type": "EventTarget|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-file-picker": {
      "name": "file-picker",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CFilePickerElement"
      ],
      "description": "A file picker displays a clickable dropzone for selecting files from the device storage.",
      "displayName": "File Picker",
      "help": "oj-c.FilePicker.html",
      "main": "oj-c/file-picker",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-file-picker"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/file-picker"
        },
        "oracle": {
          "icon": "oj-ux-ico-file-image",
          "uxSpecs": [
            "file-picker"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/FilePickerWebElement.html",
          "export": "findFilePicker",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "accept",
            "selectionMode",
            "disabled",
            "primaryText",
            "secondaryText"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "accept": {
          "type": "Array<string>|null",
          "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types",
          "displayName": "Accept",
          "help": "#accept"
        },
        "capture": {
          "type": "string|null",
          "description": "Specifies the preferred facing mode for the device's media capture mechanism.",
          "displayName": "Capture",
          "help": "#capture",
          "propertyEditorValues": {
            "user": {
              "description": "Specifies user-facing as the preferred mode",
              "displayName": "User"
            },
            "environment": {
              "description": "Specifies environment-facing as the preferred mode",
              "displayName": "Environment"
            },
            "implementation": {
              "description": "Specifies an implementation-specific default as the preferred facing mode",
              "displayName": "Implementation"
            },
            "none": {
              "description": "No capture mechanism is used",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "environment",
            "user",
            "implementation"
          ],
          "value": "none"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables the filepicker if set to true",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "primaryText": {
          "type": "string|function",
          "description": "The primary text for the default file picker.",
          "displayName": "Primary Text",
          "help": "#primaryText"
        },
        "secondaryText": {
          "type": "string|function",
          "description": "The secondary text for the default file picker.",
          "displayName": "Secondary Text",
          "help": "#secondaryText"
        },
        "selectionMode": {
          "type": "string",
          "description": "Whether to allow single or multiple file selection.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "multiple file selection",
              "displayName": "Multiple"
            },
            "single": {
              "description": "single file selection",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "slots": {
        "trigger": {
          "description": "The trigger slot is used to replace the default content of the file picker.",
          "help": "#trigger"
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before files are selected to allow for custom validation",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "files": {
              "type": "FileList",
              "description": "The selected files"
            }
          }
        },
        "ojInvalidSelect": {
          "description": "Triggered when invalid files are selected",
          "help": "#event:invalidSelect",
          "detail": {
            "messages": {
              "type": "Array<object>",
              "description": "Messages that should be displayed to the user describing invalid files.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "summary": {
                      "type": "string"
                    },
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string",
                      "enumValues": [
                        "error",
                        "confirmation",
                        "info",
                        "warning"
                      ]
                    }
                  }
                }
              }
            },
            "until": {
              "type": "Promise|null",
              "description": "This property may be populated with a Promise to provide short-term feedback during a user interaction (typically drag and drop); the feedback should be cleared upon the resolution of this Promise."
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after the files are selected",
          "help": "#event:select",
          "detail": {
            "files": {
              "type": "FileList",
              "description": "The files that were just selected."
            }
          }
        }
      },
      "methods": {
        "focus": {
          "description": "Sets focus on the file picker or the first tabbable element for a file picker with custom content.",
          "return": "void"
        },
        "blur": {
          "description": "Blurs the file picker.",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-meter-bar": {
      "name": "meter-bar",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMeterBarElement"
      ],
      "description": "A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter Bar",
      "main": "oj-c/meter-bar",
      "help": "oj-c.MeterBar.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-status-meter-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/meter-bar"
        },
        "oracle": {
          "icon": "oj-ux-ico-linear-status",
          "uxSpecs": [
            "meter-bar"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/MeterBarWebElement.html",
          "export": "findMeterBar",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "thresholdDisplay",
            "plotArea.rendered",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "min",
            "max",
            "step",
            "thresholds",
            "referenceLines"
          ]
        }
      ],
      "since": "14.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby",
            "described-by",
            "labelled-by"
          ]
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter bar.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter bar.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter bar.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "baseline": {
          "type": "number",
          "description": "Define the baseline value of the bar. If undefined, defaults to minimum value of the meter bar.",
          "displayName": "Baseline",
          "help": "#baseline"
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color",
          "format": "color",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ],
          "value": 1
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string",
              "format": "color"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "off",
                "on"
              ]
            }
          }
        },
        "orientation": {
          "type": "string",
          "displayName": "Orientation",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "horizontal"
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "position": {
                  "type": "string",
                  "enumValues": [
                    "end",
                    "start"
                  ]
                },
                "value": {
                  "type": "number"
                },
                "label": {
                  "type": "string"
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "type": "string",
                      "format": "color"
                    },
                    "fontSize": {
                      "type": "string"
                    },
                    "fontStyle": {
                      "type": "string"
                    },
                    "fontWeight": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter bar.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter Bar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter Bar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter Bar",
              "displayName": "Large"
            },
            "fit": {
              "description": "Meter Bar that fits the available space",
              "displayName": "Fit"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg",
            "fit"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-meter-circle": {
      "name": "meter-circle",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMeterCircleElement"
      ],
      "description": "A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.",
      "displayName": "Meter circle",
      "main": "oj-c/meter-circle",
      "help": "oj-c.Metercircle.html",
      "status": [
        {
          "type": "supersedes",
          "since": "15.0.0",
          "value": [
            "oj-status-meter-gauge"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/meter-circle"
        },
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "meter-circle"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/MeterCircleWebElement.html",
          "export": "findMeterCircle",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "thresholdDisplay",
            "plotArea.rendered",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "min",
            "max",
            "step",
            "thresholds",
            "referenceLines"
          ]
        }
      ],
      "since": "14.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby",
            "described-by",
            "labelled-by"
          ]
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum value of the meter circle.",
          "displayName": "Max",
          "help": "#max",
          "value": 100
        },
        "min": {
          "type": "number",
          "description": "The minimum value of the meter circle.",
          "displayName": "Min",
          "help": "#min",
          "value": 0
        },
        "readonly": {
          "type": "boolean",
          "help": "#readonly",
          "displayName": "Readonly",
          "value": false
        },
        "value": {
          "type": "number|null",
          "description": "The value of the meter circle.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": 0
        },
        "step": {
          "type": "number",
          "displayName": "Step",
          "help": "#step",
          "value": 1
        },
        "color": {
          "type": "string",
          "displayName": "Color",
          "help": "#color",
          "format": "color",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "indicatorSize": {
          "type": "number",
          "displayName": "Indicator Size",
          "help": "#indicatorSize",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ],
          "value": 1
        },
        "innerRadius": {
          "type": "number",
          "displayName": "Inner Radius",
          "help": "innerRadius",
          "status": [
            {
              "type": "antiPattern",
              "since": "16.0.0",
              "themes": [
                "Redwood"
              ]
            }
          ]
        },
        "plotArea": {
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "color": {
              "type": "string",
              "format": "color"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "off",
                "on"
              ]
            }
          }
        },
        "angleExtent": {
          "type": "number",
          "displayName": "Angle Extent",
          "help": "#angleExtent",
          "value": 360
        },
        "startAngle": {
          "type": "number",
          "displayName": "Start Angle",
          "help": "#startAngle",
          "value": 90
        },
        "referenceLines": {
          "type": "Array<object>",
          "displayName": "Reference Lines",
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "value": {
                  "type": "number"
                },
                "label": {
                  "type": "string"
                },
                "style": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "type": "string",
                      "format": "color"
                    },
                    "fontSize": {
                      "type": "string"
                    },
                    "fontStyle": {
                      "type": "string"
                    },
                    "fontWeight": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "thresholdDisplay": {
          "type": "string",
          "displayName": "Threshold Display",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "plotArea",
            "indicator"
          ],
          "value": "indicator"
        },
        "thresholds": {
          "type": "Array<object>",
          "displayName": "Thresholds",
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "accessibleLabel": {
                  "type": "string"
                },
                "color": {
                  "type": "string",
                  "format": "color",
                  "propertyEditorValues": {
                    "danger": {
                      "description": "Maps to theme-specific color indicating a danger condition"
                    },
                    "warning": {
                      "description": "Maps to theme-specific color indicating a warning condition"
                    },
                    "success": {
                      "description": "Maps to theme-specific color indicating a success condition"
                    }
                  }
                },
                "max": {
                  "type": "number"
                }
              }
            }
          }
        },
        "describedBy": {
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "labelledBy": {
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the meter circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small Meter circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium Meter circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large Meter circle",
              "displayName": "Large"
            },
            "fit": {
              "description": "Meter Circle that fills available width and height.",
              "displayName": "Fit"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg",
            "fit"
          ],
          "value": "md"
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "transientValue": {
          "type": "number",
          "displayName": "transientValue",
          "help": "#transientValue",
          "readOnly": true,
          "writeback": true
        }
      },
      "slots": {
        "centerTemplate": {
          "data": {
            "innerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "outerBounds": {
              "type": "object",
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            },
            "value": {
              "type": "number|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart": {
      "name": "line-chart",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartElement"
      ],
      "description": "A line chart displays information graphically using data points connected by straight or curved lines, making relationships among the data easier to understand.",
      "displayName": "Line Chart",
      "main": "oj-c/line-chart",
      "help": "oj-c.LineChart.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/line-chart",
          "defaultColumns": 6,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-line-chart",
          "uxSpecs": [
            "line-chart"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/LineChartWebElement.html",
          "export": "findLineChart",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "legend.position",
            "legend.rendered",
            "stack",
            "xAxis.title",
            "yAxis.title",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby"
          ]
        }
      ],
      "properties": {
        "groupComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "displayName": "Group Comparator",
          "help": "#groupComparator"
        },
        "stack": {
          "type": "string",
          "description": "Defines whether the data items are stacked.",
          "displayName": "stack",
          "help": "#stack",
          "propertyEditorValues": {
            "on": {
              "description": "Data items belonging to same group will be stacked.",
              "displayName": "On"
            },
            "off": {
              "description": "Data items will not be stacked.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an <code class=\"prettyprint\">ojDrill</code> event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Drilling is enabled on data items, axis labels and legend items.",
              "displayName": "On"
            },
            "seriesOnly": {
              "description": "Drilling is enabled only on legend items. Use multiSeriesDrilling attribute to enable drilling on the legend item for Other.",
              "displayName": "Off"
            },
            "groupsOnly": {
              "description": "Drilling is enabled only on axis labels.",
              "displayName": "On"
            },
            "off": {
              "description": "Drilling is not enabled.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on",
            "groupsOnly",
            "seriesOnly"
          ],
          "value": "off"
        },
        "orientation": {
          "type": "string",
          "description": "The orientation of the chart.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Chart will be horizontally oriented.",
              "displayName": "On"
            },
            "vertical": {
              "description": "Chart will be vertically oriented.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "splitDualY": {
          "type": "string",
          "description": "Defines whether the plot area is split into two sections.",
          "displayName": "Split Dual Y",
          "help": "#splitDualY",
          "propertyEditorValues": {
            "on": {
              "description": "Plot Area is split into two sections, one for each Y-axis.",
              "displayName": "On"
            },
            "off": {
              "description": "Plot Area is not split.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "splitterPosition": {
          "type": "number",
          "description": "Specifies the fraction of the space that is given to the Y-axis subchart.",
          "displayName": "Splitter Position",
          "help": "#splitterPosition",
          "minimum": 0,
          "maximum": 1,
          "value": 0.5
        },
        "timeAxisType": {
          "type": "string",
          "description": "The time axis type of the chart x axis.",
          "displayName": "TimeAxisType",
          "help": "#timeAxisType",
          "propertyEditorValues": {
            "enabled": {
              "description": "The regular time axis type. Time values are passed using <a target='_blank' href='oj-c.LineChartItem.html'>oj-c-line-chart-item</a> group-id attribute.",
              "displayName": "Regular"
            },
            "mixedFrequency": {
              "description": "The mixed frequency time axis type. The mixed frequency time axis type is used when different series have different sampling frequencies. Time values are passed using <a target='_blank' href='oj-c.LineChartItem.html'>oj-c-line-chart-item</a> x attribute.",
              "displayName": "MixedFrequency"
            },
            "skipGaps": {
              "description": "The regular time axis type. Time values are passed using <a target='_blank' href='oj-c.LineChartItem.html'>oj-c-line-chart-item</a> group-id attribute. Gap between time values will be ignored.",
              "displayName": "SkipGaps"
            }
          },
          "enumValues": [
            "enabled",
            "mixedFrequency",
            "skipGaps"
          ]
        },
        "yAxis": {
          "type": "object",
          "description": "The yAxis options for the chart.",
          "displayName": "Y Axis",
          "help": "#yAxis",
          "properties": {
            "dataMax": {
              "type": "number",
              "description": "The maximum value of the chart data.",
              "displayName": "Data Max"
            },
            "dataMin": {
              "type": "number",
              "description": "The minimum value of the chart data.",
              "displayName": "Data Min"
            },
            "max": {
              "type": "number",
              "description": "The maximum value of the y axis.",
              "displayName": "Max"
            },
            "min": {
              "type": "number",
              "description": "The minimum value of the y axis.",
              "displayName": "Min"
            },
            "majorTick": {
              "type": "object",
              "description": "The y axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The y axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The y axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of y axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of y axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in y axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "propertyEditorValues": {
                "linear": {
                  "description": "Renders linear y axis.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Renders log y axis.",
                  "displayName": "Log"
                }
              },
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "y2Axis": {
          "type": "object",
          "description": "The y2Axis options for the chart.",
          "displayName": "Y2 Axis",
          "help": "#yAxis",
          "properties": {
            "dataMax": {
              "type": "number",
              "description": "The maximum value of the chart data.",
              "displayName": "Data Max"
            },
            "dataMin": {
              "type": "number",
              "description": "The minimum value of the chart data.",
              "displayName": "Data Min"
            },
            "max": {
              "type": "number",
              "description": "The maximum value of the y axis.",
              "displayName": "Max"
            },
            "min": {
              "type": "number",
              "description": "The minimum value of the y axis.",
              "displayName": "Min"
            },
            "majorTick": {
              "type": "object",
              "description": "The y axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The y axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The y axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of y axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of y axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in y axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "propertyEditorValues": {
                "linear": {
                  "description": "Renders linear y axis.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Renders log y axis.",
                  "displayName": "Log"
                }
              },
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "xAxis": {
          "type": "object",
          "description": "The xAxis options for the chart.",
          "displayName": "X Axis",
          "help": "#xAxis",
          "properties": {
            "majorTick": {
              "type": "object",
              "description": "The x axis major tick properties.",
              "displayName": "Major Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "minorTick": {
              "type": "object",
              "description": "The x axis minor tick properties.",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "type": "string",
                  "description": "The color of the line.",
                  "displayName": "Line Color",
                  "format": "color"
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The style of the line.",
                  "displayName": "Line Style",
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Renders dashed major tick.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Renders dotted major tick.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Renders solid major tick.",
                      "displayName": "Solid"
                    }
                  },
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the line.",
                  "displayName": "Line Width"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the minor tick are rendered.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "off": {
                      "description": "Renders the minor tick.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Does not render the minor tick.",
                      "displayName": "On"
                    },
                    "auto": {
                      "description": "Renders the minor tick for log scale.",
                      "displayName": "Auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                }
              }
            },
            "tickLabel": {
              "type": "object",
              "description": "The x axis tick label properties.",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "type": "object|Array<object>",
                  "description": "The converter to format the axis tick labels.",
                  "displayName": "Converter"
                },
                "rendered": {
                  "type": "string",
                  "description": "Whether the tick labels are rendered or not.",
                  "displayName": "Rendered",
                  "propertyEditorValues": {
                    "on": {
                      "description": "Renders the axis tick label.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "Axis tick labels won't be rendered.",
                      "displayName": "Off"
                    }
                  },
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "rotation": {
                  "type": "string",
                  "description": "Whether the ticklabels can be rotated.",
                  "displayName": "Rotation",
                  "propertyEditorValues": {
                    "none": {
                      "description": "The axis labels will not be rotated.",
                      "displayName": "On"
                    },
                    "off": {
                      "description": "The axis labels might be rotated in order to fit more labels.",
                      "displayName": "auto"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "none"
                  ]
                },
                "style": {
                  "type": "object",
                  "description": "The style of the tick labels.",
                  "displayName": "Style"
                }
              }
            },
            "viewportMin": {
              "type": "number",
              "description": "The current minimum value of x axis viewport.",
              "displayName": "Viewport Min"
            },
            "viewportMax": {
              "type": "number",
              "description": "The current maximum value of x axis viewport.",
              "displayName": "Viewport Max"
            },
            "step": {
              "type": "number",
              "description": "The increment between major tick marks in x axis.",
              "displayName": "Step"
            },
            "size": {
              "type": "number",
              "description": "The size of the axis.",
              "displayName": "Size"
            },
            "scale": {
              "type": "string",
              "description": "The scale of the axis.",
              "displayName": "Scale",
              "enumValues": [
                "linear",
                "log"
              ]
            },
            "title": {
              "type": "string",
              "description": "The axis title.",
              "displayName": "Title"
            },
            "titleStyle": {
              "type": "object",
              "description": "The axis title style.",
              "displayName": "Title Style"
            }
          }
        },
        "plotArea": {
          "type": "object",
          "description": "The plot area of the chart.",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "backgroundColor": {
              "type": "string",
              "description": "The background color of the plot area.",
              "format": "color",
              "displayName": "Background Color"
            }
          }
        },
        "zoomAndScroll": {
          "type": "string",
          "description": "The zoom and scroll behavior.",
          "displayName": "Zoom And Scroll",
          "help": "#zoomAndScroll",
          "enumValues": [
            "off",
            "live"
          ]
        },
        "valueFormats": {
          "type": "object",
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.",
          "displayName": "Value Formats",
          "help": "#valueFormats",
          "properties": {
            "group": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the group.",
              "properties": {
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "series": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the series.",
              "properties": {
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            },
            "value": {
              "type": "object",
              "description": "The object defining formatting and tooltip behavior for the value.",
              "properties": {
                "converter": {
                  "type": "object",
                  "description": "The converter to format the numerical value for the tooltip."
                },
                "tooltipLabel": {
                  "type": "string",
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "displayName": "Tooltip Label"
                },
                "tooltipDisplay": {
                  "type": "string",
                  "description": "Whether the value is displayed in the tooltip.",
                  "displayName": "Tooltip Display",
                  "propertyEditorValues": {
                    "off": {
                      "description": "The property will not be displayed in tooltip.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The property will be displayed in tooltip.",
                      "displayName": "On"
                    }
                  },
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                }
              }
            }
          }
        },
        "styleDefaults": {
          "type": "object",
          "description": "An object specifying default styles for chart style attributes..",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "groupSeparators": {
              "type": "object",
              "properties": {
                "rendered": {
                  "type": "string",
                  "description": "Whether the group separator lines are rendered.",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "color": {
                  "type": "string",
                  "description": "The color of the group separator lines.",
                  "format": "color"
                }
              }
            }
          }
        },
        "seriesComparator": {
          "type": "function",
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "displayName": "Series Comparator",
          "help": "#seriesComparator"
        },
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the line-chart.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "17.1.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "none": {
              "description": "No item can be selected.",
              "displayName": "None"
            },
            "single": {
              "description": "Single item can be selected.",
              "displayName": "Single"
            },
            "multiple": {
              "description": "Multiple items can be selected.",
              "displayName": "Multiple"
            }
          },
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<string|number>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        },
        "dragMode": {
          "type": "string",
          "description": "The action that is performed when a drag occurs on the chart.",
          "displayName": "Drag Mode",
          "help": "#dragMode",
          "enumValues": [
            "pan",
            "zoom",
            "select",
            "off",
            "user"
          ]
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of category strings used for filtering.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of category strings used for highlighting.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines the hide and show behavior that is performed when clicking on a leegnd item.",
          "displayName": "Hide and Show Behavior",
          "help": "#hideAndShowBehavior",
          "propertyEditorValues": {
            "withRescale": {
              "description": "Rescaling of y axis when items are hidden.",
              "displayName": "With Rescale"
            },
            "withoutRescale": {
              "description": "No rescaling of y axis when items are hidden.",
              "displayName": "Without Rescale"
            },
            "none": {
              "description": "No hide and show behavior.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "withoutRescale",
            "withRescale"
          ],
          "value": "none"
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Hovered items will be dimmed.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlighted property.",
          "displayName": "Highlight Match",
          "help": "#highlightMatch",
          "propertyEditorValues": {
            "any": {
              "description": "Any matching categories will be highlighted.",
              "displayName": "Dim"
            },
            "all": {
              "description": "Items only with all matching categories will be highlighted.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "all",
            "any"
          ],
          "value": "any"
        },
        "legend": {
          "type": "object",
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "displayName": "Legend",
          "help": "#legend",
          "properties": {
            "position": {
              "type": "string",
              "enumValues": [
                "auto",
                "end",
                "start",
                "top",
                "bottom"
              ],
              "value": "auto"
            },
            "rendered": {
              "type": "string",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "value": "on"
            },
            "maxSize": {
              "type": "number|string"
            },
            "size": {
              "type": "number|string"
            },
            "symbolHeight": {
              "type": "number"
            },
            "symbolWidth": {
              "type": "number"
            }
          }
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "accessibleLabel": {
              "type": "string"
            },
            "items": {
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "displayName": "seriesTemplate",
          "help": "#seriesTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "id": {
              "type": "string"
            },
            "index": {
              "type": "number"
            }
          }
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "displayName": "groupTemplate",
          "help": "#groupTemplate",
          "maxItems": 1,
          "data": {
            "items": {
              "type": "Array<object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "type": "any"
                    },
                    "key": {
                      "type": "any"
                    },
                    "index": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "ids": {
              "type": "Array<string>"
            },
            "index": {
              "type": "number"
            },
            "depth": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojItemDrill": {
          "description": "Triggered on a chart item (double click if selection is enabled, single click otherwise).",
          "displayName": "Item Drill",
          "help": "#event:ItemDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "data": {
              "type": "object",
              "description": "The data object of the drilled item.",
              "properties": {
                "id": {
                  "type": "any"
                },
                "seriesId": {
                  "type": "string",
                  "description": "The id for the series the item belongs to."
                },
                "groupId": {
                  "type": "Array<string>",
                  "description": "The array of ids for the groups the item belongs to"
                },
                "value": {
                  "type": "number",
                  "description": "The value of the data item."
                },
                "x": {
                  "type": "string",
                  "description": "The x value of the data item."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the data item."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers. Only applies to line, area, and scatter series."
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An optional array of category strings corresponding to this data item."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled for the data item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "shortDesc": {
                  "type": "string"
                }
              }
            },
            "itemData": {
              "type": "any",
              "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "description": "The line chart items belonging to this line series.",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any",
                          "displayName": "Id"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of ids for the groups the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The value of the data item.",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "x": {
                          "type": "string",
                          "description": "The x value of the data item.",
                          "displayName": "X",
                          "help": "#x"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "assignedToY2": {
                  "type": "string",
                  "description": "Defines whether the series is associated with the y2 axis",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The line style of the data line.",
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the data line."
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                },
                "groups": {
                  "type": "Array<object>"
                }
              }
            }
          }
        },
        "ojSeriesDrill": {
          "description": "Triggered on a chart series drill gesture (double click if selection is enabled, single click otherwise).",
          "displayName": "Series Drill",
          "help": "#event:SeriesDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "series": {
              "type": "any",
              "description": "The series id of the drilled object."
            },
            "seriesData": {
              "type": "object",
              "description": "The data for the series of the drilled object",
              "properties": {
                "items": {
                  "type": "Array<object>",
                  "description": "The line chart items belonging to this line series.",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "type": "any",
                          "displayName": "Id"
                        },
                        "seriesId": {
                          "type": "string",
                          "description": "The id for the series the item belongs to.",
                          "displayName": "Series Id",
                          "help": "#seriesId"
                        },
                        "groupId": {
                          "type": "Array<string>",
                          "description": "The array of ids for the groups the item belongs to",
                          "displayName": "Group Id",
                          "help": "#groupId"
                        },
                        "value": {
                          "type": "number",
                          "description": "The value of the data item.",
                          "displayName": "Value",
                          "help": "#value"
                        },
                        "x": {
                          "type": "string",
                          "description": "The x value of the data item.",
                          "displayName": "X",
                          "help": "#x"
                        },
                        "color": {
                          "type": "string",
                          "description": "The color of the data item.",
                          "displayName": "Color",
                          "help": "#color"
                        },
                        "markerDisplayed": {
                          "type": "string",
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Displayed",
                          "help": "#markerDisplayed",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ]
                        },
                        "markerShape": {
                          "type": "string",
                          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Marker Shape",
                          "help": "#markerShape",
                          "enumValues": [
                            "auto",
                            "square",
                            "circle",
                            "diamond",
                            "human",
                            "plus",
                            "star",
                            "triangleDown",
                            "triangleUp"
                          ]
                        },
                        "markerSize": {
                          "type": "number",
                          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                          "displayName": "Marker Size",
                          "help": "#markerSize"
                        },
                        "categories": {
                          "type": "Array<string>",
                          "description": "An optional array of category strings corresponding to this data item.",
                          "displayName": "Categories",
                          "help": "#categories"
                        },
                        "drilling": {
                          "type": "string",
                          "description": "Whether drilling is enabled for the data item.",
                          "displayName": "Drilling",
                          "help": "#drilling",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ]
                        },
                        "shortDesc": {
                          "type": "string",
                          "displayName": "Short Desc",
                          "help": "#shortDesc"
                        }
                      }
                    }
                  }
                },
                "assignedToY2": {
                  "type": "string",
                  "description": "Defines whether the series is associated with the y2 axis",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "categories": {
                  "type": "Array<string>",
                  "description": "An array of category strings corresponding to the tag cloud items."
                },
                "color": {
                  "type": "string",
                  "description": "The color of the series. The chart legend item will inherit this color value."
                },
                "drilling": {
                  "type": "string",
                  "description": "Whether drilling is enabled on the series item.",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineStyle": {
                  "type": "string",
                  "description": "The line style of the data line.",
                  "enumValues": [
                    "dashed",
                    "solid",
                    "dotted"
                  ]
                },
                "lineType": {
                  "type": "string",
                  "description": "The line type of the data line or area.",
                  "enumValues": [
                    "curved",
                    "straight"
                  ]
                },
                "lineWidth": {
                  "type": "number",
                  "description": "The width of the data line."
                },
                "markerShape": {
                  "type": "string",
                  "description": "The shape of the data markers.",
                  "enumValues": [
                    "auto",
                    "square",
                    "circle",
                    "diamond",
                    "human",
                    "plus",
                    "star",
                    "triangleDown",
                    "triangleUp"
                  ]
                },
                "markerColor": {
                  "type": "string",
                  "description": "The color of the data markers, if different from the series color."
                },
                "markerDisplayed": {
                  "type": "string",
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series."
                },
                "markerSize": {
                  "type": "number",
                  "description": "The size of the data markers."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the series, displayed in the legend and tooltips."
                },
                "shortDesc": {
                  "type": "string",
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series."
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any",
                      "displayName": "Id"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of ids for the groups the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The value of the data item.",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "x": {
                      "type": "string",
                      "description": "The x value of the data item.",
                      "displayName": "X",
                      "help": "#x"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojGroupDrill": {
          "description": "Triggered on a chart group drill gesture (double click if selection is enabled, single click otherwise).",
          "displayName": "Group Drill",
          "help": "#event:GroupDrill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled object."
            },
            "group": {
              "type": "any",
              "description": "The group id of the drilled object."
            },
            "groupData": {
              "type": "object",
              "description": "An array of data for the group the drilled object belongs to.",
              "properties": {
                "drilling": {
                  "type": "string",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accessibleLabel": {
                  "type": "string"
                },
                "groups": {
                  "type": "Array<object>"
                }
              }
            },
            "items": {
              "type": "Array<object>",
              "description": "An array containing objects describing the data items belonging to the drilled group.",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "type": "any",
                      "displayName": "Id"
                    },
                    "seriesId": {
                      "type": "string",
                      "description": "The id for the series the item belongs to.",
                      "displayName": "Series Id",
                      "help": "#seriesId"
                    },
                    "groupId": {
                      "type": "Array<string>",
                      "description": "The array of ids for the groups the item belongs to",
                      "displayName": "Group Id",
                      "help": "#groupId"
                    },
                    "value": {
                      "type": "number",
                      "description": "The value of the data item.",
                      "displayName": "Value",
                      "help": "#value"
                    },
                    "x": {
                      "type": "string",
                      "description": "The x value of the data item.",
                      "displayName": "X",
                      "help": "#x"
                    },
                    "color": {
                      "type": "string",
                      "description": "The color of the data item.",
                      "displayName": "Color",
                      "help": "#color"
                    },
                    "markerDisplayed": {
                      "type": "string",
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Displayed",
                      "help": "#markerDisplayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "type": "string",
                      "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Marker Shape",
                      "help": "#markerShape",
                      "enumValues": [
                        "auto",
                        "square",
                        "circle",
                        "diamond",
                        "human",
                        "plus",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ]
                    },
                    "markerSize": {
                      "type": "number",
                      "description": "The size of the data markers. Only applies to line, area, and scatter series.",
                      "displayName": "Marker Size",
                      "help": "#markerSize"
                    },
                    "categories": {
                      "type": "Array<string>",
                      "description": "An optional array of category strings corresponding to this data item.",
                      "displayName": "Categories",
                      "help": "#categories"
                    },
                    "drilling": {
                      "type": "string",
                      "description": "Whether drilling is enabled for the data item.",
                      "displayName": "Drilling",
                      "help": "#drilling",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "shortDesc": {
                      "type": "string",
                      "displayName": "Short Desc",
                      "help": "#shortDesc"
                    }
                  }
                }
              }
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "displayName": "Viewport Change",
          "help": "#event:ViewportChange",
          "detail": {
            "startGroup": {
              "type": "string",
              "description": "The start group of the new viewport on a chart with categorical axis."
            },
            "endGroup": {
              "type": "string",
              "description": "The end group of the new viewport on a chart with categorical axis."
            },
            "xMax": {
              "type": "number",
              "description": "The maximum x value of the new viewport."
            },
            "xMin": {
              "type": "number",
              "description": "The minimum x value of the new viewport."
            },
            "yMax": {
              "type": "number",
              "description": "The maximum y value of the new viewport."
            },
            "yMin": {
              "type": "number",
              "description": "The minimum y value of the new viewport."
            }
          }
        },
        "ojContextMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuAction",
          "help": "#event:ojContextMenuAction",
          "detail": {
            "menuItemKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object"
            }
          }
        },
        "ojContextMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuSelection",
          "help": "#event:ojContextMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "contextMenuContext": {
              "type": "object"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-item": {
      "name": "line-chart-item",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-item element is used to declare item properties",
      "displayName": "LineChartItem",
      "main": "oj-c/line-chart-item",
      "help": "oj-c.LineChartItem.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "seriesId": {
          "type": "string",
          "description": "The id for the series the item belongs to.",
          "displayName": "Series Id",
          "help": "#seriesId"
        },
        "groupId": {
          "type": "Array<string>",
          "description": "The array of ids for the groups the item belongs to",
          "displayName": "Group Id",
          "help": "#groupId"
        },
        "value": {
          "type": "number",
          "description": "The value of the data item.",
          "displayName": "Value",
          "help": "#value"
        },
        "x": {
          "type": "string",
          "description": "The x value of the data item.",
          "displayName": "X",
          "help": "#x"
        },
        "color": {
          "type": "string",
          "description": "The color of the data item.",
          "displayName": "Color",
          "help": "#color"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ]
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers. Only applies to line, area, and scatter series.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "categories": {
          "type": "Array<string>",
          "description": "An optional array of category strings corresponding to this data item.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled for the data item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ]
        },
        "shortDesc": {
          "type": "string",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-series": {
      "name": "line-chart-series",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartSeriesElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-series element is used to declare series properties in the seriesTemplate",
      "displayName": "LineChartSeries",
      "main": "oj-c/line-chart-series",
      "help": "oj-c.LineChartSeries.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "assignedToY2": {
          "type": "string",
          "description": "Defines whether the series is associated with the y2 axis",
          "displayName": "Assigned To Y2",
          "help": "#assignedToY2",
          "enumValues": [
            "off",
            "on"
          ]
        },
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "type": "string",
          "description": "The color of the series. The chart legend item will inherit this color value.",
          "displayName": "Color",
          "help": "#color"
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the series item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "value": "inherit"
        },
        "lineStyle": {
          "type": "string",
          "description": "The line style of the data line.",
          "displayName": "LineStyle",
          "help": "#lineStyle",
          "enumValues": [
            "dashed",
            "solid",
            "dotted"
          ]
        },
        "lineType": {
          "type": "string",
          "description": "The line type of the data line or area.",
          "displayName": "Line Type",
          "help": "#lineType",
          "enumValues": [
            "curved",
            "straight"
          ]
        },
        "lineWidth": {
          "type": "number",
          "description": "The width of the data line.",
          "displayName": "Line Width",
          "help": "#lineWidth"
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the data markers.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "enumValues": [
            "auto",
            "square",
            "circle",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp"
          ]
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the data markers, if different from the series color.",
          "displayName": "Marker Color",
          "help": "#markerColor"
        },
        "markerDisplayed": {
          "type": "string",
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series.",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed"
        },
        "markerSize": {
          "type": "number",
          "description": "The size of the data markers.",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "name": {
          "type": "string",
          "description": "The name of the series, displayed in the legend and tooltips.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-line-chart-group": {
      "name": "line-chart-group",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLineChartGroupElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-line-chart-group element is used to declare group properties in the groupTemplate",
      "displayName": "LineChartGroup",
      "main": "oj-c/line-chart-group",
      "help": "oj-c.LineChartGroup.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "16.0.0",
      "properties": {
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the group label.",
          "displayName": "Drilling",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "value": "inherit"
        },
        "name": {
          "type": "string",
          "description": "The name of the group.",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the group.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-list-item-layout": {
      "name": "list-item-layout",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CListItemLayoutElement"
      ],
      "description": "A List Item Layout represents layout used for list view item elements.",
      "displayName": "List Item Layout",
      "main": "oj-c/list-item-layout",
      "help": "oj-c.ListItemLayout.html",
      "status": [
        {
          "type": "supersedes",
          "since": "14.0.0",
          "value": [
            "oj-list-item-layout"
          ]
        }
      ],
      "extension": {
        "webelement": {
          "exceptionStatus": [
            {
              "type": "deprecated",
              "since": "16.0.0",
              "description": "Not accessible to WebDriverJS."
            }
          ],
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ListItemLayoutWebElement.html",
          "export": "findListItemLayout",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "14.0.0",
      "slots": {
        "": {
          "description": "The default slot accepts the primary data to be displayed.",
          "displayName": "Default",
          "help": "#default"
        },
        "overline": {
          "description": "The overline slot is for adding a overline text above the default slot.",
          "displayName": "Overline",
          "help": "#overline"
        },
        "selector": {
          "description": "The selector slot can accept a oj-selector component and is optional.",
          "displayName": "Selector",
          "help": "#selector"
        },
        "leading": {
          "description": "The leading slot is used for adding a leading visual next to the selector.",
          "displayName": "Leading",
          "help": "#leading"
        },
        "secondary": {
          "description": "The secondary slot is for adding a secondary text below the default text.",
          "displayName": "Secondary",
          "help": "#secondary"
        },
        "tertiary": {
          "description": "The tertiary slot is for adding a tertiary text below the secondary text.",
          "displayName": "Tertiary",
          "help": "#tertiary"
        },
        "metadata": {
          "description": "The metadata for adding extra trailing information. Examples of metadata are author, date etc.",
          "displayName": "Metadata",
          "help": "#metadata"
        },
        "trailing": {
          "description": "The trailing slot is used for adding a trailing visual.",
          "displayName": "Trailing",
          "help": "#trailing"
        },
        "action": {
          "description": "Action slot often uses a toolbar. In general, the action slot should display either one primary action or one or more secondary actions.",
          "displayName": "Action",
          "help": "#action"
        },
        "quaternary": {
          "description": "The quaternary slot is for adding a quaternary text below the tertiary text.",
          "displayName": "Quaternary",
          "help": "#quaternary"
        },
        "navigation": {
          "description": "The navigation slot is used for adding links below the trailing slot.",
          "displayName": "Navigation",
          "help": "#navigation"
        }
      },
      "properties": {
        "inset": {
          "type": "string",
          "description": "Controls padding around outside of list item layouts.",
          "displayName": "Inset",
          "help": "#inset",
          "enumValues": [
            "none",
            "listInset"
          ]
        },
        "verticalAlignment": {
          "type": "string",
          "description": "Default is 'middle' which vertically aligns layout content to center of the row.",
          "displayName": "verticalAlignment",
          "help": "#verticalAlignment",
          "enumValues": [
            "top",
            "middle"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-list-view": {
      "name": "list-view",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CListViewElement"
      ],
      "displayName": "List View",
      "description": "A list view displays data items as a list or a grid with highly interactive features.",
      "help": "oj-c.ListView.html",
      "main": "oj-c/list-view",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/list-view"
        },
        "oracle": {
          "icon": "oj-ux-ico-list",
          "uxSpecs": [
            "list-view"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ListViewWebElement.html",
          "export": "findListView",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selected"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "currentItem": {
          "type": "string|number",
          "description": "The key of the item that currently has keyboard focus",
          "displayName": "Current Item",
          "help": "#currentItem",
          "readOnly": true,
          "writeback": true
        },
        "currentItemOverride": {
          "type": "object",
          "description": "The key of the item that will have keyboard focus",
          "displayName": "Current Item Override",
          "help": "#currentItemOverride",
          "properties": {
            "rowKey": {
              "type": "string|number"
            }
          }
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for ListView.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          }
        },
        "gridlines": {
          "type": "object",
          "description": "Specifies whether the grid lines should be visible.",
          "displayName": "Gridlines",
          "help": "#gridlines",
          "properties": {
            "item": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            },
            "top": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            },
            "bottom": {
              "type": "string",
              "enumValues": [
                "hidden",
                "visible"
              ]
            }
          }
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number"
            },
            "scroller": {
              "type": "string"
            }
          }
        },
        "selected": {
          "type": "object",
          "description": "The selected property",
          "displayName": "Selected Items Changed",
          "help": "#selected",
          "writeback": true
        },
        "selectionMode": {
          "type": "string",
          "description": "Type of selection behavior for the ListView",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            },
            "singleRequired": {
              "description": "Only a single item can be selected at a time. In addition, ListView will also ensure that an item is selected at all time.",
              "displayName": "Single Required"
            },
            "multiple": {
              "description": "Multiple items can be selected at the same time with the 'replace' selection behavior. For example, clicking on an already selected item will not affect that item's selection, and clicking on a non-selected item will select that item and deselect any other previously selected items. In order to perform additive selections, users can click on selector checkboxes, use spacebar, or ctrl/cmd click on individual items to perform 'toggle' selection gestures.",
              "displayName": "Multiple"
            },
            "multipleToggle": {
              "description": "Multiple items can be selected at the same time with the 'toggle' selection behavior. For example, clicking on an already selected item will deselect that item, and clicking on any non-selected item will select that item without affecting any previously selected items.",
              "displayName": "MultipleToggle"
            }
          },
          "enumValues": [
            "none",
            "multiple",
            "single",
            "singleRequired",
            "multipleToggle"
          ],
          "value": "none"
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "accessibleLabel": {
              "type": "string"
            },
            "items": {
              "type": "function"
            }
          }
        },
        "reorderable": {
          "type": "object",
          "description": "Specify the item reordering functionality.",
          "displayName": "Reorderable",
          "help": "#reorderable",
          "properties": {
            "items": {
              "type": "string",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "value": "disabled"
            }
          }
        },
        "item": {
          "type": "object",
          "description": "The item option contains a subset of options for items.",
          "displayName": "Item",
          "help": "#item",
          "properties": {
            "padding": {
              "type": "string|object",
              "description": "It controls the padding around the list item",
              "displayName": "item.padding",
              "help": "#item.padding",
              "propertyEditorValues": {
                "disabled": {},
                "enabled": {}
              },
              "value": "disabled"
            },
            "enterKeyFocusBehavior": {
              "type": "string",
              "description": "It controls the focus behavior when enter key is pressed on an item",
              "displayName": "item.enterKeyFocusBehavior",
              "help": "#item.enterKeyFocusBehavior",
              "enumValues": [
                "none",
                "focusWithin"
              ],
              "value": "focusWithin"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "noData": {
          "description": "The noData slot is used to specify the content to show when there is no data. See the Help documentation for more information.",
          "displayName": "noData",
          "help": "#noData",
          "maxItems": 1,
          "templateSlotAlias": "noDataTemplate",
          "data": {}
        },
        "skeletonTemplate": {
          "description": "The skeletonTemplate slot is used to specify the template for rendering each skeleton while waiting for data during initial load as well as load more on scroll. See the Help documentation for more information.",
          "displayName": "skeletonTemplate",
          "help": "#skeletonTemplate",
          "maxItems": 1,
          "data": {
            "loadingStatus": {
              "type": "string"
            },
            "index": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojItemAction": {
          "description": "Triggered when user performs an action gesture on an item.",
          "displayName": "Item Action",
          "help": "#event:itemAction",
          "detail": {
            "context": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "item": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "any"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number"
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "any"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ojFirstSelectedItem": {
          "description": "Triggered when data for the first selected item is available.",
          "displayName": "First Selected Item",
          "help": "#event:firstSelectedItem",
          "detail": {
            "key": {
              "type": "string|number"
            },
            "data": {
              "type": "any"
            }
          }
        },
        "ojContextMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuAction",
          "help": "#event:ojContextMenuAction",
          "detail": {
            "menuItemKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "item": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "any"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number"
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "any"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ojContextMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuSelection",
          "help": "#event:ojContextMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "item": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "any"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number"
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "any"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ojReorder": {
          "description": "Triggered after items are reordered within ListView via drag and drop or keyboard.",
          "displayName": "Reorder",
          "help": "#event:reorder",
          "detail": {
            "reorderedKeys": {
              "type": "Array<string|number>"
            },
            "itemKeys": {
              "type": "Array<string|number>"
            },
            "referenceKey": {
              "type": "string|number|null"
            }
          }
        }
      },
      "methods": {
        "focus": {
          "description": "Place focus on the list.",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-split-menu-button": {
      "name": "split-menu-button",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSplitMenuButtonElement"
      ],
      "description": "A Split Menu Button combines a push button and menu button.",
      "displayName": "Split Menu Button",
      "help": "oj-c.SplitMenuButton.html",
      "main": "oj-c/split-menu-button",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/split-menu-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menu-button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SplitMenuButtonWebElement.html",
          "export": "findSplitMenuButton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "tooltip",
            "display",
            "chroming",
            "size",
            "width",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "items"
          ]
        }
      ],
      "since": "14.0.0",
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "displayName": "label",
          "help": "#label",
          "required": true,
          "translatable": true
        },
        "items": {
          "type": "Array<object>",
          "description": "Items describe the menu items rendered by the menu button.",
          "help": "#items",
          "extension": {
            "vbdt": {
              "pi": {
                "events": {
                  "suggestions": [
                    {
                      "type": "component",
                      "name": "ojMenuAction",
                      "mappings": [
                        {
                          "variableName": "menuItemKey",
                          "expression": "{{$event.detail.key}}",
                          "type": "string"
                        }
                      ]
                    }
                  ]
                }
              },
              "itemProperties": {
                "type": {
                  "description": "Specifies the type of the menu item.",
                  "type": "string",
                  "status": [
                    {
                      "type": "deprecated",
                      "target": "propertyValue",
                      "since": "17.0.0",
                      "value": [
                        "divider"
                      ],
                      "description": "Use 'separator' instead."
                    }
                  ],
                  "enumValues": [
                    "item",
                    "separator",
                    "divider"
                  ],
                  "propertyEditorValues": {
                    "item": {
                      "description": "A selectable menu item that triggers an action."
                    },
                    "separator": {
                      "description": "A non-selectable menu item that visibly separates menu items (no other properties apply)."
                    },
                    "divider": {
                      "description": "A divider that visibly separates menu items (deprecated)."
                    }
                  }
                },
                "label": {
                  "description": "Specifies the text to show for the menu item.",
                  "type": "string",
                  "required": true,
                  "translatable": true
                },
                "key": {
                  "description": "Specifes a key value associated with the menu item.",
                  "type": "string"
                },
                "disabled": {
                  "description": "Specifies whether the menu item should be disabled.",
                  "type": "boolean"
                },
                "onAction": {
                  "description": "A callback function invoked when the menu item is selected.",
                  "type": "function"
                },
                "startIcon": {
                  "description": "Specifies an icon to show at the start position of the menu item.",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enumValues": [
                        "class",
                        "img"
                      ]
                    },
                    "class": {
                      "type": "string"
                    },
                    "src": {
                      "type": "string"
                    }
                  }
                },
                "endIcon": {
                  "description": "Specifies an icon to show at the end position of the menu item.",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enumValues": [
                        "class",
                        "img"
                      ]
                    },
                    "class": {
                      "type": "string"
                    },
                    "src": {
                      "type": "string"
                    }
                  }
                },
                "variant": {
                  "description": "Specifies styling for the menu item based upon its associated action.",
                  "type": "string",
                  "enumValues": [
                    "standard",
                    "destructive"
                  ],
                  "propertyEditorValues": {
                    "standard": {
                      "description": "Styling for a standard menu item"
                    },
                    "destructive": {
                      "description": "Styling for a menu item associated with a non-reversible action"
                    }
                  }
                }
              }
            }
          },
          "value": []
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip.",
          "help": "#tooltip",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "help": "#width"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            }
          },
          "enumValues": [
            "solid",
            "outlined",
            "callToAction"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "events": {
        "ojMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events. Detail indicates which menu item was clicked.",
          "eventGroup": "common",
          "help": "#event:ojMenuAction",
          "detail": {
            "key": {
              "type": "string"
            }
          }
        },
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "help": "#event:action"
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "click": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selector": {
      "name": "selector",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectorElement"
      ],
      "description": "The selector component renders checkboxes in collections to support selection.",
      "displayName": "Selector",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/selector"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SelectorWebElement.html",
          "export": "findSelector",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "help": "oj-c.Selector.html",
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-selector"
          ]
        }
      ],
      "main": "oj-c/selector",
      "properties": {
        "rowKey": {
          "type": "string|number",
          "description": "Specifies the row key of each selector.",
          "displayName": "Row Key",
          "help": "#rowKey"
        },
        "selectedKeys": {
          "type": "object",
          "description": "Specifies the selectedKeys.",
          "displayName": "Selected Keys",
          "help": "#selectedKeys",
          "writeback": true
        },
        "indeterminate": {
          "type": "boolean",
          "description": "Visual only state to indicate partial selection",
          "displayName": "indeterminate",
          "help": "#indeterminate",
          "value": false
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selector-all": {
      "name": "selector-all",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectorAllElement"
      ],
      "description": "The selector all component renders a checkbox in collections to support selection.",
      "displayName": "SelectorAll",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/selectorAll"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SelectorAllWebElement.html",
          "export": "findSelectorAll",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "help": "oj-c.SelectorAll.html",
      "since": "15.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-selector"
          ]
        }
      ],
      "main": "oj-c/selector-all",
      "properties": {
        "selectedKeys": {
          "type": "object",
          "description": "Specifies the selectedKeys, should be hooked into the collection component.",
          "displayName": "Selected Keys",
          "help": "#selectedKeys",
          "required": true,
          "writeback": true
        },
        "showTooltip": {
          "type": "string",
          "description": "Specifies whether tooltip should be shown on the SelectorAll checkbox",
          "displayName": "Show Tooltip",
          "help": "#showTooltip",
          "enumValues": [
            "disabled",
            "enabled"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-date-text": {
      "name": "input-date-text",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputDateTextElement"
      ],
      "displayName": "InputDateText",
      "description": "An input date text allows the user to enter a date value.",
      "help": "oj-c.InputDateText.html",
      "main": "oj-c/input-date-text",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-date-text",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-date",
          "uxSpecs": [
            "input-date-text"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputDateTextWebElement.html",
          "export": "findInputDateText",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "15.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "autocomplete": {
          "type": "string",
          "description": "Dictates component's autocomplete state",
          "displayName": "Autocomplete",
          "help": "#autocomplete",
          "value": "on"
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "converter": {
          "type": "object|null",
          "description": "Specifies the converter instance.",
          "displayName": "Converter",
          "help": "#converter",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          },
          "properties": {
            "format": {
              "type": "function"
            },
            "parse": {
              "type": "function"
            }
          },
          "value": null
        },
        "dateRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail",
          "translatable": true
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "format": "date",
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "string",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the date field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the date field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-date-mask": {
      "name": "input-date-mask",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputDateMaskElement"
      ],
      "displayName": "InputDateMask",
      "description": "An input date mask field allows a user to individually edit, step, or spin the values of the month, day, and year fields of a calendar date.",
      "help": "oj-c.InputDateMask.html",
      "main": "oj-c/input-date-mask",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-date-mask",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-date",
          "uxSpecs": [
            "input-date-mask"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputDateMaskWebElement.html",
          "export": "findInputDateMask",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "dateRangeOverflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail",
          "translatable": true
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "string",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "format": "date",
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "object",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            },
            "day": {
              "type": "number"
            }
          },
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the date field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the date field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend": {
      "name": "legend",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendElement"
      ],
      "description": "A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.",
      "displayName": "Legend",
      "main": "oj-c/legend",
      "help": "oj-c.Legend.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/legend",
          "defaultColumns": 2,
          "minColumns": 1
        },
        "oracle": {
          "icon": "oj-ux-ico-legend",
          "uxSpecs": [
            "legend"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/LegendWebElement.html",
          "export": "findLegend",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "halign",
            "valign",
            "hoverBehavior",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "15.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the legend.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "17.1.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "drilling": {
          "type": "string",
          "description": "Specifies whether drilling is enabled.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "on": {
              "description": "Legend items will be drillable",
              "displayName": "On"
            },
            "off": {
              "description": "Legend items will not be drillable",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "halign": {
          "type": "string",
          "description": "Defines the horizontal alignment of the legend contents.",
          "displayName": "Halign",
          "help": "#halign",
          "propertyEditorValues": {
            "center": {
              "description": "Legend contents will be center aligned",
              "displayName": "Center"
            },
            "end": {
              "description": "Legend contents will be end aligned",
              "displayName": "End"
            },
            "start": {
              "description": "Legend contents will be start aligned",
              "displayName": "Start"
            }
          },
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "value": "start"
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be hidden.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "hideAndShowBehavior": {
          "type": "string",
          "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
          "displayName": "Hide And Show Behavior",
          "help": "#hideAndShowBehavior",
          "propertyEditorValues": {
            "on": {
              "description": "Legend can be used to initiate hide and show behavior on referenced data items.",
              "displayName": "On"
            },
            "off": {
              "description": "legend cannot be used to initiate hide and show behavior on referenced data items.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "off"
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be highlighted.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over a legend item.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "orientation": {
          "type": "string",
          "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
          "displayName": "Orientation",
          "help": "#orientation",
          "propertyEditorValues": {
            "horizontal": {
              "description": "Legend items will be horizontally placed in available space.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Legend items will be vertically stacked.",
              "displayName": "Vertical"
            }
          },
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "vertical"
        },
        "symbolHeight": {
          "type": "number",
          "description": "The height of the legend symbol in pixels.",
          "displayName": "Symbol Height",
          "help": "#symbolHeight",
          "value": 0
        },
        "symbolWidth": {
          "type": "number",
          "description": "The width of the legend symbol in pixels.",
          "displayName": "Symbol Width",
          "help": "#symbolWidth",
          "value": 0
        },
        "textStyle": {
          "type": "object",
          "description": "The CSS style object defining the style of the legend item text.",
          "displayName": "Text Style",
          "help": "#textStyle",
          "properties": {
            "color": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "fontSize": {
              "type": "string"
            },
            "fontStyle": {
              "type": "string"
            },
            "fontWeight": {
              "type": "string"
            },
            "textDecoration": {
              "type": "string"
            }
          }
        },
        "valign": {
          "type": "string",
          "description": "Defines the vertical alignment of the legend contents.",
          "displayName": "valign",
          "help": "#valign",
          "propertyEditorValues": {
            "middle": {
              "description": "The legend items will be middle aligned.",
              "displayName": "Middle"
            },
            "bottom": {
              "description": "The legend items will be bottom aligned.",
              "displayName": "Bottom"
            },
            "top": {
              "description": "The legend items will be top aligned.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "top",
            "bottom",
            "middle"
          ],
          "value": "top"
        },
        "sectionTitleStyle": {
          "type": "object",
          "description": "The CSS style object defining the style of the section titles' text.",
          "displayName": "Section Title Style",
          "help": "#sectionTitleStyle",
          "properties": {
            "color": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "fontSize": {
              "type": "string"
            },
            "fontStyle": {
              "type": "string"
            },
            "fontWeight": {
              "type": "string"
            },
            "textDecoration": {
              "type": "string"
            }
          }
        },
        "sectionTitleHalign": {
          "type": "string",
          "description": "The horizontal alignment of the section titles.",
          "displayName": "Section Title Halign",
          "help": "#sectionTitleHalign",
          "propertyEditorValues": {
            "center": {
              "description": "The section title will be center aligned.",
              "displayName": "Center"
            },
            "end": {
              "description": "The section title will be end aligned.",
              "displayName": "End"
            },
            "start": {
              "description": "The section title will be start aligned.",
              "displayName": "Start"
            }
          },
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "value": "start"
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "accessibleLabel": {
              "type": "string"
            },
            "items": {
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "preferredContent": [
            "CLegendItemElement"
          ],
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            },
            "parentData": {
              "type": "Array<any>"
            },
            "parentKey": {
              "type": "any"
            }
          }
        },
        "sectionTemplate": {
          "description": "The sectionTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "sectionTemplate",
          "help": "#sectionTemplate",
          "maxItems": 1,
          "preferredContent": [
            "CLegendSectionElement"
          ],
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (single click on the legend item).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "type": "any",
              "description": "The id of the drilled item."
            }
          }
        },
        "ojContextMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuAction",
          "help": "#event:ojContextMenuAction",
          "detail": {
            "menuItemKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object"
            }
          }
        },
        "ojContextMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuSelection",
          "help": "#event:ojContextMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "contextMenuContext": {
              "type": "object"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "_getPreferredSize": {
          "params": [
            {
              "name": "_width",
              "type": "number"
            },
            {
              "name": "_height",
              "type": "number"
            }
          ],
          "return": "object"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend-item": {
      "name": "legend-item",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-legend-item element is used to declare properties for legend items.",
      "displayName": "LegendItem",
      "main": "oj-c/legend-item",
      "help": "oj-c.LegendItem.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "15.0.0",
      "properties": {
        "text": {
          "type": "string",
          "description": "The legend item text.",
          "displayName": "Text",
          "help": "#text",
          "required": true,
          "translatable": true
        },
        "categories": {
          "type": "Array<string>",
          "description": "An array of categories for the legend item. Legend items currently only support a single category.",
          "displayName": "Categories",
          "help": "#categories",
          "value": []
        },
        "symbolType": {
          "type": "string",
          "description": "The type of legend symbol to display.",
          "displayName": "Symbol Type",
          "help": "#symbolType",
          "propertyEditorValues": {
            "line": {
              "description": "The legend symbol will be a line.",
              "displayName": "Line"
            },
            "lineWithMarker": {
              "description": "The legend symbol will be a line and a marker.",
              "displayName": "LineWithMarker"
            },
            "image": {
              "description": "The legend symbol will be an image.",
              "displayName": "Image"
            },
            "marker": {
              "description": "The legend symbol will be a marker.",
              "displayName": "Marker"
            }
          },
          "enumValues": [
            "marker",
            "image",
            "line",
            "lineWithMarker"
          ],
          "value": "marker"
        },
        "source": {
          "type": "string",
          "description": "The URI of the image of the legend symbol.",
          "displayName": "Source",
          "help": "#source"
        },
        "color": {
          "type": "string",
          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
          "displayName": "Color",
          "help": "#color"
        },
        "borderColor": {
          "type": "string",
          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker.",
          "displayName": "Border Color",
          "help": "#borderColor",
          "value": ""
        },
        "lineStyle": {
          "type": "string",
          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "displayName": "Line Style",
          "help": "#lineStyle",
          "propertyEditorValues": {
            "dotted": {
              "description": "Line will have dotted strokes.",
              "displayName": "Dotted"
            },
            "dashed": {
              "description": "Line will have dashed strokes.",
              "displayName": "Dashed"
            },
            "solid": {
              "description": "Line will have a solid stroke.",
              "displayName": "Solid"
            }
          },
          "enumValues": [
            "dashed",
            "solid",
            "dotted"
          ],
          "value": "solid"
        },
        "lineWidth": {
          "type": "number",
          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker.",
          "displayName": "Line Width",
          "help": "#lineWidth"
        },
        "markerShape": {
          "type": "string",
          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Does not apply if a custom image is specified.",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "propertyEditorValues": {
            "circle": {
              "description": "The marker will be of circular shape.",
              "displayName": "Circle"
            },
            "diamond": {
              "description": "The marker will be of diamond shape.",
              "displayName": "Diamond"
            },
            "ellipse": {
              "description": "The marker will be of ellipse shape.",
              "displayName": "Ellipse"
            },
            "human": {
              "description": "The marker will be of human shape.",
              "displayName": "Human"
            },
            "plus": {
              "description": "The marker will be of plus shape.",
              "displayName": "Plus"
            },
            "rectangle": {
              "description": "The marker will be of rectangular shape.",
              "displayName": "Rectangle"
            },
            "square": {
              "description": "The marker will be of square shape.",
              "displayName": "Square"
            },
            "star": {
              "description": "The marker will be of star shape.",
              "displayName": "Star"
            },
            "triangleDown": {
              "description": "The  marker will be of triangular shape facing down.",
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "description": "The  marker will be of triangular shape facing up.",
              "displayName": "Triangle Up"
            }
          },
          "enumValues": [
            "square",
            "circle",
            "ellipse",
            "diamond",
            "human",
            "plus",
            "star",
            "triangleDown",
            "triangleUp",
            "rectangle"
          ],
          "value": "square"
        },
        "markerColor": {
          "type": "string",
          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
          "displayName": "sections",
          "help": "#sections"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
          "displayName": "Short Desc",
          "help": "#shortDesc",
          "translatable": true
        },
        "drilling": {
          "type": "string",
          "description": "Whether drilling is enabled on the legend item.",
          "displayName": "Drilling",
          "help": "#drilling",
          "propertyEditorValues": {
            "inherit": {
              "description": "The drilling behavior is inherited from legend.",
              "displayName": "Inherit"
            },
            "off": {
              "description": "The legend item will not be drillable.",
              "displayName": "Off"
            },
            "on": {
              "description": "The legend item will be drillable.",
              "displayName": "On"
            }
          },
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "value": "inherit"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-legend-section": {
      "name": "legend-section",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLegendSectionElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-legend-section element is used to declare properties for legend sections.",
      "displayName": "LegendSection",
      "main": "oj-c/legend-section",
      "help": "oj-c.LegendSection.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "text"
          ]
        }
      ],
      "since": "15.0.0",
      "properties": {
        "text": {
          "type": "string",
          "description": "The title of the legend section.",
          "displayName": "Text",
          "help": "#text",
          "translatable": true,
          "value": ""
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-tag-cloud": {
      "name": "tag-cloud",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTagCloudElement"
      ],
      "description": "A tag cloud is an interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color.",
      "displayName": "Tag Cloud",
      "main": "oj-c/tag-cloud",
      "help": "oj-c.TagCloud.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        },
        "vbdt": {
          "module": "oj-c/tag-cloud",
          "defaultColumns": 12,
          "minColumns": 6
        },
        "oracle": {
          "icon": "oj-ux-ico-cloud-tag",
          "uxSpecs": [
            "tag-cloud"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TagCloudWebElement.html",
          "export": "findTagCloud",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "layout",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "since": "15.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby",
            "aria-describedby"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider|null",
          "description": "Specifies the DataProvider for the sections and items of the tag-cloud",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "17.1.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "datatip": {
          "type": "function",
          "displayName": "Datatip",
          "help": "#datatip"
        },
        "hiddenCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be hidden.",
          "displayName": "Hidden Categories",
          "help": "#hiddenCategories",
          "writeback": true,
          "value": []
        },
        "touchResponse": {
          "type": "string",
          "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
          "displayName": "Touch Response",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ]
        },
        "highlightMatch": {
          "type": "string",
          "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
          "displayName": "Highlight Match",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "value": "all"
        },
        "highlightedCategories": {
          "type": "Array<string>",
          "description": "An array of categories that will be highlighted.",
          "displayName": "Highlighted Categories",
          "help": "#highlightedCategories",
          "writeback": true,
          "value": []
        },
        "hoverBehavior": {
          "type": "string",
          "description": "Defines the behavior applied when hovering over data items.",
          "displayName": "Hover Behavior",
          "help": "#hoverBehavior",
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "dim"
          ],
          "value": "none"
        },
        "layout": {
          "type": "string",
          "description": "The layout to use for tag display.",
          "displayName": "Layout",
          "help": "#layout",
          "propertyEditorValues": {
            "cloud": {
              "description": "Items will be horizontally placed in available space.",
              "displayName": "Cloud"
            },
            "rectangular": {
              "description": "Items will be vertically stacked.",
              "displayName": "Rectangular"
            }
          },
          "enumValues": [
            "cloud",
            "rectangular"
          ],
          "value": "rectangular"
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "enumValues": [
            "none",
            "multiple",
            "single"
          ],
          "value": "none"
        },
        "selection": {
          "type": "Array<string|number>",
          "description": "An array containing the ids of the initially selected data items.",
          "displayName": "Selection",
          "help": "#selection",
          "writeback": true,
          "value": []
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "accessibleLabel": {
              "type": "string"
            },
            "items": {
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to map each data item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "key": {
              "type": "any"
            },
            "index": {
              "type": "number"
            }
          }
        }
      },
      "events": {
        "ojContextMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuAction",
          "help": "#event:ojContextMenuAction",
          "detail": {
            "menuItemKey": {
              "type": "string"
            },
            "contextMenuContext": {
              "type": "object"
            }
          }
        },
        "ojContextMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a select menu item is clicked, whether by keyboard, mouse, or touch events.",
          "eventGroup": "common",
          "displayName": "onOjContextMenuSelection",
          "help": "#event:ojContextMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "contextMenuContext": {
              "type": "object"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-tag-cloud-item": {
      "name": "tag-cloud-item",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTagCloudItemElement"
      ],
      "subcomponentType": "data",
      "description": "The oj-c-tag-cloud-item element is used to declare properties for tag cloud items",
      "displayName": "TagCloudItem",
      "main": "oj-c/tag-cloud-item",
      "help": "oj-c.TagCloudItem.html",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Visualizations"
        }
      },
      "since": "15.0.0",
      "properties": {
        "categories": {
          "type": "Array<string>",
          "description": "An array of category strings corresponding to the tag cloud items.",
          "displayName": "Categories",
          "help": "#categories",
          "value": []
        },
        "color": {
          "type": "string",
          "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.",
          "displayName": "Color",
          "help": "#color"
        },
        "label": {
          "type": "string",
          "description": "The text of the item.",
          "displayName": "Label",
          "help": "#label"
        },
        "value": {
          "type": "number|null",
          "description": "The value of this item is used to scale its font size within the tag cloud.",
          "displayName": "Value",
          "help": "#value"
        },
        "url": {
          "type": "string",
          "description": "The url this item references.",
          "displayName": "Url",
          "help": "#url"
        },
        "shortDesc": {
          "type": "string",
          "description": "The description of the item. This is used for customizing the tooltip text.",
          "displayName": "ShortDesc",
          "help": "#shortDesc"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-message-banner": {
      "name": "message-banner",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMessageBannerElement"
      ],
      "description": "Message Banners are brief, moderately disruptive, semi-permanent messages that help communicate relevant and useful information.",
      "displayName": "Message Banner",
      "main": "oj-c/message-banner",
      "help": "oj-c.MessageBanner.html",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "oracle": {
          "icon": "oj-ux-ico-message-banner",
          "uxSpecs": [
            "bannerMessages"
          ]
        },
        "vbdt": {
          "defaultColumns": 2,
          "minColumns": 1,
          "module": "oj-c/message-banner"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/MessageBannerWebElement.html",
          "export": "findMessageBanner",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "since": "16.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-messages",
            "oj-message-banner"
          ]
        }
      ],
      "properties": {
        "data": {
          "type": "DataProvider",
          "description": "Data for the Message Banner component.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The type of the Banner message.",
          "displayName": "Type",
          "help": "#type",
          "propertyEditorValues": {
            "page": {
              "description": "Renders the messages as edge-to-edge messages with no gap in between them.",
              "displayName": "Page"
            },
            "section": {
              "description": "Renders the messages as section messages - with rounded corners, outline and gap between messages.",
              "displayName": "Section"
            }
          },
          "enumValues": [
            "page",
            "section"
          ],
          "value": "section"
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "The function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageBannerTemplateContext",
          "templateSlotAlias": "detailTemplate"
        },
        "sorting": {
          "type": "string",
          "description": "Specifies how to sort the messages from the dataprovider.",
          "displayName": "Sorting",
          "help": "#sorting",
          "propertyEditorValues": {
            "severity": {
              "description": "Sort the messages in the decreasing order of severity: error, warning, info, confirmation, and none. Then sort the messages of the same severity in reverse chronological order using the timestamp property.",
              "displayName": "Severity"
            },
            "off": {
              "description": "Messages appear in the order they are supplied with no additional sorting.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "severity"
          ],
          "value": "severity"
        }
      },
      "dynamicSlots": {
        "MessageBannerTemplateContext": {
          "description": "The dynamic template slots for the Banner message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "object",
              "properties": {
                "closeAffordance": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string"
                },
                "sound": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string"
                }
              }
            },
            "key": {
              "type": "string|number"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string|number"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "string|number"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "object",
              "description": "The data that was used to render the message.",
              "properties": {
                "closeAffordance": {
                  "type": "string",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "none",
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                },
                "sound": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string"
                }
              }
            },
            "key": {
              "type": "string|number",
              "description": "The key for the message."
            },
            "metadata": {
              "type": "object",
              "description": "The metadata of the message.",
              "properties": {
                "indexFromParent": {
                  "type": "number"
                },
                "isLeaf": {
                  "type": "boolean"
                },
                "key": {
                  "type": "string|number"
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string|number"
                    },
                    "summary": {
                      "type": "string"
                    }
                  }
                },
                "parentKey": {
                  "type": "string|number"
                },
                "suggestion": {
                  "type": "object"
                },
                "treeDepth": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-radioset": {
      "name": "radioset",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRadiosetElement"
      ],
      "description": "A radio set allows the user to select one option from a set of mutually exclusive options.",
      "displayName": "Radioset",
      "help": "oj-c.Radioset.html",
      "main": "oj-c/radioset",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-radioset"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/radioset"
        },
        "oracle": {
          "icon": "oj-ux-ico-radioset",
          "uxSpecs": [
            "radioset"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/RadiosetWebElement.html",
          "export": "findRadioset",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "direction",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "options",
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint",
            "options"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "direction": {
          "type": "string",
          "description": "Layout direction of the radioset radio elements.",
          "displayName": "Direction",
          "help": "#direction",
          "enumValues": [
            "row",
            "column"
          ],
          "value": "column"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not the auxiliary content should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component relative to the field.",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the radioset, but is smaller than the 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The radioset will not create a label, but instead will set the aria-label property on the radioset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the radioset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the radioset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "options": {
          "type": "Array<object>|DataProvider",
          "description": "The data provided to the radioset that represents one or more radio items.",
          "displayName": "Options",
          "help": "#options"
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly or not.",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "value": {
          "type": "string|number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the radioset.",
          "return": "void"
        },
        "focus": {
          "description": "Sets focus on the selected radio button or the first tabbable radio button.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-action-card": {
      "name": "action-card",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CActionCardElement"
      ],
      "description": "An Action Card is an actionable container rendering related information",
      "displayName": "Action Card",
      "help": "oj-c.ActionCard.html",
      "main": "oj-c/action-card",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "oracle": {
          "icon": "oj-ux-ico-object-card",
          "uxSpecs": [
            "card"
          ]
        },
        "vbdt": {
          "module": "oj-c/action-card",
          "defaultColumns": 1,
          "minColumns": 1
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ActionCardWebElement.html",
          "export": "findActionCard",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the card.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a card is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click is to listen for this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "click": {
          "return": "any"
        },
        "blur": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-selection-card": {
      "name": "selection-card",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSelectionCardElement"
      ],
      "description": "A Selection Card is a container that can be set as selected with a collection",
      "displayName": "Selection Card",
      "status": [
        {
          "type": "production",
          "since": "19.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "oracle": {
          "icon": "oj-ux-ico-object-card",
          "uxSpecs": [
            "card"
          ]
        },
        "vbdt": {
          "module": "oj-c/selection-card",
          "defaultColumns": 1,
          "minColumns": 1
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SelectionCardWebElement.html",
          "export": "findSelectionCard",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "16.0.0",
      "main": "oj-c/selection-card",
      "slots": {
        "": {
          "description": "The default slot is the content of the card.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "Boolean that marks this card as selected.",
          "displayName": "Selected",
          "help": "#selected"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-checkbox": {
      "name": "checkbox",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCheckboxElement"
      ],
      "displayName": "Checkbox",
      "description": "Checkbox is a single standalone checkbox control. It represents a boolean value.",
      "help": "oj-c.Checkbox.html",
      "main": "oj-c/checkbox",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/checkbox",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-on",
          "uxSpecs": [
            "checkbox"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/CheckboxWebElement.html",
          "export": "findCheckbox",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "slots": [
            ""
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content associated with the checkbox. This can be a label or a block of text.",
          "displayName": "Default",
          "help": "#default"
        }
      },
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages and required are shown inline under the field with no reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages and required are shown inline under the field with reserved space. Help & hints will appear in a popup with a help icon.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "boolean",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": false
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the input field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the input field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-checkboxset": {
      "name": "checkboxset",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCheckboxsetElement"
      ],
      "displayName": "Checkboxset",
      "description": "A checkbox set allows the user to select one or more options from a set.",
      "help": "oj-c.Checkboxset.html",
      "main": "oj-c/checkboxset",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-checkboxset"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/checkboxset",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-on",
          "uxSpecs": [
            "checkboxset"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/CheckboxsetWebElement.html",
          "export": "findCheckboxset",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint",
            "options"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "direction": {
          "type": "string",
          "description": "Layout direction of the checkbox elements.",
          "displayName": "Direction",
          "help": "#direction",
          "enumValues": [
            "row",
            "column"
          ],
          "value": "column"
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the checkboxset, but is smaller than 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The checkboxset will not create a label, but instead set the aria-label property on the checkboxset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the checkboxset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the checkboxset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "options": {
          "type": "Array<object>|DataProvider",
          "description": "An array of data items or a data provider that returns the option items for the Checkboxset.",
          "displayName": "Options",
          "help": "#options"
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "Array<string|number>|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the checkboxset.",
          "return": "void"
        },
        "focus": {
          "description": "Sets focus on the first tabbable checkbox.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-popup": {
      "name": "popup",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CPopupElement"
      ],
      "description": "A popup temporarily 'pops up' content in the foreground.",
      "displayName": "Popup",
      "help": "oj-c.Popup.html",
      "main": "oj-c/popup",
      "status": [
        {
          "type": "supersedes",
          "since": "19.0.0",
          "value": [
            "oj-popup"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/popup"
        },
        "oracle": {
          "icon": "oj-ux-ico-popup",
          "uxSpecs": [
            "popup"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/PopupWebElement.html",
          "export": "findPopup",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "opened",
            "anchor",
            "launcher",
            "placement",
            "collision",
            "modality",
            "offset",
            "initialFocus",
            "autoDismiss",
            "tail",
            "onOpenedChanged",
            "onOjOpen",
            "onOjBeforeClose",
            "onOjClose",
            "onOjFocus",
            "width",
            "minWidth",
            "maxWidth",
            "height",
            "minHeight",
            "maxHeight"
          ]
        }
      ],
      "since": "17.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the Popup.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "properties": {
        "opened": {
          "type": "boolean",
          "description": "Specifies whether the Popup is open.",
          "displayName": "Opened",
          "help": "#opened",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "getterOnly"
                }
              ]
            }
          },
          "writeback": true,
          "value": false
        },
        "launcher": {
          "type": "string|Element",
          "description": "Specifies Popup's launcher. After Popup closes, it returns focus to the launcher.",
          "displayName": "Launcher",
          "help": "#launcher"
        },
        "anchor": {
          "type": "string|Element|object",
          "description": "Specifies Popup's anchor. Popup is placed relative to its anchor.",
          "displayName": "Anchor",
          "help": "#anchor"
        },
        "placement": {
          "type": "string",
          "description": "Specifies the location the popup will appear relative to another element.",
          "displayName": "Placement",
          "help": "#placement",
          "enumValues": [
            "center",
            "end",
            "start",
            "top",
            "bottom",
            "top-start",
            "top-end",
            "top-start-corner",
            "top-end-corner",
            "start-top",
            "start-bottom",
            "start-top-corner",
            "start-bottom-corner",
            "bottom-start",
            "bottom-end",
            "bottom-start-corner",
            "bottom-end-corner",
            "end-top",
            "end-bottom",
            "end-top-corner",
            "end-bottom-corner"
          ]
        },
        "modality": {
          "type": "string",
          "description": "Specifies modality of the Popup.",
          "displayName": "Modality",
          "help": "#modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "value": "modeless"
        },
        "autoDismiss": {
          "type": "string",
          "description": "Specifies the auto dismissal behavior.",
          "displayName": "Auto Dismiss",
          "help": "#autoDismiss",
          "enumValues": [
            "none",
            "focusLoss"
          ],
          "value": "focusLoss"
        },
        "tail": {
          "type": "string",
          "description": "Specifies Popup's tail. Simple tail is an arrow pointing to Popup's anchor.",
          "displayName": "Tail",
          "help": "#tail",
          "enumValues": [
            "none",
            "simple"
          ],
          "value": "none"
        },
        "variant": {
          "type": "string",
          "description": "Specifies Popup's style variant.",
          "displayName": "Variant",
          "help": "#variant",
          "enumValues": [
            "standard",
            "unstyled"
          ],
          "value": "standard"
        },
        "initialFocus": {
          "type": "string",
          "description": "Specifies if the Popup sets focus to its content when initially open.",
          "displayName": "Initial Focus",
          "help": "#initialFocus",
          "enumValues": [
            "auto",
            "none",
            "popup",
            "firstFocusable"
          ],
          "value": "auto"
        },
        "offset": {
          "type": "object",
          "description": "Specifies displacement of the Popup from the anchor element along the specified axes.",
          "displayName": "Offset",
          "help": "#offset",
          "properties": {
            "x": {
              "type": "number"
            },
            "y": {
              "type": "number"
            }
          }
        },
        "collision": {
          "type": "string",
          "description": "Specifies rule for alternate placement alignment.",
          "displayName": "Collision",
          "help": "#collision",
          "enumValues": [
            "none",
            "flip",
            "fit",
            "flipfit",
            "flipcenter"
          ],
          "value": "fit"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies width of the Popup content.",
          "displayName": "Width",
          "help": "#width"
        },
        "minWidth": {
          "type": "number|string",
          "description": "Specifies minWidth of the Popup content.",
          "displayName": "Min Width",
          "help": "#minWidth"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "Specifies maxWidth of the Popup content.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "value": "calc(100vw - 3rem)"
        },
        "height": {
          "type": "number|string",
          "description": "Specifies height of the Popup content.",
          "displayName": "Height",
          "help": "#height"
        },
        "minHeight": {
          "type": "number|string",
          "description": "Specifies minHeight of the Popup content.",
          "displayName": "Min Height",
          "help": "#minHeight"
        },
        "maxHeight": {
          "type": "number|string",
          "description": "Specifies maxHeight of the Popup content.",
          "displayName": "Max Height",
          "help": "#maxHeight",
          "value": "calc(100vh - 3rem)"
        },
        "backgroundColor": {
          "type": "string",
          "description": "Specifies background color of the Popup.",
          "displayName": "Background Color",
          "help": "#backgroundColor"
        }
      },
      "events": {
        "ojOpen": {
          "description": "Triggered immediately after the popup opens.",
          "displayName": "ojOpen",
          "help": "#event:open"
        },
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the popup closes.",
          "displayName": "ojBeforeClose",
          "help": "#event:beforeClose",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "reason": {
              "type": "string",
              "description": "reason for closing the popup",
              "enumValues": [
                "outsideClick",
                "escapeKey",
                "closeSkipLink"
              ]
            }
          }
        },
        "ojClose": {
          "description": "Triggered immediately after the popup closes.",
          "displayName": "ojClose",
          "help": "#event:close"
        },
        "ojFocus": {
          "description": "Triggered immediately after the popup receives focus.",
          "displayName": "ojFocus",
          "help": "#event:onOjFocus"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-drawer-popup": {
      "name": "drawer-popup",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDrawerPopupElement"
      ],
      "description": "A Drawer Popup is a panel that slides into the viewport.",
      "displayName": "Drawer Popup",
      "help": "oj-c.DrawerPopup.html",
      "main": "oj-c/drawer-popup",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-drawer-popup"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/drawer-popup",
          "pi": {
            "layouts": {
              "general": {
                "customizers": [
                  {
                    "propertyName": "closeGesture",
                    "type": "enumeration"
                  },
                  {
                    "propertyName": "autoDismiss",
                    "type": "enumeration"
                  },
                  {
                    "propertyName": "edge",
                    "type": "enumeration"
                  },
                  {
                    "propertyName": "modality",
                    "type": "enumeration"
                  },
                  {
                    "propertyName": "opened"
                  }
                ]
              }
            }
          }
        },
        "oracle": {
          "icon": "oj-ux-ico-drawer",
          "uxSpecs": [
            "drawer"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DrawerPopupWebElement.html",
          "export": "findDrawerPopup",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the Drawer Popup.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "properties": {
        "opened": {
          "type": "boolean",
          "description": "Specifies whether the Drawer is open.",
          "displayName": "Opened",
          "help": "#opened",
          "extension": {
            "vbdt": {
              "temporaryOverride": {}
            }
          },
          "writeback": true,
          "value": false
        },
        "modality": {
          "type": "string",
          "description": "Controls the modality of the drawer.",
          "displayName": "Modality",
          "help": "#modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "value": "modal"
        },
        "edge": {
          "type": "string",
          "description": "Specifies at what edge the drawer opens.",
          "displayName": "Edge",
          "help": "#edge",
          "enumValues": [
            "end",
            "start",
            "bottom"
          ],
          "value": "start"
        },
        "autoDismiss": {
          "type": "string",
          "description": "Specifies the close auto-dismiss behaviour to close the drawer.",
          "displayName": "Auto Dismiss",
          "help": "#autoDismiss",
          "enumValues": [
            "none",
            "focus-loss"
          ],
          "value": "focus-loss"
        },
        "closeGesture": {
          "type": "string",
          "description": "Specifies whether a gesture closes the drawer.",
          "displayName": "Close Gesture",
          "help": "#closeGesture",
          "enumValues": [
            "none",
            "swipe"
          ],
          "value": "swipe"
        },
        "backgroundColor": {
          "type": "string",
          "description": "Specifies background color of the Drawer.",
          "displayName": "Background Color",
          "help": "#backgroundColor"
        }
      },
      "events": {
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the drawer closes",
          "displayName": "ojBeforeClose",
          "help": "#event:beforeClose",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "reason": {
              "type": "string",
              "enumValues": [
                "outsideClick",
                "escapeKey",
                "swipe"
              ]
            }
          }
        },
        "ojClose": {
          "description": "Triggered immediately after the drawer closes",
          "displayName": "ojClose",
          "help": "#event:close"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-drawer-layout": {
      "name": "drawer-layout",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDrawerLayoutElement"
      ],
      "description": "A Drawer Layout adds expandable side contents (drawers) alongside some primary content.",
      "displayName": "Drawer Layout",
      "help": "oj-c.DrawerLayout.html",
      "main": "oj-c/drawer-layout",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-drawer-layout"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/drawer-layout"
        },
        "oracle": {
          "icon": "oj-ux-ico-drawer",
          "uxSpecs": [
            "drawer"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DrawerLayoutWebElement.html",
          "export": "findDrawerLayout",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "startOpened",
            "endOpened",
            "bottomOpened",
            "startDisplay",
            "endDisplay",
            "bottomDisplay"
          ]
        }
      ],
      "since": "17.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the Drawer Popup.",
          "displayName": "default",
          "help": "#Default"
        },
        "start": {},
        "end": {},
        "bottom": {}
      },
      "properties": {
        "startOpened": {
          "type": "boolean",
          "description": "Specifies whether the Drawer is open.",
          "displayName": "Start Opened",
          "help": "#startOpened",
          "writeback": true,
          "value": false
        },
        "endOpened": {
          "type": "boolean",
          "description": "Specifies whether the Drawer is open.",
          "displayName": "End Opened",
          "help": "#endOpened",
          "writeback": true,
          "value": false
        },
        "bottomOpened": {
          "type": "boolean",
          "description": "Specifies whether the Drawer is open.",
          "displayName": "Bottom Opened",
          "help": "#bottomOpened",
          "writeback": true,
          "value": false
        },
        "startDisplay": {
          "type": "string",
          "description": "Specifies display mode of the Start drawer.",
          "displayName": "Start Display",
          "help": "#startDisplay",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        },
        "endDisplay": {
          "type": "string",
          "description": "Specifies display mode of the End drawer.",
          "displayName": "End Display",
          "help": "#endDisplay",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        },
        "bottomDisplay": {
          "type": "string",
          "description": "Specifies display mode of the Start drawer.",
          "displayName": "Bottom Display",
          "help": "#bottomDisplay",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        }
      },
      "events": {
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the drawer closes",
          "displayName": "ojBeforeclose",
          "help": "#event:beforeClose",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "edge": {
              "type": "string",
              "description": "edge from which the drawer slides into the layout.",
              "enumValues": [
                "end",
                "start",
                "bottom"
              ]
            },
            "reason": {
              "type": "string",
              "description": "reason for closing the drawer",
              "enumValues": [
                "escapeKey"
              ]
            }
          }
        },
        "ojClose": {
          "description": "Triggered immediately after the drawer closes",
          "displayName": "ojClose",
          "help": "#event:close",
          "detail": {
            "edge": {
              "type": "string",
              "description": "edge from which the drawer slides into the layout.",
              "enumValues": [
                "end",
                "start",
                "bottom"
              ]
            },
            "value": {
              "type": "boolean",
              "description": "opened value"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-form-layout": {
      "name": "form-layout",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CFormLayoutElement"
      ],
      "displayName": "Form Layout",
      "description": "A form layout manages the layout of labels and fields in a form.",
      "help": "oj-c.FormLayout.html",
      "main": "oj-c/form-layout",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/form-layout",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-form-layout",
          "uxSpecs": [
            "form-layout"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/FormLayoutWebElement.html",
          "export": "findFormLayout",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "columns",
            "columnSpan",
            "direction",
            "labelEdge",
            "labelStartWidth",
            "labelWrapping",
            "maxColumns",
            "readonly",
            "userAssistanceDensity"
          ]
        }
      ],
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "slots": [
            ""
          ]
        }
      ],
      "since": "16.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the form layout. The oj-c-form-layout element expects core pack form component children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "properties": {
        "columns": {
          "type": "number",
          "description": "Specifies how many columns should be displayed (fixed). If positive, overrides maxColumns.",
          "displayName": "Columns",
          "help": "#columns",
          "value": 0
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span when this it is a child of a form layout.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "direction": {
          "type": "string",
          "description": "Specifies the layout direction of the form layout children.",
          "displayName": "Direction",
          "help": "#direction",
          "propertyEditorValues": {
            "column": {
              "description": "Components are laid out in columns.",
              "displayName": "Column"
            },
            "row": {
              "description": "Components are laid out in rows.",
              "displayName": "Row"
            }
          },
          "enumValues": [
            "row",
            "column"
          ],
          "value": "row"
        },
        "fullWidth": {
          "type": "boolean",
          "description": "Indicates if the form layout will use 100% of the container's width.",
          "displayName": "Full Width",
          "help": "#fullWidth",
          "value": false
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the child form components should position their labels.",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            },
            "provide": [
              {
                "name": "containerLabelEdge"
              },
              {
                "name": "labelEdge"
              }
            ]
          }
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            },
            "provide": [
              {
                "name": "labelStartWidth"
              },
              {
                "name": "labelWidth"
              }
            ]
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            },
            "provide": [
              {
                "name": "labelWrapping"
              }
            ]
          }
        },
        "maxColumns": {
          "type": "number",
          "description": "Specifies how many columns should be displayed (responsive). This prop is ignored if columns has a positive value.",
          "displayName": "Max Columns",
          "help": "#maxColumns",
          "value": 1
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the child components should be rendered as readonly.",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            },
            "provide": [
              {
                "name": "containerReadonly",
                "default": false
              },
              {
                "name": "readonly"
              }
            ]
          }
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the children form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            },
            "provide": [
              {
                "name": "containerUserAssistanceDensity",
                "default": "efficient"
              },
              {
                "name": "userAssistanceDensity",
                "default": "efficient"
              }
            ]
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-labelled-link": {
      "name": "labelled-link",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CLabelledLinkElement"
      ],
      "displayName": "LabelledLink",
      "description": "The Labelled Link component displays a readonly field that has a link for its content.",
      "help": "oj-c.LabelledLink.html",
      "main": "oj-c/labelled-link",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/labelled-link",
          "defaultColumns": 6,
          "minColumns": 2,
          "componentPalette": {
            "visibility": "never"
          }
        },
        "oracle": {
          "icon": "oj-ux-ico-link",
          "uxSpecs": [
            "input-text"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/LabelledLinkWebElement.html",
          "export": "findLabelledLink",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "textAlign"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "href",
            "target",
            "text"
          ]
        }
      ],
      "since": "16.0.0",
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan"
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "href": {
          "type": "string",
          "description": "Sets the URL that the link points to.",
          "displayName": "Href",
          "help": "#href"
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed inside the component and above the link (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-labelledby property on the anchor element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "target": {
          "type": "string",
          "description": "Sets the target attribute of the link.",
          "displayName": "Target",
          "help": "#target"
        },
        "text": {
          "type": "string",
          "description": "Specifies the text that should appear in the field.",
          "displayName": "Text",
          "help": "#text"
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "unsafe_labelledBy": {
          "type": "string"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "The field will not reserve any space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "The field will reserve space to prevent reflow.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "The field will not reserve any space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when the link is clicked, whether by keyboard, mouse, or touch events. This event is triggered only when the href is not provided. If the href is provided, clicking the link will not trigger this event.",
          "eventGroup": "common",
          "displayName": "onOjAction",
          "help": "#event:action"
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the link.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the link.",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-menu-button": {
      "name": "menu-button",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CMenuButtonElement"
      ],
      "description": "A menu button launches a menu when clicked.",
      "displayName": "Menu Button",
      "help": "oj-c.MenuButton.html",
      "main": "oj-c/menu-button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/menu-button",
          "pi": {
            "events": {
              "suggestions": [
                {
                  "type": "component",
                  "name": "ojMenuAction",
                  "mappings": [
                    {
                      "variableName": "menuItemKey",
                      "expression": "{{$event.detail.key}}",
                      "type": "string"
                    }
                  ]
                },
                {
                  "type": "component",
                  "name": "onOjMenuSelection",
                  "mappings": [
                    {
                      "variableName": "menuSelectionValue",
                      "expression": "{{$event.detail.value}}",
                      "type": "string"
                    },
                    {
                      "variableName": "menuSelectionGroupKey",
                      "expression": "{{$event.detail.menuSelectionGroupKey}}",
                      "type": "string"
                    }
                  ]
                }
              ]
            }
          }
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menu-button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/MenuButtonWebElement.html",
          "export": "findMenuButton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "16.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "16.0.0",
          "value": [
            "oj-menu-button",
            "oj-menu-select-many"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "help": "#label",
          "required": true,
          "translatable": true,
          "value": ""
        },
        "suffix": {
          "type": "string",
          "description": "Suffix appended to menu label to indicate last selection.",
          "help": "#label",
          "translatable": true
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "help": "#tooltip",
          "translatable": true
        },
        "items": {
          "type": "Array<object>",
          "description": "Items describe the menu items rendered by the menu button.",
          "help": "#items",
          "value": []
        },
        "selection": {
          "type": "object",
          "description": "An array containing key/value objects for menu selection groups.",
          "help": "#selection",
          "extension": {
            "vbdt": {
              "keyedProperties": {
                "keys": {
                  "type": "string"
                },
                "values": {
                  "type": "string|Array<string>"
                }
              }
            }
          },
          "writeback": true
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "disabled",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "help": "#size",
          "propertyEditorValues": {
            "xs": {
              "description": "Display an extra small button.  Only supported for component developers with ghost chroming in icon display mode.",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg",
            "xs"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "displayName": "width",
          "help": "#width"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "displayName": "chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "ghost": {
              "description": "Ghost buttons are the least prominent variation. Ghost buttons are useful for performing low-priority tasks, such as manipulating the UI.",
              "displayName": "Ghost"
            },
            "borderless": {
              "description": "Borderless buttons are a more prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            }
          },
          "enumValues": [
            "solid",
            "borderless",
            "outlined",
            "ghost"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-menu-button element accepts DOM nodes as children with the startIcon slot.",
          "displayName": "startIcon",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-menu-button element accepts DOM nodes as children with the endIcon slot.",
          "help": "#endIcon"
        }
      },
      "events": {
        "ojMenuAction": {
          "bubbles": true,
          "description": "Triggered when a menu item is clicked, whether by keyboard, mouse, or touch events. Detail indicates which menu item was clicked.",
          "eventGroup": "common",
          "help": "#event:ojMenuAction",
          "detail": {
            "key": {
              "type": "string"
            }
          }
        },
        "ojMenuSelection": {
          "bubbles": true,
          "description": "Triggered when a menu selection group item is clicked, whether by keyboard, mouse, or touch events. Detail indicates new selection value for group.",
          "eventGroup": "common",
          "help": "#event:ojMenuSelection",
          "detail": {
            "value": {
              "type": "string|Array<string>"
            },
            "menuSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "click": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-month-mask": {
      "name": "input-month-mask",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputMonthMaskElement"
      ],
      "displayName": "InputMonthMask",
      "description": "An input month mask field allows a user to individually edit, step, or spin the values of the month and year fields.",
      "help": "oj-c.InputMonthMask.html",
      "main": "oj-c/input-month-mask",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-month-mask",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-date",
          "uxSpecs": [
            "input-month-mask"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputMonthMaskWebElement.html",
          "export": "findInputMonthMask",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "16.1.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "dateRangeOverflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail"
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "object|null",
          "description": "The maximum selectable year and month",
          "displayName": "Max",
          "help": "#max",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            }
          }
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "object|null",
          "description": "The minimum selectable year and month",
          "displayName": "Min",
          "help": "#min",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            }
          }
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "object|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            }
          },
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "object",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            }
          },
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-tab-bar": {
      "name": "tab-bar",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTabBarElement"
      ],
      "description": "A tab bar allows navigation between different content sections.",
      "displayName": "Tab Bar",
      "help": "oj-c.TabBar.html",
      "main": "oj-c/tab-bar",
      "status": [
        {
          "type": "supersedes",
          "since": "19.0.0",
          "value": [
            "oj-tab-bar"
          ]
        }
      ],
      "since": "17.0.0",
      "properties": {
        "data": {
          "type": "Array<object>|DataProvider",
          "description": "An array of tabs",
          "displayName": "data",
          "help": "data",
          "value": []
        },
        "selection": {
          "type": "string|number",
          "description": "The key of the selected tab",
          "displayName": "Selected Tab",
          "help": "#selection",
          "writeback": true
        },
        "reorderable": {
          "type": "string",
          "description": "The reorderable configuration for tabs.",
          "displayName": "reorderable",
          "propertyEditorValues": {
            "enabled": {
              "description": "Enables reordering of items in tabbar.",
              "displayName": "Enabled"
            },
            "disabled": {
              "description": "Disables reordering of items in tabbar.",
              "displayName": "Disabled"
            }
          },
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "value": "disabled"
        },
        "overflow": {
          "type": "string",
          "description": "Specifies the overflow behavior.",
          "displayName": "Layout",
          "enumValues": [
            "hidden",
            "popup",
            "conveyor"
          ],
          "value": "hidden"
        },
        "display": {
          "type": "string",
          "description": "The display configuration for tabs.",
          "displayName": "Tabs Display",
          "propertyEditorValues": {
            "standard": {
              "description": "Label and icon are shown for all tabs.",
              "displayName": "Standard"
            },
            "icons": {
              "description": "Only icons are shown for all tabs.",
              "displayName": "Icons"
            },
            "stacked": {
              "description": "Stacks the badge over the icon and icon over the label when applicable.",
              "displayName": "Stacked"
            }
          },
          "enumValues": [
            "standard",
            "icons",
            "stacked"
          ],
          "value": "standard"
        },
        "layout": {
          "type": "string",
          "description": "The layout configuration for tabs.",
          "displayName": "Layout",
          "propertyEditorValues": {
            "stretch": {
              "description": "Stretches the tab bar items to occupy available space ",
              "displayName": "Stretch"
            },
            "condense": {
              "description": "Condenses the space occupied by tab bar items",
              "displayName": "Condense"
            }
          },
          "enumValues": [
            "stretch",
            "condense"
          ],
          "value": "stretch"
        },
        "edge": {
          "type": "string",
          "description": "The edge configuration for tabs.",
          "displayName": "Edge",
          "enumValues": [
            "top",
            "bottom"
          ],
          "value": "top"
        },
        "truncation": {
          "type": "string",
          "description": "The truncation configuration for tab labels.",
          "displayName": "Truncation",
          "enumValues": [
            "none",
            "progressive"
          ],
          "value": "none"
        },
        "contextMenuConfig": {
          "type": "object",
          "description": "Specifies a context menu configuration.",
          "displayName": "Context Menu Config",
          "help": "#contextMenuConfig",
          "properties": {
            "items": {
              "type": "function"
            },
            "accessibleLabel": {
              "type": "string"
            }
          }
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before a tab is selected.",
          "displayName": "Before Select",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "key": {
              "type": "string|number"
            }
          }
        },
        "ojRemove": {
          "description": "Triggered when user performs a remove gesture on a tab.",
          "displayName": "Remove",
          "help": "#event:remove",
          "detail": {
            "key": {
              "type": "string|number"
            }
          }
        },
        "ojReorder": {
          "description": "Triggered when user performs a reorder gesture on a tab.",
          "displayName": "Reorder",
          "help": "#event:reorder",
          "detail": {
            "reorderedKeys": {
              "type": "Array<string|number>"
            }
          }
        },
        "ojSelectionAction": {
          "description": "Triggered when user performs an action gesture on a tab.",
          "displayName": "Selection Action",
          "help": "#event:selectionAction",
          "detail": {
            "previousValue": {
              "type": "string|number"
            },
            "value": {
              "type": "string|number"
            }
          }
        }
      },
      "methods": {
        "_doReorderHelper": {
          "description": "This is a private method that should only be called by the webelement API.",
          "params": [
            {
              "name": "tabBarKeys",
              "type": "Array<string|number>"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "extension": {
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TabBarWebElement.html",
          "export": "findTabBar",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      }
    },
    "oj-c-tab-bar-mixed": {
      "name": "tab-bar-mixed",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTabBarMixedElement"
      ],
      "description": "A navigation component that enables horizontal navigation between distinct content with a mixture of static and dynamic tabs.",
      "displayName": "Tab Bar Mixed",
      "help": "oj-c.TabBarMixed.html",
      "main": "oj-c/tab-bar-mixed",
      "status": [
        {
          "type": "production",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Layout & Nav"
        },
        "vbdt": {
          "module": "oj-c/tab-bar-mixed"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TabBarMixedWebElement.html",
          "export": "findTabBarMixed",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "16.1.0",
      "properties": {
        "dynamicTabs": {
          "type": "Array<object>",
          "description": "An array of dynamic tabs",
          "displayName": "Dynamic Tabs",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "badge": {
                  "type": "number"
                },
                "icon": {
                  "type": "object"
                },
                "itemKey": {
                  "type": "string|number"
                },
                "label": {
                  "type": "string"
                },
                "tabPanelId": {
                  "type": "string"
                }
              }
            }
          }
        },
        "dynamicTabsOverflow": {
          "type": "string",
          "description": "Dynamic tabs overflow configurations",
          "displayName": "Dynamic Tabs Overflow",
          "propertyEditorValues": {
            "conveyor": {
              "description": "Dynamic tabs are displayed inside a conveyor belt.",
              "displayName": "Conveyor"
            },
            "popup": {
              "description": "Dynamic tabs are displayed inside a popup.",
              "displayName": "Popup"
            }
          },
          "enumValues": [
            "popup",
            "conveyor"
          ]
        },
        "dynamicTabsOverflowIcon": {
          "type": "object",
          "description": "The icon used on the overflow tab",
          "displayName": "Icon for overflow tab"
        },
        "size": {
          "type": "string",
          "description": "Size of TabBarMixed",
          "displayName": "Size",
          "propertyEditorValues": {
            "md": {
              "description": "TabBarMixed is set with a medium height.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "TabBarMixed is set with a large height.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "md",
            "lg"
          ]
        },
        "selection": {
          "type": "string|number",
          "description": "The key of the selected tab",
          "displayName": "Selected Tab",
          "help": "#selection",
          "writeback": true
        },
        "separatorPadding": {
          "type": "string",
          "description": "The padding around the vertical divider that seperates collections of tabs.",
          "displayName": "Divider Padding"
        },
        "staticTabs": {
          "type": "Array<object>",
          "description": "An array of static tabs",
          "displayName": "Static Tabs",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "badge": {
                  "type": "number"
                },
                "icon": {
                  "type": "object"
                },
                "itemKey": {
                  "type": "string|number"
                },
                "label": {
                  "type": "string"
                },
                "tabPanelId": {
                  "type": "string"
                }
              }
            }
          }
        },
        "staticTabsDisplay": {
          "type": "string",
          "description": "The display configuration for static tabs.",
          "displayName": "Static Tabs Display",
          "propertyEditorValues": {
            "standard": {
              "description": "Label and icon are shown for all static tabs.",
              "displayName": "Standard"
            },
            "icons": {
              "description": "Only icons are shown for all static tabs.",
              "displayName": "Icons"
            }
          },
          "enumValues": [
            "standard",
            "icons"
          ]
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before a tab is selected.",
          "displayName": "Before Select",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "key": {
              "type": "string|number"
            }
          }
        },
        "ojRemove": {
          "description": "Triggered when user performs a remove gesture on a tab.",
          "displayName": "Remove",
          "help": "#event:remove",
          "detail": {
            "key": {
              "type": "string|number"
            }
          }
        },
        "ojSelectionAction": {
          "description": "Triggered when user performs an action gesture on a tab.",
          "displayName": "Selection Action",
          "help": "#event:selectionAction",
          "detail": {
            "previousValue": {
              "type": "string|number"
            },
            "value": {
              "type": "string|number"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-card-view": {
      "name": "card-view",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CCardViewElement"
      ],
      "displayName": "Card View",
      "description": "A CardView displays data items as a grid with highly interactive features.",
      "help": "oj-c.CardView.html",
      "main": "oj-c/card-view",
      "status": [
        {
          "type": "production",
          "since": "19.0.0"
        }
      ],
      "extension": {
        "vbdt": {
          "module": "oj-c/card-view"
        },
        "oracle": {
          "uxSpecs": [
            "card-view"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/CardViewWebElement.html",
          "export": "findCardView",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode",
            "gutterSize",
            "focusBehavior",
            "initialAnimation"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selected"
          ]
        }
      ],
      "since": "17.0.0",
      "properties": {
        "currentItem": {
          "type": "string|number",
          "description": "The item that currently has keyboard focus",
          "displayName": "Current Item",
          "help": "#currentItem",
          "readOnly": true,
          "writeback": true
        },
        "data": {
          "type": "DataProvider|null",
          "description": "The data source for CardView.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported"
                }
              ]
            }
          },
          "value": null
        },
        "gutterSize": {
          "type": "string",
          "description": "Size of the gutter between columns and rows.",
          "displayName": "GutterSize",
          "help": "#gutterSize",
          "enumValues": [
            "sm",
            "md",
            "lg",
            "xs",
            "xl"
          ],
          "value": "sm"
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number",
              "value": 25
            },
            "scroller": {
              "type": "string"
            }
          }
        },
        "selected": {
          "type": "object",
          "description": "The selected property",
          "displayName": "Selected Items Changed",
          "help": "#selected",
          "writeback": true
        },
        "selectionMode": {
          "type": "string",
          "description": "Type of selection behavior for the CardView",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            },
            "singleRequired": {
              "description": "Only a single item can be selected at a time. In addition, CardView will also ensure that an item is selected at all time.",
              "displayName": "Single Required"
            }
          },
          "enumValues": [
            "none",
            "multiple",
            "single",
            "singleRequired"
          ],
          "value": "none"
        },
        "initialAnimation": {
          "type": "string",
          "description": "Specify animation when cards are initially rendered.",
          "displayName": "Initial Animation",
          "help": "initialAnimation",
          "enumValues": [
            "slideUp",
            "slideDown"
          ],
          "value": "slideUp"
        },
        "focusBehavior": {
          "type": "string",
          "description": "Specifies which focus behavior we should use for an item.",
          "displayName": "Focus Behavior",
          "help": "focusBehavior",
          "enumValues": [
            "content",
            "card"
          ],
          "value": "card"
        },
        "columns": {
          "type": "number|string",
          "description": "Specifies the exact number of columns to render.",
          "displayName": "Columns",
          "help": "columns",
          "propertyEditorValues": {
            "auto": {
              "description": "CardView will determine the number of columns based on width of the CardView and the width of the cards",
              "displayName": "Auto"
            }
          },
          "value": "auto"
        },
        "reorderable": {
          "type": "object",
          "description": "Specify the item reordering functionality.",
          "displayName": "Reorderable",
          "help": "#reorderable",
          "properties": {
            "items": {
              "type": "string",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "value": "disabled"
            }
          }
        }
      },
      "slots": {
        "noData": {
          "description": "The noData slot is used to specify the content to show when there is no data. See the Help documentation for more information.",
          "displayName": "noData",
          "help": "#noData",
          "maxItems": 1,
          "templateSlotAlias": "noDataTemplate",
          "data": {}
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "skeletonTemplate": {
          "description": "The skeletonTemplate slot is used to specify the template for rendering each skeleton while waiting for data during initial load as well as load more on scroll. See the Help documentation for more information.",
          "displayName": "skeletonTemplate",
          "help": "#skeletonTemplate",
          "maxItems": 1,
          "data": {}
        }
      },
      "events": {
        "ojReorder": {
          "description": "Triggered after items are reordered within CardView via drag and drop or keyboard.",
          "displayName": "Reorder",
          "help": "#event:reorder",
          "detail": {
            "reorderedKeys": {
              "type": "Array<string|number>"
            },
            "itemKeys": {
              "type": "Array<string|number>"
            },
            "referenceKey": {
              "type": "string|number|null"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-conveyor-belt": {
      "name": "conveyor-belt",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CConveyorBeltElement"
      ],
      "displayName": "Conveyor Belt",
      "description": "A conveyor belt manages overflow for its child elements and allows scrolling among them.",
      "main": "oj-c/conveyor-belt",
      "help": "oj-c.ConveyorBelt.html",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-conveyor-belt"
          ]
        }
      ],
      "since": "17.0.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the Conveyor Belt.",
          "displayName": "Default",
          "help": "#default"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "displayName": "itemTemplate",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "properties": {
        "scrollPosition": {
          "type": "number",
          "description": "Gets or sets the number of pixels that an element's content is scrolled from its initial position.",
          "displayName": "Scroll Position",
          "help": "#scrollPosition",
          "writeback": true
        },
        "arrowVisibility": {
          "type": "string",
          "description": "Specifies visibility of overflow arrow buttons.",
          "displayName": "Arrow Visibility",
          "help": "#arrowVisibility",
          "enumValues": [
            "auto",
            "hidden",
            "visible"
          ]
        },
        "items": {
          "type": "Array<object>|DataProvider",
          "description": "An array of data items or a data provider that returns the items for the ConveyorBelt.",
          "displayName": "Items",
          "help": "#items"
        },
        "orientation": {
          "type": "string",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "value": "horizontal"
        }
      },
      "methods": {
        "scrollElementIntoView": {
          "description": "Scrolls element into view.",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "extension": {
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ConveyorBeltWebElement.html",
          "export": "findConveyorBelt",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      }
    },
    "oj-c-input-date-picker": {
      "name": "input-date-picker",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputDatePickerElement"
      ],
      "displayName": "InputDatePicker",
      "description": "An input date picker allows users to enter or select a single date using a calendar interface.",
      "help": "oj-c.InputDatePicker.html",
      "main": "oj-c/input-date-picker",
      "status": [
        {
          "type": "supersedes",
          "since": "17.1.0",
          "value": [
            "oj-input-date"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/input-date-picker",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-type-date-input"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputDatePickerWebElement.html",
          "export": "findInputDatePicker",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "17.0.0",
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "dateRangeOverflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Date Range Overflow Message Detail",
          "help": "#dateRangeOverflowMessageDetail"
        },
        "dateRangeUnderflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail"
        },
        "dateRestrictionMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Date Range Underflow Message Detail",
          "help": "#dateRangeUnderflowMessageDetail"
        },
        "dayFormatter": {
          "type": "function",
          "description": "Provides additional information for rendering a day.",
          "displayName": "Day Formatter",
          "help": "#dayFormatter"
        },
        "daysOutsideMonth": {
          "type": "string",
          "description": "Specifies the behavior of days outside of the current month in the Date Picker.",
          "displayName": "Days Outside Month",
          "help": "#daysOutsideMonth",
          "propertyEditorValues": {
            "hidden": {
              "description": "The days outside of the current month will be hidden.",
              "displayName": "Hidden"
            },
            "selectable": {
              "description": "The days outside of the current month will be visible and selectable.",
              "displayName": "Selectable"
            }
          },
          "enumValues": [
            "hidden",
            "selectable"
          ],
          "value": "hidden"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "status": [
            {
              "type": "deprecated",
              "since": "18.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable date, in ISO string format",
          "displayName": "Max",
          "help": "#max",
          "format": "date"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable date, in ISO string format",
          "displayName": "Min",
          "help": "#min",
          "format": "date"
        },
        "monthAndYearPicker": {
          "type": "string",
          "description": "Specifies whether or not the DatePicker should show the toggle buttons that toggle the month grid picker and year grid picker.",
          "displayName": "Month And Year Picker",
          "help": "#monthAndYearPicker",
          "propertyEditorValues": {
            "on": {
              "description": "The month and year toggle buttons will be shown.",
              "displayName": "On"
            },
            "off": {
              "description": "The month and year toggle buttons will not be shown and the date picker renders the month and the year as text.",
              "displayName": "Off"
            }
          },
          "enumValues": [
            "off",
            "on"
          ],
          "value": "on"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "todayTimeZone": {
          "type": "string",
          "description": "The time zone used for computing today for the Date Picker.",
          "displayName": "Time Zone For Computing Today",
          "help": "#todayTimeZone"
        },
        "todayButton": {
          "type": "string",
          "description": "Specifies how to render the 'Go to today' button.",
          "displayName": "Today Button",
          "help": "#todayButton",
          "propertyEditorValues": {
            "visible": {
              "description": "The 'Go to Today' button will be shown and it can be pressed to navigate to Today.",
              "displayName": "Visible"
            },
            "hidden": {
              "description": "The 'Go to Today' button will be hidden.",
              "displayName": "Hidden"
            }
          },
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "format": "date",
          "writeback": true,
          "value": null
        },
        "weekDisplay": {
          "type": "string",
          "propertyEditorValues": {
            "none": {
              "description": "The week of the year column will not be shown.",
              "displayName": "None"
            },
            "number": {
              "description": "Will show the week of the year as a number.",
              "displayName": "Number"
            }
          },
          "description": "Whether week of the year will be shown in the DatePicker.",
          "displayName": "Week Display",
          "help": "#weekDisplay",
          "enumValues": [
            "number",
            "none"
          ],
          "value": "none"
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "object",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            },
            "day": {
              "type": "number"
            }
          },
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the date field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the date field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-drag-handle": {
      "name": "drag-handle",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CDragHandleElement"
      ],
      "displayName": "Drag Handle",
      "description": "A drag handle is a draggable icon used in components with reorder features.",
      "help": "oj-c.DragHandle.html",
      "main": "oj-c/drag-handle",
      "status": [
        {
          "type": "candidate",
          "since": "17.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/drag-handle"
        },
        "oracle": {
          "uxSpecs": [
            "drag-handle"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/DragHandleWebElement.html",
          "export": "findDragHandle",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "17.0.0",
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-toggle-button": {
      "name": "toggle-button",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CToggleButtonElement"
      ],
      "description": "Toggle Buttons allow users to switch between states when clicked or tapped.",
      "displayName": "Toggle Button",
      "help": "oj-c.ToggleButton.html",
      "main": "oj-c/toggle-button",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/toggle-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "Toggle%20Button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ToggleButtonWebElement.html",
          "export": "findToggleButton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "tooltip",
            "display",
            "chroming",
            "size",
            "width",
            "disabled"
          ]
        }
      ],
      "since": "17.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-buttonset-many"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button.",
          "help": "#label",
          "required": true,
          "translatable": true
        },
        "value": {
          "type": "boolean",
          "description": "Specifies if the toggle button is selected",
          "help": "#value",
          "translatable": true,
          "writeback": true,
          "value": false
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "help": "#tooltip",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "help": "#width"
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has variants in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are a less prominent variation.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are a more prominent variation.",
              "displayName": "Outlined"
            }
          },
          "enumValues": [
            "borderless",
            "outlined"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-toggle-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-c-toggle-button element accepts DOM nodes as children with the endIcon slot.",
          "help": "#endIcon"
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "click": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-buttonset-single": {
      "name": "buttonset-single",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CButtonsetSingleElement"
      ],
      "description": "A Buttonset Single allows a user to select the state of one or more related options.",
      "displayName": "Buttonset Single",
      "help": "oj-c.ButtonsetSingle.html",
      "main": "oj-c/buttonset-single",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/buttonset-single"
        },
        "oracle": {
          "icon": "oj-ux-ico-buttonset-single",
          "uxSpecs": [
            "Toggle%20Button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ButtonsetSingleWebElement.html",
          "export": "findButtonsetSingle",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "17.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-buttonset-one"
          ]
        }
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "Specifies which toggle button is selected",
          "help": "#value",
          "translatable": true,
          "writeback": true
        },
        "items": {
          "type": "Array<object>",
          "description": "Specifies the toggle buttons rendered by the buttonset.",
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "type": "string",
                  "description": "The toggle item label."
                },
                "value": {
                  "type": "string",
                  "description": "The toggle item value."
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Specifies if the toggle item is disabled (enabled by default)."
                },
                "startIcon": {
                  "type": "object",
                  "description": "Optional icon to render at the start of the toggle item."
                },
                "endIcon": {
                  "type": "object",
                  "description": "Optional icon to render at the end of the toggle item."
                }
              }
            }
          },
          "value": []
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the buttonset should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the toggle buttons",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies the buttonset width",
          "help": "#width"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "Specifies the buttonset max width",
          "help": "#maxWidth"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are a less prominent variation.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are a more prominent variation.",
              "displayName": "Outlined"
            }
          },
          "enumValues": [
            "borderless",
            "outlined"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        },
        "layoutWidth": {
          "type": "string",
          "description": "Specifies if button width should be equal or based on contents.",
          "help": "#layoutWidth",
          "enumValues": [
            "auto",
            "equal"
          ]
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-buttonset-multiple": {
      "name": "buttonset-multiple",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CButtonsetMultipleElement"
      ],
      "description": "A Buttonset Multiple allows a user to select the states of one or more related options.",
      "displayName": "Buttonset Multiple",
      "help": "oj-c.ButtonsetMultiple.html",
      "main": "oj-c/buttonset-multiple",
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/buttonset-multiple"
        },
        "oracle": {
          "icon": "oj-ux-ico-buttonset-multiple",
          "uxSpecs": [
            "Toggle%20Button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ButtonsetMultipleWebElement.html",
          "export": "findButtonsetMultiple",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "since": "17.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "17.0.0",
          "value": [
            "oj-buttonset-many"
          ]
        }
      ],
      "properties": {
        "value": {
          "type": "Array<string>",
          "description": "Specifies which toggle button is selected",
          "help": "#value",
          "translatable": true,
          "writeback": true
        },
        "items": {
          "type": "Array<object>",
          "description": "Specifies the toggle buttons rendered by the buttonset.",
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "type": "string",
                  "description": "The toggle item label."
                },
                "value": {
                  "type": "string",
                  "description": "The toggle item value."
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Specifies if the toggle item is disabled (enabled by default)."
                },
                "startIcon": {
                  "type": "object",
                  "description": "Optional icon to render at the start of the toggle item."
                },
                "endIcon": {
                  "type": "object",
                  "description": "Optional icon to render at the end of the toggle item."
                }
              }
            }
          },
          "value": []
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the buttonset should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the toggle buttons",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies the buttonset width",
          "help": "#width"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "Specifies the buttonset max width",
          "help": "#maxWidth"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chromings in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are a less prominent variation.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are a more prominent variation.",
              "displayName": "Outlined"
            }
          },
          "enumValues": [
            "borderless",
            "outlined"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        },
        "layoutWidth": {
          "type": "string",
          "description": "Specifies if button width should be equal or based on contents.",
          "help": "#layoutWidth",
          "enumValues": [
            "auto",
            "equal"
          ]
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-table": {
      "name": "table",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTableElement"
      ],
      "displayName": "Table",
      "description": "A table displays data items in a tabular format with highly interactive features.",
      "help": "oj-c.Table.html",
      "main": "oj-c/table",
      "status": [
        {
          "type": "candidate",
          "since": "17.1.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/table",
          "defaultColumns": 12,
          "minColumns": 2
        },
        "oracle": {
          "uxSpecs": [
            "table"
          ],
          "icon": "oj-ux-ico-tables-basic"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TableWebElement.html",
          "export": "findTable",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode.row",
            "selectionMode.column",
            "horizontalGridVisible",
            "verticalGridVisible"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "columns",
            "selected.row",
            "selected.column"
          ]
        }
      ],
      "since": "17.1.0",
      "properties": {
        "layout": {
          "type": "string",
          "propertyEditorValues": {
            "contents": {
              "description": "When specified, the initial column sizes are determined by the contents of the data. Does not require an overall width set on the Table. Can have performance issues when large numbers of columns and/or rows are initially rendered.",
              "displayName": "Contents"
            },
            "fixed": {
              "description": "When specified, the initial column sizes are determined by column weights. Requires an overall width set on the Table (width='100%', width='200rem', etc.) Very performant when rendering large numbers of columns and/or rows.",
              "displayName": "Fixed"
            }
          },
          "description": "The column sizing method used for the Table's columns.",
          "displayName": "Layout",
          "help": "#layout",
          "enumValues": [
            "fixed",
            "contents"
          ],
          "value": "contents"
        },
        "data": {
          "type": "DataProvider",
          "description": "The data provider for Table.",
          "displayName": "Data",
          "help": "#data"
        },
        "columns": {
          "type": "object",
          "description": "The set of columns that can be displayed in the Table.",
          "displayName": "Columns",
          "help": "#columns",
          "extension": {
            "vbdt": {
              "keyedProperties": {
                "keys": {
                  "type": "string"
                },
                "values": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string|number",
                      "displayName": "Field",
                      "description": "Specifies the field attribute of the row item data that is mapped to the column."
                    },
                    "headerText": {
                      "type": "string",
                      "displayName": "Header Text",
                      "description": "Text to display in the header cell of the column."
                    },
                    "footerText": {
                      "type": "string",
                      "displayName": "Footer Text",
                      "description": "Text to display in the footer cell of the column"
                    },
                    "template": {
                      "type": "string",
                      "description": "The name of the slot used to specify the template for rendering data cells in the column. See the Help documentation for more information.",
                      "displayName": "Template",
                      "dynamicSlotDef": "CellTemplateContext"
                    },
                    "headerTemplate": {
                      "type": "string",
                      "description": "The name of the slot used to specify the template for rendering the header cell in the column. See the Help documentation for more information.",
                      "displayName": "Header Template",
                      "dynamicSlotDef": "HeaderTemplateContext"
                    },
                    "footerTemplate": {
                      "type": "string",
                      "description": "The name of the slot used to specify the template for rendering the footer cell in the column. See the Help documentation for more information.",
                      "displayName": "Footer Template",
                      "dynamicSlotDef": "FooterTemplateContext"
                    },
                    "maxWidth": {
                      "type": "number",
                      "description": "The maximum width in pixels of the column. See the Help documentation for more information.",
                      "displayName": "Max Width"
                    },
                    "minWidth": {
                      "type": "number",
                      "description": "The minimum width in pixels of the column. See the Help documentation for more information.",
                      "displayName": "Min Width"
                    },
                    "weight": {
                      "type": "number",
                      "description": "Specifies the relative sizing weight of the column. See the Help documentation for more information.",
                      "displayName": "Weight"
                    },
                    "padding": {
                      "type": "string|object|function",
                      "description": "Specifies padding for data cells in this column.",
                      "displayName": "Padding",
                      "propertyEditorValues": {
                        "disabled": {},
                        "enabled": {}
                      }
                    },
                    "headerPadding": {
                      "type": "string|object",
                      "description": "Specifies padding for the header cell in this column.",
                      "displayName": "Header Padding",
                      "propertyEditorValues": {
                        "disabled": {},
                        "enabled": {}
                      }
                    },
                    "footerPadding": {
                      "type": "string|object",
                      "description": "Specifies padding for the footer cell in this column.",
                      "displayName": "Footer Padding",
                      "propertyEditorValues": {
                        "disabled": {},
                        "enabled": {}
                      }
                    },
                    "tooltip": {
                      "type": "string|function",
                      "description": "Specifies whether default tooltips are enabled for data cells in this column.",
                      "displayName": "Tooltip",
                      "propertyEditorValues": {
                        "disabled": {},
                        "enabled": {}
                      }
                    },
                    "headerTooltip": {
                      "type": "string",
                      "description": "Specifies whether the default tooltip is enabled for the header cell in this column.",
                      "displayName": "Header Tooltip",
                      "enumValues": [
                        "disabled",
                        "enabled"
                      ]
                    },
                    "footerTooltip": {
                      "type": "string",
                      "description": "Specifies whether the default tooltip is enabled for the footer cell in this column.",
                      "displayName": "Footer Tooltip",
                      "enumValues": [
                        "disabled",
                        "enabled"
                      ]
                    },
                    "sticky": {
                      "type": "string",
                      "description": "Whether this column should be prevented from scrolling out of view.",
                      "displayName": "Sticky",
                      "enumValues": [
                        "disabled",
                        "enabled"
                      ]
                    },
                    "horizontalAlignment": {
                      "type": "string",
                      "description": "The horizontal alignment of the column.",
                      "displayName": "Horizontal Alignment",
                      "enumValues": [
                        "center",
                        "end",
                        "start",
                        "left",
                        "right"
                      ]
                    },
                    "resizable": {
                      "type": "string",
                      "description": "Enable or disable width resizing along the column end headers.",
                      "displayName": "Resizable",
                      "enumValues": [
                        "disabled",
                        "enabled"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "row": {
          "type": "object",
          "description": "A subset of attributes for controlling certain behaviors on a per row basis.",
          "displayName": "Row",
          "help": "#row",
          "properties": {
            "accessibleRowHeader": {
              "type": "string|Array<string>|function",
              "description": "The column key(s) to be used as the accessible row header(s) for assistive technologies. See the Help documentation for more information.",
              "displayName": "Accessible Row Header",
              "help": "#row.accessibleRowHeader"
            }
          }
        },
        "horizontalGridVisible": {
          "type": "string",
          "propertyEditorValues": {
            "enabled": {
              "description": "Display horizontal gridlines",
              "displayName": "Enabled"
            },
            "disabled": {
              "description": "Do not display horizontal gridlines",
              "displayName": "Disabled"
            }
          },
          "description": "Controls the display of the Table's horizontal gridlines.",
          "displayName": "Horizontal Grid Visible",
          "help": "#horizontalGridVisible",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "value": "enabled"
        },
        "verticalGridVisible": {
          "type": "string",
          "propertyEditorValues": {
            "enabled": {
              "description": "Display vertical gridlines",
              "displayName": "Enabled"
            },
            "disabled": {
              "description": "Do not display vertical gridlines",
              "displayName": "Disabled"
            }
          },
          "description": "Controls the display of the Table's vertical gridlines.",
          "displayName": "Vertical Grid Visible",
          "help": "#verticalGridVisible",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "value": "disabled"
        },
        "selected": {
          "type": "object",
          "description": "The selected rows and/or columns. See the Help documentation for more information.",
          "displayName": "Selected",
          "help": "#selected",
          "properties": {
            "column": {
              "type": "object",
              "description": "The selected columns. See the Help documentation for more information.",
              "displayName": "Selected Columns",
              "help": "#selected.column"
            },
            "row": {
              "type": "object",
              "description": "The selected rows. See the Help documentation for more information.",
              "displayName": "Selected Rows",
              "help": "#selected.row"
            }
          },
          "writeback": true
        },
        "selectionMode": {
          "type": "object",
          "description": "Specifies whether row and/or column selection gestures are enabled on the Table, and the cardinality of each (single/multiple/multipleToggle/none).",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "properties": {
            "column": {
              "type": "string",
              "propertyEditorValues": {
                "none": {
                  "description": "Column selection gestures are disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "A maximum of 1 column can be selected via user gestures.",
                  "displayName": "Single"
                },
                "multiple": {
                  "description": "Any number of columns can be selected via user gestures.",
                  "displayName": "Multiple"
                }
              },
              "description": "Specifies whether column selection gestures are enabled on the Table.",
              "displayName": "Column Selection Mode",
              "help": "#selectionMode.column",
              "enumValues": [
                "none",
                "multiple",
                "single"
              ],
              "value": "none"
            },
            "row": {
              "type": "string",
              "propertyEditorValues": {
                "none": {
                  "description": "Row selection gestures are disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "A maximum of 1 row can be selected via user gestures.",
                  "displayName": "Single"
                },
                "multiple": {
                  "description": "Any number of rows can be selected via user gestures. Performing a selection gesture may affect the selection state of previously selected rows depending on render context as well as the use of modifier keys.",
                  "displayName": "Multiple"
                },
                "multipleToggle": {
                  "description": "Any number of rows can be selected via user gestures. Performing a selection gesture will not affect the selection state of previously selected rows regardless of rendering context or the use of modifier keys.",
                  "displayName": "Multiple Toggle"
                }
              },
              "description": "Specifies whether row selection gestures are enabled on the Table.",
              "displayName": "Row Selection Mode",
              "help": "#selectionMode.row",
              "enumValues": [
                "none",
                "multiple",
                "single",
                "multipleToggle"
              ],
              "value": "none"
            }
          }
        },
        "selectAllControl": {
          "type": "string",
          "propertyEditorValues": {
            "hidden": {
              "description": "Do not display the select all control",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "Display the select all control",
              "displayName": "Visible"
            }
          },
          "description": "Controls the display of the Table's select all control when multiple or multipleToggle row selection is enabled.",
          "displayName": "Select All Control",
          "help": "#selectAllControl",
          "enumValues": [
            "hidden",
            "visible"
          ],
          "value": "visible"
        },
        "columnOrder": {
          "type": "Array<string>",
          "description": "Display and order of columns. See the Help documentation for more information.",
          "displayName": "Column Order",
          "help": "#columnOrder",
          "writeback": true
        },
        "currentCellOverride": {
          "type": "object",
          "description": "The cell override to apply to the current cell of the Table. In order for this property to be honored, a new object instance must be set.",
          "displayName": "Current Cell Override",
          "help": "#currentCellOverride"
        },
        "currentCell": {
          "type": "object",
          "description": "The cell currently being used as the target for keyboard gestures made on the Table.",
          "displayName": "Current Cell",
          "help": "#currentCell",
          "readOnly": true,
          "writeback": true
        },
        "columnWidths": {
          "type": "object",
          "description": "The desired widths of table columns. A record mapping column keys to numbers representing pixel widths for each column.",
          "displayName": "Column Widths",
          "help": "#columnWidths",
          "extension": {
            "vbdt": {
              "keyedProperties": {
                "keys": {
                  "type": "string"
                },
                "values": {
                  "type": "number"
                }
              }
            }
          },
          "writeback": true
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Options related to the Table's fetching and scrolling behaviors.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number",
              "description": "The number of records the Table will request during each data fetch.",
              "displayName": "Fetch Size",
              "help": "#scrollPolicyOptions.fetchSize",
              "value": 25
            }
          }
        },
        "columnResizeBehavior": {
          "type": "string",
          "description": "The column resize behavior this Table will utilize when column resizing is enabled on a given column.",
          "displayName": "Column Resize Behavior",
          "help": "#columnResizeBehavior",
          "propertyEditorValues": {
            "add": {
              "description": "Column resize gestures only affect the width of the column on the start side of the divider.",
              "displayName": "add"
            },
            "redistribute": {
              "description": "Column resize gestures affect the widths of columns on each side of the divider.",
              "displayName": "redistribute"
            }
          },
          "enumValues": [
            "add",
            "redistribute"
          ],
          "value": "redistribute"
        }
      },
      "slots": {
        "cellTemplate": {
          "description": "Named slot for the table's global cell template. See the Help documentation for more information.",
          "displayName": "Cell Template",
          "help": "#cellTemplate",
          "data": {
            "columnKey": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "data": {
              "type": "any"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "headerTemplate": {
          "description": "Named slot for the table's global header template. See the Help documentation for more information.",
          "displayName": "Header Template",
          "help": "#headerTemplate",
          "data": {
            "key": {
              "type": "string"
            },
            "headerText": {
              "type": "string"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "footerTemplate": {
          "description": "Named slot for the Table's global footer template. See the Help documentation for more information.",
          "displayName": "Footer Template",
          "help": "#footerTemplate",
          "data": {
            "key": {
              "type": "string"
            },
            "footerText": {
              "type": "string"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "noData": {
          "description": "The template for rendering content when the table has an empty data set. See the Help documentation for more information.",
          "displayName": "No Data",
          "help": "#noData",
          "templateSlotAlias": "noDataTemplate",
          "data": {
            "isTabbable": {
              "type": "boolean"
            }
          }
        }
      },
      "dynamicSlots": {
        "CellTemplateContext": {
          "description": "A set of dynamic templates for rendering the table content.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "columnKey": {
              "type": "string"
            },
            "item": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string|number"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number"
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "string|number"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "data": {
              "type": "any"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "HeaderTemplateContext": {
          "description": "A set of dynamic templates for rendering the table content.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "key": {
              "type": "string"
            },
            "headerText": {
              "type": "string"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        },
        "FooterTemplateContext": {
          "description": "A set of dynamic templates for rendering the table content.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "key": {
              "type": "string"
            },
            "footerText": {
              "type": "string"
            },
            "isTabbable": {
              "type": "boolean"
            }
          }
        }
      },
      "events": {
        "ojRowAction": {
          "bubbles": true,
          "description": "Triggered when a user performs an action gesture on a row. See the Help documentation for more information.",
          "displayName": "On OjRowAction",
          "help": "#event:ojRowAction",
          "detail": {
            "context": {
              "type": "object",
              "properties": {
                "item": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "any"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "indexFromParent": {
                          "type": "number"
                        },
                        "isLeaf": {
                          "type": "boolean"
                        },
                        "key": {
                          "type": "string|number"
                        },
                        "message": {
                          "type": "object",
                          "properties": {
                            "detail": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string|number"
                            },
                            "summary": {
                              "type": "string"
                            }
                          }
                        },
                        "parentKey": {
                          "type": "string|number"
                        },
                        "suggestion": {
                          "type": "object"
                        },
                        "treeDepth": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-progress-button": {
      "name": "progress-button",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CProgressButtonElement"
      ],
      "description": "A Progress button represents button-level initiation.",
      "displayName": "Progress Button",
      "help": "oj-c.ProgressButton.html",
      "main": "oj-c/progress-button",
      "since": "17.1.0",
      "status": [
        {
          "type": "production",
          "since": "17.1.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/progress-button"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "button"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ProgressButtonWebElement.html",
          "export": "findProgressButton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "tooltip",
            "display",
            "chroming",
            "isloading",
            "size",
            "width",
            "edge",
            "disabled"
          ]
        }
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "Text to show in the button or as tooltip for icon mode.",
          "help": "#label",
          "required": true,
          "translatable": true
        },
        "tooltip": {
          "type": "string",
          "description": "Text to show in the tooltip. This overrides the default tooltip that renders the label when in icon mode.",
          "help": "#tooltip",
          "translatable": true
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "help": "#disabled",
          "value": false
        },
        "isLoading": {
          "type": "boolean",
          "description": "Specifies if progress should be shown.",
          "help": "#isLoading"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies that the button style width",
          "help": "#width"
        },
        "display": {
          "type": "string",
          "description": "Display just the label, the icons, or all. Label is used as tooltip and should be set in all cases.",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the text label.",
              "displayName": "label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "size": {
          "type": "string",
          "description": "Size of button",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "Display a small button.",
              "displayName": "Small"
            },
            "md": {
              "description": "Display a default size button.",
              "displayName": "Medium"
            },
            "lg": {
              "description": "Display a large button.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "md",
            "lg"
          ],
          "value": "md"
        },
        "edge": {
          "type": "string",
          "description": "Specifies whether the button is attached to an edge. For example setting edge='bottom' can be used to attach a button to the bottom of a card. The button is then stretched to 100% width, and borders adjusted.",
          "help": "#edge",
          "propertyEditorValues": {
            "none": {
              "description": "Display a default standalone button.",
              "displayName": "Small"
            },
            "bottom": {
              "description": "Stretch the button to 100% width and adjust borders for usage at bottom of container.",
              "displayName": "Bottom"
            }
          },
          "enumValues": [
            "none",
            "bottom"
          ],
          "value": "none"
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has variants in background and border.",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are a more prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            }
          },
          "enumValues": [
            "solid",
            "borderless",
            "outlined",
            "callToAction"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          },
          "value": "outlined"
        }
      },
      "slots": {
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-c-progress-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "#startIcon"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "help": "#event:action"
        }
      },
      "methods": {
        "focus": {
          "return": "void"
        },
        "blur": {
          "return": "void"
        },
        "click": {
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-skeleton": {
      "name": "skeleton",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CSkeletonElement"
      ],
      "description": "The skeleton component allows the appropriate skeleton to be rendered based on the property values",
      "displayName": "Skeleton",
      "extension": {
        "catalog": {
          "category": "Collections"
        },
        "vbdt": {
          "module": "oj-c/skeleton"
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/SkeletonWebElement.html",
          "export": "findSkeleton",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "help": "oj-c.Skeleton.html",
      "since": "18.0.0",
      "status": [
        {
          "type": "production",
          "since": "19.0.0"
        }
      ],
      "main": "oj-c/skeleton",
      "properties": {
        "height": {
          "type": "number|string",
          "description": "Specifies the height of the skeleton",
          "help": "#height"
        },
        "width": {
          "type": "number|string",
          "description": "Specifies the width of the skeleton",
          "help": "#width"
        },
        "borderRadius": {
          "type": "number|string",
          "description": "Specifies the border radius of the skeleton",
          "help": "#BorderRadiusProps"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-toolbar": {
      "name": "toolbar",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CToolbarElement"
      ],
      "description": "A toolbar displays a strip of control elements such as buttons and menu buttons, often grouped by separators.",
      "displayName": "Toolbar",
      "help": "oj-c.Toolbar.html",
      "main": "oj-c/toolbar",
      "since": "18.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "18.0.0",
          "value": [
            "oj-toolbar"
          ]
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/toolbar"
        },
        "oracle": {
          "icon": "oj-ux-ico-toolbar",
          "uxSpecs": [
            "toolbar"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/ToolbarWebElement.html",
          "export": "findToolbar",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "properties": {
        "spacing": {
          "type": "string",
          "description": "Specifies the spacing between content. 'sm' spacing is recommended for button variants that don't have a background or border, for example borderless buttons. 'lg' spacing is recommended for button variants that have a background or border, for example outlined or solid buttons.",
          "displayName": "spacing",
          "help": "#spacing",
          "propertyEditorValues": {
            "sm": {
              "description": "Compact spacing between content.",
              "displayName": "Small"
            },
            "lg": {
              "description": "Default spacing between content.",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "sm",
            "lg"
          ]
        },
        "chroming": {
          "type": "string",
          "description": "Specifies the chroming to be set on content to be placed into the toolbar.",
          "displayName": "chroming",
          "help": "#chroming",
          "enumValues": [
            "borderless",
            "outlined"
          ]
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of content to be placed into the toolbar.",
          "displayName": "size",
          "help": "#size",
          "enumValues": [
            "sm",
            "md",
            "lg"
          ]
        },
        "items": {
          "type": "Array<object>",
          "description": "Specifies the content to be placed into the toolbar.",
          "displayName": "items",
          "help": "#items",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "18.0.5",
                  "description": "Stop 'items' property test adapter generation based upon metadata, and instead use override to freeze the API."
                }
              ]
            },
            "vbdt": {
              "pi": {
                "events": {
                  "suggestions": [
                    {
                      "type": "component",
                      "name": "ojMenuAction",
                      "mappings": [
                        {
                          "variableName": "menuItemKey",
                          "expression": "{{$event.detail.key}}",
                          "type": "string"
                        }
                      ]
                    }
                  ]
                }
              },
              "itemProperties": {
                "type": {
                  "description": "Specifies the type of the toolbar item.",
                  "type": "string",
                  "required": true,
                  "enumValues": [
                    "button",
                    "menu-button",
                    "split-menu-button",
                    "buttonset-single",
                    "buttonset-multiple",
                    "toggle-button",
                    "progress-button",
                    "separator"
                  ],
                  "propertyEditorValues": {
                    "button": {
                      "displayName": "Button"
                    },
                    "menu-button": {
                      "displayName": "Menu Button"
                    },
                    "split-menu-button": {
                      "displayName": "Split Menu Button"
                    },
                    "buttonset-single": {
                      "displayName": "Buttonset Single"
                    },
                    "buttonset-multiple": {
                      "displayName": "Buttonset Multiple"
                    },
                    "toggle-button": {
                      "displayName": "Toggle Button"
                    },
                    "progress-button": {
                      "displayName": "Progress Button"
                    },
                    "separator": {
                      "displayName": "Separator"
                    }
                  }
                },
                "chroming": {
                  "description": "Indicates in what states the item has variants in background and border.",
                  "type": "string",
                  "enumValues": [
                    "solid",
                    "borderless",
                    "outlined",
                    "ghost",
                    "callToAction",
                    "danger"
                  ],
                  "propertyEditorValues": {
                    "solid": {
                      "description": "Valid for Button, Menu Button, Split Menu Button, and Progress Button items."
                    },
                    "borderless": {
                      "description": "Valid for Button, Menu Button, Buttonset, Toggle Button, and Progress Button items."
                    },
                    "outlined": {
                      "description": "Valid for Button, Menu Button, Split Menu Button, Buttonset, Toggle Button, and Progress Button items."
                    },
                    "ghost": {
                      "description": "Valid for Button and Menu Button items."
                    },
                    "callToAction": {
                      "description": "Valid for Button, Split Menu Button, and Progress Button items."
                    },
                    "danger": {
                      "description": "Valid for Button items."
                    }
                  }
                },
                "disabled": {
                  "description": "Specifies whether the item should be disabled.",
                  "type": "boolean"
                },
                "display": {
                  "description": "Display just the labels, the icons, or all (not supported for Split Menu Button items).",
                  "type": "string",
                  "enumValues": [
                    "all",
                    "labels",
                    "icons"
                  ]
                },
                "endIcon": {
                  "description": "Optional icon to show at the end position of an item (not supported for Split Menu Button nor Buttonset items).",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enumValues": [
                        "class",
                        "img"
                      ]
                    },
                    "class": {
                      "type": "string"
                    },
                    "src": {
                      "type": "string"
                    }
                  }
                },
                "isLoading": {
                  "description": "Specifies if progress should be shown (only valid for Progress Button items).",
                  "type": "boolean"
                },
                "items": {
                  "description": "Specifies the content for Menu Button, Split Menu Button, and Buttonset items. See the Help documentation for more information.",
                  "type": "Array<object>",
                  "properties": {
                    "disabled": {
                      "description": "Specifies if the menu item or buttonset toggle item is disabled.",
                      "type": "boolean"
                    },
                    "endIcon": {
                      "description": "Optional icon to show at the end position of a top-level menu item or of a buttonset toggle item (not supported for submenu items).",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enumValues": [
                            "class",
                            "img"
                          ]
                        },
                        "class": {
                          "type": "string"
                        },
                        "src": {
                          "type": "string"
                        }
                      }
                    },
                    "items": {
                      "description": "Specifies submenu or select menu content. See the Help documentation for more information.",
                      "type": "Array<object>"
                    },
                    "key": {
                      "description": "A unique key associated with the menu item.",
                      "type": "string"
                    },
                    "label": {
                      "description": "Text to show in the menu item or the buttonset toggle item.",
                      "type": "string",
                      "translatable": true
                    },
                    "onAction": {
                      "description": "An optional callback function associated with a top-level menu item (not supported for submenu items).",
                      "type": "function"
                    },
                    "startIcon": {
                      "description": "Optional icon to show at the start position of a top-level menu item or a buttonset toggle item (not supported for submenu items).",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enumValues": [
                            "class",
                            "img"
                          ]
                        },
                        "class": {
                          "type": "string"
                        },
                        "src": {
                          "type": "string"
                        }
                      }
                    },
                    "type": {
                      "description": "Specifies the type of the menu item (not supported for buttonset toggle items).",
                      "type": "string",
                      "enumValues": [
                        "item",
                        "submenu",
                        "selectsingle",
                        "selectmultiple",
                        "separator"
                      ]
                    },
                    "value": {
                      "description": "The value associated with a buttonset toggle item (not supported for menu items).",
                      "type": "string"
                    },
                    "variant": {
                      "description": "Specifies the behavior of a top-level menu item (not supported for submenu items nor buttonset toggle items).",
                      "type": "string",
                      "enumValues": [
                        "standard",
                        "destructive"
                      ]
                    }
                  }
                },
                "key": {
                  "description": "A unique key associated with the item (not supported for Menu Button items, and required for all other items).",
                  "type": "string"
                },
                "label": {
                  "description": "Text to show in the item (not supported for Buttonset items, and required for all other items).",
                  "type": "string",
                  "translatable": true
                },
                "onAction": {
                  "description": "A callback function associated with the item (only valid for Button, Split Menu Button, and Progress Button items).",
                  "type": "function"
                },
                "startIcon": {
                  "description": "Optional icon to show at the start position of an item (not supported for Split Menu Button nor Buttonset items).",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enumValues": [
                        "class",
                        "img"
                      ]
                    },
                    "class": {
                      "type": "string"
                    },
                    "src": {
                      "type": "string"
                    }
                  }
                },
                "suffix": {
                  "description": "Optional suffix appended to menu label to indicate last selection (only valid for Menu Button items).",
                  "type": "string",
                  "translatable": true
                },
                "tooltip": {
                  "description": "Optional override text for the default tooltip that renders the label when in icon mode (not supported for Buttonset items).",
                  "type": "string",
                  "translatable": true
                }
              }
            }
          },
          "value": []
        },
        "toolbarSelection": {
          "type": "object",
          "description": "An array containing key/value objects for selection groups.",
          "displayName": "toolbarSelection",
          "help": "#toolbarSelection",
          "extension": {
            "vbdt": {
              "keyedProperties": {
                "keys": {
                  "type": "string"
                },
                "values": {
                  "type": "string|boolean|Array<string>|object"
                }
              }
            }
          },
          "writeback": true,
          "value": {}
        }
      },
      "events": {
        "ojToolbarAction": {
          "bubbles": true,
          "description": "Triggered when a toolbar item is clicked, whether by keyboard, mouse, or touch events. Detail indicates which toolbar item was clicked.",
          "eventGroup": "common",
          "help": "#event:ojToolbarAction",
          "detail": {
            "key": {
              "type": "string"
            }
          }
        },
        "ojToolbarSelection": {
          "bubbles": true,
          "description": "Triggered when a toolbar selection group item is clicked, whether by keyboard, mouse, or touch events. Detail indicates new selection value for group.",
          "eventGroup": "common",
          "help": "#event:ojToolbarSelection",
          "detail": {
            "value": {
              "type": "string|boolean|Array<string>|object"
            },
            "toolbarSelectionGroupKey": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-rich-checkboxset": {
      "name": "rich-checkboxset",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRichCheckboxsetElement"
      ],
      "description": "A rich checkbox set allows the user to select one or more options from a set of rich options.",
      "displayName": "RichCheckboxset",
      "main": "oj-c/rich-checkboxset",
      "status": [
        {
          "type": "production",
          "since": "18.1.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/rich-checkboxset",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-on",
          "uxSpecs": [
            "checkboxset"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/RichCheckboxsetWebElement.html",
          "export": "findRichCheckboxset",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "direction",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "options",
            "value"
          ]
        }
      ],
      "since": "18.1.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint",
            "layout",
            "options"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the rich checkboxset, but is smaller than 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The rich checkboxset will not create a label, but instead set the aria-label property on the rich checkboxset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the rich checkboxset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the rich checkboxset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "layout": {
          "type": "string",
          "description": "Specifies the layout of the cards and media.",
          "displayName": "Layout",
          "enumValues": [
            "sm",
            "md",
            "xl"
          ]
        },
        "maxSelected": {
          "type": "number",
          "description": "The maximum number of items to select. If defined, it must be greater than or equal to 2.",
          "displayName": "Max Selected"
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "minSelected": {
          "type": "number",
          "description": "The minimal number of items to select. If defined, it must be greater than or equal to 2.",
          "displayName": "Min Selected"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "selectionExactMessageDetail": {
          "type": "function",
          "description": "Overrides the default Selection Exact message.",
          "displayName": "Selection Exact Message Detail",
          "help": "#selectionExactMessageDetail",
          "translatable": true
        },
        "selectionOverflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default Selection Overflow message.",
          "displayName": "Selection Overflow Message Detail",
          "help": "#selectionOverflowMessageDetail",
          "translatable": true
        },
        "selectionRangeMessageDetail": {
          "type": "function",
          "description": "Overrides the default Selection Range message.",
          "displayName": "Selection Range Message Detail",
          "help": "#selectionRangeMessageDetail",
          "translatable": true
        },
        "selectionUnderflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default Selection Underflow message.",
          "displayName": "Selection Underflow Message Detail",
          "help": "#selectionUnderflowMessageDetail",
          "translatable": true
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "options": {
          "type": "Array<object>",
          "description": "An array of data items that returns the option items for the Rich Checkboxset.",
          "displayName": "Options",
          "help": "#options"
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies whether the component is in a valid state",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "Array<string|number>|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the rich checkboxset.",
          "return": "void"
        },
        "focus": {
          "description": "Sets focus on the first tabbable checkbox card.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-rich-radioset": {
      "name": "rich-radioset",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CRichRadiosetElement"
      ],
      "description": "A rich radio set allows the user to select one option from a set of mutually exclusive rich options.",
      "displayName": "RichRadioset",
      "main": "oj-c/rich-radioset",
      "status": [
        {
          "type": "production",
          "since": "18.1.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Forms"
        },
        "vbdt": {
          "module": "oj-c/rich-radioset",
          "defaultColumns": 6,
          "minColumns": 2
        },
        "oracle": {
          "icon": "oj-ux-ico-radio-set",
          "uxSpecs": [
            "radioset"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/RichRadiosetWebElement.html",
          "export": "findRichRadioset",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled",
            "labelHint",
            "direction",
            "placeholder",
            "readonly",
            "required"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "options",
            "value"
          ]
        }
      ],
      "since": "18.1.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint",
            "layout",
            "options"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that describes whether or not it should be displayed.",
          "displayName": "Display Options",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property, sourceText property, and a source property.",
          "displayName": "Help Hints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label will be placed on top of the rich radioset, but is smaller than 'top' option.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The rich radioset will not create a label, but instead set the aria-label property on the rich radioset.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the rich radioset.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the rich radioset.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "layout": {
          "type": "string",
          "description": "Specifies the layout of the cards and media.",
          "displayName": "Layout",
          "enumValues": [
            "sm",
            "md",
            "xl"
          ]
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Help and hints are shown above the field. Messages and required are shown inline under the field with reserved space.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "options": {
          "type": "Array<object>",
          "description": "An array of data items that returns the option items for the Rich Radioset.",
          "displayName": "Options",
          "help": "#options"
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies whether the component is in a valid state",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "string|number|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the rich radioset.",
          "return": "void"
        },
        "focus": {
          "description": "Sets focus on the selected radio card or the first tabbable radio card.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-input-time-mask": {
      "name": "input-time-mask",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CInputTimeMaskElement"
      ],
      "displayName": "InputTimeMask",
      "description": "An input time mask field allows a user to enter, edit, or display a time value.",
      "help": "oj-c.InputTimeMask.html",
      "main": "oj-c/input-time-mask",
      "status": [
        {
          "type": "candidate",
          "since": "19.0.0"
        }
      ],
      "since": "19.0.0",
      "requirements": [
        {
          "type": "anyOf",
          "label": "accessibility",
          "properties": [
            "labelHint"
          ]
        },
        {
          "type": "not",
          "label": "accessibility",
          "properties": [
            "aria-label",
            "aria-labelledby"
          ]
        }
      ],
      "properties": {
        "columnSpan": {
          "type": "number",
          "description": "Specifies how many columns this component should span.",
          "displayName": "Column Span",
          "help": "#columnSpan",
          "value": 1
        },
        "containerReadonly": {
          "type": "boolean",
          "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
          "displayName": "Container Readonly",
          "help": "#containerReadonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "disabled": {
          "type": "boolean",
          "description": "Specifies whether the component is disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "displayOptions": {
          "type": "object",
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "messages": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            },
            "validatorHint": {
              "type": "string",
              "enumValues": [
                "none",
                "display"
              ],
              "value": "display"
            }
          }
        },
        "granularity": {
          "type": "string",
          "description": "Specifies the smallest time unit that is displayed by the component.",
          "displayName": "Granularity",
          "help": "#granularity",
          "enumValues": [
            "minute",
            "second",
            "millisecond"
          ],
          "value": "minute"
        },
        "leadingZeroForHour": {
          "type": "string",
          "description": "Specifies whether to show or hide a leading zero in the hour field or determine it from the locale.",
          "displayName": "Leading Zero For Hour",
          "help": "#leadingZeroForHour",
          "enumValues": [
            "hide",
            "show",
            "fromLocale"
          ],
          "value": "fromLocale"
        },
        "help": {
          "type": "object",
          "description": "Form component help information.",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "type": "string",
              "value": ""
            }
          }
        },
        "helpHints": {
          "type": "object",
          "description": "The helpHints object contains a definition property and a source property.",
          "displayName": "Help Hints",
          "help": "#helpHints",
          "properties": {
            "definition": {
              "type": "string",
              "value": ""
            },
            "source": {
              "type": "string",
              "value": ""
            },
            "sourceText": {
              "type": "string"
            }
          }
        },
        "hourClock": {
          "type": "string",
          "description": "Specifies whether to display the time as a 12-hour clock or 24-hour clock or if the hour clock is determined from the locale.",
          "displayName": "Hour Clock",
          "help": "#hourClock",
          "enumValues": [
            "12",
            "24",
            "fromLocale"
          ],
          "value": "fromLocale"
        },
        "labelEdge": {
          "type": "string",
          "description": "Specifies how the label is positioned for the component",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "propertyEditorValues": {
            "inside": {
              "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not create a label, but instead set the aria-label property on the input element.",
              "displayName": "None"
            },
            "start": {
              "description": "The label will be placed before the start of the component.",
              "displayName": "Start"
            },
            "top": {
              "description": "The label will be placed on top of the component.",
              "displayName": "Top"
            }
          },
          "enumValues": [
            "none",
            "start",
            "top",
            "inside"
          ],
          "binding": {
            "consume": {
              "name": "containerLabelEdge"
            }
          }
        },
        "labelHint": {
          "type": "string",
          "description": "Represents a hint for rendering a label on the component.",
          "displayName": "Label Hint",
          "help": "#labelHint",
          "required": true,
          "translatable": true
        },
        "labelStartWidth": {
          "type": "number|string",
          "description": "The width of the label when labelEdge is 'start'.",
          "displayName": "Label Start Width",
          "help": "#labelStartWidth",
          "binding": {
            "consume": {
              "name": "labelWidth"
            }
          }
        },
        "labelWrapping": {
          "type": "string",
          "description": "Should the labels wrap or truncate when there is not enough available space.",
          "displayName": "Label Wrapping",
          "help": "#labelWrapping",
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed.",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed.",
              "displayName": "Wrap"
            }
          },
          "status": [
            {
              "type": "deprecated",
              "since": "19.0.0",
              "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
            }
          ],
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "binding": {
            "consume": {
              "name": "labelWrapping"
            }
          }
        },
        "max": {
          "type": "string|null",
          "description": "The maximum selectable time",
          "displayName": "Max",
          "help": "#max"
        },
        "maxWidth": {
          "type": "number|string",
          "description": "The max width of the control.",
          "displayName": "Max Width",
          "help": "#maxWidth",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "messagesCustom": {
          "type": "Array<object>",
          "description": "List of custom component messages",
          "displayName": "Messages Custom",
          "help": "#messagesCustom",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "summary": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "severity": {
                  "type": "string",
                  "enumValues": [
                    "error",
                    "confirmation",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          },
          "writeback": true,
          "value": []
        },
        "min": {
          "type": "string|null",
          "description": "The minimum selectable time",
          "displayName": "Min",
          "help": "#min"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the component is readonly",
          "displayName": "Readonly",
          "help": "#readonly",
          "binding": {
            "consume": {
              "name": "containerReadonly"
            }
          }
        },
        "readonlyUserAssistanceShown": {
          "type": "string",
          "description": "Specifies which user assistance types should be shown when the component is readonly.",
          "displayName": "ReadonlyUserAssistanceShown",
          "help": "#readonlyUserAssistanceShown",
          "enumValues": [
            "none",
            "confirmationAndInfoMessages"
          ],
          "value": "none"
        },
        "required": {
          "type": "boolean",
          "description": "Specifies whether or not the component is required.",
          "displayName": "Required",
          "help": "#required",
          "value": false
        },
        "requiredMessageDetail": {
          "type": "string",
          "description": "Overrides the default Required error message.",
          "displayName": "Required Message Detail",
          "help": "#requiredMessageDetail",
          "translatable": true
        },
        "textAlign": {
          "type": "string",
          "description": "Specifies how the text is aligned within the text field",
          "displayName": "Text Align",
          "help": "#textAlign",
          "propertyEditorValues": {
            "start": {
              "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
              "displayName": "Start"
            },
            "end": {
              "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
              "displayName": "End"
            },
            "right": {
              "description": "Aligns text right regardless of reading direction, often used for numbers.",
              "displayName": "Right"
            }
          },
          "enumValues": [
            "end",
            "start",
            "right"
          ]
        },
        "timeRangeOverflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeOverflow message detail.",
          "displayName": "Time Range Overflow Message Detail",
          "help": "#timeRangeOverflowMessageDetail"
        },
        "timeRangeUnderflowMessageDetail": {
          "type": "function",
          "description": "Overrides the default validator's rangeUnderflow message detail.",
          "displayName": "Time Range Underflow Message Detail",
          "help": "#timeRangeUnderflowMessageDetail"
        },
        "userAssistanceDensity": {
          "type": "string",
          "description": "Specifies the density of the form component's user assistance presentation.",
          "displayName": "User Assistance Density",
          "help": "#userAssistanceDensity",
          "propertyEditorValues": {
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            }
          },
          "enumValues": [
            "compact",
            "reflow",
            "efficient"
          ],
          "binding": {
            "consume": {
              "name": "containerUserAssistanceDensity"
            }
          }
        },
        "validators": {
          "type": "Array<object>|null",
          "description": "Specifies the validators for the component.",
          "displayName": "Validators",
          "help": "#validators",
          "value": []
        },
        "value": {
          "type": "string|null",
          "description": "The value of the component.",
          "displayName": "Value",
          "help": "#value",
          "writeback": true,
          "value": null
        },
        "width": {
          "type": "number|string",
          "description": "The width of the control.",
          "displayName": "Width",
          "help": "#width",
          "propertyEditorValues": {
            "sm": {},
            "md": {}
          }
        },
        "rawValue": {
          "type": "object",
          "description": "Specifies how the raw value of the component",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "properties": {
            "hour": {
              "type": "number"
            },
            "minute": {
              "type": "number"
            },
            "second": {
              "type": "number"
            },
            "millisecond": {
              "type": "number"
            }
          },
          "readOnly": true,
          "writeback": true
        },
        "valid": {
          "type": "string",
          "description": "Specifies how the valid state of the component",
          "displayName": "Valid",
          "help": "#valid",
          "propertyEditorValues": {
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
              "displayName": "Pending"
            },
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
              "displayName": "Invalid Shown"
            }
          },
          "enumValues": [
            "pending",
            "valid",
            "invalidHidden",
            "invalidShown"
          ],
          "readOnly": true,
          "writeback": true
        }
      },
      "methods": {
        "blur": {
          "description": "Blurs the field.",
          "return": "void"
        },
        "focus": {
          "description": "Focuses the field.",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
          "return": "void"
        },
        "validate": {
          "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
          "return": "Promise"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "extension": {
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputTimeMaskWebElement.html",
          "export": "findInputTimeMask",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      }
    },
    "oj-c-badge": {
      "name": "badge",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CBadgeElement"
      ],
      "displayName": "Badge",
      "description": "A badge is a label which holds a small amount of information.",
      "main": "oj-c/badge",
      "since": "19.0.0",
      "status": [
        {
          "type": "supersedes",
          "since": "19.0.0",
          "description": "Note: This component supersedes the following style class: <a href='stylingdocs/Badge.html#oj-badge'>oj-badge</a>."
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/badge"
        },
        "oracle": {
          "icon": "oj-ux-ico-badge",
          "uxSpecs": [
            "badge"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/BadgeWebElement.html",
          "export": "findBadge",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "variant",
            "size",
            "edge",
            "label"
          ]
        }
      ],
      "properties": {
        "variant": {
          "type": "string",
          "description": "Sets the variant for the badge. Badge can be subtle or solid with different colors. The default value of this property is theme driven.",
          "displayName": "Variant",
          "help": "#variant",
          "enumValues": [
            "success",
            "danger",
            "info",
            "warning",
            "neutral",
            "neutralSubtle",
            "dangerSubtle",
            "successSubtle",
            "warningSubtle",
            "infoSubtle"
          ]
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the badge. Consists of two options: medium and small. The default value of this property is theme driven.",
          "displayName": "Size",
          "help": "#size",
          "enumValues": [
            "sm",
            "md"
          ]
        },
        "edge": {
          "type": "string",
          "description": "Specifies the edge of the badge. Badges can be attached to the end edge of another component. They lose their default corner rounding on right side for ltr direction or left side for rtl direction.",
          "displayName": "Edge",
          "help": "#edge",
          "enumValues": [
            "none",
            "end"
          ]
        },
        "label": {
          "type": "string",
          "description": "\"Specifies the text to be displayed in the badge.",
          "displayName": "Label",
          "help": "#label"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-truncating-badge": {
      "name": "truncating-badge",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTruncatingBadgeElement"
      ],
      "displayName": "Truncating Badge",
      "description": "A truncating badge is a label which holds a small amount of information, and also displays a tooltip when truncation occurs.",
      "main": "oj-c/truncating-badge",
      "since": "19.0.0",
      "status": [
        {
          "type": "production",
          "since": "19.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/truncating-badge"
        },
        "oracle": {
          "icon": "oj-ux-ico-badge",
          "uxSpecs": [
            "badge"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TruncatingBadgeWebElement.html",
          "export": "findTruncatingBadge",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "variant",
            "size",
            "edge",
            "label"
          ]
        }
      ],
      "properties": {
        "variant": {
          "type": "string",
          "description": "Sets the variant for the badge. Badge can be subtle or solid with different colors. The default value of this property is theme driven.",
          "displayName": "Variant",
          "help": "#variant",
          "enumValues": [
            "success",
            "danger",
            "info",
            "warning",
            "neutral",
            "neutralSubtle",
            "dangerSubtle",
            "successSubtle",
            "warningSubtle",
            "infoSubtle"
          ]
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the badge. Consists of two options: medium and small. The default value of this property is theme driven.",
          "displayName": "Size",
          "help": "#size",
          "enumValues": [
            "sm",
            "md"
          ]
        },
        "edge": {
          "type": "string",
          "description": "Specifies the edge of the badge. Badges can be attached to the end edge of another component. They lose their default corner rounding on right side for ltr direction or left side for rtl direction.",
          "displayName": "Edge",
          "help": "#edge",
          "enumValues": [
            "none",
            "end"
          ]
        },
        "label": {
          "type": "string",
          "description": "\"Specifies the text to be displayed in the badge.",
          "displayName": "Label",
          "help": "#label"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-c-truncating-text": {
      "name": "truncating-text",
      "version": "19.0.0",
      "jetVersion": "^19.0.0",
      "pack": "oj-c",
      "type": "composite",
      "dependencyScope": "runtime",
      "license": "https://opensource.org/licenses/UPL",
      "implements": [
        "CTruncatingTextElement"
      ],
      "displayName": "Truncating Text",
      "description": "Truncating Text shows a tooltip containing the full text while also acting as a tab stop when truncation occurs.",
      "main": "oj-c/truncating-text",
      "since": "19.0.0",
      "status": [
        {
          "type": "production",
          "since": "19.0.0"
        }
      ],
      "extension": {
        "catalog": {
          "category": "Controls"
        },
        "vbdt": {
          "module": "oj-c/truncating-text"
        },
        "oracle": {
          "icon": "oj-ux-ico-text",
          "uxSpecs": [
            "text"
          ]
        },
        "webelement": {
          "package": "@oracle/oraclejet-core-pack",
          "version": "19.0.0",
          "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/TruncatingTextWebElement.html",
          "export": "findTruncatingText",
          "main": "@oracle/oraclejet-core-pack/webdriver"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "variant",
            "size",
            "weight",
            "value"
          ]
        }
      ],
      "properties": {
        "variant": {
          "type": "string",
          "description": "Specifies text color. If set as 'inherit', takes text color from its parent element.",
          "displayName": "Variant",
          "help": "#variant",
          "enumValues": [
            "inherit",
            "disabled",
            "success",
            "danger",
            "warning",
            "primary",
            "secondary"
          ]
        },
        "size": {
          "type": "string",
          "description": "Specifies font size and line height. If set as 'inherit', takes font size and line height from its parent element.",
          "displayName": "Size",
          "help": "#size",
          "enumValues": [
            "inherit",
            "sm",
            "md",
            "lg",
            "xs",
            "2xs",
            "xl"
          ]
        },
        "weight": {
          "type": "string",
          "description": "Specifies the font weight. If set as 'inherit', takes font weight from its parent element.",
          "displayName": "Weight",
          "help": "#weight",
          "enumValues": [
            "bold",
            "normal",
            "inherit",
            "semiBold"
          ]
        },
        "overflowWrap": {
          "type": "string",
          "description": "Specifies the overflow-wrap.",
          "displayName": "OverflowWrap",
          "help": "#overflowWrap",
          "enumValues": [
            "normal",
            "anywhere",
            "breakWord"
          ]
        },
        "hyphens": {
          "type": "string",
          "description": "Specifies if hyphens should be included when handling long words with no spaces.",
          "displayName": "Hyphens",
          "help": "#hyphens",
          "enumValues": [
            "auto",
            "none"
          ]
        },
        "truncation": {
          "type": "string",
          "description": "Determines text behavior when text is truncated. Be aware of setting either lineClamp or truncation. Setting both props would produce a type error. In most cases, lineClamp=1 tries to put the ellipsis at the end of a \"word\". On the other hand, using truncation=\"ellipsis\" will show as much as possible text, then put the ellipsis at the end.",
          "displayName": "Truncation",
          "help": "#truncation",
          "enumValues": [
            "none",
            "clip",
            "ellipsis"
          ]
        },
        "lineClamp": {
          "type": "number",
          "description": "Truncates text at a specific number of lines and then displays an ellipsis (…) at the end of the last line. Parent of the element needs to have a specific width so text starts overflowing and produce a truncation.",
          "displayName": "LineClamp",
          "help": "#lineClamp"
        },
        "value": {
          "type": "string",
          "description": "\"Specifies the text to be displayed.",
          "displayName": "Value",
          "help": "#value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    }
  }
}
