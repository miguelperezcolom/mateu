{"version":3,"file":"TabBarMixed-2d5bc172.js","sources":["../../src/UNSAFE_TabBarMixed/TabBarMixed.tsx","../../src/UNSAFE_TabBarMixed/useTabBarMixed.ts"],"sourcesContent":["import type { ComponentChildren } from 'preact';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { Ref } from 'preact';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { TabBarContext, TabBarContextMenuConfig } from '../UNSAFE_TabBarCommon';\nimport { isMobile } from '#utils/UNSAFE_clientUtils';\nimport { styles } from './themes/TabBarMixedStyles.css';\nimport { useTabBarMixed as useTabBar } from './useTabBarMixed';\nimport { REMOVABLE_ITEM_ATTRIBUTE, getItemAttribute } from '../hooks/PRIVATE_useTabBar/useTabBar';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { TabBarContextMenu } from '../UNSAFE_TabBar/TabBarContextMenu';\n\ntype UseTabBarOptions = Parameters<typeof useTabBar>[0];\n\n/**\n * Component props expected to be pased to **TabBarMixed**.\n *\n * @see {@link TabBarMixed}\n */\ntype TabBarMixedProps<K extends string | number> = {\n  /**\n   * Component children that will be rendered within the **TabBarMixed**\n   * root element.\n   *\n   * It is expected that **TabBarLayout** and **ConveyorBelt** elements are\n   * provided. The same **TabBarItem**, **RemovableTabBarItem**,\n   * and **OverflowTabBarItem** elements should also be used.\n   */\n  children?: ComponentChildren;\n  /**\n   * Callback fired when a tab item is removed.\n   */\n  onRemove?: UseTabBarOptions['onRemove'];\n  /**\n   * Callback fired when a tab item is selected.\n   */\n  onSelect?: UseTabBarOptions['onSelect'];\n  /**\n   * The item key of the selected tab item.\n   */\n  selection?: K;\n  /**\n   * The height of the the tab bar.\n   *\n   * @default \"md\"\n   */\n  size?: UseTabBarOptions['size'];\n  /**\n   * An aria-label which defines a string value that labels this TabBarMixed.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBarMixed accessible.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An aria-labelledby which identifies the element(s) that labels this TabBarMixed.\n   * Either aria-label or aria-labelledby should be specified in order to make TabBarMixed accessible.\n   */\n  'aria-labelledby'?: string;\n};\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\n\n/**\n * A navigation component that enables horizontal navigation between distinct content with a mixture of static and dynamic tabs.\n *\n * @param {TabBarMixedProps} props TabBarMixed component props.\n * @returns {JSX.Element} TabBarMixed component element.\n */\nexport const TabBarMixed = forwardRef(\n  <K extends string | number>(\n    props: TabBarMixedProps<K>,\n    focusHandleRef?: Ref<FocusableHandle>\n  ) => {\n    const {\n      children,\n      onRemove,\n      onSelect,\n      selection,\n      size,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby\n    } = props;\n\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const isMobileDevice = isMobile();\n    const defaultContextMenuConfig = useMemo<TabBarContextMenuConfig<string | number>>(() => {\n      return {\n        itemsRenderer: (context) => {\n          //Only if context is available, it is a mobile device and it is removable item, we will return remove context menu item\n          if (context) {\n            const isRemovableItem =\n              getItemAttribute(context.itemKey, rootRef.current!, REMOVABLE_ITEM_ATTRIBUTE) != null;\n            if (isRemovableItem && isMobileDevice) {\n              const defaultItems = context.defaultMenuItems;\n              return <>{defaultItems}</>;\n            }\n          }\n          return null;\n        }\n      };\n    }, []);\n\n    const {\n      rootProps,\n      tabBarContext,\n      menuProps,\n      contextMenuContext,\n      contextMenuDescription,\n      contextMenuDescriptionId,\n      accStatusInfo\n    } = useTabBar({\n      class: styles.tabBarBase,\n      edge: 'bottom',\n      onRemove,\n      onSelect,\n      ref: rootRef,\n      selection,\n      size,\n      children,\n      contextMenuConfig: defaultContextMenuConfig\n    });\n\n    const isContextMenuAvailable = defaultContextMenuConfig != null && isMobileDevice;\n    //Allows to call focus on rootRef without having to expose it\n    useImperativeHandle(focusHandleRef!, () => ({\n      focus: () => {\n        if (rootRef.current) {\n          rootRef.current.focus();\n        }\n      },\n      blur: () => {\n        if (rootRef.current) {\n          rootRef.current.blur();\n        }\n      }\n    }));\n\n    return (\n      <>\n        <TabBarContext.Provider value={tabBarContext}>\n          <div aria-label={ariaLabel} aria-labelledby={ariaLabelledby} {...rootProps}>\n            {children}\n          </div>\n        </TabBarContext.Provider>\n        {isContextMenuAvailable && contextMenuDescriptionId && contextMenuDescription && (\n          <span id={contextMenuDescriptionId}>\n            <HiddenAccessible>{contextMenuDescription}</HiddenAccessible>\n          </span>\n        )}\n        {isContextMenuAvailable && accStatusInfo && <LiveRegion>{accStatusInfo}</LiveRegion>}\n        {isContextMenuAvailable && (\n          <TabBarContextMenu\n            {...menuProps}\n            contextMenuConfig={defaultContextMenuConfig}\n            contextMenuContext={contextMenuContext!}\n          />\n        )}\n      </>\n    );\n  }\n);\n","import type { ComponentProps, ContextType, RefObject } from 'preact';\nimport type { TabBarContext, TabBarLayout } from '../UNSAFE_TabBarCommon';\nimport { TabBar } from '../UNSAFE_TabBar/TabBar';\nimport { useTabBar } from '../hooks/PRIVATE_useTabBar';\n\ntype TabBarContextValue = ContextType<typeof TabBarContext>;\n\nexport type useTabBarOptions = {\n  class?: string;\n  display?: TabBarContextValue['display'];\n  edge?: 'bottom' | 'top';\n  onRemove?: TabBarContextValue['onRemove'];\n  onSelect?: TabBarContextValue['onSelect'];\n  ref?: RefObject<HTMLDivElement>;\n  selection?: TabBarContextValue['selection'];\n  size?: TabBarContextValue['size'];\n  children?: ComponentProps<typeof TabBarLayout>['children'];\n  contextMenuConfig?: ComponentProps<typeof TabBar>['contextMenuConfig'];\n};\n\n/**\n * A thin wrapper around useTabBar hook\n */\nexport function useTabBarMixed(options: useTabBarOptions) {\n  return useTabBar(options);\n}\n"],"names":["TabBarMixed","forwardRef","props","focusHandleRef","children","onRemove","onSelect","selection","size","ariaLabel","ariaLabelledby","rootRef","useRef","isMobileDevice","isMobile","defaultContextMenuConfig","useMemo","itemsRenderer","context","getItemAttribute","itemKey","current","REMOVABLE_ITEM_ATTRIBUTE","defaultItems","defaultMenuItems","_jsx","jsx","_Fragment","Fragment","rootProps","tabBarContext","menuProps","contextMenuContext","contextMenuDescription","contextMenuDescriptionId","accStatusInfo","options","class","styles","tabBarBase","edge","ref","contextMenuConfig","useTabBar","isContextMenuAvailable","useImperativeHandle","focus","blur","_jsxs","jsxs","TabBarContext","Provider","value","id","HiddenAccessible","LiveRegion","TabBarContextMenu"],"mappings":"+wCAwEa,MAAAA,EAAcC,EAAUA,YACnC,CACEC,EACAC,KAEA,MAAMC,SACJA,EAAQC,SACRA,EAAQC,SACRA,EAAQC,UACRA,EAASC,KACTA,EACA,aAAcC,EACd,kBAAmBC,GACjBR,EAEES,EAAUC,SAAuB,MAEjCC,EAAiBC,EAAAA,WACjBC,EAA2BC,EAAAA,SAAkD,KAC1E,CACLC,cAAgBC,IAEd,GAAIA,EAAS,CAGX,GADmF,MAAjFC,EAAgBA,iBAACD,EAAQE,QAAST,EAAQU,QAAUC,6BAC/BT,EAAgB,CACrC,MAAMU,EAAeL,EAAQM,iBAC7B,OAAOC,EAAAC,IAAAC,EAAAC,SAAA,CAAAxB,SAAGmB,GACX,CACF,CACD,OAAO,IAAI,KAGd,KAEGM,UACJA,EAASC,cACTA,EAAaC,UACbA,EAASC,mBACTA,EAAkBC,uBAClBA,EAAsBC,yBACtBA,EAAwBC,cACxBA,IC3FyBC,ED4Fb,CACZC,MAAOC,EAAMA,OAACC,WACdC,KAAM,SACNnC,WACAC,WACAmC,IAAK9B,EACLJ,YACAC,OACAJ,WACAsC,kBAAmB3B,GCpGhB4B,EAAAA,UAAUP,IADb,IAAyBA,EDwG3B,MAAMQ,EAAqD,MAA5B7B,GAAoCF,EAenE,OAbAgC,EAAmBA,oBAAC1C,GAAiB,KAAO,CAC1C2C,MAAO,KACDnC,EAAQU,SACVV,EAAQU,QAAQyB,OACjB,EAEHC,KAAM,KACApC,EAAQU,SACVV,EAAQU,QAAQ0B,MACjB,MAKHC,EAAAC,KAAAtB,EAAAC,SAAA,CAAAxB,SAAA,CACEqB,EAAAA,IAACyB,EAAAA,cAAcC,SAAQ,CAACC,MAAOtB,EAAa1B,SAC1CqB,EAAAA,IAAiB,MAAA,CAAA,aAAAhB,oBAA4BC,KAAoBmB,EAASzB,SACvEA,MAGJwC,GAA0BV,GAA4BD,GACrDR,EAAAA,IAAA,OAAA,CAAM4B,GAAInB,EACR9B,SAAAqB,EAAAA,IAAC6B,EAAAA,iBAAgB,CAAAlD,SAAE6B,MAGtBW,GAA0BT,GAAiBV,MAAC8B,EAAUA,WAAA,CAAAnD,SAAE+B,IACxDS,GACCnB,EAAAC,IAAC8B,EAAiBA,kBAAA,IACZzB,EACJW,kBAAmB3B,EACnBiB,mBAAoBA,MAI1B"}