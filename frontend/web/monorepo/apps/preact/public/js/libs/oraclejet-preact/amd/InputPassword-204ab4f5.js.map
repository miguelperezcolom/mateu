{"version":3,"file":"InputPassword-204ab4f5.js","sources":["../../src/UNSAFE_InputPassword/InputPassword.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useImperativeHandle, useRef } from 'preact/hooks';\n\nimport { FocusableHandle, useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useHover } from '#hooks/UNSAFE_useHover';\nimport { Label } from '#UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from '#PRIVATE_RevealToggleIcon';\nimport { useClearIcon } from '#hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '#utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '#PRIVATE_ClearIcon/ClearIcon';\nimport { Size } from '#utils/UNSAFE_size';\nimport { useToggle } from '#hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '#hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\nimport { SelectableHandle, useSelectableTextField } from '#hooks/UNSAFE_useSelectableTextField';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { defaultTextAlignForVariant } from '#utils/PRIVATE_formControlUtils';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n  /**\n   * Specifies whether the reveal toggle should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The reveal toggle is always visible and the user can click on it to reveal the password in plain text.\n   * When the user leaves the field, the password is automatically masked.</li>\n   * <li><code>'never'</code>: The reveal toggle is never visible and the user can never reveal the password in plain text.</li>\n   * </ul>\n   */\n  hasRevealToggle?: 'always' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field. If the labelEdge is 'none',\n   * the labelHint is hidden from the user but is still accessible.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n} & TestIdProps;\n\ntype FocusSelectHandle = FocusableHandle & SelectableHandle;\n\n// One way InputPassword differs from InputText is InputPassword's readonly\n// is implemented with an <input> and not a <div>.\n/**\n * An InputPassword is a password input field with a reveal icon.\n */\nexport const InputPassword = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      columnSpan,\n      hasClearIcon,\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit,\n      testId\n    }: Props,\n    ref?: Ref<FocusSelectHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign ?? defaultTextAlignForVariant(variant);\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const enabledElementRef = useRef<HTMLInputElement>(null);\n    const readonlyElementRef = useRef<HTMLInputElement>(null);\n    const {\n      focusProps,\n      isFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLInputElement>({\n      enabledElementRef,\n      readonlyElementRef,\n      isDisabled,\n      isReadonly,\n      onBlurWithin: setRevealedFalse\n    });\n\n    const { methods: selectMethods } = useSelectableTextField<HTMLInputElement>(enabledElementRef);\n\n    useImperativeHandle(ref!, () => mergeProps(focusMethods, selectMethods), [\n      focusMethods,\n      selectMethods\n    ]);\n\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal button,\n    // toggle revealing/masking password\n    const onRevealIconToggle = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed, setRevealedFalse, setRevealedTrue]);\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n    const passwordMaskedStr = translations.inputPassword_hidden();\n    const passwordShowStr = translations.inputPassword_show();\n    const passwordHideStr = translations.inputPassword_hide();\n\n    const revealToggleIcon =\n      !isDisabled && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon\n          accessibleLabel={passwordMaskedStr}\n          isRevealed={isRevealed}\n          onToggle={onRevealIconToggle}\n          tooltipHide={passwordHideStr}\n          tooltipShow={passwordShowStr}\n          testId={`${testId}_toggleicon`}\n        />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} testId={`${testId}_clearicon`} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined,\n      labelText: labelEdge === 'inside' && !isDisabled ? label : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : isReadonly ? (\n        <InlineUserAssistance\n          fieldLabel={label}\n          messages={messages}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"input\"\n          autoFocus={autoFocus}\n          elementRef={readonlyElementRef}\n          formVariant={variant}\n          textAlign={textAlign}\n          type=\"password\"\n          value={value}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          onBlur={inputProps.onBlur}\n          onFocus={inputProps.onFocus}\n        />\n      );\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            ref={anchorRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <TextFieldInput\n        aria-label={ariaLabel}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        currentCommitValue={currentCommitValue}\n        hasEndContent={!!(maybeClearIcon || revealToggleIcon)}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        onInput={onInputAndDispatch}\n        onCommit={onCommitAndDispatch}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        value={value}\n        type={isRevealed ? 'text' : 'password'}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          columnSpan={columnSpan}\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          compactUserAssistance={compactUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onFocusOut}\n          onFocus={focusProps.onFocusIn}\n          mainFieldRef={anchorRef}\n          testId={testId}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["InputPassword","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","columnSpan","hasClearIcon","hasRevealToggle","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","onInput","onCommit","testId","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","defaultTextAlignForVariant","bool","isRevealed","setFalse","setRevealedFalse","setTrue","setRevealedTrue","useToggle","enabledElementRef","useRef","readonlyElementRef","focusProps","isFocused","methods","focusMethods","useFocusableTextField","onBlurWithin","selectMethods","useSelectableTextField","useImperativeHandle","mergeProps","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","onRevealIconToggle","translations","useTranslationBundle","passwordMaskedStr","inputPassword_hidden","passwordShowStr","inputPassword_show","passwordHideStr","inputPassword_hide","revealToggleIcon","_jsx","RevealToggleIcon","accessibleLabel","onToggle","tooltipHide","tooltipShow","onClickClearIcon","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","jsx","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","labelComp","Label","undefined","fieldLabelProps","labelText","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","compactUserAssistance","CompactUserAssistance","mainContent","ReadonlyTextFieldInput","id","as","elementRef","formVariant","hasEmptyLabel","hasInsideLabel","onBlur","onFocus","FormFieldContext","Provider","children","ReadonlyTextField","role","TextFieldInput","hasEndContent","inputRef","TextField","endContent","onFocusOut","onFocusIn","mainFieldRef"],"mappings":"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"}