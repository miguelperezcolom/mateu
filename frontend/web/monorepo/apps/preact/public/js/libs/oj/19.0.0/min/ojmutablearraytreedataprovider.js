/**
 * @license
 * Copyright (c) 2014, 2025, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
define(["exports","ojs/ojcore-base","ojs/ojarraydataprovider","ojs/ojeventtarget","ojs/ojlogger"],function(t,e,r,s,i){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;
/**
     * @preserve Copyright 2013 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
class a{set data(t){const e=null==this._data?[]:this._data;if(this._data=t,this._getRootDataProvider()===this)if((null==e||0===e.length)&&null!=this._data&&this._data.length>0||(null==this._data||0===this._data.length)&&null!=e&&e.length>0||this._data.length!==e.length)this._baseDataProvider=new r(this._data,this._baseDPOptions),this._dataRefreshed(null,null);else{const t=this.findDiffNodes(this._data,e,[],"",{},{}),s=t.add,{refresh:i}=t;if(this._baseDataProvider=new r(this._data,this._baseDPOptions),s.length>0||i.length>0){const{mutationEvent:e,refreshEvent:r}=this._dataMutated(s,t.refresh);this._dataRefreshed(e,r)}}}get data(){return this._data}constructor(t,e,s,i){var a;this.keyAttribute=e,this.options=s,this._rootDataProvider=i,this.TreeAsyncIterator=class{constructor(t,e){this._parent=t,this._baseIterable=e}next(){return this._baseIterable[Symbol.asyncIterator]().next().then(t=>{const e=t.value.metadata;for(let r=0;r<e.length;r++)e[r]=this._parent._getTreeMetadata(e[r],t.value.data[r]);return t})}},this.TreeAsyncIterable=(a=class{constructor(t,e){this._parent=t,this._asyncIterator=e,this[Symbol.asyncIterator]=()=>this._asyncIterator}},Symbol.asyncIterator,a),this._mapKeyToNode=new Map,this._mapNodeToKey=new Map,this._mapKeyToParentNodePath=new Map,this._baseDPOptions={keyAttributes:e},s&&(s.textFilterAttributes&&(this._baseDPOptions.textFilterAttributes=s.textFilterAttributes),s.sortComparators&&(this._baseDPOptions.sortComparators=s.sortComparators),s.implicitSort&&(this._baseDPOptions.implicitSort=s.implicitSort),s.keyAttributeScope&&(this._baseDPOptions.keyAttributesScope=s.keyAttributeScope),s.childrenAttribute&&(this._baseDPOptions.childrenAttribute=s.childrenAttribute)),this._baseDataProvider=new r(t,this._baseDPOptions),this._childrenAttr=this.options&&this.options.childrenAttribute?this.options.childrenAttribute:"children",null==i&&(this._parentNodePath=[],this._processTreeArray(t,[])),this.data=t}getChildDataProvider(t,e){const r=this._getNodeForKey(t);if(r){const e=this._getChildren(r);if(e){const r=new a(e,this.keyAttribute,this.options,this._getRootDataProvider());if(Object.defineProperty(r,"data",{writable:!1}),null!=r){const e=this.options?.enforceKeyStringify,s=this._getRootDataProvider(),i="on"===e?t:JSON.stringify(t);r._parentNodePath=s._mapKeyToParentNodePath.get(i)}return r}}return null}fetchFirst(t){t=this._applyLeafNodeFilter(t);const e=this._baseDataProvider.fetchFirst(t);return new this.TreeAsyncIterable(this,new this.TreeAsyncIterator(this,e))}fetchByOffset(t){t=this._applyLeafNodeFilter(t);return this._baseDataProvider.fetchByOffset(t).then(e=>{const r=e.results,s=[];for(const t of r){let e=t.metadata;const r=t.data;e=this._getTreeMetadata(e,r),s.push({data:r,metadata:e})}const i={done:e.done,fetchParameters:e.fetchParameters,results:s};return"enabled"===t.includeFilteredRowCount&&(i.totalFilteredRowCount=e.totalFilteredRowCount),i})}fetchByKeys(t){const e=new Map;return t.keys.forEach(t=>{const r=this._getNodeForKey(t);r&&e.set(t,{metadata:{key:t},data:r})}),Promise.resolve({fetchParameters:t,results:e})}containsKeys(t){return this.fetchByKeys(t).then(e=>{const r=new Set;return t.keys.forEach(t=>{null!=e.results.get(t)&&r.add(t)}),Promise.resolve({containsParameters:t,results:r})})}getCapability(t){if("key"===t){const t="on"===this.options?.enforceKeyStringify;return"on"===this.options?.useKeyPaths||t&&!this.options?.useKeyPaths?t?{structure:"pathArrayString"}:{structure:"pathArray"}:{structure:"none"}}return this._baseDataProvider.getCapability(t)}getTotalSize(){return this._baseDataProvider.getTotalSize()}isEmpty(){return this._baseDataProvider.isEmpty()}createOptimizedKeySet(t){return this._baseDataProvider.createOptimizedKeySet(t)}createOptimizedKeyMap(t){return this._baseDataProvider.createOptimizedKeyMap(t)}_processTreeArray(t,e){let r;t instanceof Array&&(r=t),r.forEach((r,s)=>{this._processNode(r,e,t)})}_getRootDataProvider(){return this._rootDataProvider?this._rootDataProvider:this}_processNode(t,e,r){const s=this._createKeyObj(t,e,r);this._setMapEntry(s.key,t);const i=this.options?.enforceKeyStringify,a=this._getRootDataProvider(),o="on"===i?s.key:JSON.stringify(s.key);if(a._mapKeyToParentNodePath.set(o,s.keyPath),t){const e=this._getChildren(t);e&&this._processTreeArray(e,s.keyPath)}return s}_setMapEntry(t,e){const r=this.options?.enforceKeyStringify,s=this._getRootDataProvider(),a="on"===r?t:JSON.stringify(t);s._mapKeyToNode.has(a)&&i.warn(`Duplicate key ${a} found in MutableArrayTreeDataProvider.  Keys must be unique when keyAttributes ${this.keyAttribute} is specified`),s._mapKeyToNode.set(a,e),s._mapNodeToKey.set(e,t)}_createKeyObj(t,e,r){let s=this._getId(t);const i=e?e.slice():[],a=this.options?.enforceKeyStringify;return"on"===a?i.push(JSON.parse(s)):i.push(s),this.options&&("siblings"===this.options.keyAttributeScope||"on"===a&&!this.options.useKeyPaths||"on"===this.options.useKeyPaths)&&(s="on"===a?JSON.stringify(i):i),{key:s,keyPath:i}}_getChildren(t){return this._getVal(t,this._childrenAttr,!0)}_getVal(t,e,r){if("string"==typeof e){const r=e.indexOf(".");if(r>0){const s=e.substring(0,r),i=e.substring(r+1),a=t[s];if(a)return this._getVal(a,i)}}return!0!==r&&"function"==typeof t[e]?t[e]():t[e]}_getId(t){let e;const r=this.keyAttribute,s=this.options?.enforceKeyStringify;return e="@value"==r?this._getAllVals(t):this._getVal(t,r),"on"===s?JSON.stringify(e):e}_getAllVals(t){return"string"==typeof t||"number"==typeof t||"boolean"==typeof t?t:Object.keys(t).map(e=>this._getVal(t,e))}_getNodeMetadata(t){return{key:this._getKeyForNode(t)}}_getNodeForKey(t){const e=this.options?.enforceKeyStringify,r="on"===e?t:JSON.stringify(t);return this._getRootDataProvider()._mapKeyToNode.get(r)}_getKeyForNode(t){return this._getRootDataProvider()._mapNodeToKey.get(t)}_applyLeafNodeFilter(t){if(t&&t.filterCriterion){const e={...t};e.filterCriterion=this._getLeafNodeFilter(e.filterCriterion),e.filterCriterion.filter=t.filterCriterion.filter,t=e}return t}_getLeafNodeFilter(t){return{op:"$or",criteria:[t,{op:"$and",criteria:[{op:"$ne",attribute:this._childrenAttr,value:null},{op:"$ne",attribute:this._childrenAttr,value:void 0}]}]}}findDiffNodes(t,e,r,s,i,a){const o={add:[],refresh:[]};if(!t&&!e)return o;const n=r.slice();if(n.pop(),!t&&e||t&&!e)return o.refresh.push({parentKey:n[n.length-1],rootNode:i,oldRootNode:a}),o;if(t.length!==e.length)return o.refresh.push({parentKey:s,rootNode:i,oldRootNode:a}),o;{let h=0,d=0;for(let r=0;r<t.length;r++){t[r]!==e[r]&&(h++,d=r)}if(0===h)return o;if(h>1)return o.refresh.push({parentKey:n[n.length-1],rootNode:i,oldRootNode:a}),o;{const n=t[d],h=e[d];""===s&&(i=n,a=h);const{refresh:l,add:u}=this.compareNode(n,h,d,r,t,i,a);return o.refresh=[...o.refresh,...l],o.add=[...o.add,...u],o}}}compareNode(t,e,r,s,i,a,o){const n={add:[],refresh:[]},h=Object.keys(t);if(t===e)return n;if(null===t||null===e||["number","string","undefined"].indexOf(typeof t)>=0||["number","string","undefined"].indexOf(typeof e)>=0)return n.add.push({index:r,value:t,treeData:i,parentKeyPath:s,oldValue:e}),n;for(let a=0;a<h.length;a++){const o=h[a];if(o!==this._childrenAttr&&t[o]!==e[o]){n.add.push({index:r,value:t,treeData:i,parentKeyPath:s,oldValue:e});break}}const d=s.slice(),l=t.id;d.push(l);const{refresh:u,add:y}=this.findDiffNodes(t[this._childrenAttr],e[this._childrenAttr],d,l,a,o);return n.refresh=[...n.refresh,...u],n.add=[...n.add,...y],n}_dataMutated(t,r){let s,i=[],a=[],o=[],n=[],h=null,d=null;let l=null;const u=new Set,y=this._data;for(let t=0;t<r.length;t++)if(r[t]){if(!r[t].parentKey)return this._getRootDataProvider()._flushMaps(),this._getRootDataProvider()._processTreeArray(y,[]),d=new e.DataProviderRefreshEvent,{mutationEvent:h,refreshEvent:d};u.add(r[t].parentKey),this._getRootDataProvider()._flushMaps(),this._getRootDataProvider()._processTreeArray(this._data,[])}i=[],a=[],o=[],n=[];const p=[],c=[],_=[],f=[];for(s=0;s<t.length;s++)if(t[s]){const e=t[s].value;t[s].oldValue;this._getRootDataProvider()._flushMaps(),this._getRootDataProvider()._processTreeArray(y,[]);let r=t[s].treeData,i=t[s].parentKeyPath;const a=this._createKeyObj(e,i,r);p.push(a.key),c.push(e),_.push(t[s].index),f.push({key:a.key})}if(t.length>0){const t=new Set;p.forEach(e=>{t.add(e)}),l={data:c,indexes:_,keys:t,metadata:f}}return l&&(h=new e.DataProviderMutationEvent({add:null,remove:null,update:l})),(u.size||r.length)&&(d=new e.DataProviderRefreshEvent({keys:u})),{mutationEvent:h,refreshEvent:d}}_dataRefreshed(t,r){t||r?(t&&this._getRootDataProvider().dispatchEvent(t),r&&this._getRootDataProvider().dispatchEvent(r)):(this._getRootDataProvider()._flushMaps(),this._getRootDataProvider()._processTreeArray(this._data,[]),this._getRootDataProvider().dispatchEvent(new e.DataProviderRefreshEvent))}_getTreeMetadata(t,e){let r=!1,s=t.key;return this.options&&("siblings"==this.options.keyAttributeScope||"on"===this.options.enforceKeyStringify&&!this.options.useKeyPaths||"on"===this.options.useKeyPaths)&&(r=!0),r&&(s=this._parentNodePath?this._parentNodePath.slice():[],s.push(t.key)),"on"===this.options?.enforceKeyStringify&&(s=JSON.stringify(s)),t=this._getNodeMetadata(this._getNodeForKey(s))}_releaseTreeArray(t){let e;e=t instanceof Array?t:t(),e.forEach((t,e)=>{this._releaseNode(t)})}_releaseNode(t){const e=this._getKeyForNode(t);if(this._deleteMapEntry(e,t),t){const e=this._getChildren(t);e&&this._releaseTreeArray(e)}}_deleteMapEntry(t,e){const r=this.options?.enforceKeyStringify,s=this._getRootDataProvider(),i="on"===r?t:JSON.stringify(t);s._mapKeyToNode.delete(i),s._mapNodeToKey.delete(e)}_flushMaps(){const t=this._getRootDataProvider();t._mapKeyToNode.clear(),t._mapNodeToKey.clear()}}s.EventTargetMixin.applyMixin(a),e._registerLegacyNamespaceProp("MutableArrayTreeDataProvider",a),t.MutableArrayTreeDataProvider=a,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ojmutablearraytreedataprovider.js.map