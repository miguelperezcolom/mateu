{"version":3,"file":"useSelection-87a6bea9.js","sources":["../../src/hooks/PRIVATE_useSelection/useSelection.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { Keys, containsKey, isKeyDefined, addKey, removeKey } from '../../utils/UNSAFE_keys';\nimport { SelectionDetail, SelectionMode } from '../../UNSAFE_Collection';\nimport { useUser } from '../UNSAFE_useUser';\nimport { getIsSelectionPending } from '#utils/PRIVATE_textSelectionUtils';\nimport { SelectionBehavior, SelectionRangeDetail } from './Selection.types';\n\nconst arrowKeys = new Set(['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown']);\n\n/**\n * To get the event type during range selection which is triggered by either of the following gestures\n * shift+space, shift+click, and shift+arrowKeys\n * @param event\n */\nconst getEventType = (event: MouseEvent | KeyboardEvent) => {\n  if (event.type === 'click') {\n    return 'shiftClick';\n  } else if (event.type === 'keyup' && (event as KeyboardEvent).key === ' ') {\n    return 'shiftSpace';\n  } else if (event.type === 'keydown' && arrowKeys.has((event as KeyboardEvent).key)) {\n    return 'shiftArrowKeys';\n  }\n  return undefined;\n};\n\nconst isShiftModeSupported = <K>(\n  anchorKey: K,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isClickEvent: boolean\n) => {\n  return selectionMode === 'multiple' && (isClickEvent || containsKey(selectedKeys, anchorKey));\n};\n\nconst handleSelect = <K>(\n  event: MouseEvent | KeyboardEvent,\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior,\n  isSelectionRequired: boolean,\n  keyboardCursorRef: RefObject<K | undefined>,\n  anchorKey?: K,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (itemKey == null) {\n    return;\n  }\n\n  // handle shift key selection\n  if (\n    event.shiftKey &&\n    anchorKey !== undefined &&\n    onRangeChange &&\n    isShiftModeSupported(anchorKey, selectedKeys, selectionMode, event.type === 'click')\n  ) {\n    const selected = containsKey(selectedKeys, itemKey);\n    const eventType = getEventType(event);\n    if (selected && eventType === 'shiftSpace') {\n      // during shift+space, deselect the item if it's already selected\n      const keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n      onChange?.({ value: keySet, target: event.target });\n    } else {\n      onRangeChange({ value: { start: anchorKey, end: itemKey }, eventType });\n    }\n    // set keyboard selection cursor in case user extends with SHIFT+ARROW\n    if (keyboardCursorRef) {\n      keyboardCursorRef.current = itemKey;\n    }\n    return;\n  }\n\n  const selected = containsKey(selectedKeys, itemKey);\n  let keySet = selectedKeys;\n  if (!selected) {\n    if (\n      selectionMode === 'single' ||\n      (event as KeyboardEvent).key === 'Enter' ||\n      (selectionBehavior === 'replace' &&\n        !(event.ctrlKey || event.metaKey || (event as KeyboardEvent).key === ' '))\n    ) {\n      // should only contains this item key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    } else {\n      // add to existing selected keys\n      keySet = addKey(selectedKeys, itemKey);\n    }\n  } else if ((event as KeyboardEvent).key !== 'Enter') {\n    // no de-select for enter key\n    if (\n      selectionBehavior === 'toggle' ||\n      event.ctrlKey ||\n      event.metaKey ||\n      (event as KeyboardEvent).key === ' '\n    ) {\n      // de-select only when ctrl/meta key is pressed or selectionBehavior is\n      // explicitly set to toggle\n      keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n    } else if (selectionMode === 'multiple' && (selectedKeys.all || selectedKeys.keys.size > 1)) {\n      // in this case everything should be de-selected except for this key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    }\n  }\n\n  // only invoke callback if there is really a change\n  // note onSelectionChange should never be null here\n  if (selectedKeys != keySet && onChange) {\n    onChange({ value: keySet, target: event.target });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n\n/**\n * Hook for handling various selection mode.  This can be reuse by all Collection components.\n * @param keyExtractor function to extract the key based on provided element\n * @param selectedKeys the currently selected keys\n * @param selectionMode the selection mode\n * @param isSelectionRequired true if empty selected key is not allowed, false otherwise\n * @param selectionBehavior the selection behavior.  If the value is 'toggle', then the key is\n *                          added/removed from the current selected keys.  If the value is 'replace',\n *                          then the current selected keys are cleared first before the key is added\n *                          unless the ctrl/shift/meta key is pressed.\n * @param onChange callback function that is invoked when selection has changed.\n * @param anchorKey the anchor key.  Usually this is the same as current key except when shift key is pressed.\n * @param currentKey the current key\n * @param getVerticalPrevNextKey function to get the previous/next key in the vertical direction based on the current key\n * @param getHorizontalPrevNextKey function to get the previous/next key in the horizontal direction based on the current key\n * @param scrollToKey function to scroll the item with the key to be visible\n * @param onRangeChange callback function that is invoked when the selection range has changed.\n * @returns an event map that the consumer can register as event listeners\n */\nexport function useSelection<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isSelectionRequired: boolean,\n  selectionBehavior: SelectionBehavior,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  anchorKey?: K,\n  currentKey?: K | undefined,\n  getVerticalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  getHorizontalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  scrollToKey?: (key: K) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) {\n  // ref to track the cursor for the SHIFT+ARROW keyboard selection separately than the anchor of the selection.\n  const keyboardSelectionCursor = useRef<K>();\n\n  const isTouchPointerRef = useRef<boolean>(false);\n\n  const onPointerDown = useCallback(\n    (event: PointerEvent) => {\n      isTouchPointerRef.current = event.pointerType === 'touch';\n      if (event.shiftKey && selectionMode === 'multiple') {\n        //Avoid text selection on pointer down\n        event.preventDefault();\n      }\n    },\n    [selectionMode, isTouchPointerRef]\n  );\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      if (!getIsSelectionPending()) {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          isTouchPointerRef.current ? 'toggle' : selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          currentKey,\n          onChange,\n          onRangeChange\n        );\n        if (!event.shiftKey) {\n          // reset keyboard cursor when using mouse to select\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      keyboardSelectionCursor,\n      currentKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  // general keyboard events listen to keyUp for a11y\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // older browser that we don't support returns 'Spacebar' for space key\n      if (event.key === ' ') {\n        handleSelect<K>(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          anchorKey,\n          onChange,\n          event.shiftKey && event.key === ' ' ? onRangeChange : undefined\n        );\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      anchorKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  const { direction } = useUser();\n\n  // arrowKey events listen to keyDown so they can support holding them down\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // prevent default (propagation) for keyDown to space bar causing container to scroll\n      if (event.key === ' ') {\n        event.preventDefault();\n        return;\n      }\n\n      const key = keyboardSelectionCursor.current || currentKey;\n      const isRtl = direction === 'rtl';\n\n      const keyHandlers: Record<string, (() => K | null) | undefined> = {\n        ArrowUp: getVerticalPrevNextKey?.(key, true),\n        ArrowDown: getVerticalPrevNextKey?.(key, false),\n        ArrowLeft: getHorizontalPrevNextKey?.(key, !isRtl),\n        ArrowRight: getHorizontalPrevNextKey?.(key, isRtl)\n      };\n      const isBothDirections = getVerticalPrevNextKey && getHorizontalPrevNextKey;\n      if (Object.keys(keyHandlers).includes(event.key)) {\n        if (event.shiftKey && scrollToKey && selectionMode === 'multiple') {\n          //Avoid increasing range of selection text selection with arrow keys\n          event.preventDefault();\n          let keySet = selectedKeys;\n          // on first selection event, set keyboard cursor to start at currentKey\n          if (!keyboardSelectionCursor.current && isKeyDefined(currentKey)) {\n            keySet = { all: false, keys: new Set([currentKey as K]) };\n          }\n          const newAnchorKey = keyHandlers[event.key];\n          const cursorKey = newAnchorKey?.();\n          if (cursorKey != null) {\n            // keep visible\n            scrollToKey(cursorKey);\n\n            // if in 2D, use range selection to extend or subtract\n            if (isBothDirections) {\n              if (onRangeChange && currentKey != null) {\n                onRangeChange({\n                  value: { start: currentKey, end: cursorKey },\n                  eventType: getEventType(event)\n                });\n              }\n            } else {\n              // extend selection\n              if (!containsKey(keySet, cursorKey)) {\n                keySet = addKey(keySet, cursorKey);\n                // subtract from selection\n              } else if (\n                keyboardSelectionCursor.current != null &&\n                keyboardSelectionCursor.current !== cursorKey\n              ) {\n                keySet = removeKey(keySet, keyboardSelectionCursor.current, isSelectionRequired);\n              }\n              if (selectedKeys != keySet && onChange) {\n                onChange({ value: keySet, target: event.target });\n              }\n            }\n            // update selection cursor\n            keyboardSelectionCursor.current = cursorKey;\n          }\n        } else {\n          // reset keyBoard on non-shifted arrow use as this interrupts the extend mode (and would make for messy logic that doesn't align with current Jet behavior)\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [\n      selectedKeys,\n      isSelectionRequired,\n      onChange,\n      currentKey,\n      getVerticalPrevNextKey,\n      getHorizontalPrevNextKey,\n      scrollToKey,\n      direction,\n      onRangeChange,\n      selectionMode\n    ]\n  );\n\n  const selectionProps =\n    selectionMode === 'none' || onChange == null\n      ? {}\n      : { onPointerDown, onClick, onKeyDown, onKeyUp };\n  return { selectionProps };\n}\n"],"names":["arrowKeys","Set","getEventType","event","type","key","has","handleSelect","keyExtractor","selectedKeys","selectionMode","selectionBehavior","isSelectionRequired","keyboardCursorRef","anchorKey","onChange","onRangeChange","itemKey","target","shiftKey","undefined","isClickEvent","containsKey","isShiftModeSupported","selected","eventType","keySet","removeKey","value","start","end","current","ctrlKey","metaKey","all","keys","size","addKey","stopPropagation","currentKey","getVerticalPrevNextKey","getHorizontalPrevNextKey","scrollToKey","keyboardSelectionCursor","useRef","isTouchPointerRef","onPointerDown","useCallback","pointerType","preventDefault","onClick","getIsSelectionPending","onKeyUp","direction","useUser","onKeyDown","isRtl","keyHandlers","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","isBothDirections","Object","includes","isKeyDefined","newAnchorKey","cursorKey","selectionProps"],"mappings":"2IAeA,MAAMA,EAAY,IAAIC,IAAI,CAAC,YAAa,aAAc,UAAW,cAO3DC,EAAgBC,GACD,UAAfA,EAAMC,KACD,aACiB,UAAfD,EAAMC,MAAqD,MAAhCD,EAAwBE,IACrD,aACiB,YAAfF,EAAMC,MAAsBJ,EAAUM,IAAKH,EAAwBE,KACrE,sBADF,EAeHE,EAAe,CACnBJ,EACAK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAUT,EAAaL,EAAMe,QACnC,GAAe,MAAXD,EACF,OAIF,GACEd,EAAMgB,eACQC,IAAdN,GACAE,GA9ByB,EAC3BF,EACAL,EACAC,EACAW,IAEyB,aAAlBX,IAAiCW,GAAgBC,EAAWA,YAACb,EAAcK,IAyBhFS,CAAqBT,EAAWL,EAAcC,EAA8B,UAAfP,EAAMC,MACnE,CACA,MAAMoB,EAAWF,EAAAA,YAAYb,EAAcQ,GACrCQ,EAAYvB,EAAaC,GAC/B,GAAIqB,GAA0B,eAAdC,EAA4B,CAE1C,MAAMC,EAASC,EAASA,UAAClB,EAAcQ,EAASL,GAChDG,IAAW,CAAEa,MAAOF,EAAQR,OAAQf,EAAMe,QAC3C,MACCF,EAAc,CAAEY,MAAO,CAAEC,MAAOf,EAAWgB,IAAKb,GAAWQ,cAM7D,YAHIZ,IACFA,EAAkBkB,QAAUd,GAG/B,CAGD,IAAIS,EAASjB,EADIa,EAAAA,YAAYb,EAAcQ,GAeC,UAAhCd,EAAwBE,MAGV,WAAtBM,GACAR,EAAM6B,SACN7B,EAAM8B,SAC2B,MAAhC9B,EAAwBE,IAIzBqB,EAASC,EAAAA,UAAUlB,EAAcQ,EAASL,GACf,aAAlBF,IAAiCD,EAAayB,KAAOzB,EAAa0B,KAAKC,KAAO,KAEvFV,EAAS,CAAEQ,KAAK,EAAOC,KAAM,IAAIlC,IAAI,CAACgB,OAlBtCS,EANkB,WAAlBhB,GACiC,UAAhCP,EAAwBE,KACF,YAAtBM,IACGR,EAAM6B,UAAW7B,EAAM8B,SAA4C,MAAhC9B,EAAwBE,IAGtD,CAAE6B,KAAK,EAAOC,KAAM,IAAIlC,IAAI,CAACgB,KAG7BoB,EAAMA,OAAC5B,EAAcQ,GAqB9BR,GAAgBiB,GAAUX,IAC5BA,EAAS,CAAEa,MAAOF,EAAQR,OAAQf,EAAMe,SACrB,UAAff,EAAMC,MACRD,EAAMmC,kBAET,iBAsBG,SACJ9B,EACAC,EACAC,EACAE,EACAD,EACAI,EACAD,EACAyB,EACAC,EACAC,EACAC,EACA1B,GAGA,MAAM2B,EAA0BC,EAAAA,SAE1BC,EAAoBD,UAAgB,GAEpCE,EAAgBC,eACnB5C,IACC0C,EAAkBd,QAAgC,UAAtB5B,EAAM6C,YAC9B7C,EAAMgB,UAA8B,aAAlBT,GAEpBP,EAAM8C,gBACP,GAEH,CAACvC,EAAemC,IAGZK,EAAUH,eACb5C,IACMgD,EAAqBA,0BACxB5C,EACEJ,EACAK,EACAC,EACAC,EACAmC,EAAkBd,QAAU,SAAWpB,EACvCC,EACA+B,EACAJ,EACAxB,EACAC,GAEGb,EAAMgB,WAETwB,EAAwBZ,aAAUX,GAErC,GAEH,CACEZ,EACAC,EACAC,EACAC,EACAC,EACA+B,EACAJ,EACAxB,EACAC,IAKEoC,EAAUL,eACb5C,IAEmB,MAAdA,EAAME,KACRE,EACEJ,EACAK,EACAC,EACAC,EACAC,EACAC,EACA+B,EACA7B,EACAC,EACAZ,EAAMgB,UAA0B,MAAdhB,EAAME,IAAcW,OAAgBI,EAEzD,GAEH,CACEZ,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,KAIEqC,UAAEA,GAAcC,EAAAA,UAGhBC,EAAYR,eACf5C,IAEC,GAAkB,MAAdA,EAAME,IAER,YADAF,EAAM8C,iBAIR,MAAM5C,EAAMsC,EAAwBZ,SAAWQ,EACzCiB,EAAsB,QAAdH,EAERI,EAA4D,CAChEC,QAASlB,IAAyBnC,GAAK,GACvCsD,UAAWnB,IAAyBnC,GAAK,GACzCuD,UAAWnB,IAA2BpC,GAAMmD,GAC5CK,WAAYpB,IAA2BpC,EAAKmD,IAExCM,EAAmBtB,GAA0BC,EACnD,GAAIsB,OAAO5B,KAAKsB,GAAaO,SAAS7D,EAAME,KAC1C,GAAIF,EAAMgB,UAAYuB,GAAiC,aAAlBhC,EAA8B,CAEjEP,EAAM8C,iBACN,IAAIvB,EAASjB,GAERkC,EAAwBZ,SAAWkC,EAAYA,aAAC1B,KACnDb,EAAS,CAAEQ,KAAK,EAAOC,KAAM,IAAIlC,IAAI,CAACsC,MAExC,MAAM2B,EAAeT,EAAYtD,EAAME,KACjC8D,EAAYD,MACD,MAAbC,IAEFzB,EAAYyB,GAGRL,EACE9C,GAA+B,MAAduB,GACnBvB,EAAc,CACZY,MAAO,CAAEC,MAAOU,EAAYT,IAAKqC,GACjC1C,UAAWvB,EAAaC,MAKvBmB,EAAWA,YAACI,EAAQyC,GAIY,MAAnCxB,EAAwBZ,SACxBY,EAAwBZ,UAAYoC,IAEpCzC,EAASC,EAASA,UAACD,EAAQiB,EAAwBZ,QAASnB,IAN5Dc,EAASW,EAAMA,OAACX,EAAQyC,GAQtB1D,GAAgBiB,GAAUX,GAC5BA,EAAS,CAAEa,MAAOF,EAAQR,OAAQf,EAAMe,UAI5CyB,EAAwBZ,QAAUoC,EAErC,MAECxB,EAAwBZ,aAAUX,CAErC,GAEH,CACEX,EACAG,EACAG,EACAwB,EACAC,EACAC,EACAC,EACAW,EACArC,EACAN,IAQJ,MAAO,CAAE0D,eAHW,SAAlB1D,GAAwC,MAAZK,EACxB,CAAE,EACF,CAAE+B,gBAAeI,UAASK,YAAWH,WAE7C"}