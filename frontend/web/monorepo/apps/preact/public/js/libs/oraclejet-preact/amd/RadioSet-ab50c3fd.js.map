{"version":3,"file":"RadioSet-ab50c3fd.js","sources":["../../src/UNSAFE_RadioSet/RadioSet.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Ref, toChildArray } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useFormFieldContextProps } from '../hooks/UNSAFE_useFormFieldContextProps';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { FocusableHandle } from '../hooks/UNSAFE_useFocusableTextField';\nimport { FlexboxProps } from '../utils/UNSAFE_interpolations/flexbox';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\nimport { InlineUserAssistance, UserAssistanceDensityType } from '../UNSAFE_UserAssistance';\n\nimport { CheckboxRadioField } from '../PRIVATE_CheckboxRadioField';\nimport { RadioSetContext } from './RadioSetContext';\nimport { RadioItemContext } from '../UNSAFE_RadioItem/RadioItemContext';\nimport { LayoutColumnSpan } from '../utils/UNSAFE_styles/Layout';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = TestIdProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: string;\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * RadioItem\n   */\n  children: ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * layout direction of the children elements\n   */\n  direction?: FlexboxProps['direction'];\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the radio set requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Specifies if the radio set is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies if the radio set is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Label text for the group of radio items.\n   *\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'none' | 'top' | 'start' | 'inside';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Callback invoked each time the user changes selected option.\n   */\n  onCommit: (detail: ValueUpdateDetail<string | number | undefined>) => void;\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'compact'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Value of the radio option.\n   */\n  value?: string | number;\n};\n/**\n * A radio set allows the user to select one option from a set of mutually exclusive options.\n */\nexport const RadioSet = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      columnSpan,\n      direction = 'column',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      testId,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n\n      children\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const hasValue = value != null;\n    const {\n      isDisabled: isFormDisabled,\n      // TODO: unused variables, are they needed?\n      // isFormLayout,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const formFieldContext = useFormFieldContextProps({\n      hasValue,\n      isDisabled,\n      isReadonly\n    });\n\n    const baseId = useId();\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <CheckboxRadioField\n          aria-describedby={ariaDescribedBy}\n          assistiveText={assistiveText}\n          baseId={baseId}\n          columnSpan={columnSpan}\n          direction={direction}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          isDisabled={isDisabled}\n          isReadonly={isReadonly}\n          isRequired={isRequired}\n          label={label}\n          labelEdge={labelEdge}\n          labelStartWidth={labelStartWidth}\n          parentComponentVariant=\"radioSet\"\n          messages={messages}\n          userAssistanceDensity={userAssistanceDensity}\n          hasValue={hasValue}\n          ref={ref}\n          role=\"radiogroup\"\n          testId={testId}>\n          <RadioSetContext.Provider\n            value={{\n              name: baseId,\n              value,\n              onCommit\n            }}>\n            {toChildArray(children).map((child, index) => (\n              <RadioItemContext.Provider value={{ index }}>{child}</RadioItemContext.Provider>\n            ))}\n          </RadioSetContext.Provider>\n        </CheckboxRadioField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["RadioSet","forwardRef","ariaDescribedBy","assistiveText","columnSpan","direction","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","testId","userAssistanceDensity","propUserAssistanceDensity","value","children","ref","hasValue","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formUserAssistanceDensity","useFormContext","formFieldContext","useFormFieldContextProps","baseId","useId","_jsx","FormFieldContext","Provider","CheckboxRadioField","parentComponentVariant","role","jsx","RadioSetContext","name","toChildArray","map","child","index","RadioItemContext"],"mappings":"0UAgHO,MAAMA,EAAWC,EAAUA,YAChC,EAEI,mBAAoBC,EACpBC,gBACAC,aACAC,YAAY,SACZC,iBACAC,iBACAC,WAAYC,EACZC,WAAYC,EACZC,cAAa,EACbC,QACAC,UAAWC,EACXC,gBAAiBC,EACjBC,WACAC,WACAC,SACAC,sBAAuBC,EACvBC,QAEAC,YAEFC,KAEA,MAAMC,EAAoB,MAATH,GAEff,WAAYmB,EAGZjB,WAAYkB,EACZd,UAAWe,EACXb,gBAAiBc,EACjBT,sBAAuBU,GACrBC,EAAAA,iBAEExB,EAAaC,GAAkBkB,EAC/BjB,EAAaC,GAAkBiB,EAC/Bd,EAAYC,GAAiBc,EAC7Bb,EAAkBC,GAAuBa,EACzCT,EAAwBC,GAA6BS,EAErDE,EAAmBC,EAAAA,yBAAyB,CAChDR,WACAlB,aACAE,eAGIyB,EAASC,EAAAA,QAEf,OACEC,MAACC,EAAgBA,iBAACC,SAAS,CAAAhB,MAAOU,EAAgBT,SAChDa,EAAAA,IAACG,EAAAA,mBAAkB,CAAA,mBACCtC,EAClBC,cAAeA,EACfgC,OAAQA,EACR/B,WAAYA,EACZC,UAAWA,EACXC,eAAgBA,EAChBC,eAAgBA,EAChBC,WAAYA,EACZE,WAAYA,EACZE,WAAYA,EACZC,MAAOA,EACPC,UAAWA,EACXE,gBAAiBA,EACjByB,uBAAuB,WACvBvB,SAAUA,EACVG,sBAAuBA,EACvBK,SAAUA,EACVD,IAAKA,EACLiB,KAAK,aACLtB,OAAQA,EACRI,SAAAa,EAAAM,IAACC,EAAeA,gBAACL,SACf,CAAAhB,MAAO,CACLsB,KAAMV,EACNZ,QACAJ,YACDK,SACAsB,eAAatB,GAAUuB,KAAI,CAACC,EAAOC,IAClCZ,EAACM,IAAAO,mBAAiBX,SAAS,CAAAhB,MAAO,CAAE0B,SAAOzB,SAAGwB,WAKtD"}