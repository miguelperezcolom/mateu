{"version":3,"file":"UNSAFE_useTap.js","sources":["../../../src/hooks/UNSAFE_useTap/useTap.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useCallback } from 'preact/hooks';\n\ntype TapOptions = {\n  isDisabled?: boolean;\n};\n\ntype TapInfo = {\n  x: number;\n  y: number;\n};\n\ntype TapState = {\n  pointerDownId: number | null;\n  startTime: number;\n};\n\n/**\n * Returns event handlers that can make a target element tapable.\n * useTap is used for non-keyboard elements.\n *\n * @param onTap function\n * @param settings object\n * @returns\n */\n\nexport function useTap(\n  onTap: (e: TapInfo) => void,\n  { isDisabled }: TapOptions = { isDisabled: false }\n): { tapProps: Record<string, any> } {\n  const ref = useRef<TapState>({\n    pointerDownId: null,\n    startTime: 0\n  });\n\n  const clearTap = useCallback(() => {\n    ref.current = { pointerDownId: null, startTime: 0 };\n  }, []);\n\n  const onPointerDown = useCallback(\n    (e: PointerEvent) => {\n      // return if it is not a left click\n      if (e.pointerType === 'mouse' && e.button !== 0) {\n        return;\n      }\n      if (!ref.current.pointerDownId) {\n        ref.current = { pointerDownId: e.pointerId, startTime: e.timeStamp };\n      } else {\n        clearTap();\n      }\n    },\n    [clearTap]\n  );\n\n  const onPointerUp = useCallback(\n    (e: PointerEvent) => {\n      if (e.pointerId === ref.current.pointerDownId) {\n        const tapTime = e.timeStamp - ref.current.startTime;\n        // 250ms maximum tap time based on numbers used in Hammer\n        if (tapTime <= 250) {\n          onTap({ x: e.offsetX, y: e.offsetY });\n        }\n      }\n      clearTap();\n    },\n    [onTap, clearTap]\n  );\n\n  const tapProps = isDisabled\n    ? {}\n    : {\n        onPointerDown,\n        onPointerUp,\n        onPointerLeave: clearTap,\n        onPointerCancel: clearTap\n      };\n\n  return {\n    tapProps\n  };\n}\n"],"names":["onTap","isDisabled","ref","useRef","pointerDownId","startTime","clearTap","useCallback","current","onPointerDown","e","pointerType","button","pointerId","timeStamp","onPointerUp","x","offsetX","y","offsetY","tapProps","onPointerLeave","onPointerCancel"],"mappings":"uEAiCgB,SACdA,GACAC,WAAEA,GAA2B,CAAEA,YAAY,IAE3C,MAAMC,EAAMC,EAAAA,OAAiB,CAC3BC,cAAe,KACfC,UAAW,IAGPC,EAAWC,EAAAA,aAAY,KAC3BL,EAAIM,QAAU,CAAEJ,cAAe,KAAMC,UAAW,EAAG,GAClD,IAEGI,EAAgBF,eACnBG,IAEuB,UAAlBA,EAAEC,aAAwC,IAAbD,EAAEE,SAG9BV,EAAIM,QAAQJ,cAGfE,IAFAJ,EAAIM,QAAU,CAAEJ,cAAeM,EAAEG,UAAWR,UAAWK,EAAEI,WAG1D,GAEH,CAACR,IAGGS,EAAcR,eACjBG,IACC,GAAIA,EAAEG,YAAcX,EAAIM,QAAQJ,cAAe,CAC7BM,EAAEI,UAAYZ,EAAIM,QAAQH,WAE3B,KACbL,EAAM,CAAEgB,EAAGN,EAAEO,QAASC,EAAGR,EAAES,SAE9B,CACDb,GAAU,GAEZ,CAACN,EAAOM,IAYV,MAAO,CACLc,SAVenB,EACb,CAAE,EACF,CACEQ,gBACAM,cACAM,eAAgBf,EAChBgB,gBAAiBhB,GAMzB"}