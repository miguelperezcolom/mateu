{"version":3,"file":"useCssVars-d782da3d.js","sources":["../../src/hooks/PRIVATE_useCssVars/useCssVars.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useUser } from '../UNSAFE_useUser';\nimport { useTheme } from '../UNSAFE_useTheme';\nimport { useColorScheme } from '../UNSAFE_useColorScheme';\nimport { useScale } from '../UNSAFE_useScale';\n\nfunction getCssVarName(name: string) {\n  const rxp = name.match(/var\\((--[a-zA-Z_0-9\\-]+)\\)/);\n  return rxp && rxp.length > 1 ? rxp[1] : '';\n}\n\n/**\n * Hook to resolve the css vars.\n * @param vars\n * @param classes\n * @returns\n */\nexport function useCssVars(\n  vars: {\n    /**\n     * The token variable.\n     */\n    tokenVar: string;\n    /**\n     * The key of the resolved variable.\n     */\n    key: string;\n    /**\n     * The absolute used value of the token vars assigned to css expression cannot be computed through getComputedStyle if\n     * not assigned to a css property. This optional prop provides css property to assign the token var to in order to get\n     * actual used style.\n     */\n    cssProp?: string;\n  }[]\n) {\n  const cssDivRef = useRef<HTMLDivElement>(null);\n  const [resolvedVars, setResolvedVars] = useState<Record<string, any>>({});\n  const { forcedColors } = useUser();\n  const { name } = useTheme();\n  const scale = useScale();\n  const colorScheme = useColorScheme();\n\n  // A css token var (eg, --tokenVar_123xyz) that is assigned to a css expression like min(25px, 5rem) resolves to\n  // a string of the expression (resolved value) like \"min(25px, 5rem)\" and not absolute value (for eg 25px) (used value) when getComputedStyle is called.\n  // We have to assign the token var to a valid css property(like width: var(--tokenVar_123xyz)) in order to get actual used value in\n  // computed styles. https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n\n  // build a style obj with valid css property to apply to div\n  const style = vars.reduce((prev: Record<string, string>, current) => {\n    if (current.cssProp) {\n      prev[current.cssProp] = current.tokenVar;\n    }\n    return prev;\n  }, {});\n\n  const cssContent = <div ref={cssDivRef} style={{ display: 'none', ...style }}></div>;\n\n  useLayoutEffect(() => {\n    if (!cssDivRef.current) {\n      return;\n    }\n\n    const computedStyle = window.getComputedStyle(cssDivRef.current);\n    const resolved: Record<string, any> = {};\n    vars.forEach((value) => {\n      // use cssProp for token vars that resolve to expression\n      const cssVar = value.cssProp || getCssVarName(value.tokenVar);\n      resolved[value.key] = computedStyle.getPropertyValue(cssVar);\n    });\n    setResolvedVars(resolved);\n  }, [forcedColors, name, colorScheme, scale, vars]);\n\n  return {\n    resolvedVars,\n    cssContent\n  };\n}\n"],"names":["vars","cssDivRef","useRef","resolvedVars","setResolvedVars","useState","forcedColors","useUser","name","useTheme","scale","useScale","colorScheme","useColorScheme","style","reduce","prev","current","cssProp","tokenVar","cssContent","_jsx","jsx","ref","display","useLayoutEffect","computedStyle","window","getComputedStyle","resolved","forEach","value","cssVar","rxp","match","length","getCssVarName","key","getPropertyValue"],"mappings":"uMAyBM,SACJA,GAiBA,MAAMC,EAAYC,SAAuB,OAClCC,EAAcC,GAAmBC,EAAQA,SAAsB,CAAE,IAClEC,aAAEA,GAAiBC,EAAAA,WACnBC,KAAEA,GAASC,EAAAA,WACXC,EAAQC,EAAAA,WACRC,EAAcC,EAAAA,iBAQdC,EAAQd,EAAKe,QAAO,CAACC,EAA8BC,KACnDA,EAAQC,UACVF,EAAKC,EAAQC,SAAWD,EAAQE,UAE3BH,IACN,CAAE,GAECI,EAAaC,EAAAC,IAAA,MAAA,CAAKC,IAAKtB,EAAWa,MAAO,CAAEU,QAAS,UAAWV,KAiBrE,OAfAW,EAAAA,iBAAgB,KACd,IAAKxB,EAAUgB,QACb,OAGF,MAAMS,EAAgBC,OAAOC,iBAAiB3B,EAAUgB,SAClDY,EAAgC,CAAA,EACtC7B,EAAK8B,SAASC,IAEZ,MAAMC,EAASD,EAAMb,SA5D3B,SAAuBV,GACrB,MAAMyB,EAAMzB,EAAK0B,MAAM,8BACvB,OAAOD,GAAOA,EAAIE,OAAS,EAAIF,EAAI,GAAK,EAC1C,CAyDsCG,CAAcL,EAAMZ,UACpDU,EAASE,EAAMM,KAAOX,EAAcY,iBAAiBN,EAAO,IAE9D5B,EAAgByB,EAAS,GACxB,CAACvB,EAAcE,EAAMI,EAAaF,EAAOV,IAErC,CACLG,eACAiB,aAEJ"}