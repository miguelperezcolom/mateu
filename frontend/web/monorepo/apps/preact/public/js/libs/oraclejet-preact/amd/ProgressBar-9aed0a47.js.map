{"version":3,"file":"ProgressBar-9aed0a47.js","sources":["../../src/UNSAFE_ProgressBar/ProgressBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentProps, JSX } from 'preact';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport { BarTrack, BarValue } from '#PRIVATE_Meter';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { ProgressBarStyles, ProgressBarVariantOptions } from './themes/ProgressBarStyles.css';\nimport { ProgressBarRedwoodTheme } from './themes/redwood/ProgressBarTheme';\n\ntype ariaPropsType = ComponentProps<typeof BarTrack>['ariaProps'];\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'class'>;\n\ntype ProgressBarProps = IntrinsicProps & {\n  /**\n   * Specifies the id of the progress bar.  If the progress bar is being used to describe the loading process of a particular region\n   * of the page, then the aria-describedby attribute of the region must point to the id of the ProgressBar\n   */\n  id?: UnpackSignals<JSX.IntrinsicElements['div']>['id'];\n  /**\n   * The value of the progress bar.  If the value is 'indeterminate', an indeterminate progress bar will be shown.\n   */\n  value?: 'indeterminate' | number;\n\n  /**\n   * Whether the progress bar is positioned at the top edge of a container or not.\n   * If set to 'top', the curved borders will be removed.\n   */\n  edge?: 'none' | 'top';\n\n  /**\n   * The maximum value of the progress bar.\n   */\n  max?: number;\n  /**\n   * The width of the progress bar.  This will use the CSS lengths styling.\n   */\n  // TODO: use the dimensions work the Jeanne is doing JET-49961\n  width?: string;\n\n  /**\n   * A label to be used for accessibility purposes when value is set to 'indeterminate'. This will be used for the aria-valuetext of the DOM element.\n   */\n  'aria-valuetext'?: string;\n  /**\n   * A label to be used for accessibility purposes. This will be used for the aria-label of the DOM element.\n   */\n  'aria-label'?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that label the progress bar. This will be used for the aria-labelledby of the DOM element.\n   */\n  'aria-labelledby'?: string;\n};\n/**\n * A progress bar allows the user to visualize the progression of an extended computer operation.\n */\nexport function ProgressBar({ value, max, ...otherProps }: ProgressBarProps) {\n  return value === 'indeterminate' ? (\n    <IndeterminateProgressBar {...otherProps} />\n  ) : (\n    <DeterminateProgressBar value={value} max={max} {...otherProps} />\n  );\n}\n\ntype IndeterminateProps = Omit<ProgressBarProps, 'value' | 'max'>;\n\nconst IndeterminateProgressBar = ({ id, width, edge = 'none', ...props }: IndeterminateProps) => {\n  const {\n    classes,\n    styles: {\n      valueStyle,\n      indeterminate,\n      animationStyleLTR,\n      animationStyleRTL,\n      highContrastValueStyle,\n      trackBorderEdgeNone,\n      trackBorderEdgeTop\n    }\n  } = useComponentTheme<ProgressBarVariantOptions, ProgressBarStyles>(ProgressBarRedwoodTheme, {\n    edge: edge === 'none' ? edge : undefined\n  });\n\n  const { direction, forcedColors } = useUser();\n  const barValueClasses = classNames([\n    valueStyle,\n    indeterminate,\n    direction === 'rtl' ? animationStyleRTL : animationStyleLTR,\n    forcedColors === 'active' ? highContrastValueStyle : ''\n  ]);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const ariaProps: ariaPropsType = {\n    'aria-valuetext': props['aria-valuetext'] || translations.progressIndeterminate(),\n    'aria-label': props['aria-label'],\n    'aria-labelledby': props['aria-labelledby'],\n    role: 'progressbar'\n  };\n  const trackBorderClass =\n    forcedColors === 'active'\n      ? undefined\n      : edge === 'none'\n      ? trackBorderEdgeNone\n      : trackBorderEdgeTop;\n  return (\n    <BarTrack\n      id={id}\n      ariaProps={ariaProps}\n      class={classNames([classes, trackBorderClass])}\n      length={width}>\n      <BarValue class={barValueClasses} />\n    </BarTrack>\n  );\n};\n\ntype DeterminateProps = Omit<ProgressBarProps, 'aria-valuetext'> & {\n  value?: number;\n};\n\nconst DeterminateProgressBar = ({\n  value = 0,\n  max = 100,\n  id,\n  width,\n  edge = 'none',\n  ...props\n}: DeterminateProps) => {\n  const { forcedColors } = useUser();\n  const {\n    classes,\n    styles: { valueStyle, highContrastValueStyle, trackBorderEdgeNone, trackBorderEdgeTop }\n  } = useComponentTheme<ProgressBarVariantOptions, ProgressBarStyles>(ProgressBarRedwoodTheme, {\n    edge: edge === 'none' ? edge : undefined\n  });\n\n  const barValueClasses = classNames([\n    valueStyle,\n    forcedColors === 'active' ? highContrastValueStyle : ''\n  ]);\n\n  const percentage = `${Math.min(Math.max(0, value / max), 1) * 100}%`;\n  const ariaProps: ariaPropsType = {};\n  ariaProps['aria-valuemin'] = value != null ? 0 : undefined;\n  ariaProps['aria-valuemax'] = value != null ? max : undefined;\n  ariaProps['aria-valuenow'] = value != null ? value : undefined;\n  ariaProps['role'] = 'progressbar';\n  (ariaProps['aria-label'] = props['aria-label']),\n    (ariaProps['aria-labelledby'] = props['aria-labelledby']);\n  return (\n    <BarTrack\n      ariaProps={ariaProps}\n      id={id}\n      length={width}\n      class={classNames([classes, edge === 'none' ? trackBorderEdgeNone : trackBorderEdgeTop])}>\n      <BarValue class={barValueClasses} length={percentage} />\n    </BarTrack>\n  );\n};\n"],"names":["IndeterminateProgressBar","id","width","edge","props","classes","styles","valueStyle","indeterminate","animationStyleLTR","animationStyleRTL","highContrastValueStyle","trackBorderEdgeNone","trackBorderEdgeTop","useComponentTheme","ProgressBarRedwoodTheme","undefined","direction","forcedColors","useUser","barValueClasses","classNames","translations","useTranslationBundle","ariaProps","progressIndeterminate","role","trackBorderClass","_jsx","jsx","BarTrack","class","length","children","BarValue","DeterminateProgressBar","value","max","percentage","Math","min","otherProps"],"mappings":"8QA4EA,MAAMA,EAA2B,EAAGC,KAAIC,QAAOC,OAAO,UAAWC,MAC/D,MAAMC,QACJA,EACAC,QAAQC,WACNA,EAAUC,cACVA,EAAaC,kBACbA,EAAiBC,kBACjBA,EAAiBC,uBACjBA,EAAsBC,oBACtBA,EAAmBC,mBACnBA,IAEAC,EAAAA,kBAAgEC,EAAAA,wBAAyB,CAC3FZ,KAAe,SAATA,EAAkBA,OAAOa,KAG3BC,UAAEA,EAASC,aAAEA,GAAiBC,EAAOA,UACrCC,EAAkBC,EAAAA,WAAW,CACjCd,EACAC,EACc,QAAdS,EAAsBP,EAAoBD,EACzB,WAAjBS,EAA4BP,EAAyB,KAEjDW,EAAeC,uBAAiC,4BAChDC,EAA2B,CAC/B,iBAAkBpB,EAAM,mBAAqBkB,EAAaG,wBAC1D,aAAcrB,EAAM,cACpB,kBAAmBA,EAAM,mBACzBsB,KAAM,eAEFC,EACa,WAAjBT,OACIF,EACS,SAATb,EACAS,EACAC,EACN,OACEe,EAACC,IAAAC,WACC,CAAA7B,GAAIA,EACJuB,UAAWA,EACXO,MAAOV,EAAUA,WAAC,CAAChB,EAASsB,IAC5BK,OAAQ9B,EACR+B,SAAAL,EAAAC,IAACK,WAAQ,CAACH,MAAOX,KAEnB,EAOEe,EAAyB,EAC7BC,QAAQ,EACRC,MAAM,IACNpC,KACAC,QACAC,OAAO,UACJC,MAEH,MAAMc,aAAEA,GAAiBC,EAAAA,WACnBd,QACJA,EACAC,QAAQC,WAAEA,EAAUI,uBAAEA,EAAsBC,oBAAEA,EAAmBC,mBAAEA,IACjEC,EAAiBA,kBAA+CC,0BAAyB,CAC3FZ,KAAe,SAATA,EAAkBA,OAAOa,IAG3BI,EAAkBC,EAAAA,WAAW,CACjCd,EACiB,WAAjBW,EAA4BP,EAAyB,KAGjD2B,EAAwD,IAAxCC,KAAKC,IAAID,KAAKF,IAAI,EAAGD,EAAQC,GAAM,GAAtC,IACbb,EAA2B,CAAA,EAOjC,OANAA,EAAU,iBAA4B,MAATY,EAAgB,OAAIpB,EACjDQ,EAAU,iBAA4B,MAATY,EAAgBC,OAAMrB,EACnDQ,EAAU,iBAA4B,MAATY,EAAgBA,OAAQpB,EACrDQ,EAAgB,KAAI,cACnBA,EAAU,cAAgBpB,EAAM,cAC9BoB,EAAU,mBAAqBpB,EAAM,mBAEtCwB,MAACE,EAAQA,SAAA,CACPN,UAAWA,EACXvB,GAAIA,EACJ+B,OAAQ9B,EACR6B,MAAOV,EAAUA,WAAC,CAAChB,EAAkB,SAATF,EAAkBS,EAAsBC,IACpEoB,SAAAL,EAAAA,IAACM,EAAAA,SAAS,CAAAH,MAAOX,EAAiBY,OAAQM,KAE5C,gBAlGE,UAAsBF,MAAEA,EAAKC,IAAEA,KAAQI,IAC3C,MAAiB,kBAAVL,EACLR,EAAAC,IAAC7B,EAAwB,IAAKyC,IAE9Bb,EAAAA,IAACO,EAAuB,CAAAC,MAAOA,EAAOC,IAAKA,KAASI,GAExD"}