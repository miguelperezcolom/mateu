{"version":3,"file":"useChartDatatip-cdfc4089.js","sources":["../../src/utils/PRIVATE_chartUtils/dataTipUtils.tsx","../../src/hooks/PRIVATE_useChartDatatip/useChartDatatip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  ChartSeriesData,\n  GroupAxisProps,\n  TimeAxisProps,\n  ValueFormats\n} from '../UNSAFE_visTypes/chart';\nimport { VisTabularDatatip } from '../../PRIVATE_VisTabularDatatip';\nimport { TableRowData } from '../../PRIVATE_VisTabularDatatip';\nimport { LineAreaItem } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { BarItemData } from '#UNSAFE_BarChart/barChart.types';\nimport { BundleType } from '#resources/nls/bundle';\nimport { generateAriaLabel } from '#utils/UNSAFE_visUtils';\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\n\n/**\n * Returns the data required for the VisTabularDatatip to render.\n * @param activeInfo active item info.\n * @param series The array of chart series.\n * @param groups The array of chart groups.\n * @param valueFormats The array of chart series.\n * @param getDataItem function which returns chartItem\n */\nexport function getChartTabularData<K, D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>>(\n  data: D,\n  seriesValue: string,\n  groupValue: string[] | string,\n  translations: BundleType,\n  valueFormats?: ValueFormats,\n  isTimeAxis?: boolean,\n  defaultXFormatter?: (axisValue: number) => string,\n  defaultYFormatter?: (value: number) => string,\n  hasXYValues?: boolean\n) {\n  let itemValue, itemX, itemY, itemWidthWeight;\n  const seriesLabel = translations.chart_labelSeries();\n  const groupLabel = translations.chart_labelGroup();\n  const valueLabel = translations.chart_labelValue();\n  const xLabel = translations.chart_labelX();\n  const yLabel = translations.chart_labelY();\n  const widthWeightLabel = translations.chart_labelWidthWeight();\n\n  if (hasXYValues && 'y' in data) {\n    const x = data.x;\n    itemX = valueFormats?.x?.format ? valueFormats?.x?.format(x!) : defaultXFormatter?.(x!);\n\n    const y = data.y;\n    itemY = valueFormats?.y?.format ? valueFormats?.y?.format(y!) : defaultYFormatter?.(y!);\n  } else if ('value' in data && data.value !== undefined) {\n    const value = data.value;\n    itemValue = valueFormats?.value?.format\n      ? valueFormats?.value?.format?.(value)\n      : defaultYFormatter?.(value);\n  }\n  if ('widthWeight' in data && data.widthWeight !== undefined) {\n    const widthWeight = data.widthWeight;\n    itemWidthWeight = valueFormats?.widthWeight?.format\n      ? valueFormats?.widthWeight?.format?.(widthWeight)\n      : defaultYFormatter?.(widthWeight);\n  }\n  const tableData: TableRowData[] = [];\n\n  if (valueFormats?.series?.isDisplayed != false) {\n    tableData.push({\n      key: valueFormats?.series?.label || seriesLabel,\n      value: seriesValue\n    });\n  }\n  if (valueFormats?.group?.isDisplayed != false) {\n    const isArray = Array.isArray(valueFormats?.group?.label);\n    if (isTimeAxis) {\n      const group = Array.isArray(groupValue) ? groupValue[0] : groupValue;\n      tableData.push({\n        key:\n          (isArray ? valueFormats?.group?.label?.[0] : (valueFormats?.group?.label as string)) ||\n          'Date',\n        value: defaultXFormatter ? defaultXFormatter?.(new Date(group).getTime()) : group\n      });\n    } else {\n      const groupsLabel = (\n        isArray ? valueFormats?.group?.label : [valueFormats?.group?.label || groupLabel]\n      ) as string[];\n      const groups = Array.isArray(groupValue) ? groupValue : [groupValue];\n      groups.forEach((value: string, index: number) => {\n        tableData.push({\n          key: groupsLabel[index],\n          value: value\n        });\n      });\n    }\n  }\n  if (valueFormats?.value?.isDisplayed != false) {\n    if (hasXYValues) {\n      tableData.push({\n        key: valueFormats?.value?.label || xLabel,\n        value: itemX!\n      });\n      tableData.push({\n        key: valueFormats?.value?.label || yLabel,\n        value: itemY!\n      });\n    } else {\n      tableData.push({\n        key: valueFormats?.value?.label || valueLabel,\n        value: itemValue!\n      });\n    }\n  }\n  if (valueFormats?.widthWeight?.isDisplayed != false && itemWidthWeight) {\n    tableData.push({\n      key: valueFormats?.widthWeight?.label || widthWeightLabel,\n      value: itemWidthWeight!\n    });\n  }\n  return tableData;\n}\n\nexport function getDefaultDatatipRenderer<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>(options: {\n  series: ChartSeriesData<K, D>;\n  groups: string[];\n  translations: BundleType;\n  valueFormats?: ValueFormats;\n  timeAxisType?: 'mixedFrequency' | 'enabled' | 'skipGaps';\n  defaultXFormatter?: (value: number) => string;\n  defaultYFormatter?: (value: number) => string;\n  defaultY2Formatter?: (value: number) => string;\n  hasXYValues?: boolean;\n}) {\n  const isSeriesAssociatedToY2 = options.series.associatedYAxis === 'y2';\n  const isMixedFrequency = options.timeAxisType === 'mixedFrequency';\n  const isRegularTimeAxis =\n    options.timeAxisType === 'enabled' || options.timeAxisType === 'skipGaps';\n\n  return (context: { data: D }) => {\n    const groupValue = options.groups;\n    const timeValue = (\n      isMixedFrequency ? context.data.x : isRegularTimeAxis ? groupValue : undefined\n    ) as string;\n    return {\n      content: (\n        <VisTabularDatatip\n          tableData={getChartTabularData<K, D>(\n            context.data,\n            options.series.name || options.series.id.toString(),\n            timeValue || options.groups,\n            options.translations,\n            options.valueFormats,\n            options.timeAxisType != null,\n            options.defaultXFormatter,\n            isSeriesAssociatedToY2 ? options.defaultY2Formatter : options.defaultYFormatter,\n            options.hasXYValues\n          )}\n        />\n      ),\n      borderColor: context.data.color || options.series.color\n    };\n  };\n}\n\nexport function getAriaLabelGenerator<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>(\n  series: ChartSeriesData<K, D>[],\n  translations: BundleType,\n  valueFormats: ValueFormats | undefined,\n  leafGroupsInfo: GroupLevelItem[],\n  xAxis: GroupAxisProps | TimeAxisProps | undefined,\n  isDataXAxis: boolean,\n  getGroupFromPath: (path: number[]) => string[],\n  xDefaultLabelFormatter?: (value: number) => string,\n  yDefaultLabelFormatter?: (value: number) => string,\n  y2DefaultLabelFormatter?: (value: number) => string\n) {\n  const getItemAriaLabel = (\n    data: D,\n    seriesIndex: number,\n    groupIndex: number,\n    isSelectionEnabled: boolean,\n    isSelected: boolean,\n    isDrillable: boolean\n  ) => {\n    let accLabel = data.accessibleLabel;\n    if (!accLabel) {\n      const _series = series[seriesIndex];\n      const isAssociatedToY2 = _series.associatedYAxis === 'y2';\n      const groupValue = getGroupFromPath(leafGroupsInfo[groupIndex].path);\n      const timeValue = (\n        (xAxis as TimeAxisProps)?.timeAxisType === 'mixedFrequency'\n          ? data.x\n          : (xAxis as TimeAxisProps)?.timeAxisType === 'enabled'\n          ? groupValue\n          : undefined\n      ) as string;\n\n      const tababularData = getChartTabularData(\n        data,\n        _series.name || _series.id.toString(),\n        timeValue || groupValue,\n        translations,\n        valueFormats,\n        (xAxis as TimeAxisProps)?.timeAxisType != null,\n        xDefaultLabelFormatter,\n        isAssociatedToY2 ? y2DefaultLabelFormatter : yDefaultLabelFormatter,\n        isDataXAxis\n      );\n      accLabel = tababularData\n        .map(({ key, value }) => `${key ? key + ':' : ''} ${value}`)\n        .join(', ');\n    }\n    return generateAriaLabel(translations, accLabel, {\n      isSelected: !isSelectionEnabled ? undefined : isSelected,\n      isDrillable\n    });\n  };\n\n  return getItemAriaLabel;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useDatatip } from '#hooks/PRIVATE_useDatatip';\nimport { calculateOffset } from '#utils/PRIVATE_visLayoutUtils/layoutUtils';\nimport { DataCursorPosition, Info, Scale, ValueFormats } from '#utils/UNSAFE_visTypes/chart';\nimport { BarItemData, BarSeriesData } from '#UNSAFE_BarChart/barChart.types';\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { getDefaultDatatipRenderer } from '#utils/PRIVATE_chartUtils/dataTipUtils';\nimport { LineAreaItem, LineAreaSeriesData } from '#UNSAFE_LineAreaChart/lineAreaChart.types';\nimport { getColorRamp } from '#utils/UNSAFE_visUtils';\nimport { Placement } from '#UNSAFE_Floating';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport { Property } from 'csstype';\nimport { ScatterItem } from '#UNSAFE_ScatterChart/scatterChart.types';\nimport { GroupLevelItem } from '#PRIVATE_Axis/groupAxis/hierarchicalUtils';\nimport { BundleType } from '#resources/nls/bundle';\n\ntype Props<\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n> = {\n  series: (BarSeriesData<K, D> | LineAreaSeriesData<K, D>)[];\n  leafGroupsInfo: GroupLevelItem[];\n  isDataCursorEnabled?: boolean;\n  dataCursorPosition?: DataCursorPosition;\n  isHoriz: boolean;\n  getDataItemPos: (seriesIndex: number, groupIndex: number) => Dimension | undefined;\n  datatip?: (context: {\n    data: D;\n    seriesIndex: number;\n    groupIndex: number;\n    id: K;\n    groupPath: number[];\n  }) => {\n    content: ComponentChildren;\n    borderColor?: Property.BorderColor;\n  };\n  xScale: Scale;\n  getDataItem: (seriesIndex: number, groupIndex: number, groupPath: number[]) => D | undefined;\n  hoveredItemInfo?: Info;\n  focusedItemInfo?: Info;\n  width: number;\n  height: number;\n  valueFormats?: ValueFormats;\n  findNearest: (x: number, y?: number, y2?: number) => any;\n  timeAxisType?: 'mixedFrequency' | 'skipGaps' | 'enabled';\n  touchResponse: 'touchStart' | 'touchHold';\n  isDisabled: boolean;\n  defaultXFormatter?: (value: number) => string;\n  defaultYFormatter?: (value: number) => string;\n  defaultY2Formatter?: (value: number) => string;\n  hasXYValues?: boolean;\n  getGroupFromPath: (path: number[]) => string[];\n  translations: BundleType;\n};\nconst DATA_CURSOR_OFFSET = 10;\n\nexport const useChartDatatip = <\n  K extends string | number,\n  D extends LineAreaItem<K> | ScatterItem<K> | BarItemData<K>\n>({\n  isDataCursorEnabled,\n  dataCursorPosition,\n  isHoriz,\n  datatip,\n  xScale,\n  getDataItem,\n  getDataItemPos,\n  hoveredItemInfo,\n  focusedItemInfo,\n  series,\n  valueFormats,\n  leafGroupsInfo,\n  width,\n  height,\n  findNearest,\n  timeAxisType,\n  touchResponse,\n  isDisabled,\n  defaultXFormatter,\n  defaultYFormatter,\n  defaultY2Formatter,\n  hasXYValues,\n  translations,\n  getGroupFromPath\n}: Props<K, D>) => {\n  const hasData = leafGroupsInfo.length > 0 && series.length > 0;\n  let activeInfo = !hasData\n    ? undefined\n    : !isDisabled\n    ? focusedItemInfo?.isCurrent\n      ? focusedItemInfo\n      : hoveredItemInfo?.isCurrent &&\n        hoveredItemInfo.seriesIndex !== undefined &&\n        hoveredItemInfo.groupIndex !== undefined\n      ? hoveredItemInfo\n      : undefined\n    : undefined;\n\n  const anchor = focusedItemInfo?.isCurrent || isDataCursorEnabled ? 'element' : 'pointer';\n  const elementBounds = focusedItemInfo?.isCurrent\n    ? getDataItemPos(focusedItemInfo.seriesIndex!, focusedItemInfo.groupIndex!)\n    : undefined;\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  let placement = 'top-start' as Placement;\n  let offset = calculateOffset(isRtl, width, elementBounds);\n\n  if (\n    isDataCursorEnabled &&\n    dataCursorPosition?.x != null &&\n    (dataCursorPosition?.y != null || dataCursorPosition?.y2 != null)\n  ) {\n    const neareast = findNearest(dataCursorPosition.x, dataCursorPosition.y, dataCursorPosition.y2);\n    activeInfo = activeInfo || neareast;\n    // TOD0: The offset for data cursor should be calculated according to\n    // datatip content dimensions as well.\n    const xPos = xScale.transform(dataCursorPosition.x);\n    offset = { mainAxis: -1, crossAxis: -1 };\n    if (isHoriz) {\n      placement = 'end';\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n      offset.crossAxis = xPos - height / 2;\n    } else {\n      placement = 'top';\n      offset.crossAxis = isRtl ? width / 2 - xPos : xPos - width / 2;\n      offset.mainAxis = -1 * DATA_CURSOR_OFFSET;\n    }\n  }\n\n  let dtContent;\n  let item: D | undefined;\n  if (activeInfo?.seriesIndex != null && activeInfo?.groupIndex != null) {\n    item = getDataItem(\n      activeInfo.seriesIndex,\n      activeInfo.groupIndex!,\n      leafGroupsInfo[activeInfo.groupIndex].path\n    );\n    const datatipContext = item\n      ? {\n          data: item,\n          seriesIndex: activeInfo.seriesIndex,\n          groupIndex: activeInfo.groupIndex,\n          id: item.id,\n          groupPath: leafGroupsInfo[activeInfo.groupIndex].path\n        }\n      : undefined;\n\n    if (datatipContext) {\n      const datatipRenderer =\n        datatip ||\n        getDefaultDatatipRenderer({\n          series: series[activeInfo.seriesIndex],\n          groups: getGroupFromPath(leafGroupsInfo[activeInfo.groupIndex].path),\n          translations,\n          valueFormats,\n          timeAxisType,\n          defaultXFormatter,\n          defaultYFormatter,\n          defaultY2Formatter,\n          hasXYValues\n        });\n      dtContent = datatipRenderer(datatipContext);\n    }\n  }\n  const colors = getColorRamp();\n  const borderColor =\n    dtContent?.borderColor ||\n    (activeInfo &&\n      ((series[activeInfo.seriesIndex!] as BarSeriesData<K, D>)?.color ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>)?.lineColor ||\n        (series[activeInfo.seriesIndex!] as LineAreaSeriesData<K, D>)?.areaColor)) ||\n    (activeInfo && colors[activeInfo.seriesIndex! % colors.length]);\n\n  const { datatipContent, datatipProps } = useDatatip({\n    content: dtContent?.content,\n    anchor,\n    placement,\n    offset,\n    borderColor,\n    touchResponse,\n    isDisabled\n  });\n\n  return { datatipContent, datatipProps };\n};\n"],"names":["getChartTabularData","data","seriesValue","groupValue","translations","valueFormats","isTimeAxis","defaultXFormatter","defaultYFormatter","hasXYValues","itemValue","itemX","itemY","itemWidthWeight","seriesLabel","chart_labelSeries","groupLabel","chart_labelGroup","valueLabel","chart_labelValue","xLabel","chart_labelX","yLabel","chart_labelY","widthWeightLabel","chart_labelWidthWeight","x","format","y","undefined","value","widthWeight","tableData","series","isDisplayed","push","key","label","group","isArray","Array","Date","getTime","groupsLabel","forEach","index","leafGroupsInfo","xAxis","isDataXAxis","getGroupFromPath","xDefaultLabelFormatter","yDefaultLabelFormatter","y2DefaultLabelFormatter","seriesIndex","groupIndex","isSelectionEnabled","isSelected","isDrillable","accLabel","accessibleLabel","_series","isAssociatedToY2","associatedYAxis","path","timeValue","timeAxisType","name","id","toString","map","join","generateAriaLabel","isDataCursorEnabled","dataCursorPosition","isHoriz","datatip","xScale","getDataItem","getDataItemPos","hoveredItemInfo","focusedItemInfo","width","height","findNearest","touchResponse","isDisabled","defaultY2Formatter","activeInfo","length","isCurrent","anchor","elementBounds","direction","useUser","isRtl","dtContent","item","placement","offset","calculateOffset","y2","neareast","xPos","transform","mainAxis","crossAxis","datatipContext","groupPath","options","isSeriesAssociatedToY2","isMixedFrequency","isRegularTimeAxis","context","groups","content","_jsx","jsx","VisTabularDatatip","borderColor","color","getDefaultDatatipRenderer","colors","getColorRamp","lineColor","areaColor","datatipContent","datatipProps","useDatatip"],"mappings":"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"}