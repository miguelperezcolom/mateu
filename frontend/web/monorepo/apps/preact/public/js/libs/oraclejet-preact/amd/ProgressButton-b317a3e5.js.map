{"version":3,"file":"ProgressButton-b317a3e5.js","sources":["../../src/UNSAFE_ProgressButton/ProgressButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentProps, Ref, Fragment, JSX } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ProgressButtonLabelLayout } from '../UNSAFE_ProgressButtonLabelLayout';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { forwardRef, ElementRef } from 'preact/compat';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { TestIdProps } from '../hooks/UNSAFE_useTestId';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { processGlobals, ButtonIntrinsicProps } from '../utils/UNSAFE_buttonUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport translations from '#resources/nls/en/bundle';\n\ntype ButtonHandle = ElementRef<typeof BaseButton>;\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.HTMLAttributes<HTMLElement>>, 'autofocus'>;\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\ntype BaseButtonProps = ComponentProps<typeof BaseButton>;\n\ntype Props = IntrinsicProps &\n  ButtonIntrinsicProps &\n  Pick<BaseButtonProps, 'aria-describedby'> &\n  WidthInterpolationProps &\n  TestIdProps & {\n    /**\n     * The startIcon is the button's start icon.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * Specifies that a quick indeterminate action is taking place, making the button read-only.\n     */\n    isLoading?: boolean;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifes the button type\n     */\n    type?: 'button' | 'submit';\n\n    /**\n     * label - button label, used for accessibility if no override\n     */\n    label?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     */\n    variant?: 'borderless' | 'outlined' | 'solid' | 'callToAction';\n\n    /**\n     * The size indicates how large the button is rendered.\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right.\n     */\n    edge?: ComponentProps<typeof BaseButton>['edge'];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * Display indicates whether only the label or all elements should be rendered by the button.\n     */\n    display?: 'label' | 'all';\n\n    /**\n     * tooltip - overrides the aria-label for the tooltip\n     */\n    tooltip?: string;\n  };\n/**\n * A Progress button is a push button that can show progress.\n */\nexport const ProgressButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isLoading = false,\n      isDisabled = false,\n      size = 'md',\n      display = 'all',\n      type: buttonType = 'button',\n      startIcon,\n      edge,\n      testId,\n      onAction,\n      label = '',\n      tooltip,\n      'aria-describedby': ariaDescribedBy,\n      width,\n      ...props\n    }: Props,\n    ref: Ref<ButtonHandle>\n  ) => {\n    const { globalEventProps } = processGlobals(props);\n    const isAdjustedLoading = isDisabled ? false : isLoading;\n    const progressStatus = translations.accButtonProgressStatus({\n      label: label\n    });\n    const progressComplete = translations.accButtonProgressComplete({\n      label: label\n    });\n\n    const showTooltip = isAdjustedLoading && (display == 'label' || !startIcon);\n    const tooltipLabel = showTooltip ? (tooltip ? tooltip : label) : tooltip;\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltipLabel,\n      isDisabled\n    });\n\n    const labelOnly = !startIcon || display === 'label';\n    const elementDetails = {\n      type: 'button' as const,\n      buttonType: buttonType\n    };\n    const content = (\n      <ProgressButtonLabelLayout\n        display={display}\n        isLoadingContrast={variant === 'callToAction'}\n        startIcon={startIcon}\n        accessibleLoadedLabel={progressComplete}\n        accessibleLoadingLabel={progressStatus}\n        size={size}\n        isLoading={isAdjustedLoading}>\n        {label}\n      </ProgressButtonLabelLayout>\n    );\n\n    /* For a11y, we use ignore aria-label during loading time */\n    const { 'aria-describedby': adb, ...ttProps } = tooltipProps;\n\n    return (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(ttProps, globalEventProps)}\n          ref={ref}\n          elementDetails={elementDetails}\n          isDisabled={isDisabled}\n          isReadOnly={isAdjustedLoading}\n          size={size}\n          width={width}\n          edge={edge}\n          variant={variant}\n          styling={\n            labelOnly\n              ? isAdjustedLoading\n                ? ['default', 'hiddenLabel', 'noHoverActive']\n                : ['default']\n              : isAdjustedLoading\n              ? ['noHoverActive', 'min']\n              : ['min']\n          }\n          onAction={onAction}\n          aria-label={label}\n          testId={testId}>\n          {content}\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n\nProgressButton.displayName = 'ProgressButton';\n"],"names":["ProgressButton","forwardRef","variant","isLoading","isDisabled","size","display","type","buttonType","startIcon","edge","testId","onAction","label","tooltip","ariaDescribedBy","width","props","ref","globalEventProps","processGlobals","isAdjustedLoading","progressStatus","translations","accButtonProgressStatus","progressComplete","accButtonProgressComplete","tooltipLabel","tooltipContent","tooltipProps","useTooltip","text","labelOnly","elementDetails","content","_jsx","ProgressButtonLabelLayout","isLoadingContrast","accessibleLoadedLabel","accessibleLoadingLabel","adb","ttProps","_jsxs","Fragment","children","BaseButton","mergeProps","isReadOnly","styling","displayName"],"mappings":"2iBAkGa,MAAAA,EAAiBC,EAAAA,YAC5B,EAEIC,UAAU,WACVC,aAAY,EACZC,cAAa,EACbC,OAAO,KACPC,UAAU,MACVC,KAAMC,EAAa,SACnBC,YACAC,OACAC,SACAC,WACAC,QAAQ,GACRC,UACA,mBAAoBC,EACpBC,WACGC,GAELC,KAEA,MAAMC,iBAAEA,GAAqBC,EAAcA,eAACH,GACtCI,GAAoBjB,GAAqBD,EACzCmB,EAAiBC,EAAY,QAACC,wBAAwB,CAC1DX,MAAOA,IAEHY,EAAmBF,EAAY,QAACG,0BAA0B,CAC9Db,MAAOA,IAIHc,EADcN,IAAiC,SAAXf,IAAuBG,GAC7BK,GAAoBD,EAASC,GAE3Dc,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMJ,EACNvB,eAGI4B,GAAavB,GAAyB,UAAZH,EAC1B2B,EAAiB,CACrB1B,KAAM,SACNC,WAAYA,GAER0B,EACJC,EAAAA,IAACC,EAAyBA,2BACxB9B,QAASA,EACT+B,kBAA+B,iBAAZnC,EACnBO,UAAWA,EACX6B,sBAAuBb,EACvBc,uBAAwBjB,EACxBjB,KAAMA,EACNF,UAAWkB,WACVR,KAKG,mBAAoB2B,KAAQC,GAAYZ,EAEhD,OACEa,OAACC,EAAQA,SAAA,CAAAC,SAAA,CACPT,MAACU,EAAUA,WAAA,IACLC,EAAAA,WAAWL,EAAStB,GACxBD,IAAKA,EACLe,eAAgBA,EAChB7B,WAAYA,EACZ2C,WAAY1B,EACZhB,KAAMA,EACNW,MAAOA,EACPN,KAAMA,EACNR,QAASA,EACT8C,QACEhB,EACIX,EACE,CAAC,UAAW,cAAe,iBAC3B,CAAC,WACHA,EACA,CAAC,gBAAiB,OAClB,CAAC,OAEPT,SAAUA,EACE,aAAAC,EACZF,OAAQA,EACPiC,SAAAV,IAEFN,IAEH,IAIN5B,EAAeiD,YAAc"}