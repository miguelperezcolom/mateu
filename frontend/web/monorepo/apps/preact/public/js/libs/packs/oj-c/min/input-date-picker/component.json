{
  "name": "input-date-picker",
  "version": "19.0.0",
  "jetVersion": "^19.0.0",
  "pack": "oj-c",
  "type": "composite",
  "dependencyScope": "runtime",
  "license": "https://opensource.org/licenses/UPL",
  "implements": [
    "CInputDatePickerElement"
  ],
  "displayName": "InputDatePicker",
  "description": "An input date picker allows users to enter or select a single date using a calendar interface.",
  "help": "oj-c.InputDatePicker.html",
  "main": "oj-c/input-date-picker",
  "status": [
    {
      "type": "supersedes",
      "since": "17.1.0",
      "value": [
        "oj-input-date"
      ]
    }
  ],
  "extension": {
    "catalog": {
      "category": "Forms"
    },
    "vbdt": {
      "module": "oj-c/input-date-picker",
      "defaultColumns": 6,
      "minColumns": 2
    },
    "oracle": {
      "icon": "oj-ux-ico-type-date-input"
    },
    "webelement": {
      "package": "@oracle/oraclejet-core-pack",
      "version": "19.0.0",
      "docUrl": "https://www.oracle.com/webfolder/technetwork/jet/cpwdtsdoc/classes/InputDatePickerWebElement.html",
      "export": "findInputDatePicker",
      "main": "@oracle/oraclejet-core-pack/webdriver"
    }
  },
  "propertyLayout": [
    {
      "propertyGroup": "common",
      "items": [
        "disabled",
        "labelHint",
        "readonly",
        "required"
      ]
    },
    {
      "propertyGroup": "data",
      "items": [
        "value"
      ]
    }
  ],
  "since": "17.0.0",
  "properties": {
    "columnSpan": {
      "type": "number",
      "description": "Specifies how many columns this component should span.",
      "displayName": "Column Span",
      "help": "#columnSpan",
      "value": 1
    },
    "containerReadonly": {
      "type": "boolean",
      "description": "Specifies whether an ancestor container, like oj-c-form-layout, is readonly.",
      "displayName": "Container Readonly",
      "help": "#containerReadonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      }
    },
    "dateRangeOverflowMessageDetail": {
      "type": "function",
      "description": "Overrides the default validator's rangeOverflow message detail.",
      "displayName": "Date Range Overflow Message Detail",
      "help": "#dateRangeOverflowMessageDetail"
    },
    "dateRangeUnderflowMessageDetail": {
      "type": "function",
      "description": "Overrides the default validator's rangeUnderflow message detail.",
      "displayName": "Date Range Underflow Message Detail",
      "help": "#dateRangeUnderflowMessageDetail"
    },
    "dateRestrictionMessageDetail": {
      "type": "function",
      "description": "Overrides the default validator's rangeUnderflow message detail.",
      "displayName": "Date Range Underflow Message Detail",
      "help": "#dateRangeUnderflowMessageDetail"
    },
    "dayFormatter": {
      "type": "function",
      "description": "Provides additional information for rendering a day.",
      "displayName": "Day Formatter",
      "help": "#dayFormatter"
    },
    "daysOutsideMonth": {
      "type": "string",
      "description": "Specifies the behavior of days outside of the current month in the Date Picker.",
      "displayName": "Days Outside Month",
      "help": "#daysOutsideMonth",
      "propertyEditorValues": {
        "hidden": {
          "description": "The days outside of the current month will be hidden.",
          "displayName": "Hidden"
        },
        "selectable": {
          "description": "The days outside of the current month will be visible and selectable.",
          "displayName": "Selectable"
        }
      },
      "enumValues": [
        "hidden",
        "selectable"
      ],
      "value": "hidden"
    },
    "disabled": {
      "type": "boolean",
      "description": "Specifies whether the component is disabled.",
      "displayName": "Disabled",
      "help": "#disabled",
      "value": false
    },
    "displayOptions": {
      "type": "object",
      "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
      "displayName": "Display Options",
      "help": "#displayOptions",
      "properties": {
        "messages": {
          "type": "string",
          "enumValues": [
            "none",
            "display"
          ],
          "value": "display"
        },
        "validatorHint": {
          "type": "string",
          "enumValues": [
            "none",
            "display"
          ],
          "value": "display"
        }
      }
    },
    "help": {
      "type": "object",
      "description": "Form component help information.",
      "displayName": "Help",
      "help": "#help",
      "properties": {
        "instruction": {
          "type": "string",
          "value": ""
        }
      }
    },
    "helpHints": {
      "type": "object",
      "description": "The helpHints object contains a definition property and a source property.",
      "displayName": "Help Hints",
      "help": "#helpHints",
      "properties": {
        "definition": {
          "type": "string",
          "value": ""
        },
        "source": {
          "type": "string",
          "value": ""
        },
        "sourceText": {
          "type": "string"
        }
      }
    },
    "labelEdge": {
      "type": "string",
      "description": "Specifies how the label is positioned for the component",
      "displayName": "Label Edge",
      "help": "#labelEdge",
      "propertyEditorValues": {
        "inside": {
          "description": "The label floats over the input element, but moves up on focus or when the component has a value (default, if unspecified).",
          "displayName": "Inside"
        },
        "none": {
          "description": "The component will not create a label, but instead set the aria-label property on the input element.",
          "displayName": "None"
        },
        "start": {
          "description": "The label will be placed before the start of the component.",
          "displayName": "Start"
        },
        "top": {
          "description": "The label will be placed on top of the component.",
          "displayName": "Top"
        }
      },
      "enumValues": [
        "none",
        "start",
        "top",
        "inside"
      ],
      "binding": {
        "consume": {
          "name": "containerLabelEdge"
        }
      }
    },
    "labelHint": {
      "type": "string",
      "description": "Represents a hint for rendering a label on the component.",
      "displayName": "Label Hint",
      "help": "#labelHint",
      "required": true,
      "translatable": true
    },
    "labelStartWidth": {
      "type": "number|string",
      "description": "The width of the label when labelEdge is 'start'.",
      "displayName": "Label Start Width",
      "help": "#labelStartWidth",
      "binding": {
        "consume": {
          "name": "labelWidth"
        }
      }
    },
    "labelWrapping": {
      "type": "string",
      "status": [
        {
          "type": "deprecated",
          "since": "18.0.0",
          "description": "Label truncation for 'start' and 'top' aligned labels is no longer recommended by the Redwood Design System. The default for labelWrapping was 'wrap' and that is now the only suggested pattern by UX design for 'start' and 'top' aligned labels. 'inside' aligned labels are always truncated per UX design and are not affected by this property's value."
        }
      ],
      "description": "Should the labels wrap or truncate when there is not enough available space.",
      "displayName": "Label Wrapping",
      "help": "#labelWrapping",
      "propertyEditorValues": {
        "truncate": {
          "description": "Label will truncate if needed.",
          "displayName": "Truncate"
        },
        "wrap": {
          "description": "Label will wrap if needed.",
          "displayName": "Wrap"
        }
      },
      "enumValues": [
        "truncate",
        "wrap"
      ],
      "binding": {
        "consume": {
          "name": "labelWrapping"
        }
      }
    },
    "max": {
      "type": "string|null",
      "description": "The maximum selectable date, in ISO string format",
      "displayName": "Max",
      "help": "#max",
      "format": "date"
    },
    "maxWidth": {
      "type": "number|string",
      "description": "The max width of the control.",
      "displayName": "Max Width",
      "help": "#maxWidth",
      "propertyEditorValues": {
        "sm": {},
        "md": {}
      }
    },
    "messagesCustom": {
      "type": "Array<object>",
      "description": "List of custom component messages",
      "displayName": "Messages Custom",
      "help": "#messagesCustom",
      "extension": {
        "vbdt": {
          "itemProperties": {
            "summary": {
              "type": "string"
            },
            "detail": {
              "type": "string"
            },
            "severity": {
              "type": "string",
              "enumValues": [
                "error",
                "confirmation",
                "info",
                "warning"
              ]
            }
          }
        }
      },
      "writeback": true,
      "value": []
    },
    "min": {
      "type": "string|null",
      "description": "The minimum selectable date, in ISO string format",
      "displayName": "Min",
      "help": "#min",
      "format": "date"
    },
    "monthAndYearPicker": {
      "type": "string",
      "description": "Specifies whether or not the DatePicker should show the toggle buttons that toggle the month grid picker and year grid picker.",
      "displayName": "Month And Year Picker",
      "help": "#monthAndYearPicker",
      "propertyEditorValues": {
        "on": {
          "description": "The month and year toggle buttons will be shown.",
          "displayName": "On"
        },
        "off": {
          "description": "The month and year toggle buttons will not be shown and the date picker renders the month and the year as text.",
          "displayName": "Off"
        }
      },
      "enumValues": [
        "off",
        "on"
      ],
      "value": "on"
    },
    "readonly": {
      "type": "boolean",
      "description": "Whether the component is readonly",
      "displayName": "Readonly",
      "help": "#readonly",
      "binding": {
        "consume": {
          "name": "containerReadonly"
        }
      }
    },
    "readonlyUserAssistanceShown": {
      "type": "string",
      "description": "Specifies which user assistance types should be shown when the component is readonly.",
      "displayName": "ReadonlyUserAssistanceShown",
      "help": "#readonlyUserAssistanceShown",
      "enumValues": [
        "none",
        "confirmationAndInfoMessages"
      ],
      "value": "none"
    },
    "required": {
      "type": "boolean",
      "description": "Specifies whether or not the component is required.",
      "displayName": "Required",
      "help": "#required",
      "value": false
    },
    "requiredMessageDetail": {
      "type": "string",
      "description": "Overrides the default Required error message.",
      "displayName": "Required Message Detail",
      "help": "#requiredMessageDetail",
      "translatable": true
    },
    "textAlign": {
      "type": "string",
      "description": "Specifies how the text is aligned within the text field",
      "displayName": "Text Align",
      "help": "#textAlign",
      "propertyEditorValues": {
        "start": {
          "description": "Aligns text left when reading direction is ltr and right when reading direction is rtl (default, if unspecified).",
          "displayName": "Start"
        },
        "end": {
          "description": "Aligns text right when reading direction is ltr and left when reading direction is rtl.",
          "displayName": "End"
        },
        "right": {
          "description": "Aligns text right regardless of reading direction, often used for numbers.",
          "displayName": "Right"
        }
      },
      "enumValues": [
        "end",
        "start",
        "right"
      ]
    },
    "todayTimeZone": {
      "type": "string",
      "description": "The time zone used for computing today for the Date Picker.",
      "displayName": "Time Zone For Computing Today",
      "help": "#todayTimeZone"
    },
    "todayButton": {
      "type": "string",
      "description": "Specifies how to render the 'Go to today' button.",
      "displayName": "Today Button",
      "help": "#todayButton",
      "propertyEditorValues": {
        "visible": {
          "description": "The 'Go to Today' button will be shown and it can be pressed to navigate to Today.",
          "displayName": "Visible"
        },
        "hidden": {
          "description": "The 'Go to Today' button will be hidden.",
          "displayName": "Hidden"
        }
      },
      "enumValues": [
        "hidden",
        "visible"
      ],
      "value": "visible"
    },
    "userAssistanceDensity": {
      "type": "string",
      "description": "Specifies the density of the form component's user assistance presentation.",
      "displayName": "User Assistance Density",
      "help": "#userAssistanceDensity",
      "propertyEditorValues": {
        "reflow": {
          "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
          "displayName": "Reflow"
        },
        "efficient": {
          "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
          "displayName": "Efficient"
        },
        "compact": {
          "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
          "displayName": "Compact"
        }
      },
      "enumValues": [
        "compact",
        "reflow",
        "efficient"
      ],
      "binding": {
        "consume": {
          "name": "containerUserAssistanceDensity"
        }
      }
    },
    "validators": {
      "type": "Array<object>|null",
      "description": "Specifies the validators for the component.",
      "displayName": "Validators",
      "help": "#validators",
      "value": []
    },
    "value": {
      "type": "string|null",
      "description": "The value of the component.",
      "displayName": "Value",
      "help": "#value",
      "format": "date",
      "writeback": true,
      "value": null
    },
    "weekDisplay": {
      "type": "string",
      "propertyEditorValues": {
        "none": {
          "description": "The week of the year column will not be shown.",
          "displayName": "None"
        },
        "number": {
          "description": "Will show the week of the year as a number.",
          "displayName": "Number"
        }
      },
      "description": "Whether week of the year will be shown in the DatePicker.",
      "displayName": "Week Display",
      "help": "#weekDisplay",
      "enumValues": [
        "number",
        "none"
      ],
      "value": "none"
    },
    "width": {
      "type": "number|string",
      "description": "The width of the control.",
      "displayName": "Width",
      "help": "#width",
      "propertyEditorValues": {
        "sm": {},
        "md": {}
      }
    },
    "rawValue": {
      "type": "object",
      "description": "Specifies how the raw value of the component",
      "displayName": "Raw Value",
      "help": "#rawValue",
      "properties": {
        "year": {
          "type": "number"
        },
        "month": {
          "type": "number"
        },
        "day": {
          "type": "number"
        }
      },
      "readOnly": true,
      "writeback": true
    },
    "valid": {
      "type": "string",
      "description": "Specifies how the valid state of the component",
      "displayName": "Valid",
      "help": "#valid",
      "propertyEditorValues": {
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined. The 'pending' state is set at the start of the validation process.",
          "displayName": "Pending"
        },
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity 'error'.",
          "displayName": "Invalid Shown"
        }
      },
      "enumValues": [
        "pending",
        "valid",
        "invalidHidden",
        "invalidShown"
      ],
      "readOnly": true,
      "writeback": true
    }
  },
  "methods": {
    "blur": {
      "description": "Blurs the date field.",
      "return": "void"
    },
    "focus": {
      "description": "Focuses the date field.",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.",
      "return": "void"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and updating the component's display value using the attribute value.",
      "return": "void"
    },
    "validate": {
      "description": "If enabled, validates the component's display value using the converter and all validators registered on the component. The Promise resolves to 'valid' if there were no converter parse errors and the component passed all validations, or if the component is disabled or readonly.",
      "return": "Promise"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
      "help": "#setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves the value of a property or a subproperty.",
      "help": "#getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "#setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  }
}