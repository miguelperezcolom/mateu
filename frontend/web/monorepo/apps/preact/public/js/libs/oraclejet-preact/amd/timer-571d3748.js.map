{"version":3,"file":"timer-571d3748.js","sources":["../../src/utils/PRIVATE_timer/timer.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * Timer utility that allows you to pause and resume a timer.\n */\nexport class Timer {\n  private callback?: () => void;\n  private isActive: boolean;\n  private remainingTime: number;\n  private startTime: number;\n  private timeoutId?: number;\n\n  /**\n   * Instantiates a controllable timer.\n   *\n   * @param callback The callback to be called once the timer completes\n   * @param delay The delay for the timer\n   */\n  constructor(callback: () => void, delay = 0) {\n    // set the initial values\n    this.callback = callback;\n    this.isActive = true;\n    this.remainingTime = delay;\n    this.startTime = Date.now();\n\n    this.start();\n  }\n\n  /**\n   * Starts the timer\n   */\n  private start() {\n    if (this.callback) {\n      this.timeoutId = window.setTimeout(this.proxyCallback.bind(this), this.remainingTime); // @HTMLUpdateOK\n    }\n  }\n\n  /**\n   * A proxy for handling callbacks when the timer runs out\n   */\n  private proxyCallback() {\n    // This will be called once the timer runs out\n    // at which point the timer is expired.\n    const callback = this.callback;\n    // Clear the timer before calling the callback.\n    // This is make sure that the timer state is up-to-date when the\n    // callback is invoked.\n    this.clear();\n    callback?.();\n  }\n\n  /**\n   * Clears the current timer without calling the callback and no further interaction will be allowed\n   */\n  clear() {\n    // if already cleared do not do anything\n    if (!this.isActive) {\n      return;\n    }\n    window.clearTimeout(this.timeoutId);\n    this.isActive = false;\n    this.timeoutId = undefined;\n    this.callback = undefined;\n  }\n\n  /**\n   * Pauses the current timer\n   */\n  pause() {\n    // do nothing if the timer is expired\n    if (!this.isActive) {\n      return;\n    }\n    window.clearTimeout(this.timeoutId);\n    this.timeoutId = undefined;\n    this.remainingTime -= Date.now() - this.startTime;\n  }\n\n  /**\n   * Resumes the timer\n   */\n  resume() {\n    // if there is already a timer running or if this is not active, do nothing\n    if (this.timeoutId || !this.isActive) {\n      return;\n    }\n    this.startTime = Date.now();\n    this.start();\n  }\n}\n"],"names":["constructor","callback","delay","this","isActive","remainingTime","startTime","Date","now","start","timeoutId","window","setTimeout","proxyCallback","bind","clear","clearTimeout","undefined","pause","resume"],"mappings":"2DAwBE,WAAAA,CAAYC,EAAsBC,EAAQ,GAExCC,KAAKF,SAAWA,EAChBE,KAAKC,UAAW,EAChBD,KAAKE,cAAgBH,EACrBC,KAAKG,UAAYC,KAAKC,MAEtBL,KAAKM,OACN,CAKO,KAAAA,GACFN,KAAKF,WACPE,KAAKO,UAAYC,OAAOC,WAAWT,KAAKU,cAAcC,KAAKX,MAAOA,KAAKE,eAE1E,CAKO,aAAAQ,GAGN,MAAMZ,EAAWE,KAAKF,SAItBE,KAAKY,QACLd,KACD,CAKD,KAAAc,GAEOZ,KAAKC,WAGVO,OAAOK,aAAab,KAAKO,WACzBP,KAAKC,UAAW,EAChBD,KAAKO,eAAYO,EACjBd,KAAKF,cAAWgB,EACjB,CAKD,KAAAC,GAEOf,KAAKC,WAGVO,OAAOK,aAAab,KAAKO,WACzBP,KAAKO,eAAYO,EACjBd,KAAKE,eAAiBE,KAAKC,MAAQL,KAAKG,UACzC,CAKD,MAAAa,IAEMhB,KAAKO,WAAcP,KAAKC,WAG5BD,KAAKG,UAAYC,KAAKC,MACtBL,KAAKM,QACN"}