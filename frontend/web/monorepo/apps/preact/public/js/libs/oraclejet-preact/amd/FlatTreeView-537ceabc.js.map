{"version":3,"file":"FlatTreeView-537ceabc.js","sources":["../../src/UNSAFE_FlatTreeView/NodeSkeletonContainer.tsx","../../src/UNSAFE_FlatTreeView/TreeItemSkeletons.tsx","../../src/UNSAFE_FlatTreeView/TreeItem.tsx","../../src/UNSAFE_FlatTreeView/SkeletonContainer.tsx","../../src/UNSAFE_FlatTreeView/LoadMoreTreeCollection.tsx","../../src/UNSAFE_FlatTreeView/useTreeNavigation.ts","../../src/UNSAFE_FlatTreeView/FlatTreeView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { Size } from '#utils/UNSAFE_size';\nimport { View } from '#UNSAFE_View';\n\ntype Props = {\n  /**\n   * Allows to pass and access the properties from child elements\n   **/\n  children?: (index: number) => ComponentChildren;\n  indentation?: Size;\n};\n\n/**\n * Allows to specify the time delay for rendering the component\n **/\nconst timerValue = 50;\n\n/**\n * Represents the skeleton for a tree item in expanding state\n **/\nexport function NodeSkeletonContainer({ children, indentation = 0 }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsVisible(true);\n    }, timerValue);\n  }, []);\n\n  return isVisible && children ? (\n    <div role=\"presentation\">\n      <View paddingInlineStart={indentation as Size}>\n        {[...Array(1)].map((_element, index) => children(index))}\n      </View>\n    </div>\n  ) : null;\n}\n","import { calcIndentation } from './TreeItem';\nimport { View } from '#UNSAFE_View';\nimport { Skeleton } from '#UNSAFE_Skeleton';\nimport { Flex } from '#UNSAFE_Flex';\nimport { Size } from '#utils/UNSAFE_size';\n\ntype Props = {\n  indentation?: number;\n  isLeaf?: boolean;\n};\n\nfunction TreeItemSkeleton({ indentation = 0, isLeaf = false }: Props) {\n  return (\n    <View paddingInlineStart={calcIndentation(indentation, isLeaf ? undefined : true) as Size}>\n      <View padding={[0, '4px']}>\n        <Flex height=\"9x\" align=\"center\" gap=\"2x\">\n          {!isLeaf && <Skeleton width=\"6x\" height=\"6x\" borderRadius=\"4px\" />}\n          <Skeleton height=\"5x\" borderRadius=\"4px\" />\n        </Flex>\n      </View>\n    </View>\n  );\n}\n\nexport function TreeItemSkeletons() {\n  return (\n    <>\n      <TreeItemSkeleton />\n      <TreeItemSkeleton indentation={1} />\n      <TreeItemSkeleton indentation={2} isLeaf={true} />\n    </>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { Size } from '#utils/UNSAFE_size';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { ToggleDetail, ListItemRendererContext } from '#UNSAFE_Collection';\nimport { View } from '#UNSAFE_View';\nimport { styles } from './themes/TreeViewStyles.css';\nimport { treeViewVars as cssVars } from './themes/TreeViewContract.css';\nimport { Expander } from '#PRIVATE_Expander';\nimport { Flex } from '#UNSAFE_Flex';\nimport { NodeSkeletonContainer } from './NodeSkeletonContainer';\nimport { TreeItemSkeletons } from './TreeItemSkeletons';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useHover } from '#hooks/UNSAFE_useHover';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\n\ntype Props<K, D> = {\n  children: (context: ListItemRendererContext<K, D>) => ComponentChildren;\n  itemKey: K;\n  depth: number;\n  context: ListItemRendererContext<K, D>;\n  isExpanded: boolean | undefined;\n  onToggle: (detail: ToggleDetail<K>) => void;\n  selected: boolean | 'partial';\n  isSelectable: boolean;\n  isCheckboxless: boolean;\n  isTabbable: boolean;\n  isLoading?: boolean;\n  isFocusRingVisible: boolean;\n};\n\nexport function TreeItem<K extends string | number, D>({\n  itemKey,\n  depth,\n  context,\n  children,\n  isExpanded,\n  onToggle,\n  selected,\n  isSelectable,\n  isCheckboxless,\n  isTabbable,\n  isLoading,\n  isFocusRingVisible\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const indentation = calcIndentation(depth, isExpanded);\n  const skeletonIndentation = calcIndentation(depth + 1, isExpanded);\n\n  const { isHover, hoverProps } = useHover();\n\n  const classes = classNames([\n    styles.treeItemStyles.base,\n    isFocusRingVisible && styles.treeItemStyles.focused,\n    selected === true && styles.treeItemStyles.selected,\n    selected === true && isCheckboxless && styles.treeItemStyles.checkboxlessSelected,\n    isSelectable && !selected && isHover && styles.treeItemStyles.hovered\n  ]);\n\n  return (\n    <>\n      <div\n        ref={rootRef}\n        id={useId()}\n        tabIndex={isMobile() ? -1 : undefined}\n        data-oj-key={itemKey}\n        class={classes}\n        role=\"treeitem\"\n        aria-level={depth + 1}\n        aria-selected={selected ? 'true' : 'false'}\n        {...(isExpanded !== undefined && { 'aria-expanded': isExpanded })}\n        {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}\n        {...hoverProps}>\n        <>\n          {selected === true && isHover && <div class={styles.selectedHoveredOverlay}></div>}\n          <TabbableModeContext.Provider value={{ isTabbable }}>\n            <View paddingInlineStart={indentation as Size}>\n              <Flex align=\"center\">\n                {isExpanded !== undefined && (\n                  <Expander itemKey={itemKey} expanded={isExpanded} onToggle={onToggle} />\n                )}\n                {children(context)}\n              </Flex>\n            </View>\n          </TabbableModeContext.Provider>\n        </>\n      </div>\n      {isLoading ? (\n        <NodeSkeletonContainer indentation={skeletonIndentation as Size}>\n          {() => {\n            return <TreeItemSkeletons />;\n          }}\n        </NodeSkeletonContainer>\n      ) : null}\n    </>\n  );\n}\n\nexport const isMobile = () => {\n  const { platform } = getClientHints();\n  return platform === 'ios' || platform === 'android';\n};\n\nexport const calcIndentation = (depth: number, isExpanded?: boolean) => {\n  const expanderPlaceholder = isExpanded === undefined ? '40px' : '0px';\n  return `calc(${Math.max(0, depth)} * ${cssVars.indentWidth} + ${expanderPlaceholder})`;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/TreeViewStyles.css';\n\ntype Props = {\n  /**\n   * Allows to pass and access the properties from child elements\n   **/\n  children?: (index: number) => ComponentChildren;\n  /**\n   * Allows to specify number of skeletons to be rendered on initial load\n   **/\n  minimumCount?: number;\n  /**\n   * Callback when skeleton do become visible, handler can use this\n   * to update its live region.\n   */\n  onSkeletonVisible?: () => void;\n};\n\n/**\n * Allows to specify the time delay for rendering the component\n **/\nconst timerValue = 50;\n\n/**\n * SkeletonContainer renders 'minimumCount' number of skeletons\n * of the variant specified from its child element - Skeleton's prop after\n * 'timerValue' ms delay\n **/\nexport function SkeletonContainer({ children, minimumCount = 1, onSkeletonVisible }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsVisible(true);\n      onSkeletonVisible?.();\n    }, timerValue);\n  }, [onSkeletonVisible]);\n\n  const containerClasses = classNames([styles.skeletonStyles.container]);\n  return isVisible && children ? (\n    <div class={containerClasses} role=\"presentation\">\n      {[...Array(minimumCount)].map((_element, index) => children(index))}\n    </div>\n  ) : null;\n}\n","import { ItemContext } from '#UNSAFE_Collection';\nimport { LoadMoreCollection } from '#PRIVATE_LoadMoreCollection';\nimport { TreeItem } from './TreeItem';\nimport { InternalTreeNode, LoadMoreTreeCollectionProps as Props } from './TreeView.types';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { TreeItemSkeletons } from './TreeItemSkeletons';\nimport { LOADMORE_STYLE_CLASS } from '#PRIVATE_LoadMoreCollection';\n// TODO: add this import due to issue JET-67485, need to update once Stable is introduced\nimport './themes/redwood/TreeViewTheme.css';\n\n/**\n * Component that receives the flattened data and renders the hierarchy betweens items based on the shaped metadata.\n * In order to maximize performance, only items that are visible in the viewport are rendered.\n * This is an internal component that is used by FlatTreeView.\n */\nexport function LoadMoreTreeCollection<K extends string | number, D>({\n  data,\n  children,\n  selectionMode,\n  onToggle = () => {},\n  viewportConfig,\n  hasMore = false,\n  onLoadMore = () => {},\n  loadMoreIndicator = defaultLoadMoreIndicator,\n  updateContext\n}: Props<K, D>) {\n  const createTreeItem = (context: ItemContext<InternalTreeNode<K, D>>) => {\n    const key = context.data.metadata.key;\n    const treeItemContext = {\n      index: context.index,\n      data: context.data.data,\n      metadata: { key }\n    };\n    // allow container to inject additional things to context\n    if (updateContext) {\n      updateContext(treeItemContext);\n    }\n    const expanded = context.data.metadata.expanded;\n    return (\n      <TreeItem\n        key={treeItemContext.metadata.key}\n        itemKey={treeItemContext.metadata.key}\n        context={treeItemContext}\n        depth={context.data.metadata.treeDepth}\n        isExpanded={expanded === 'ongoing' ? true : expanded}\n        onToggle={onToggle}\n        isSelectable={selectionMode !== 'none'}\n        isCheckboxless={selectionMode === 'single'} // TODO: need to update when checkboxless multiple is added\n        selected={context.data.metadata.selected}\n        isLoading={expanded === 'ongoing'}\n        isTabbable={false}\n        isFocusRingVisible={context.data.metadata.hasFocus}>\n        {children}\n      </TreeItem>\n    );\n  };\n\n  return (\n    <>\n      {data === null ? null : (\n        <LoadMoreCollection\n          data={data}\n          viewportConfig={viewportConfig}\n          hasMore={hasMore}\n          onLoadMore={onLoadMore}\n          loadMoreIndicator={loadMoreIndicator}>\n          {createTreeItem}\n        </LoadMoreCollection>\n      )}\n    </>\n  );\n}\n\nconst defaultLoadMoreIndicator = (\n  <div class={LOADMORE_STYLE_CLASS}>\n    <SkeletonContainer minimumCount={1}>\n      {() => {\n        return <TreeItemSkeletons />;\n      }}\n    </SkeletonContainer>\n  </div>\n);\n","import { RefObject } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useUser } from '#hooks/UNSAFE_useUser';\nimport {\n  findElementByKey,\n  keyExtractor,\n  getPrevNextKey,\n  ITEM_SELECTOR\n} from '#utils/PRIVATE_collectionUtils';\nimport { isKeyDefined } from '#utils/UNSAFE_keys';\nimport { useNavigation } from '#hooks/PRIVATE_useListCommon';\n\nexport function useTreeNavigation<K extends string | number>(\n  data: any | null,\n  rootRef: RefObject<HTMLDivElement>,\n  isExpanded: (key: K) => boolean,\n  idExtractor: (elem: Element) => string\n) {\n  const { direction } = useUser();\n\n  const arrowKeyAndHandlers = {\n    ArrowUp: (key?: K) => getPrevNextKey(rootRef.current, key, true, ITEM_SELECTOR),\n    ArrowDown: (key?: K) => getPrevNextKey(rootRef.current, key, false, ITEM_SELECTOR)\n  };\n\n  const { navigationProps, currentKey, onCurrentKeyChange, showFocusRing } = useNavigation(\n    data,\n    rootRef,\n    idExtractor,\n    arrowKeyAndHandlers,\n    undefined, // currentItemOverride,\n    undefined, //onPersistCurrentItem,\n    undefined,\n    undefined,\n    true, // should always allow shift key\n    false, // TODO: update allowTabbableMode when F2 mode is added\n    true,\n    false\n  );\n\n  const itemKeyExtractor = useCallback(\n    (element: HTMLElement) => {\n      if (element.getAttribute('role') === 'tree') {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    [currentKey, keyExtractor]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n        const isRtl = direction === 'rtl';\n        const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;\n        const itemKey = itemKeyExtractor(event.target as HTMLElement);\n        if (itemKey) {\n          const contains = isExpanded(itemKey);\n          // arrow left on a collapsed node, go to its parent\n          if (isLeftArrow && !contains && rootRef.current) {\n            const item = findElementByKey(rootRef.current, itemKey, ITEM_SELECTOR);\n            if (item) {\n              const treeDepth = item.getAttribute('aria-level');\n              const parent =\n                treeDepth !== null &&\n                findParentElementByKey(rootRef.current, itemKey, Number(treeDepth), ITEM_SELECTOR);\n              const newKey = parent && itemKeyExtractor(parent as HTMLElement);\n              if (isKeyDefined(newKey)) {\n                onCurrentKeyChange?.({ value: newKey as K });\n              }\n            }\n          } else if (!isLeftArrow && contains) {\n            // arrow right on an expanded node, go to its first child\n            const newKey = getPrevNextKey(rootRef.current, itemKey, false, ITEM_SELECTOR)();\n            if (isKeyDefined(newKey)) {\n              onCurrentKeyChange?.({ value: newKey as K });\n            }\n          }\n        }\n      }\n    },\n    [direction, isExpanded, onCurrentKeyChange, itemKeyExtractor]\n  );\n\n  const treeNavigationProps = mergeProps(navigationProps, { onKeyUp });\n  return { treeNavigationProps, currentKey, showFocusRing };\n}\n\nconst findParentElementByKey = <K extends string | number>(\n  root: HTMLElement | null,\n  key: K | null,\n  treeDepth: number,\n  itemSelector: string\n) => {\n  if (root && key !== null) {\n    const items = Array.from(root.querySelectorAll(itemSelector));\n    const index = items.findIndex((i) => (i as HTMLElement).dataset['ojKey'] == key);\n    for (let i = index; i >= 0; i--) {\n      const level = items[i].getAttribute('aria-level');\n      if (level !== null && Number(level) == treeDepth - 1) {\n        return items[i];\n      }\n    }\n  }\n  return null;\n};\n","import { useMemo, useRef, useCallback, useState } from 'preact/hooks';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { SelectionDetail, ListItemRendererContext } from '#UNSAFE_Collection';\nimport { getViewportConfig } from '#utils/PRIVATE_collectionUtils';\nimport { FlattenedTreeNode, InternalTreeNode, FlatTreeViewProps as Props } from './TreeView.types';\nimport { LoadMoreTreeCollection } from './LoadMoreTreeCollection';\nimport {\n  useSelection,\n  useAdditiveSelection,\n  SelectionRangeDetail\n} from '#hooks/PRIVATE_useSelection';\nimport { useExpandCollapse } from '#hooks/PRIVATE_useListCommon';\nimport {\n  keyExtractor,\n  getPrevNextKey,\n  findElementByKey,\n  ITEM_SELECTOR\n} from '#utils/PRIVATE_collectionUtils';\nimport { addKeys, containsKey } from '#utils/UNSAFE_keys';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { TreeViewRedwoodTheme } from './themes/redwood/TreeViewTheme.css';\nimport { useTreeNavigation } from './useTreeNavigation';\nimport { Selector } from '#UNSAFE_Selector';\nimport { isMobile } from './TreeItem';\nimport { SkeletonContainer } from './SkeletonContainer';\nimport { TreeItemSkeletons } from './TreeItemSkeletons';\nimport { LiveRegion } from '#UNSAFE_LiveRegion';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\n\n/**\n * A FlatTreeView displays flattened data as a tree with highly interactive features.\n */\nexport function FlatTreeView<K extends string | number, D>({\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy,\n  data,\n  selectionMode = 'none',\n  selectedKeys = { all: false, keys: new Set() },\n  onSelectionChange,\n  onToggle,\n  viewportConfig,\n  ...rest\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const [liveRegion, setLiveRegion] = useState<string>();\n  const { collection_loading, collection_loaded } = useTranslationBundle<BundleType>(\n    '@oracle/oraclejet-preact'\n  );\n  const loadingDescId = useId();\n\n  const isExpanded = useCallback((key: K) => {\n    if (rootRef.current) {\n      const elem = findElementByKey(rootRef.current, key, ITEM_SELECTOR);\n      return elem?.getAttribute('aria-expanded') === 'true';\n    }\n    return false;\n  }, []);\n\n  const { treeNavigationProps, currentKey, showFocusRing } = useTreeNavigation(\n    data,\n    rootRef,\n    isExpanded,\n    idExtractor\n  );\n\n  const items: InternalTreeNode<K, D>[] = useMemo(\n    () =>\n      data?.map((value: FlattenedTreeNode<K, D>) => {\n        const itemKey = value.metadata.key;\n        const newValue = { ...value } as InternalTreeNode<K, D>;\n        newValue.metadata.selected = containsKey(selectedKeys, itemKey);\n        newValue.metadata.hasFocus = currentKey === itemKey && showFocusRing;\n        return newValue;\n      }) || [],\n    [data, selectedKeys, currentKey, showFocusRing]\n  );\n\n  const expandCollapseProps = useExpandCollapse(\n    (element: HTMLElement) => {\n      if (element.getAttribute('role') === 'tree') {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    isExpanded,\n    onToggle,\n    true\n  );\n\n  // tracking the anchor key which is used for shift+click selection\n  const anchorKey = useRef<K | undefined>();\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange) {\n        if (detail.value.all === false && detail.value.keys.size > 0) {\n          // during regular selection, the last key selected by a user gesture is the anchor key\n          anchorKey.current = Array.from(detail.value.keys.values()).pop();\n        }\n        onSelectionChange(detail);\n      }\n    },\n    [anchorKey, onSelectionChange]\n  );\n\n  const handleSelectionRangeChange = useCallback(\n    (detail: SelectionRangeDetail<K>) => {\n      if (data && onSelectionChange) {\n        const value = handleSelectionRange(detail, data);\n        if (Array.isArray(value)) {\n          if (detail.eventType === 'shiftSpace') {\n            // during range selection by shift+space, the first key selected by a user gesture is the anchor key\n            anchorKey.current = detail.value.start;\n          } else {\n            // during range selection by shift+click/arrow keys, the last key selected by a user gesture is the anchor key\n            anchorKey.current = detail.value.end;\n          }\n          if (selectionMode === 'multipleToggle') {\n            const keys = addKeys(selectedKeys, value);\n            onSelectionChange({ value: keys, target: null });\n          } else {\n            onSelectionChange({ value: { all: false, keys: new Set(value) }, target: null });\n          }\n        }\n      }\n    },\n    [data, selectedKeys, onSelectionChange]\n  );\n\n  // single or multiple selection mode\n  const { selectionProps } = useSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    selectionMode === 'multipleToggle' ? 'none' : selectionMode,\n    false,\n    'replace',\n    handleSelectionChange,\n    anchorKey.current,\n    currentKey,\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    undefined,\n    (key: K) => {\n      if (rootRef.current) {\n        const elem = findElementByKey(rootRef.current, key, ITEM_SELECTOR);\n        if (elem) {\n          elem.scrollIntoView({ block: 'nearest' });\n        }\n      }\n    },\n    handleSelectionRangeChange\n  );\n\n  // multipleToggle selection mode\n  const { eventProps: multipleToggleSelectionProps } = useAdditiveSelection(\n    (element: HTMLElement) => {\n      if (element === rootRef.current) {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, ITEM_SELECTOR) as K;\n    },\n    selectedKeys,\n    selectionMode === 'multipleToggle' ? 'multiple' : 'none',\n    false,\n    (key: K) => {\n      if (data) {\n        return data.findIndex((value: FlattenedTreeNode<K, D>) => value.metadata.key === key);\n      }\n      return -1;\n    },\n    (startIndex: number, endIndex: number) => {\n      if (data) {\n        const keys = data.map((value: FlattenedTreeNode<K, D>) => value.metadata.key);\n        return keys.slice(startIndex, endIndex);\n      }\n      return [];\n    },\n    (currentKey: K | undefined, isPrev: boolean) =>\n      getPrevNextKey(rootRef.current, currentKey, isPrev, ITEM_SELECTOR),\n    currentKey,\n    handleSelectionChange,\n    handleSelectionRangeChange\n  );\n\n  //Note: onKeyUp doesn't work with the cmd key\n  const selectAllWithKeyboard = useCallback(\n    (event: KeyboardEvent) => {\n      if (selectionMode === 'multiple' || selectionMode === 'multipleToggle') {\n        if (onSelectionChange && (event.metaKey || event.ctrlKey) && event.key === 'a') {\n          event.preventDefault();\n          onSelectionChange({\n            value: { all: true, deletedKeys: new Set() },\n            target: event.target\n          });\n        }\n      }\n    },\n    [onSelectionChange, selectionMode]\n  );\n\n  const { classes } = useComponentTheme(TreeViewRedwoodTheme);\n  viewportConfig = getViewportConfig(rootRef, viewportConfig);\n\n  const updateContextCallback = useCallback(\n    (context: ListItemRendererContext<K, D>) => {\n      const key = context.metadata.key;\n      context.selector =\n        selectionMode === 'none' || selectionMode === 'single'\n          ? undefined\n          : (ariaLabel?: string) => (\n              <div aria-hidden={isMobile() ? undefined : true}>\n                <Selector\n                  aria-label={isMobile() ? ariaLabel : undefined}\n                  rowKey={key}\n                  selectedKeys={selectedKeys}\n                  onChange={onSelectionChange}\n                />\n              </div>\n            );\n    },\n    [selectionMode, selectedKeys, onSelectionChange]\n  );\n\n  const updateLiveRegion = useCallback(() => {\n    setLiveRegion(collection_loading());\n  }, [collection_loading]);\n\n  return (\n    <>\n      <div\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={\n          data == null\n            ? ariaDescribedBy\n              ? [...new Set(ariaDescribedBy.split(/\\s+/).concat(loadingDescId))].join(' ')\n              : loadingDescId\n            : ariaDescribedBy\n        }\n        ref={rootRef}\n        role=\"tree\"\n        aria-multiselectable={selectionMode === 'multiple' ? true : false}\n        tabIndex={0}\n        class={classes}\n        {...mergeProps(\n          treeNavigationProps,\n          selectionProps,\n          multipleToggleSelectionProps,\n          expandCollapseProps,\n          { onKeyDown: selectAllWithKeyboard }\n        )}>\n        {data == null ? (\n          defaultLoadingIndicator(updateLiveRegion)\n        ) : (\n          <LoadMoreTreeCollection\n            data={items}\n            selectionMode={selectionMode}\n            onToggle={onToggle}\n            viewportConfig={viewportConfig}\n            updateContext={updateContextCallback}\n            {...rest}></LoadMoreTreeCollection>\n        )}\n      </div>\n      <HiddenAccessible id={loadingDescId}>{collection_loading()}</HiddenAccessible>\n      <LiveRegion>\n        {data == null ? liveRegion : liveRegion === collection_loading() ? collection_loaded() : ''}\n      </LiveRegion>\n    </>\n  );\n}\n\nconst defaultLoadingIndicator = (callback: () => void) => {\n  return (\n    <SkeletonContainer minimumCount={8} onSkeletonVisible={callback}>\n      {() => {\n        return <TreeItemSkeletons />;\n      }}\n    </SkeletonContainer>\n  );\n};\n\nconst idExtractor = (elem: Element) => elem.id;\n\n/**\n * A helper function to handle range selection\n */\nexport const handleSelectionRange = <K, D>(\n  detail: SelectionRangeDetail<K>,\n  data: FlattenedTreeNode<K, D>[]\n) => {\n  const keys = data.map((value: FlattenedTreeNode<K, D>) => {\n    return value.metadata.key;\n  });\n  const startIndex = keys.indexOf(detail.value.start);\n  const endIndex = keys.indexOf(detail.value.end);\n  const minIndex = Math.min(startIndex, endIndex);\n  const maxIndex = Math.max(startIndex, endIndex);\n  if (minIndex === -1) {\n    // return a range to fetch so we can find all the keys, maxIndex should not be -1\n    return { offset: 0, count: -1 };\n  } else {\n    // range of keys are in the current viewport, return them\n    return keys.slice(minIndex, maxIndex + 1);\n  }\n};\n"],"names":["NodeSkeletonContainer","children","indentation","isVisible","setIsVisible","useState","useEffect","setTimeout","_jsx","role","View","paddingInlineStart","Array","map","_element","index","TreeItemSkeleton","isLeaf","calcIndentation","undefined","padding","_jsxs","Flex","height","align","gap","Skeleton","width","borderRadius","TreeItemSkeletons","_Fragment","TreeItem","itemKey","depth","context","isExpanded","onToggle","selected","isSelectable","isCheckboxless","isTabbable","isLoading","isFocusRingVisible","rootRef","useRef","skeletonIndentation","isHover","hoverProps","useHover","classes","classNames","styles","treeItemStyles","base","focused","checkboxlessSelected","hovered","jsx","ref","id","useId","tabIndex","isMobile","class","Fragment","selectedHoveredOverlay","TabbableModeContext","Provider","value","Expander","expanded","platform","getClientHints","expanderPlaceholder","Math","max","cssVars","treeViewVars","indentWidth","SkeletonContainer","minimumCount","onSkeletonVisible","containerClasses","skeletonStyles","container","LoadMoreTreeCollection","data","selectionMode","viewportConfig","hasMore","onLoadMore","loadMoreIndicator","defaultLoadMoreIndicator","updateContext","LoadMoreCollection","key","metadata","treeItemContext","treeDepth","hasFocus","LOADMORE_STYLE_CLASS","findParentElementByKey","root","itemSelector","items","from","querySelectorAll","findIndex","i","dataset","level","getAttribute","Number","defaultLoadingIndicator","callback","idExtractor","elem","handleSelectionRange","detail","keys","startIndex","indexOf","start","endIndex","end","minIndex","min","maxIndex","offset","count","slice","ariaLabel","ariaLabelledBy","ariaDescribedBy","selectedKeys","all","Set","onSelectionChange","rest","liveRegion","setLiveRegion","collection_loading","collection_loaded","useTranslationBundle","loadingDescId","useCallback","current","findElementByKey","ITEM_SELECTOR","treeNavigationProps","currentKey","showFocusRing","direction","useUser","arrowKeyAndHandlers","ArrowUp","getPrevNextKey","ArrowDown","navigationProps","onCurrentKeyChange","useNavigation","itemKeyExtractor","element","keyExtractor","onKeyUp","event","isRtl","isLeftArrow","target","contains","item","parent","newKey","isKeyDefined","mergeProps","useTreeNavigation","useMemo","newValue","containsKey","expandCollapseProps","useExpandCollapse","anchorKey","handleSelectionChange","size","values","pop","handleSelectionRangeChange","isArray","eventType","addKeys","selectionProps","useSelection","isPrev","scrollIntoView","block","eventProps","multipleToggleSelectionProps","useAdditiveSelection","selectAllWithKeyboard","metaKey","ctrlKey","preventDefault","deletedKeys","useComponentTheme","TreeViewRedwoodTheme","getViewportConfig","updateContextCallback","selector","Selector","rowKey","onChange","updateLiveRegion","split","concat","join","onKeyDown","HiddenAccessible","LiveRegion"],"mappings":"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"}