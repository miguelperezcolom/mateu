{"version":3,"file":"SelectorWebElementBase.js","sourceRoot":"","sources":["SelectorWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,sBAAuB,SAAQ,uBAAY;IACtD;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAkB,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,YAAoB;QAC5C,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,EAAE,YAAY,CAAC,CAAC;IAChE,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAU,eAAe,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAS,eAAe,CAAC,CAAC;IACnD,CAAC;CACF;AAlDD,wDAkDC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-selector WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, SelectorWebElement.ts.\n */\nexport class SelectorWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>rowKey</code> property.\n   * Specifies the row key of each selector.\n   * @return The value of <code>rowKey</code> property.\n   *\n   */\n  public getRowKey(): Promise<string | number> {\n    return this.getProperty<string | number>('rowKey');\n  }\n\n  /**\n   * Sets the value of <code>selectedKeys</code> property.\n   * Specifies the selectedKeys.\n   * @param selectedKeys The value to set for <code>selectedKeys</code>\n   *\n   */\n  public changeSelectedKeys(selectedKeys: object): Promise<void> {\n    return this.setProperty<object>('selectedKeys', selectedKeys);\n  }\n\n  /**\n   * Gets the value of <code>selectedKeys</code> property.\n   * Specifies the selectedKeys.\n   * @return The value of <code>selectedKeys</code> property.\n   *\n   */\n  public getSelectedKeys(): Promise<object> {\n    return this.getProperty<object>('selectedKeys');\n  }\n\n  /**\n   * Gets the value of <code>indeterminate</code> property.\n   * Visual only state to indicate partial selection\n   * @return The value of <code>indeterminate</code> property.\n   *\n   */\n  public getIndeterminate(): Promise<boolean> {\n    return this.getProperty<boolean>('indeterminate');\n  }\n\n  /**\n   * Gets the value of <code>selectionMode</code> property.\n   * Specifies the selection mode.\n   * @return The value of <code>selectionMode</code> property.\n   *\n   */\n  public getSelectionMode(): Promise<string> {\n    return this.getProperty<string>('selectionMode');\n  }\n}\n"]}