{"version":3,"file":"TruncatingTextWebElementBase.js","sourceRoot":"","sources":["TruncatingTextWebElementBase.ts"],"names":[],"mappings":";;;AAAA,mEAAoE;AAEpE;;;;;GAKG;AACH,MAAa,4BAA6B,SAAQ,uBAAY;IAC5D;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,WAAW,CAAS,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,WAAW,CAAS,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,WAAW,CAAS,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,aAAa;QAClB,OAAO,IAAI,CAAC,WAAW,CAAS,YAAY,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,CAAS,WAAW,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,WAAW,CAAS,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF;AAhFD,oEAgFC","sourcesContent":["import { OjWebElement } from '@oracle/oraclejet-webdriver/elements';\n\n/**\n * This is the base class for oj-c-truncating-text WebElement, and is generated from the\n * component's metadata. Do not modify these contents since they'll be replaced\n * during the next generation.\n * Put overrides into the WebElements's subclass, TruncatingTextWebElement.ts.\n */\nexport class TruncatingTextWebElementBase extends OjWebElement {\n  /**\n   * Gets the value of <code>variant</code> property.\n   * Specifies text color. If set as 'inherit', takes text color from its parent element.\n   * @return The value of <code>variant</code> property.\n   *\n   */\n  public getVariant(): Promise<string> {\n    return this.getProperty<string>('variant');\n  }\n\n  /**\n   * Gets the value of <code>size</code> property.\n   * Specifies font size and line height. If set as 'inherit', takes font size and line height from its parent element.\n   * @return The value of <code>size</code> property.\n   *\n   */\n  public getSizeProperty(): Promise<string> {\n    return this.getProperty<string>('size');\n  }\n\n  /**\n   * Gets the value of <code>weight</code> property.\n   * Specifies the font weight. If set as 'inherit', takes font weight from its parent element.\n   * @return The value of <code>weight</code> property.\n   *\n   */\n  public getWeight(): Promise<string> {\n    return this.getProperty<string>('weight');\n  }\n\n  /**\n   * Gets the value of <code>overflowWrap</code> property.\n   * Specifies the overflow-wrap.\n   * @return The value of <code>overflowWrap</code> property.\n   *\n   */\n  public getOverflowWrap(): Promise<string> {\n    return this.getProperty<string>('overflowWrap');\n  }\n\n  /**\n   * Gets the value of <code>hyphens</code> property.\n   * Specifies if hyphens should be included when handling long words with no spaces.\n   * @return The value of <code>hyphens</code> property.\n   *\n   */\n  public getHyphens(): Promise<string> {\n    return this.getProperty<string>('hyphens');\n  }\n\n  /**\n   * Gets the value of <code>truncation</code> property.\n   * Determines text behavior when text is truncated. Be aware of setting either lineClamp or truncation. Setting both props would produce a type error. In most cases, lineClamp=1 tries to put the ellipsis at the end of a \"word\". On the other hand, using truncation=\"ellipsis\" will show as much as possible text, then put the ellipsis at the end.\n   * @return The value of <code>truncation</code> property.\n   *\n   */\n  public getTruncation(): Promise<string> {\n    return this.getProperty<string>('truncation');\n  }\n\n  /**\n   * Gets the value of <code>lineClamp</code> property.\n   * Truncates text at a specific number of lines and then displays an ellipsis (â€¦) at the end of the last line. Parent of the element needs to have a specific width so text starts overflowing and produce a truncation.\n   * @return The value of <code>lineClamp</code> property.\n   *\n   */\n  public getLineClamp(): Promise<number> {\n    return this.getProperty<number>('lineClamp');\n  }\n\n  /**\n   * Gets the value of <code>value</code> property.\n   * \"Specifies the text to be displayed.\n   * @return The value of <code>value</code> property.\n   *\n   */\n  public getValue(): Promise<string> {\n    return this.getProperty<string>('value');\n  }\n}\n"]}