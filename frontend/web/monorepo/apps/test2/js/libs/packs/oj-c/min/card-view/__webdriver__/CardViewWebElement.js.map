{"version":3,"file":"CardViewWebElement.js","sourceRoot":"","sources":["CardViewWebElement.ts"],"names":[],"mappings":";;;AAAA,qEAAkE;AAClE,2DAAwC;AACxC,qEAAmE;AACnE,qFAAqF;AACrF;;;;;GAKG;AACH,MAAa,kBAAmB,SAAQ,+CAAsB;IAC5D,qBAAqB;IACrB;;;;;;OAMG;IACH,KAAK,CAAC,cAAc,CAAI,QAAkB;QACxC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,OAAO,IAAA,oCAAkB,EACvB,IAAI,CAAC,SAAS,EAAE,EAChB,CAAC,QAAQ,CAAC,EACV,CAAC,IAAI,EAAE,QAAQ,CAAC,EAChB,CAAC,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAC7E,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAa,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,GAAQ,EAAE,EAAE;YAC3E,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE;gBACtC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;gBAC1C,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YACtC,OAAO,QAAQ,CAAC;QAClB,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,CAAI,WAAuB;QACvC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACvB,OAAO,IAAA,+BAAS,EACd,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAE,CAAC,GAAG,CAAC,kCAAkC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC,CACtF,CAAC;QACJ,CAAC;QAAC,OAAO,EAAE,EAAE,CAAC;YACZ,MAAM,KAAK,CACT,mDAAmD,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAC1F,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AArDD,gDAqDC","sourcesContent":["import { CardViewWebElementBase } from './CardViewWebElementBase';\nimport { By } from 'selenium-webdriver';\nimport { SlotProxy, slotProxy } from '@oracle/oraclejet-webdriver';\nimport { executeWithModules } from '@oracle/oraclejet-webdriver/lib/oj-module-proxy';\n/**\n/**\n * The component WebElement for [oj-c-card-view](../../jsdocs/oj-c.CardView.html).\n * Do not instantiate this class directly, instead, use\n * [findCardView](../modules.html#findCardView).\n */\nexport class CardViewWebElement extends CardViewWebElementBase {\n  // Put overrides here\n  /**\n   * Sets the value of \"selected\" property.\n   * Specifies the current selected items in the listview. See the Help documentation for more information.\n   * @param selected The value to set for \"selected\"\n   * @override\n   * @typeparam K Type of keys\n   */\n  async changeSelected<K>(selected: Array<K>) {\n    await this.whenReady();\n    return executeWithModules<K>(\n      this.getDriver(),\n      ['KeySet'],\n      [this, selected],\n      ({ KeySetImpl }, ele, selected) => (ele.selected = new KeySetImpl(selected))\n    );\n  }\n\n  /**\n   * Gets the value of \"selected\" property.\n   * Retrieves the current selected items in the listview. See the Help documentation for more information.\n   * @override\n   * @typeparam K Type of keys\n   * @return The value of \"selected\" property.\n   */\n  async getSelected<K>(): Promise<Array<K>> {\n    await this.whenReady();\n    const selected: Array<K> = await this.getDriver().executeScript((ele: any) => {\n      const selected = ele.selected.isAddAll()\n        ? Array.from(ele.selected.deletedValues())\n        : Array.from(ele.selected.values());\n      return selected;\n    }, this);\n    return selected;\n  }\n\n  /**\n   * Retrieve a SlotProxy which represents a single listview item.\n   * @param key The key within the Collection's dataset associated with the item.\n   */\n  async findItem<T>(itemLocator: { key: T }): Promise<SlotProxy> {\n    try {\n      await this.whenReady();\n      return slotProxy(\n        await this.findElement(By.css(`[role=\"gridcell\"][data-oj-key=\"${itemLocator.key}\"]`))\n      );\n    } catch (ex) {\n      throw Error(\n        `No corresponding item found for the itemLocator ${JSON.stringify(itemLocator, null, 2)}`\n      );\n    }\n  }\n}\n"]}