{"version":3,"file":"SelectSingleWebElement.js","sourceRoot":"","sources":["SelectSingleWebElement.ts"],"names":[],"mappings":";;;AAAA,6EAA0E;AAE1E;;;;GAIG;AACH,MAAa,sBAAuB,SAAQ,uDAA0B;IACpE,qBAAqB;IAErB;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAA4B,KAAe;QAC1D,uCAAuC;QACvC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,OAAoB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACtF,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAClC,CAAC,OAAY,EAAE,KAAe,EAAE,EAAE;gBAChC,OAAO,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAC,EACD,IAAI,EACJ,KAAK,CACN,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,MAAM;IACN,wDAAwD;IACxD,qEAAqE;IACrE,2CAA2C;IAC3C,MAAM;IACN,gDAAgD;IAChD,wCAAwC;IACxC,wEAAwE;IAExE,uFAAuF;IACvF,+CAA+C;IAC/C,+CAA+C;IAC/C,iDAAiD;IACjD,yDAAyD;IACzD,yCAAyC;IACzC,iDAAiD;IACjD,UAAU;IACV,oCAAoC;IACpC,uCAAuC;IAEvC,mDAAmD;IACnD,wDAAwD;IAExD,+CAA+C;IAC/C,oCAAoC;IACpC,4BAA4B;IAC5B,SAAS;IACT,cAAc;IACd,mBAAmB;IACnB,SAAS;IACT,MAAM;IACN,IAAI;IAEJ;;;;OAIG;IACH,KAAK,CAAC,sBAAsB,CAAC,UAAkB;QAC7C,kFAAkF;QAClF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACtD,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,cAAc,KAAK,IAAI,EAAE,CAAC;YACvD,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,CAAC,OAAoB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACtF,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,aAAa,CAClC,CAAC,OAAY,EAAE,UAAkB,EAAE,EAAE;gBACnC,OAAO,OAAO,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YACrD,CAAC,EACD,IAAI,EACJ,UAAU,CACX,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AAzFD,wDAyFC","sourcesContent":["import { SelectSingleWebElementBase } from './SelectSingleWebElementBase';\n\n/**\n * The component WebElement for [oj-c-select-single](../../jsdocs/oj-c.SelectSingle.html).\n * Do not instantiate this class directly, instead, use\n * [findSelectSingle](../functions/findSelectSingle.html).\n */\nexport class SelectSingleWebElement extends SelectSingleWebElementBase {\n  // Put overrides here\n\n  /**\n   * Sets the value of the <code>value</code> property.\n   * The value of the component.\n   * @param value The value to set for <code>value</code>\n   * @override\n   */\n  async changeValue<V extends string | number>(value: V | null) {\n    // Only mutate if not readonly/disabled\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    if (!(readonly || disabled)) {\n      await this.getDriver().executeScript((element: HTMLElement) => element.focus(), this);\n      await this.whenBusyContextReady();\n      await this.getDriver().executeScript(\n        (element: any, value: V | null) => {\n          return element._selectItemByValue(value);\n        },\n        this,\n        value\n      );\n    }\n  }\n\n  /**\n   * Clears the value of the component.\n   * @override\n   */\n  clear(): Promise<void> {\n    return this.changeValue(null);\n  }\n\n  // /**\n  //  * Triggers the <code>ojAddToListAction</code> event.\n  //  * @param searchText The <code>searchText</code> to include in the\n  //  * <code>ojAddToListAction</code> event.\n  //  */\n  // async doAddToListAction(searchText: string) {\n  //   // Call focus() on the root element\n  //   await this.getDriver().executeScript('arguments[0].focus()', this);\n\n  //   // Only fire event if advanced search is on and component is not readonly/disabled\n  //   const readonly = await this.getReadonly();\n  //   const disabled = await this.getDisabled();\n  //   const addToList = await this.getAddToList();\n  //   if (!(readonly || disabled) && addToList === 'on') {\n  //     await this.whenBusyContextReady();\n  //     await this.getDriver().executeAsyncScript(\n  //       `\n  //       var element = arguments[0];\n  //       var searchText = arguments[1];\n\n  //       // Last argument will be the done function\n  //       var doneFunc = arguments[arguments.length - 1];\n\n  //       element._doAddToListAction(searchText)\n  //         .then(doneFunc, doneFunc)\n  //         .catch(doneFunc);\n  //     `,\n  //       this,\n  //       searchText\n  //     );\n  //   }\n  // }\n\n  /**\n   * Triggers the <code>ojAdvancedSearchAction</code> event.\n   * @param searchText The <code>searchText</code> to include in the\n   * <code>ojAdvancedSearchAction</code> event.\n   */\n  async doAdvancedSearchAction(searchText: string) {\n    // Only fire event if advanced search is on and component is not readonly/disabled\n    const readonly = await this.getReadonly();\n    const disabled = await this.getDisabled();\n    const advancedSearch = await this.getAdvancedSearch();\n    if (!(readonly || disabled) && advancedSearch === 'on') {\n      await this.getDriver().executeScript((element: HTMLElement) => element.focus(), this);\n      await this.whenBusyContextReady();\n      await this.getDriver().executeScript(\n        (element: any, searchText: string) => {\n          return element._doAdvancedSearchAction(searchText);\n        },\n        this,\n        searchText\n      );\n    }\n  }\n}\n"]}