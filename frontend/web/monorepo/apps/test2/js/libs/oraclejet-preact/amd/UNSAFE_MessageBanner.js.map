{"version":3,"file":"UNSAFE_MessageBanner.js","sources":["../../src/UNSAFE_MessageBanner/MessageBanner.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { Message, MessagesManager, getRenderer } from '../PRIVATE_Message';\nimport { Flex } from '../UNSAFE_Flex';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport {\n  FocusableComponentHandle,\n  useMessageFocusManager\n} from '../hooks/PRIVATE_useMessagesFocusManager';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Item, ItemMetadata } from '../utils/UNSAFE_dataProvider';\nimport { Handle } from '@oracle/oraclejet-internal-utilities/typeUtils';\nimport { MessageBannerRedwoodTheme } from './themes/redwood/MessageBannerTheme';\nimport { type TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\ntype MessageRef = Handle<typeof Message, 'messageRef'>;\n\n// TODO: Refactor Message Item types\n// \n\n/**\n * An object representing a single message in MessageBanner component.\n */\nexport type MessageBannerItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: 'none' | 'error' | 'warning' | 'confirmation' | 'info';\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Structure of data item passed to the renderers\n */\nexport type MessageBannerRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n\n/**\n * Props for the MessageBanner Component\n */\ntype Props<Key, Data> = TestIdProps & {\n  /**\n   * Data for the MessageBanner component. This data is used for rendering each banner message.\n   * The key for each message will be configured using the key of the corresponding item. This way,\n   * the component will know whether a new message is being added or an existing message is being updated/removed\n   * when the new data comes in.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The application\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message closed. If the application\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component and the message will stay in the UI opened.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of a renderer to use for rendering the detail content.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the detail content for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's detail content. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the detail content using the detail property of the corresponding message.\n   *\n   * If an application specifies both detail and a valid detailRendererKey, the detailRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the detail content.\n   */\n  detailRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * A set of available renderers for rendering the message content. Which renderer is used\n   * for rendering which content will be decided by specific properties in the row data.\n   */\n  renderers?: Record<string, (data: MessageBannerRendererDataItem<Key, Data>) => ComponentChildren>;\n\n  /**\n   * A Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  variant?: 'page' | 'section';\n};\n\n/**\n * Animation states for banner messages\n * TODO: Get this from theme context provider\n */\nconst animationStates: ComponentProps<typeof MessagesManager>['animationStates'] = {\n  entering: (node) => ({\n    to: {\n      maxHeight: `${node.scrollHeight}px`,\n      overflow: 'hidden'\n    },\n    options: {\n      duration: 250\n    },\n    end: {\n      maxHeight: 'none',\n      overflow: 'initial'\n    }\n  }),\n  exiting: (node) => ({\n    ...(node.style.maxHeight === 'none' && {\n      from: {\n        maxHeight: `${node.scrollHeight}px`,\n        overflow: 'hidden'\n      }\n    }),\n    to: {\n      maxHeight: 0,\n      overflow: 'hidden'\n    },\n    end: {\n      maxHeight: 0,\n      overflow: 'hidden'\n    },\n    options: {\n      duration: 250\n    }\n  })\n};\nconst initialAnimationStyles = {\n  maxHeight: 0,\n  overflow: 'hidden'\n} as const;\n\n/**\n * Renders individual messages based on the provided data\n */\nfunction MessageBanner<\n  K extends string | number = string | number,\n  D extends MessageBannerItem = MessageBannerItem\n>({ detailRendererKey, data, onClose, renderers, testId, variant = 'section' }: Props<K, D>) {\n  const testIdProps = useTestId(testId);\n  // Keyboard Navigation and Focus Management\n  const messagesRef = useRef(new Map<K, MessageRef | null>());\n  const containerDivRef = useRef<HTMLDivElement>(null);\n  const focusHandleRef = useRef<FocusableComponentHandle>(null);\n  const [liveRegionText, setLiveRegionText] = useState<string>();\n  const [shouldRender, setShouldRender] = useState(data.length > 0);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // We need a ref that holds the current & previous data length, as the exiting\n  // node will always call handleNextFocus with previous data.\n  // As in TransitionGroup, when an item is removed from the data, a new vnode\n  // will not be created instead previous vnode will be used. So, the new handleNextFocus\n  // will not be called when the old vnode exits. Thus, we will be using a ref\n  // to always get the correct current data length.\n  const dataLengthRef = useRef(data.length);\n  const prevDataLengthRef = useRef(0);\n  // Update the data length ref\n  dataLengthRef.current = data.length;\n\n  // We will be using a function based ref to store the refs in the Map\n  const setMessageRef = useCallback(\n    // TODO: use ramda.curry here (currently it is throwing ts error when used with generics)\n    (key: K) => {\n      return (ref: MessageRef | null) => messagesRef.current.set(key, ref);\n    },\n    []\n  );\n\n  // Update the focusHandleRef\n  useImperativeHandle(\n    focusHandleRef,\n    () => ({\n      focus: () => {\n        // Only trigger focus if the component is rendering messages\n        if (data.length) {\n          const firstItemKey = data[0].key;\n          messagesRef.current.get(firstItemKey)?.focus();\n          return true;\n        }\n        return false;\n      },\n      contains: (element: Element) => {\n        // Only invoke method if the component is rendering messages\n        if (data.length && element) {\n          return containerDivRef.current?.contains(element) ?? false;\n        }\n        return false;\n      }\n    }),\n    [data]\n  );\n\n  // Register handlers for focus management\n  const { controller, handlers } = useMessageFocusManager(focusHandleRef, {\n    onFocus: useCallback(() => {\n      setLiveRegionText(translations.message_navigationFromMessagesRegion());\n    }, [setLiveRegionText, translations])\n  });\n\n  /**\n   * Emits onClose event for the provided message.\n   * @param item The message which the user tried to close\n   */\n  const handleClose = useCallback(\n    (item: Item<K, D>) => {\n      onClose?.(item);\n    },\n    [onClose]\n  );\n\n  /**\n   * Handles focus when a message is closed and animated away from the DOM\n   * @param key The key of the message\n   * @param index The index of the message\n   */\n  const handleNextFocus = useCallback(\n    (_key: K, index: number, closedMessageNode?: Element) => {\n      const isClosedMessageFocused = closedMessageNode?.contains(document.activeElement);\n\n      // If there are no messages, do not render anything. As the old messages\n      // are still in the DOM, use the data count to determine what to do next as it\n      // represents the next state.\n      if (dataLengthRef.current === 0) {\n        setShouldRender(false);\n        // If the current message holds focus, then restore previous focus\n        if (isClosedMessageFocused) {\n          controller.restorePriorFocus();\n        }\n        return;\n      }\n\n      // In TransitionGroup, when an item is removed from the data, a new vnode\n      // will not be created instead previous vnode will be used. So, the new handleNextFocus\n      // will not be called when the old vnode exits. Thus, all the deps will not be pointing to\n      // the current references, rather they will be pointing to the ones where this vnode\n      // last existed in the data.\n      // This means, the data will contain the closing message as well. But, all the ref objects\n      // still point to the most up-to-date values. With that in mind, we will be evaluating the\n      // following values.\n      const renderedMessagesCount = data.length;\n\n      // Now that this message is closed, focus the next message that will take this index. If no\n      // message will take this message's index, then it means that this is the last message. If\n      // that is the case, focus the message at the previous index.\n      // Use the count of the messages that are currently shown in the UI (current state including\n      // the message that will be removed). This way we can get the correct item from the data\n      // as it will contain the closing message as well.\n      const nextMessageIndexToFocus = index + 1 < renderedMessagesCount ? index + 1 : index - 1;\n\n      // if next message is available then transfer the focus to the next element\n      if (nextMessageIndexToFocus > -1 && isClosedMessageFocused) {\n        const nextMessageKey = data[nextMessageIndexToFocus].key;\n        messagesRef.current.get(nextMessageKey)?.focus();\n      }\n    },\n    [controller, data]\n  );\n\n  // Prioritize this component whenever the data changes and\n  // the new data has at least one message\n  useEffect(() => {\n    if (data.length) {\n      // set state to render content whenever the data is not empty\n      setShouldRender(true);\n      if (data.length > prevDataLengthRef.current) {\n        // Only when having a new message, update the aria-live area with the\n        // text to indicate how to get the focus to the new message.\n        setLiveRegionText(translations.message_navigationToMessagesRegion());\n      }\n      controller.prioritize();\n    } else {\n      // When there are no messages, clear the live region so that\n      // the navigation text will be read when a new message appear\n      setLiveRegionText('');\n    }\n    prevDataLengthRef.current = data.length;\n  }, [controller, data, translations]);\n\n  const { classes } = useComponentTheme(MessageBannerRedwoodTheme);\n\n  // When both shouldRender flag is false and no data to render, do not render\n  // anything\n  if (!shouldRender && data.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      ref={containerDivRef}\n      class={classNames(['oj-c-messagebanner', classes])}\n      tabIndex={-1} // Need to add tabindex to make the container receive the focus events\n      {...handlers}\n      {...testIdProps}>\n      <Flex direction=\"column\" gap={variant === 'section' ? '1x' : undefined}>\n        <MessagesManager\n          animationStates={animationStates}\n          initialAnimationStyles={initialAnimationStyles}\n          data={data}\n          onMessageWillRemove={handleNextFocus}>\n          {({ item }) => (\n            <Message\n              messageRef={setMessageRef(item.key)}\n              item={item}\n              detailRenderer={getRenderer(item, detailRendererKey, renderers)}\n              key={item.key}\n              variant={variant === 'page' ? 'pageBanner' : 'sectionBanner'}\n              onClose={handleClose}\n            />\n          )}\n        </MessagesManager>\n        <LiveRegion>{liveRegionText}</LiveRegion>\n      </Flex>\n    </div>\n  );\n}\n\nexport { MessageBanner };\n"],"names":["animationStates","entering","node","to","maxHeight","scrollHeight","overflow","options","duration","end","exiting","style","from","initialAnimationStyles","detailRendererKey","data","onClose","renderers","testId","variant","testIdProps","useTestId","messagesRef","useRef","Map","containerDivRef","focusHandleRef","liveRegionText","setLiveRegionText","useState","shouldRender","setShouldRender","length","translations","useTranslationBundle","dataLengthRef","prevDataLengthRef","current","setMessageRef","useCallback","key","ref","set","useImperativeHandle","focus","firstItemKey","get","contains","element","controller","handlers","useMessageFocusManager","onFocus","message_navigationFromMessagesRegion","handleClose","item","handleNextFocus","_key","index","closedMessageNode","isClosedMessageFocused","document","activeElement","restorePriorFocus","nextMessageIndexToFocus","nextMessageKey","useEffect","message_navigationToMessagesRegion","prioritize","classes","useComponentTheme","MessageBannerRedwoodTheme","_jsx","class","classNames","tabIndex","children","_jsxs","jsxs","Flex","direction","gap","undefined","MessagesManager","onMessageWillRemove","jsx","Message","messageRef","detailRenderer","getRenderer","LiveRegion"],"mappings":"s+JAoJA,MAAMA,GAA6E,CACjFC,SAAWC,IAAU,CACnBC,GAAI,CACFC,UAAW,GAAGF,EAAKG,iBACnBC,SAAU,UAEZC,QAAS,CACPC,SAAU,KAEZC,IAAK,CACHL,UAAW,OACXE,SAAU,aAGdI,QAAUR,IAAU,IACW,SAAzBA,EAAKS,MAAMP,WAAwB,CACrCQ,KAAM,CACJR,UAAW,GAAGF,EAAKG,iBACnBC,SAAU,WAGdH,GAAI,CACFC,UAAW,EACXE,SAAU,UAEZG,IAAK,CACHL,UAAW,EACXE,SAAU,UAEZC,QAAS,CACPC,SAAU,QAIVK,GAAyB,CAC7BT,UAAW,EACXE,SAAU,0BAMZ,UAGEQ,kBAAEA,EAAiBC,KAAEA,EAAIC,QAAEA,EAAOC,UAAEA,EAASC,OAAEA,EAAMC,QAAEA,EAAU,YACjE,MAAMC,EAAcC,YAAUH,GAExBI,EAAcC,EAAAA,OAAO,IAAIC,KACzBC,EAAkBF,SAAuB,MACzCG,EAAiBH,SAAiC,OACjDI,EAAgBC,GAAqBC,EAAQA,YAC7CC,EAAcC,GAAmBF,EAAQA,SAACd,EAAKiB,OAAS,GACzDC,EAAeC,uBAAiC,4BAOhDC,EAAgBZ,EAAAA,OAAOR,EAAKiB,QAC5BI,EAAoBb,SAAO,GAEjCY,EAAcE,QAAUtB,EAAKiB,OAG7B,MAAMM,EAAgBC,EAAWA,aAE9BC,GACSC,GAA2BnB,EAAYe,QAAQK,IAAIF,EAAKC,IAElE,IAIFE,EAAmBA,oBACjBjB,GACA,KAAO,CACLkB,MAAO,KAEL,GAAI7B,EAAKiB,OAAQ,CACf,MAAMa,EAAe9B,EAAK,GAAGyB,IAE7B,OADAlB,EAAYe,QAAQS,IAAID,IAAeD,SAChC,CACR,CACD,OAAO,CAAK,EAEdG,SAAWC,MAELjC,EAAKiB,SAAUgB,KACVvB,EAAgBY,SAASU,SAASC,KAAY,MAK3D,CAACjC,IAIH,MAAMkC,WAAEA,EAAUC,SAAEA,GAAaC,EAAAA,uBAAuBzB,EAAgB,CACtE0B,QAASb,EAAWA,aAAC,KACnBX,EAAkBK,EAAaoB,uCAAuC,GACrE,CAACzB,EAAmBK,MAOnBqB,EAAcf,eACjBgB,IACCvC,IAAUuC,EAAK,GAEjB,CAACvC,IAQGwC,EAAkBjB,EAAWA,aACjC,CAACkB,EAASC,EAAeC,KACvB,MAAMC,EAAyBD,GAAmBZ,SAASc,SAASC,eAKpE,GAA8B,IAA1B3B,EAAcE,QAMhB,OALAN,GAAgB,QAEZ6B,GACFX,EAAWc,qBAaf,MAQMC,EAA0BN,EAAQ,EARV3C,EAAKiB,OAQiC0B,EAAQ,EAAIA,EAAQ,EAGxF,GAAIM,GAA2B,GAAKJ,EAAwB,CAC1D,MAAMK,EAAiBlD,EAAKiD,GAAyBxB,IACrDlB,EAAYe,QAAQS,IAAImB,IAAiBrB,OAC1C,IAEH,CAACK,EAAYlC,IAKfmD,EAAAA,WAAU,KACJnD,EAAKiB,QAEPD,GAAgB,GACZhB,EAAKiB,OAASI,EAAkBC,SAGlCT,EAAkBK,EAAakC,sCAEjClB,EAAWmB,cAIXxC,EAAkB,IAEpBQ,EAAkBC,QAAUtB,EAAKiB,MAAM,GACtC,CAACiB,EAAYlC,EAAMkB,IAEtB,MAAMoC,QAAEA,GAAYC,EAAiBA,kBAACC,EAAyBA,2BAI/D,OAAKzC,GAAgC,IAAhBf,EAAKiB,OAKxBwC,EAAAA,IAAA,MAAA,CACE/B,IAAKhB,EACLgD,MAAOC,EAAUA,WAAC,CAAC,qBAAsBL,IACzCM,UAAW,KACPzB,KACA9B,EACJwD,SAAAC,EAAAC,KAACC,EAAIA,KAAA,CAACC,UAAU,SAASC,IAAiB,YAAZ9D,EAAwB,UAAO+D,YAC3DV,EAAAA,IAACW,EAAeA,gBACd,CAAAnF,gBAAiBA,GACjBa,uBAAwBA,GACxBE,KAAMA,EACNqE,oBAAqB5B,EACpBoB,SAAA,EAAGrB,UACFiB,EAAAa,IAACC,UAAO,CACNC,WAAYjD,EAAciB,EAAKf,KAC/Be,KAAMA,EACNiC,eAAgBC,EAAWA,YAAClC,EAAMzC,EAAmBG,GAErDE,QAAqB,SAAZA,EAAqB,aAAe,gBAC7CH,QAASsC,GAFJC,EAAKf,OAMhBgC,EAAAa,IAACK,EAAUA,WAAA,CAAAd,SAAEjD,SA3BV,IA+BX"}