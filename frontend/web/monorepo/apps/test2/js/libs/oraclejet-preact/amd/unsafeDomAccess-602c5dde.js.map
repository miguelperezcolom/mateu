{"version":3,"file":"unsafeDomAccess-602c5dde.js","sources":["../../src/utils/UNSAFE_unsafeDomAccess/unsafeDomAccess.ts"],"sourcesContent":["/**\n * Instead of forwarding refs to DOM elements, the JET Preact components\n * leverage imperative handles to limit DOM access via refs.  For example,\n * rather than resolving to an actual HTML button element, a ref that is passed\n * into the JET Preact Button component will resolve to an imperative handle\n * that exposes just the focus, blur and click methods.\n *\n * By using imperative handles to abstract away from the DOM, we limit the\n * ability for JET Preact consumers to build brittle components/applications\n * that are dependent on JET Preact component's internal DOM implementation\n * details.\n *\n * While the abstractions that we expose via our imperative handles should\n * be sufficient for almost all use cases, there are some exceptional cases\n * where it may be necessary to access an underlying DOM element.  One example\n * where this can be necessary is when anchoring/positioning one component\n * relative to another, as is often the case when implementing popop/floating\n * content.\n *\n * To meet the needs of such exceptional cases, some JET Preact components\n * expose access to their root DOM elements via the UNSAFE_DOM_ACCESS symbol-based\n * key on the imperative handle.  This symbol can be used to retrieve component's\n * root DOM element.\n *\n * Note that this type of DOM access is considered to be unsafe as JET Preact makes\n * no guarantees about the structure of this DOM.  The DOM element type and structure\n * is an implementation detail of the component and can change at any point,\n * including in patch releases.  If consuming code contains assumptions about the\n * the type or structure of this DOM, this code should be considered brittle and\n * at risk of breaking.\n *\n * As such, unsafe DOM access should be use very sparingly, if at all.\n */\nexport const UNSAFE_DOM_ACCESS = Symbol('unsafe_dom_access');\n\n/**\n * Utility type for imperative handles that provide access to an underlying\n * DOM element via the UNSAFE_DOM_ACCESS field.\n */\nexport type UnsafeDomHandle<E extends Element = HTMLElement> = {\n  [UNSAFE_DOM_ACCESS]: E;\n};\n"],"names":["UNSAFE_DOM_ACCESS","Symbol"],"mappings":"mDAiCaA,EAAoBC,OAAO"}