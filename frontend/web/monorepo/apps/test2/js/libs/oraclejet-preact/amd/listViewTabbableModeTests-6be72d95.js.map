{"version":3,"file":"listViewTabbableModeTests-6be72d95.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTabbableModeTests.tsx"],"sourcesContent":["import { fireEvent, render, waitFor, screen } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata } from '../../../UNSAFE_Collection';\nimport userEvent from '@testing-library/user-event';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getRoot, getContents } from './testHelpers';\n\nexport type Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testTabbableMode = (TestComponent: TestComponentProps<any>) => {\n  it('acts as single tab stop in composition', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot();\n\n    await userEvent.tab();\n    expect(screen.getByText('Preceding Button').matches(':focus')).to.be.true;\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n    await userEvent.tab();\n    expect(screen.getByText('Following Button').matches(':focus')).to.be.true;\n    await userEvent.tab({ shift: true });\n    expect(grid.matches(':focus')).to.be.true;\n    await userEvent.tab({ shift: true });\n    expect(screen.getByText('Preceding Button').matches(':focus')).to.be.true;\n  });\n\n  it('enters interactive mode with keyboard via F2', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const view = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot();\n\n    // Tab past first button into ListView\n    await userEvent.tab();\n    await userEvent.tab();\n    expect(grid.matches(':focus')).to.be.true;\n\n    view.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    const firstRowInput = screen.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyDown(grid, { key: 'F2' });\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n  });\n\n  it('leaves interactive mode with keyboard via ESC', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot();\n\n    const firstRowInput = screen.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    await userEvent.click(firstRowInput);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    fireEvent.keyDown(firstRowInput, { key: 'Escape' });\n\n    await waitFor(() => {\n      expect(grid.matches(':focus'), 'active element should be grid').to.be.true;\n    });\n  });\n\n  it('enters interactive mode again with keyboard via arrow keys and F2', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot();\n    const items = await getContents();\n\n    await userEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    const secondRowInput = screen.getByTestId('input-1');\n    expect(secondRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyDown(grid, { key: 'F2' });\n    expect(secondRowInput.getAttribute('tabindex')).equals('0');\n  });\n\n  it('enters interactive mode with click on input', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const view = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = screen.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    await userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    view.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(firstRowInput.matches(':focus')).to.be.true;\n\n    await userEvent.tab();\n    expect(screen.getByTestId('button-0').matches(':focus')).to.be.true;\n  });\n\n  // FIXME: reenable this test once  is fixed\n  xit('leaves interactive mode with click outside', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const view = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = screen.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    await userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    view.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(firstRowInput.matches(':focus')).to.be.true;\n    const outsideElement = screen.getByText('Preceding Button');\n    await userEvent.click(outsideElement);\n    expect(outsideElement.matches(':focus')).to.be.true;\n    view.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","render","_jsx","grid","getRoot","userEvent","tab","expect","screen","getByText","matches","to","be","true","shift","view","rerender","firstRowInput","getByTestId","getAttribute","equals","fireEvent","keyDown","click","waitFor","items","getContents","secondRowInput","xit","outsideElement"],"mappings":"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"}