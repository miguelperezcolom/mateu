{"version":3,"file":"useSelectCommon-f04454d2.js","sources":["../../src/PRIVATE_SelectCommon/itemTextUtils.ts","../../src/PRIVATE_SelectCommon/DefaultList.tsx","../../src/PRIVATE_SelectCommon/eventUtils.ts","../../src/PRIVATE_SelectCommon/DropdownArrow.tsx","../../src/PRIVATE_SelectCommon/DropdownList.tsx","../../src/PRIVATE_SelectCommon/EmptyResults.tsx","../../src/PRIVATE_SelectCommon/selectUtils.ts","../../src/PRIVATE_SelectCommon/useCollectionRenderer.ts","../../src/PRIVATE_SelectCommon/useSelectCommon.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { error } from '../utils/UNSAFE_logger';\nimport { ItemTextFunctionType, ItemTextType } from '../utils/UNSAFE_selectUtils';\n\nexport function renderItemText<K, D>(item: Item<K, D>, itemText: ItemTextType<K, D>) {\n  // if item-text is a string and the data has the specified field, return it;\n  // otherwise log an error\n  if (typeof itemText === 'string') {\n    if ((item.data as any)?.hasOwnProperty(itemText)) {\n      const retData = item.data[itemText];\n      return String(retData);\n    }\n    error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);\n    // return undefined if the field doesn't exist\n    return undefined;\n  }\n  // if item-text is a function, call it to create a display label\n  return (itemText as ItemTextFunctionType<K, D>)(item);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { List, SkeletonContainer } from '#PRIVATE_List';\nimport type { DataState, ListItemRendererContext, Metadata } from '#UNSAFE_Collection';\nimport { Flex } from '#UNSAFE_Flex';\nimport { HighlightText } from '#UNSAFE_HighlightText';\nimport { ListItemText } from '#UNSAFE_ListItemLayout';\nimport { Skeleton } from '#UNSAFE_Skeleton';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { Keys } from '#utils/UNSAFE_keys';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { ComponentChildren, ComponentProps } from 'preact';\nimport { useCallback, useMemo } from 'preact/hooks';\nimport { renderItemText } from './itemTextUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype ListProps<K extends string | number, D> = ComponentProps<typeof List<K, D>>;\ntype PickedPropsFromList = Pick<\n  ComponentProps<typeof List>,\n  'aria-label' | 'currentItemVariant' | 'selectionMode'\n>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemRendererContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype ItemRendererSelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  metadata: ItemRendererMetadata<K>;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  onSelectionChange: (detail: ItemRendererSelectionDetail<K>) => void;\n};\n\ntype DefaultListCurrentKeyDetail<K> = { value: K };\ntype DefaultListItemActionDetail<K, D> = { context: Item<K, D> };\ntype DefaultListSelectionDetail<K> = { value: Set<K> };\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromList & {\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  // props from List that we constrain or unconstrain\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  onCurrentKeyChange: (detail: DefaultListCurrentKeyDetail<K>) => void;\n  onItemAction?: (detail: DefaultListItemActionDetail<K, D>) => void;\n  onLoadRange?: ComponentProps<typeof List>['onLoadRange'];\n  onSelectionChange?: (detail: DefaultListSelectionDetail<K>) => void;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n};\n\nconst noOp = () => {};\n\nexport function DefaultList<K extends string | number, D extends Record<string, any>>({\n  'aria-label': ariaLabel,\n  currentItemVariant,\n  currentKey,\n  data,\n  itemRenderer,\n  itemText,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange = noOp,\n  onSelectionChange,\n  searchText,\n  selectedKeys,\n  selectionMode\n}: Props<K, D>) {\n  const listItemRenderer = useCallback(\n    (listItemContext: ListItemRendererContext<K, D>) => {\n      // specify the listItemContext props that we want to expose individually instead of\n      // spreading the whole object so that we don't automatically include any new props that\n      // may be added to it\n      const itemRendererProps: ItemRendererProps<K, D> = {\n        data: listItemContext.data,\n        index: listItemContext.index,\n        metadata: listItemContext.metadata,\n        selector: listItemContext.selector,\n        searchText,\n        selectedKeys,\n        onSelectionChange: ({ value }) => {\n          onSelectionChange?.({ value });\n        }\n      };\n      const itemContext = {\n        data: listItemContext.data,\n        key: listItemContext.metadata.key,\n        metadata: listItemContext.metadata\n      };\n      return itemRenderer ? (\n        itemRenderer(itemRendererProps)\n      ) : (\n        <Flex align=\"center\">\n          {listItemContext.selector && (\n            <div class={dropdownStyles.selectorWrapper}>{listItemContext.selector()}</div>\n          )}\n          <div\n            class={\n              selectionMode === 'single'\n                ? dropdownStyles.singleSelectItem\n                : dropdownStyles.multiSelectItem\n            }>\n            <ListItemText variant=\"primary\">\n              <HighlightText matchText={searchText}>\n                {renderItemText(itemContext, itemText) as string}\n              </HighlightText>\n            </ListItemText>\n          </div>\n        </Flex>\n      );\n    },\n    [itemRenderer, itemText, onSelectionChange, searchText, selectedKeys, selectionMode]\n  );\n\n  const keys = useMemo(() => {\n    return { all: false, keys: selectedKeys ?? new Set<K>() };\n  }, [selectedKeys]) as Keys<K>;\n\n  const currentItemOverride = useMemo(\n    () => (currentKey !== undefined ? { rowKey: currentKey } : undefined),\n    [currentKey]\n  );\n  const handleItemAction = useCallback<NonNullable<ListProps<K, D>['onItemAction']>>(\n    ({ context: { data, metadata } }) => {\n      onItemAction?.({ context: { data, key: metadata.key, metadata } });\n    },\n    [onItemAction]\n  );\n  const handleSelectionChange = useCallback<NonNullable<ListProps<K, D>['onSelectionChange']>>(\n    ({ value }) => {\n      onSelectionChange?.({ value: new Set(value.keys?.values()) });\n    },\n    [onSelectionChange]\n  );\n\n  return (\n    <List<K, D>\n      aria-label={ariaLabel}\n      allowTabbableMode={false}\n      currentItemVariant={currentItemVariant}\n      currentItemOverride={currentItemOverride}\n      data={data ?? null}\n      loadingIndicator={loadingIndicator}\n      onPersistCurrentItem={onCurrentKeyChange}\n      onItemAction={handleItemAction}\n      onLoadRange={onLoadRange}\n      onSelectionChange={handleSelectionChange}\n      role=\"listbox\"\n      selectedKeys={keys}\n      selectionMode={selectionMode}>\n      {(context: ListItemRendererContext<K, D>) => listItemRenderer(context)}\n    </List>\n  );\n}\n\n/**\n * Custom 3 Skeleton loader for select multiple\n * TODO: to remove this once  is solved\n */\nconst loadingIndicator = (\n  <SkeletonContainer minimumCount={3}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n","export const isSimpleClick = (event: MouseEvent) => {\n  return event.button === 0 && !event.ctrlKey;\n};\n\nexport const preventDefault = (event: Event) => {\n  event.preventDefault();\n};\n\nexport const preventDefaultForCurrentTarget = (event: MouseEvent) => {\n  if (event.currentTarget === event.target) {\n    event.preventDefault();\n  }\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { DropdownArrowIcon } from '../PRIVATE_ThemedIcons/DropdownArrowIcon';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { ButtonLabelLayoutRedwoodTheme } from '#UNSAFE_ButtonLabelLayout/themes/redwood/ButtonLabelLayoutTheme';\nimport type { ButtonLabelLayoutVariantOptions } from '#UNSAFE_ButtonLabelLayout/themes/ButtonLabelLayoutStyles.css';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { BaseButtonRedwoodTheme } from '#UNSAFE_BaseButton/themes/redwood/BaseButtonTheme';\n\ntype Props = TestIdProps & {\n  isDisabled?: boolean;\n  onClick?: () => void;\n};\n\nconst noop = () => {};\n\nexport function DropdownArrow({ isDisabled = false, onClick, testId }: Props) {\n  const { classes } = useComponentTheme<ButtonLabelLayoutVariantOptions>(\n    ButtonLabelLayoutRedwoodTheme,\n    { size: 'sm' }\n  );\n  const { baseTheme } = useComponentTheme(BaseButtonRedwoodTheme);\n\n  const preventDefault = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const { pressProps } = usePress(onClick ?? noop, { isDisabled });\n\n  // TODO: JET-67410 replace this with a icon button\n  const styleClasses = classNames([\n    classes,\n    baseTheme,\n    dropdownStyles.arrow.base,\n    isDisabled ? dropdownStyles.arrow.disabled : dropdownStyles.arrow.enabled\n  ]);\n\n  const testIdProps = useTestId(testId);\n\n  return (\n    <span\n      aria-hidden=\"true\"\n      class={styleClasses}\n      tabIndex={-1}\n      onMouseDown={preventDefault}\n      {...testIdProps}\n      {...pressProps}>\n      <DropdownArrowIcon />\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { ComponentChildren, ComponentProps, Ref } from 'preact';\n\nimport { CollectionInteractionContext } from '#hooks/UNSAFE_useCollectionInteractionContext';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\ntype Props = Pick<ComponentProps<'div'>, 'id' | 'onKeyDown'> & {\n  children?: ComponentChildren;\n  dropdownListRef?: Ref<HTMLDivElement>;\n  hasTopGap?: boolean;\n  hasBottomGap?: boolean;\n  isLoading?: boolean;\n};\n\nexport function DropdownList({\n  children,\n  id,\n  dropdownListRef,\n  hasTopGap = true,\n  hasBottomGap = true,\n  isLoading = false,\n  onKeyDown\n}: Props) {\n  const styleClasses = classNames([\n    dropdownStyles.list.base,\n    hasTopGap && dropdownStyles.list.topGap,\n    hasBottomGap && dropdownStyles.list.bottomGap,\n    isLoading && dropdownStyles.list.loading\n  ]);\n  return (\n    <CollectionInteractionContext.Provider value={'embedded'}>\n      <div\n        ref={dropdownListRef}\n        class={styleClasses}\n        id={id}\n        onMouseDown={preventDefaultForCurrentTarget}\n        onKeyDown={onKeyDown}>\n        {children}\n      </div>\n    </CollectionInteractionContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\n\nexport function EmptyResults() {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  // call preventDefault for mousedown on this div so that focus does not transfer from\n  // the input\n  return (\n    <div class={dropdownStyles.results.extraItem} onMouseDown={preventDefaultForCurrentTarget}>\n      {translations.select_noMatchesFound()}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { DataState } from '#UNSAFE_Collection';\nimport { getClientHints } from '#utils/PRIVATE_clientHints';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nexport function isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\n/**\n * Helper function to determine whether the current device is a phone\n * @returns true if running on a phone, false otherwise\n */\nexport function isPhone() {\n  return getClientHints().deviceType === 'phone';\n}\n\n/**\n * Helper function to determine whether the current device is a tablet\n * @returns true if running on a tablet, false otherwise\n */\nexport function isTablet() {\n  return getClientHints().deviceType === 'tablet';\n}\n\nexport function isBeforeDataFetch<K, D>(data: DataState<K, D>) {\n  return data.sizePrecision === 'atLeast' && data.totalSize === 0;\n}\n\nexport function isSearchTextEmptyOrUndefined(searchText?: string) {\n  return searchText === undefined || searchText.length === 0;\n}\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nexport function createKeysFromValueItems<K, D>(valueItems?: Item<K, D>[]) {\n  const keys = valueItems?.reduce((accumKeys, currentItem) => {\n    accumKeys.add(currentItem.key);\n    return accumKeys;\n  }, new Set<K>());\n  return keys;\n}\n","import type { DataState } from '#UNSAFE_Collection';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport { useMemo } from 'preact/compat';\n\ntype Key = string | number;\ntype Data = Record<string, any>;\n\ntype UseCollectionRendererCommonParams<K> = {\n  currentKey?: K;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  onCurrentKeyChange: (detail: { value?: K }) => void;\n};\n\nexport type UseCollectionRendererSelectSingleParams<K, D> = UseCollectionRendererCommonParams<K> & {\n  onItemAction: (detail: { context: Item<K, D> }) => void;\n  onSelectedKeysChange?: never;\n  selectedOnlyData?: never;\n};\n\nexport type UseCollectionRendererSelectMultipleParams<K, D> =\n  UseCollectionRendererCommonParams<K> & {\n    onItemAction?: never;\n    onSelectedKeysChange: (detail: { value: Set<K> }) => void;\n    selectedOnlyData?: DataState<K, D>;\n  };\n\ntype UseCollectionRendererParams<K, D> =\n  | UseCollectionRendererSelectSingleParams<K, D>\n  | UseCollectionRendererSelectMultipleParams<K, D>;\n\ntype CommonCollectionRendererContext<K extends Key> = {\n  searchText?: string;\n  currentRowKeyOverride?: K;\n  onPersistCurrentRowKey: (detail: { value?: K }) => void;\n  selected?: Set<K>;\n};\n\nexport type SelectSingleCollectionRendererContext<\n  K extends Key,\n  D extends Data\n> = CommonCollectionRendererContext<K> & {\n  onRowAction: (detail: { context: Item<K, D> }) => void;\n};\n\nexport type SelectMultipleCollectionRendererContext<\n  K extends Key,\n  D extends Data\n> = CommonCollectionRendererContext<K> & {\n  onSelectedChange: (detail: { value: Set<K> }) => void;\n  selectedOnlyData?: DataState<K, D>;\n};\n\ntype CollectionRendererContext<K extends Key, D extends Data> =\n  | SelectSingleCollectionRendererContext<K, D>\n  | SelectMultipleCollectionRendererContext<K, D>;\n\n// NOTE: We will using a single hook that constructs the collection renderer context for both select single and\n// select multiple. This is ok as they both share most of the properties and differ only in a few areas. So, we will\n// be using function overloading to determine which component is calling the hook (based on the args) and return the\n// correct context.\n\n/**\n * A custom hook that constructs the context for SelectSingle's collectionRenderer.\n * @param params Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>(\n  params: UseCollectionRendererSelectSingleParams<K, D>\n): SelectSingleCollectionRendererContext<K, D>;\n\n/**\n * A custom hook that constructs the context for SelectMultiple's collectionRenderer.\n * @param params Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>(\n  params: UseCollectionRendererSelectMultipleParams<K, D>\n): SelectMultipleCollectionRendererContext<K, D>;\n\n/**\n * A custom hook that constructs the context for SelectSingle/SelectMultiple's collectionRenderer.\n * @param param0 Parameters for constructing the collection renderer context\n * @returns the CollectionRendererContext object\n */\nexport function useCollectionRenderer<K extends Key, D extends Data>({\n  currentKey,\n  onCurrentKeyChange,\n  onItemAction,\n  onSelectedKeysChange,\n  searchText,\n  selectedKeys,\n  selectedOnlyData\n}: UseCollectionRendererParams<K, D>) {\n  return useMemo<CollectionRendererContext<K, D>>(() => {\n    const common = {\n      searchText,\n      currentRowKeyOverride: currentKey,\n      onPersistCurrentRowKey: onCurrentKeyChange,\n      selected: selectedKeys\n    } satisfies CommonCollectionRendererContext<K>;\n\n    // If onItemAction is present, then we are constructing context for SelectSingle. So,\n    // return the context satisfying SelectSingleCollectionRendererContext type.\n    if (onItemAction !== undefined)\n      return {\n        ...common,\n        onRowAction: onItemAction\n      } satisfies SelectSingleCollectionRendererContext<K, D>;\n\n    // If onItemAction is not present, then we are constructing context for SelectMultiple. So,\n    // return the context satisfying SelectMultipleCollectionRendererContext type.\n    return {\n      ...common,\n      onSelectedChange: onSelectedKeysChange,\n      selectedOnlyData\n    } satisfies SelectMultipleCollectionRendererContext<K, D>;\n  }, [\n    currentKey,\n    onCurrentKeyChange,\n    onItemAction,\n    onSelectedKeysChange,\n    searchText,\n    selectedKeys,\n    selectedOnlyData\n  ]);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nimport type { DataState } from '#UNSAFE_Collection';\nimport type { PositionData } from '#UNSAFE_Floating';\nimport { KEYS, isControlOrFunctionKey } from '#utils/PRIVATE_keyboardUtils';\nimport { allTabbableElements } from '#utils/PRIVATE_tabbableUtils';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport { isSimpleClick } from './eventUtils';\n\ntype UseSelectCommonProps<K, D> = {\n  data?: DataState<K, D> | null;\n  inputRef: RefObject<HTMLElement>;\n  isFocused?: boolean;\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n};\n\nexport type CurrentKeyDetail<K> = {\n  value?: K;\n};\n\n/**\n * Hook that manages state and behavior for a Select* component.  This hook creates state\n * variables and event listeners, returning properties to apply to components internally\n * rendered by a Select* component, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isFocused Specifies whether the component has focus.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n *\n * @returns Component state and event listeners.\n */\nexport function useSelectCommon<K, D>({\n  data,\n  inputRef,\n  isFocused,\n  onFilter\n}: UseSelectCommonProps<K, D>) {\n  const mainFieldRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n\n  // We only need to push currentRow when we need to override the\n  // current row, like when the dropdown is opened and we want to set the initial\n  // focused row or when filtering and we want to focus the first row.\n  const [currentRowOverride, _setCurrentRowOverride] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  // We still need information on what the current row actually is, but we do not need\n  // to react to it until certain scenarios like pressing Tab from the dropdown. So, we\n  // just store this in a ref.\n  const currentRowKeyRef = useRef<K>();\n  // When we want to update the currentRowOverride, we also want to keep the currentRowKeyRef\n  // in sync as the collection will not call onChanged for this change.\n  const setCurrentRowOverride = useCallback((currentRow: { rowKey?: K }) => {\n    currentRowKeyRef.current = currentRow.rowKey;\n    _setCurrentRowOverride(currentRow);\n  }, []);\n  const [isUserFiltering, setUserFiltering] = useState(false);\n  const [userInput, setUserInput] = useState<string>();\n  const [searchText, setSearchText] = useState<string>();\n\n  const [prevIsDropdownOpen, setPrevIsDropdownOpen] = useState(isDropdownOpen);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [prevIsUserFiltering, setPrevIsUserFiltering] = useState(isUserFiltering);\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // const target = event.target as HTMLElement;\n      if (event.defaultPrevented || !isSimpleClick(event)) {\n        return;\n      }\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      // this is needed to focus the input when clicking on the inside label when there is no\n      // value;  otherwise the component looks focused but doesn't actually have physical focus\n      setTimeout(function () {\n        inputRef.current?.focus();\n      }, 0);\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownArrowClick = useCallback(() => {\n    setDropdownOpen(!isDropdownOpen);\n\n    // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes\n    inputRef.current?.focus();\n  }, [inputRef, isDropdownOpen]);\n\n  const handleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        setDropdownOpen(false);\n\n        switch (event?.type) {\n          case 'keydown': {\n            const keyboardEvent = event as KeyboardEvent;\n            switch (keyboardEvent.code) {\n              case KEYS.ESC:\n                // focus the input when the user cancels out of the dropdown\n                inputRef.current?.focus();\n                break;\n              default:\n                break;\n            }\n            break;\n          }\n          case 'mousedown':\n            // if focus is in the dropdown, focus the input before the dropdown is hidden so that\n            // focus will transfer correctly when the target is not focusable;\n            // otherwise the text cursor appears in the input again\n            if (dropdownRef.current?.contains(document.activeElement)) {\n              inputRef.current?.focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownPosition = useCallback((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n\n  const getDropdownTabbableElems = useCallback(() => {\n    return isDropdownOpen && dropdownRef.current\n      ? allTabbableElements(dropdownRef.current)\n      : undefined;\n  }, [isDropdownOpen]);\n\n  const handleUpDownArrowKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      } else {\n        // JET-64909 - focus / 'current' dropped when arrow keying during loading\n        // Transfer physical focus into the dropdown only if the data is present and the dropdown\n        // has rendered the data. Otherwise, keep the focus in the field.\n        if (data != null) {\n          const tabbableElems = getDropdownTabbableElems();\n          tabbableElems?.[0]?.focus();\n\n          // if there is no current item set, make the first item current\n          if (currentRowOverride.rowKey === undefined) {\n            setCurrentRowOverride({ rowKey: data.data[0]?.metadata?.key });\n          }\n        }\n      }\n\n      // prevent the page from scrolling\n      event.preventDefault();\n    },\n    [currentRowOverride, data, getDropdownTabbableElems, isDropdownOpen, setCurrentRowOverride]\n  );\n\n  const handleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.PAGE_UP:\n        case KEYS.PAGE_DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n\n          return;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleMainFieldKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      setUserFiltering(true);\n      setUserInput(detail.value);\n      const str = detail.value;\n      setSearchText(str);\n      onFilter?.({ searchText: str });\n    },\n    [isDropdownOpen, onFilter]\n  );\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K>) => {\n    // when the collection changes the current key, we only want to store the information\n    // and not do anything.\n    currentRowKeyRef.current = detail.value;\n  }, []);\n\n  const stopFiltering = useCallback(() => {\n    setUserFiltering(false);\n    setUserInput('');\n    setSearchText('');\n  }, []);\n\n  const updateFiltering = useCallback((value?: string) => {\n    setUserFiltering(true);\n    setUserInput(value);\n    setSearchText(value);\n  }, []);\n\n  // the user is not actively filtering if the dropdown is closed and the component doesn't\n  // have focus\n  if (\n    prevIsDropdownOpen !== isDropdownOpen ||\n    prevIsFocused !== isFocused ||\n    prevIsUserFiltering !== isUserFiltering\n  ) {\n    if (!isDropdownOpen && !isFocused && isUserFiltering) {\n      stopFiltering();\n    }\n  }\n\n  // need to call onFilter with undefined searchText when the dropdown opens and the\n  // user is NOT filtering\n  useEffect(() => {\n    if (isDropdownOpen && !isUserFiltering) {\n      onFilter?.({ searchText: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering, onFilter]);\n\n  // when the dropdown closes, reset the isDropdownAbove flag\n  if (prevIsDropdownOpen !== isDropdownOpen) {\n    if (!isDropdownOpen) {\n      setDropdownAbove(false);\n    }\n    setPrevIsDropdownOpen(isDropdownOpen);\n  }\n\n  if (prevIsFocused !== isFocused) {\n    setPrevIsFocused(isFocused);\n  }\n  if (prevIsUserFiltering !== isUserFiltering) {\n    setPrevIsUserFiltering(isUserFiltering);\n  }\n\n  return {\n    currentRowKeyRef,\n    currentRowOverride,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    // the field should remain to look focused while the dropdown is open,\n    // in case physical focus is in the dropdown\n    isFocused: isFocused || isDropdownOpen,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRowOverride,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    updateFiltering,\n    userInput\n  };\n}\n"],"names":["renderItemText","item","itemText","data","hasOwnProperty","retData","String","error","noOp","loadingIndicator","_jsx","jsx","SkeletonContainer","minimumCount","children","Flex","height","align","Skeleton","isSimpleClick","event","button","ctrlKey","preventDefaultForCurrentTarget","currentTarget","target","preventDefault","noop","ariaLabel","currentItemVariant","currentKey","itemRenderer","onCurrentKeyChange","onItemAction","onLoadRange","onSelectionChange","searchText","selectedKeys","selectionMode","listItemRenderer","useCallback","listItemContext","itemRendererProps","index","metadata","selector","value","itemContext","key","_jsxs","jsxs","class","dropdownStyles","selectorWrapper","singleSelectItem","multiSelectItem","ListItemText","variant","HighlightText","matchText","keys","useMemo","all","Set","currentItemOverride","undefined","rowKey","handleItemAction","context","handleSelectionChange","values","List","allowTabbableMode","onPersistCurrentItem","role","isDisabled","onClick","testId","classes","useComponentTheme","ButtonLabelLayoutRedwoodTheme","size","baseTheme","BaseButtonRedwoodTheme","pressProps","usePress","styleClasses","classNames","arrow","base","disabled","enabled","testIdProps","useTestId","tabIndex","onMouseDown","DropdownArrowIcon","SvgCaretDown","id","dropdownListRef","hasTopGap","hasBottomGap","isLoading","onKeyDown","list","topGap","bottomGap","loading","CollectionInteractionContext","Provider","ref","translations","useTranslationBundle","results","extraItem","select_noMatchesFound","valueItems","reduce","accumKeys","currentItem","add","sizePrecision","totalSize","deviceType","getClientHints","length","onSelectedKeysChange","selectedOnlyData","common","currentRowKeyOverride","onPersistCurrentRowKey","selected","onRowAction","onSelectedChange","inputRef","isFocused","onFilter","mainFieldRef","useRef","dropdownRef","isDropdownOpen","setDropdownOpen","useState","isDropdownAbove","setDropdownAbove","currentRowOverride","_setCurrentRowOverride","currentRowKeyRef","setCurrentRowOverride","currentRow","current","isUserFiltering","setUserFiltering","userInput","setUserInput","setSearchText","prevIsDropdownOpen","setPrevIsDropdownOpen","prevIsFocused","setPrevIsFocused","prevIsUserFiltering","setPrevIsUserFiltering","defaultPrevented","setTimeout","focus","handleDropdownArrowClick","handleDropdownAutoDismiss","type","code","KEYS","ESC","contains","document","activeElement","handleDropdownPosition","placement","startsWith","getDropdownTabbableElems","allTabbableElements","handleUpDownArrowKeys","tabbableElems","handleMainFieldKeyDown","isControlOrFunctionKey","PAGE_UP","PAGE_DOWN","UP","DOWN","stopPropagation","handleMainFieldKeyUp","handleInput","detail","str","stopFiltering","updateFiltering","useEffect"],"mappings":"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"}