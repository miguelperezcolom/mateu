{"version":3,"file":"BaseSwatchView-4d204ce0.js","sources":["../../src/PRIVATE_BaseSwatchView/BaseSwatchViewItem.tsx","../../src/PRIVATE_BaseSwatchView/BaseSwatchViewLayout.tsx","../../src/PRIVATE_BaseSwatchView/BaseSwatchViewUtils.ts","../../src/PRIVATE_BaseSwatchView/BaseSwatchView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useRef, useCallback, useLayoutEffect, StateUpdater, Dispatch } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { warn } from '../utils/UNSAFE_logger';\nimport { allTabbableElements } from '../utils/PRIVATE_tabbableUtils';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { useResizeObserver } from '../hooks/UNSAFE_useResizeObserver';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { ListItemRendererContext } from '../UNSAFE_Collection';\nimport { multiVariantStyles, styles } from './themes/BaseSwatchViewStyles.css';\nimport { compareListItemContext } from '../utils/PRIVATE_collectionUtils';\n\n/**\n * Props for the BaseSwatchViewItem Component\n */\nexport type Props<K, D> = {\n  children: (context: ListItemRendererContext<K, D>) => ComponentChildren;\n  context: ListItemRendererContext<K, D>;\n  isTabbable: boolean;\n  isFocused: boolean;\n  isFocusRingVisible: boolean;\n  focusBehavior: 'swatch' | 'content';\n  setIsFocusBehaviorValid?: Dispatch<StateUpdater<boolean>>;\n  updateSwatchSize?: (width: number, height: number) => void;\n};\n\n/**\n * The internal component used to render a single item in SwatchView.\n */\nexport function BaseSwatchViewItem<K extends string | number, D>({\n  children,\n  context,\n  isTabbable,\n  isFocused,\n  isFocusRingVisible,\n  focusBehavior,\n  setIsFocusBehaviorValid,\n  updateSwatchSize\n}: Props<K, D>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const itemKey = context.metadata.key;\n\n  const isItemFocused = isFocused && isFocusRingVisible;\n  const variantClasses = multiVariantStyles({\n    itemFocused: focusBehavior === 'swatch' && isItemFocused ? 'isItemFocused' : 'isNotItemFocused',\n    itemInGridLayout: 'isNotInGridLayout'\n  });\n  const classes = classNames([styles.itemStyle, variantClasses]);\n\n  /*********************************** Tabbable Mode ***********************************/\n\n  // don't bubble Arrow Up/Down/Left/Right events to parent when in isTabbable mode\n  // this bubbling causes the outer CollectionFocus ring to change index while in the isTabbable mode.\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (\n      focusBehavior === 'swatch' &&\n      isTabbable &&\n      (event.key === 'ArrowDown' ||\n        event.key === 'ArrowUp' ||\n        event.key === 'ArrowLeft' ||\n        event.key === 'ArrowRight')\n    ) {\n      event.stopPropagation();\n    }\n  };\n\n  /************************************ Swatch Size ************************************/\n\n  const handleResize = useCallback(\n    (entry: ResizeObserverEntry) => {\n      updateSwatchSize?.(entry.contentRect.width, entry.contentRect.height);\n    },\n    [updateSwatchSize]\n  );\n\n  const nullRef = useRef<HTMLDivElement>(null);\n  useResizeObserver(updateSwatchSize ? rootRef : nullRef, handleResize);\n\n  /********************************* Focus Behavior *********************************/\n\n  useLayoutEffect(() => {\n    if (focusBehavior === 'content' && isItemFocused) {\n      // rootRef is swatchview item, its first child is the focus trap div, so its first grand child\n      // is the actual content\n      const content = rootRef.current?.firstElementChild?.firstElementChild as HTMLElement;\n      const focusable = allTabbableElements(content, true, true);\n      if (focusable.length === 0 || focusable.length > 1) {\n        warn(\n          `${focusable.length} focusable elements are detected in the swatch. 'content' focusBehavior is intended only for use when the swatch has single focusable element. Please specify one focusable element in the swatch or switch the focusBehavior to 'swatch'.`\n        );\n        setIsFocusBehaviorValid?.(false);\n      } else {\n        focusable[0].focus();\n      }\n    }\n  }, [focusBehavior, isItemFocused, setIsFocusBehaviorValid]);\n\n  const childrenComponent = children(context);\n  return (\n    <div\n      id={useId()}\n      ref={rootRef}\n      class={classes}\n      role=\"gridcell\"\n      data-oj-key={itemKey}\n      onKeyDown={handleKeyDown}\n      {...(typeof itemKey === 'number' && { 'data-oj-key-type': 'number' })}>\n      <TabbableModeContext.Provider value={{ isTabbable }}>\n        <FocusTrap isDisabled={!isTabbable} restoreFocusRef={false}>\n          {childrenComponent}\n        </FocusTrap>\n      </TabbableModeContext.Provider>\n    </div>\n  );\n}\n\nexport const MemoizeBaseSwatchViewItem = memo(\n  BaseSwatchViewItem,\n  <K, D>(prev: Props<K, D>, next: Props<K, D>) => {\n    if (prev && next) {\n      return (\n        prev.children === next.children &&\n        prev.isTabbable === next.isTabbable &&\n        prev.isFocused === next.isFocused &&\n        prev.isFocusRingVisible === next.isFocusRingVisible &&\n        prev.focusBehavior === next.focusBehavior &&\n        compareListItemContext(prev.context, next.context)\n      );\n    }\n    return false;\n  }\n);\n","import { ComponentChildren } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Size } from '../utils/UNSAFE_size';\n\ntype Props = {\n  children: ComponentChildren;\n};\n\nexport function BaseSwatchViewLayout({ children }: Props) {\n  const gap = ['2x' as Size, '2x' as Size] as [Size, Size];\n  return (\n    <Flex wrap=\"wrap\" gap={gap}>\n      {children}\n    </Flex>\n  );\n}\n","export const emptyKeys = { all: false, keys: new Set() };\n\nexport const getColCount = (gapWidth: number, swatchWidth?: number, rootWidth?: number) => {\n  if (!swatchWidth || !rootWidth) return 0;\n\n  // if we have n swatchs, we have n-1 gaps\n  const colCount = Math.floor((rootWidth + gapWidth) / (gapWidth + swatchWidth));\n  return Math.max(1, colCount);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useCallback, useEffect, useState, useImperativeHandle } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { Keys, isKeyDefined } from '../utils/UNSAFE_keys';\nimport {\n  getPrevNextKeyByCount,\n  getFirstVisibleKey,\n  getViewportConfig,\n  findElementByKey,\n  keyExtractor,\n  ITEM_SELECTOR\n} from '../utils/PRIVATE_collectionUtils';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useTabbableModeSet } from '../hooks/PRIVATE_useTabbableModeSet';\nimport { useSwatchSelection } from '../hooks/PRIVATE_useSwatchSelection';\nimport { ItemContext, ListItemRendererContext, SelectionDetail } from '../UNSAFE_Collection';\nimport { LoadMoreCollection } from '../PRIVATE_LoadMoreCollection';\nimport { styles } from './themes/BaseSwatchViewStyles.css';\nimport { Props } from '../PRIVATE_SwatchFlexView';\nimport { MemoizeBaseSwatchViewItem } from './BaseSwatchViewItem';\nimport { BaseSwatchViewLayout } from './BaseSwatchViewLayout';\nimport { emptyKeys } from './BaseSwatchViewUtils';\n\n/**\n * Props specific for the GradGridBaseImpl Component\n */\ntype BaseSwatchViewImplProps<K, D> = Props<K, D> & {\n  /**\n   * Provide the number of columns to render;\n   */\n  columns: number;\n  /**\n   * Swatch dimension, including width and height\n   */\n  swatchSize: { width?: number; height?: number };\n  /**\n   * A callback function to update swatch dimension, including width and height\n   */\n  updateSwatchSize: (width: number, height: number) => void;\n};\n\nconst BaseSwatchViewImpl = forwardRef(\n  <K extends string | number, D>(\n    {\n      children,\n      data,\n      onLoadMore = () => {},\n      hasMore = false,\n      getRowKey,\n      currentKey,\n      onCurrentKeyChange,\n      selectedKeys = emptyKeys as Keys<K>,\n      onSelectionChange,\n      viewportConfig,\n      focusBehavior = 'swatch',\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      columns,\n      swatchSize,\n      updateSwatchSize\n    }: BaseSwatchViewImplProps<K, D>,\n    ref?: ForwardedRef<HTMLDivElement>\n  ) => {\n    const rootRef = useRef<HTMLDivElement>(null);\n    useImperativeHandle(ref!, () => rootRef.current!, [rootRef]);\n\n    // tracking the anchor key which is used for shift+click selection\n    const anchorKey = useRef<K | undefined>();\n    // tracking pending current key in pointer down event\n    const pendingCurrentKey = useRef<K>();\n\n    const ariaMultiSelectable = 'false';\n    const ariaRowcount = hasMore || !data || columns < 1 ? -1 : Math.ceil(data?.length / columns);\n    const ariaColcount = columns < 1 ? -1 : columns;\n\n    const [isFocusBehaviorValid, setIsFocusBehaviorValid] = useState(true);\n    const validFocusBehavior = isFocusBehaviorValid ? focusBehavior : 'swatch';\n\n    // ensure current item is scrolled into view when current item is updated\n    // during reordering, enable that during keyboard reordering, disable that during mouse reordering\n    const scrollCurrItemIntoView = useRef(false);\n\n    const isFetching = useRef(false);\n\n    /*****************************************************************************************/\n    /************************************* Tabbable Mode *************************************/\n    /*****************************************************************************************/\n\n    const [isCurrentTabbableKey, tabbableModeProps] = useTabbableModeSet(\n      rootRef,\n      (element) => {\n        return keyExtractor(element, ITEM_SELECTOR) as K;\n      },\n      currentKey,\n      onCurrentKeyChange\n    );\n\n    /*****************************************************************************************/\n    /********************************* Current Key and Focus *********************************/\n    /*****************************************************************************************/\n\n    const { currentKeyProps } = useCurrentKey(\n      (element) => keyExtractor(element, ITEM_SELECTOR),\n      true,\n      // init a function every time to make sure we pass in the latest columns,\n      // otherwise the new key might be wrong after resize\n      getPrevNextKeyByCount(data, getRowKey, currentKey, -columns),\n      getPrevNextKeyByCount(data, getRowKey, currentKey, columns),\n      getPrevNextKeyByCount(data, getRowKey, currentKey, -1),\n      getPrevNextKeyByCount(data, getRowKey, currentKey, 1),\n      currentKey,\n      onCurrentKeyChange\n    );\n\n    const [showFocusRing, focusRingProps] = useCollectionFocusRing(rootRef, [\n      'ArrowUp',\n      'ArrowDown',\n      'ArrowLeft',\n      'ArrowRight'\n    ]);\n\n    const handleFocus = () => {\n      // handle initial focus\n      if (\n        !isKeyDefined(currentKey) &&\n        onCurrentKeyChange &&\n        isCurrentTabbableKey(undefined) &&\n        rootRef.current\n      ) {\n        const firstKey =\n          pendingCurrentKey.current || (getFirstVisibleKey(rootRef.current, ITEM_SELECTOR) as K);\n        if (isKeyDefined(firstKey)) {\n          onCurrentKeyChange({ value: firstKey });\n        }\n      }\n    };\n\n    // need to track pointer down element to set currentItem when initial focus happens\n    const handlePointerDown = (event: PointerEvent) => {\n      const key = keyExtractor(event.target as HTMLElement, ITEM_SELECTOR);\n      if (isKeyDefined(key)) {\n        pendingCurrentKey.current = key as K;\n      }\n    };\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // for content focusBehavior, when users tab out, we need to focus back to swatch grid, to ensure\n      // the tabbing order works properly, otherwise the focus might get stuck at the current item\n      if (validFocusBehavior === 'content' && event.key === 'Tab') {\n        rootRef.current?.focus({ preventScroll: true });\n      }\n      // during keyboard reordering, the current item should be scrolled into view\n      const keyHandlers = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n      if ((event.metaKey || event.ctrlKey) && event.shiftKey && keyHandlers.includes(event.key)) {\n        scrollCurrItemIntoView.current = true;\n      }\n    };\n\n    useEffect(() => {\n      if (currentKey != null && rootRef.current) {\n        const elem = findElementByKey(rootRef.current, currentKey, ITEM_SELECTOR);\n        if (elem) {\n          // only update aria-activedescendant for screen reader in default focusBehavior\n          if (validFocusBehavior === 'swatch') {\n            const cell = elem.closest(`[role=gridcell]`);\n            const activeDescendant = rootRef.current.getAttribute('aria-activedescendant');\n            if (cell && activeDescendant !== cell.id) {\n              rootRef.current.setAttribute('aria-activedescendant', cell.id);\n              scrollCurrItemIntoView.current = true;\n            }\n          }\n          // make sure current item is visible\n          if (scrollCurrItemIntoView.current) {\n            elem.scrollIntoView({ block: 'nearest' });\n            scrollCurrItemIntoView.current = false;\n          }\n        }\n      }\n      // listen to data because the current item would re-render when data is updated, i.e. the id\n      // of current item would be updated, so the currentKey itself couldn't guarantee the root has\n      // the latest aria-activedescendant\n    }, [currentKey, data, validFocusBehavior]);\n\n    /*****************************************************************************************/\n    /*************************************** Selection ***************************************/\n    /*****************************************************************************************/\n\n    const handleSelectionChange = useCallback(\n      (detail: SelectionDetail<K>) => {\n        if (onSelectionChange) {\n          if (detail.value.all === false && detail.value.keys.size > 0) {\n            // during regular selection, the last key selected by a user gesture is the anchor key\n            anchorKey.current = Array.from(detail.value.keys.values()).pop();\n          }\n          onSelectionChange(detail);\n        }\n      },\n      [anchorKey, onSelectionChange]\n    );\n\n    const { selectionProps } = useSwatchSelection(\n      (element: HTMLElement) => {\n        if (element === rootRef.current) {\n          return currentKey === undefined ? null : currentKey;\n        }\n        return keyExtractor(element, ITEM_SELECTOR) as K;\n      },\n      selectedKeys,\n      false,\n      'toggle',\n      handleSelectionChange\n    );\n\n    /*****************************************************************************************/\n    /************************************* Load More *****************************************/\n    /*****************************************************************************************/\n\n    const handleLoadMore = useCallback(() => {\n      // check isFetching to avoid multiple load more at the same time (details in JET-61117)\n      if (!isFetching.current) {\n        isFetching.current = true;\n        onLoadMore();\n      }\n    }, [isFetching, onLoadMore]);\n\n    useEffect(() => {\n      isFetching.current = false;\n      // listen to data and hasMore because when one of them gets updated, the fetching is done\n    }, [data, hasMore]);\n\n    /*****************************************************************************************/\n    /************************************ Child Component ************************************/\n    /*****************************************************************************************/\n\n    const getItemContext = useCallback(\n      (context: ItemContext<D>) => {\n        const key = getRowKey(context.data);\n\n        return {\n          index: context.index,\n          data: context.data,\n          metadata: { key: key },\n          selector: undefined\n        };\n      },\n      [getRowKey]\n    );\n\n    const childrenComponent = (context: ItemContext<D>) => {\n      const swatchItemContext = getItemContext(context);\n      const isTabbable = isCurrentTabbableKey(swatchItemContext.metadata.key);\n      const isFocused = currentKey === swatchItemContext.metadata.key && !isTabbable;\n      const isFocusRingVisible = isFocused && showFocusRing;\n      const itemRenderFunc = (context: ListItemRendererContext<K, D>) => (\n        <MemoizeBaseSwatchViewItem\n          key={swatchItemContext.metadata.key}\n          context={context}\n          isTabbable={isTabbable}\n          isFocused={isFocused}\n          isFocusRingVisible={isFocusRingVisible}\n          focusBehavior={validFocusBehavior}\n          {...(focusBehavior === 'content' && { setIsFocusBehaviorValid })}\n          {...(swatchItemContext.index === 0 && !swatchSize.width && { updateSwatchSize })}>\n          {children}\n        </MemoizeBaseSwatchViewItem>\n      );\n      return itemRenderFunc(swatchItemContext);\n    };\n\n    const { tabbableModeProps: viewTabbleModeProps } = useTabbableMode();\n\n    viewportConfig = getViewportConfig(rootRef, viewportConfig);\n    const collectionComponent = (\n      <div role=\"row\">\n        <BaseSwatchViewLayout>\n          <LoadMoreCollection\n            data={data}\n            hasMore={hasMore}\n            onLoadMore={handleLoadMore}\n            loadMoreThreshold={12} // gap size + padding 8 + 4\n            viewportConfig={viewportConfig}>\n            {childrenComponent}\n          </LoadMoreCollection>\n        </BaseSwatchViewLayout>\n      </div>\n    );\n\n    return (\n      <div\n        {...mergeProps(\n          currentKeyProps,\n          focusRingProps,\n          viewTabbleModeProps,\n          selectionProps,\n          {\n            onFocus: handleFocus,\n            onPointerDown: handlePointerDown,\n            onKeyDown: handleKeyDown\n          },\n          // only enable tabbable mode in default focusBehavior\n          { ...(validFocusBehavior === 'swatch' && tabbableModeProps) }\n        )}\n        ref={rootRef}\n        role=\"grid\"\n        className={styles.baseStyle}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-multiselectable={ariaMultiSelectable}\n        aria-rowcount={ariaRowcount}\n        aria-colcount={ariaColcount}>\n        {data?.length || hasMore ? collectionComponent : <Fragment />}\n      </div>\n    );\n  }\n);\n\n/**\n * Props specific for the BaseSwatchView\n */\ntype BaseSwatchViewProps<K, D> = BaseSwatchViewImplProps<K, D> & {\n  ref?: ForwardedRef<HTMLDivElement>;\n};\n\n/**\n * Cast BaseSwatchViewImpl to generic type, because BaseSwatchViewImpl would infer the generic type to specific type,\n * i.e infer <K extends string | number, D> to <string | number, unknown>, which will cause type issues in the parent component\n */\nexport const BaseSwatchView = BaseSwatchViewImpl as <K extends string | number, D>(\n  props: BaseSwatchViewProps<K, D>\n) => JSX.Element;\n"],"names":["MemoizeBaseSwatchViewItem","memo","children","context","isTabbable","isFocused","isFocusRingVisible","focusBehavior","setIsFocusBehaviorValid","updateSwatchSize","rootRef","useRef","itemKey","metadata","key","isItemFocused","variantClasses","multiVariantStyles","itemFocused","itemInGridLayout","classes","classNames","styles","itemStyle","handleResize","useCallback","entry","contentRect","width","height","nullRef","useResizeObserver","useLayoutEffect","content","current","firstElementChild","focusable","allTabbableElements","length","warn","focus","childrenComponent","_jsx","jsx","id","useId","ref","class","role","onKeyDown","event","stopPropagation","TabbableModeContext","Provider","value","FocusTrap","isDisabled","restoreFocusRef","prev","next","compareListItemContext","BaseSwatchViewLayout","Flex","wrap","gap","emptyKeys","all","keys","Set","BaseSwatchView","forwardRef","data","onLoadMore","hasMore","getRowKey","currentKey","onCurrentKeyChange","selectedKeys","onSelectionChange","viewportConfig","ariaLabel","ariaLabelledBy","columns","swatchSize","useImperativeHandle","anchorKey","pendingCurrentKey","ariaRowcount","Math","ceil","ariaColcount","isFocusBehaviorValid","useState","validFocusBehavior","scrollCurrItemIntoView","isFetching","isCurrentTabbableKey","tabbableModeProps","useTabbableModeSet","element","keyExtractor","ITEM_SELECTOR","currentKeyProps","useCurrentKey","getPrevNextKeyByCount","showFocusRing","focusRingProps","useCollectionFocusRing","useEffect","elem","findElementByKey","cell","closest","activeDescendant","getAttribute","setAttribute","scrollIntoView","block","handleSelectionChange","detail","size","Array","from","values","pop","selectionProps","useSwatchSelection","undefined","handleLoadMore","getItemContext","index","selector","viewTabbleModeProps","useTabbableMode","getViewportConfig","collectionComponent","LoadMoreCollection","loadMoreThreshold","swatchItemContext","itemRenderFunc","mergeProps","onFocus","isKeyDefined","firstKey","getFirstVisibleKey","onPointerDown","target","preventScroll","metaKey","ctrlKey","shiftKey","includes","className","baseStyle","Fragment","gapWidth","swatchWidth","rootWidth","colCount","floor","max"],"mappings":"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"}