{"version":3,"file":"SelectSingle-c336458e.js","sources":["../../src/UNSAFE_SelectSingle/SelectSingleDesktopDropdown.tsx","../../src/UNSAFE_SelectSingle/SelectSingleMobileDropdown.tsx","../../src/UNSAFE_SelectSingle/useMobileDropdown.ts","../../src/UNSAFE_SelectSingle/SelectSingle.tsx","../../src/UNSAFE_SelectSingle/useSelectSingle.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { TabbableModeContext } from '#hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport type { CollectionRendererProps } from './SelectSingle.types';\n\ntype PickedDropdownProps = Pick<\n  ComponentProps<typeof Dropdown>,\n  'isOpen' | 'onAutoDismiss' | 'onPosition'\n>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedDropdownProps &\n  PickedInlineUserAssistanceProps & {\n    data?: DataState<K, D> | null;\n    collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n    collectionRendererContext: CollectionRendererProps<K, D>;\n    dropdownId: string;\n    dropdownRef: RefObject<HTMLDivElement>;\n    isAddToListShown?: boolean;\n    isAdvancedSearchShown: boolean;\n    isDisabled?: boolean;\n    isDropdownAbove: boolean;\n    isEmptyResults: boolean;\n    isReadonly?: false;\n    label: string;\n    mainFieldRef: RefObject<HTMLDivElement>;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    userAssistanceDensity?: UserAssistanceDensityType;\n  };\n\nexport function SelectSingleDesktopDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  assistiveText,\n  collectionRenderer,\n  collectionRendererContext,\n  data,\n  dropdownId,\n  dropdownRef,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isDisabled,\n  isDropdownAbove,\n  isEmptyResults,\n  isOpen,\n  isReadonly,\n  label,\n  mainFieldRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onAutoDismiss,\n  onPosition,\n  userAssistanceDensity\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    !isDropdownAbove &&\n    !isDisabled &&\n    !isReadonly &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      </TabbableModeContext.Provider>\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAddToListAction}>\n        {translations.select_addToList()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      {!isEmptyResults && (\n        <div onMouseDown={preventDefault}>\n          <Separator />\n        </div>\n      )}\n      <LinkItem isHighlighted={isEmptyResults} onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <Dropdown\n      anchorRef={mainFieldRef}\n      dropdownRef={dropdownRef}\n      id={dropdownId}\n      isOpen={isOpen}\n      onAutoDismiss={onAutoDismiss}\n      onPosition={onPosition}>\n      <DropdownList\n        hasBottomGap={dropdownInlineUserAssistance === undefined}\n        isLoading={data === null}>\n        {dropdownListContent}\n        {addToListContent}\n        {advancedSearchContent}\n      </DropdownList>\n      {dropdownInlineUserAssistance}\n    </Dropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  LinkItem,\n  SelectMobileDropdown,\n  preventDefault\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { Separator } from '#UNSAFE_Separator';\nimport { InlineUserAssistance, type UserAssistanceDensityType } from '#UNSAFE_UserAssistance';\nimport { View } from '#UNSAFE_View';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { ComponentChildren, ComponentProps } from 'preact';\nimport type { CollectionRendererProps } from './SelectSingle.types';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { useMobileDropdown, type UseMobileDropdownProps } from './useMobileDropdown';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\n\ntype PickedInlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  'assistiveText' | 'helpSourceLink' | 'helpSourceText'\n>;\ntype PickedSelectSingleFieldInputProps = Pick<\n  ComponentProps<typeof SelectSingleFieldInput>,\n  | 'aria-describedby'\n  | 'aria-label'\n  | 'displayValue'\n  | 'isAddToListShown'\n  | 'isAdvancedSearchShown'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'virtualKeyboard'\n> & {\n  onFieldBlur?: ComponentProps<typeof SelectSingleFieldInput>['onBlur'];\n  onFieldFocus?: ComponentProps<typeof SelectSingleFieldInput>['onFocus'];\n  onFieldInput?: ComponentProps<typeof SelectSingleFieldInput>['onInput'];\n  onFieldKeyDown?: ComponentProps<typeof SelectSingleFieldInput>['onKeyDown'];\n  onFieldKeyUp?: ComponentProps<typeof SelectSingleFieldInput>['onKeyUp'];\n};\ntype PickedSelectMobileDropdownProps = Pick<ComponentProps<typeof SelectMobileDropdown>, 'isOpen'>;\ntype PickedUseMobileDropdownProps<K extends string | number, D extends Record<string, any>> = Pick<\n  UseMobileDropdownProps<K, D>,\n  'clearValue' | 'setDropdownOpen' | 'stopFiltering' | 'setUserInput'\n> & {\n  mainFieldInputRef: UseMobileDropdownProps<K, D>['inputRef'];\n};\n\ntype Props<\n  K extends string | number,\n  D extends Record<string, any>\n> = PickedInlineUserAssistanceProps &\n  PickedSelectMobileDropdownProps &\n  PickedSelectSingleFieldInputProps &\n  PickedUseMobileDropdownProps<K, D> & {\n    data?: DataState<K, D> | null;\n    collectionRenderer: (props: CollectionRendererProps<K, D>) => ComponentChildren;\n    collectionRendererContext: CollectionRendererProps<K, D>;\n    dropdownId: string;\n    isEmptyResults: boolean;\n    isFocused: boolean;\n    isLoading: boolean;\n    label: string;\n    liveRegionText?: string;\n    onAddToListAction?: () => void;\n    onAdvancedSearchAction?: () => void;\n    propIsLoading?: boolean;\n    userAssistanceDensity?: UserAssistanceDensityType;\n    userInput?: string;\n    virtualKeyboard?: SelectSingleFieldInputProps['virtualKeyboard'];\n  };\n\nexport function SelectSingleMobileDropdown<\n  K extends string | number,\n  D extends Record<string, any>\n>({\n  'aria-describedby': ariaDescribedBy,\n  'aria-label': ariaLabel,\n  assistiveText,\n  clearValue,\n  collectionRenderer,\n  collectionRendererContext,\n  data,\n  displayValue,\n  dropdownId,\n  helpSourceLink,\n  helpSourceText,\n  isAddToListShown,\n  isAdvancedSearchShown,\n  isEmptyResults,\n  isFocused,\n  isLoading,\n  isOpen = false,\n  isRequired,\n  label,\n  liveRegionText,\n  mainFieldInputRef,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onFieldBlur,\n  onFieldFocus,\n  onFieldInput,\n  onFieldKeyDown,\n  onFieldKeyUp,\n  placeholder,\n  propIsLoading,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering,\n  textAlign,\n  userAssistanceDensity,\n  userInput,\n  virtualKeyboard\n}: Props<K, D>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n    useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: ''\n    });\n  const { selectSingleFieldInputProps, selectSingleFieldProps } = useMobileDropdown({\n    clearValue,\n    displayValue,\n    inputRef: mainFieldInputRef,\n    isDropdownOpen: isOpen,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  });\n\n  // JET-54256 - inside label animates up on initial display with selected value\n  // If we're waiting for the selected values to load, the component should look like it\n  // has a value in the meantime.\n  // Use the original propIsLoading instead of isLoading because we don't want to delay\n  // the inside label position by a timer like we do the progressive loading indicator.\n  formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n  const mobileDropdownFieldLabelProps = {\n    label: <Label {...labelProps}>{label}</Label>,\n    labelEdge: 'inside' as const\n  };\n\n  const dropdownInlineUserAssistance =\n    isOpen &&\n    (assistiveText || helpSourceLink) &&\n    (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n      <DropdownUserAssistance\n        assistiveText={assistiveText}\n        fieldLabel={label}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        userAssistanceDensity={userAssistanceDensity}\n        {...userAssistanceProps}\n      />\n    ) : undefined;\n\n  const dropdownListContent = isEmptyResults ? (\n    isAddToListShown || isAdvancedSearchShown ? undefined : (\n      <EmptyResults />\n    )\n  ) : (\n    collectionRenderer(collectionRendererContext)\n  );\n\n  const addToListContent = isAddToListShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAddToListAction}>{translations.select_addToList()}</LinkItem>\n    </>\n  ) : undefined;\n\n  const advancedSearchContent = isAdvancedSearchShown ? (\n    <>\n      <div onMouseDown={preventDefault}>\n        <Separator />\n      </div>\n      <LinkItem onAction={onAdvancedSearchAction}>\n        {translations.select_moreSearchOptions()}\n      </LinkItem>\n    </>\n  ) : undefined;\n\n  return (\n    <SelectMobileDropdown\n      header={\n        <FormFieldContext.Provider value={formFieldContext}>\n          <View>\n            <SelectSingleField\n              {...textFieldProps}\n              {...mobileDropdownFieldLabelProps}\n              {...selectSingleFieldProps}\n              onFocus={onFieldFocus}\n              onBlur={onFieldBlur}>\n              <SelectSingleFieldInput\n                {...inputProps}\n                {...selectSingleFieldInputProps}\n                aria-controls={dropdownId}\n                aria-expanded={isOpen}\n                aria-label={ariaLabel}\n                isAddToListShown={isAddToListShown}\n                isAdvancedSearchShown={isAdvancedSearchShown}\n                isRequired={isRequired}\n                liveRegionText={liveRegionText}\n                placeholder={placeholder}\n                textAlign={textAlign}\n                virtualKeyboard={virtualKeyboard}\n                onInput={onFieldInput}\n                onKeyDown={onFieldKeyDown}\n                onKeyUp={onFieldKeyUp}\n              />\n            </SelectSingleField>\n          </View>\n          {dropdownInlineUserAssistance}\n          {addToListContent}\n          {advancedSearchContent}\n        </FormFieldContext.Provider>\n      }\n      hasHeaderSeparator={!(isAdvancedSearchShown && isEmptyResults)}\n      id={dropdownId}\n      isOpen={isOpen}\n      labelId={labelProps.id}>\n      <DropdownList\n        isLoading={data === null}\n        hasTopGap={!(isAddToListShown || isAdvancedSearchShown)}>\n        {dropdownListContent}\n      </DropdownList>\n    </SelectMobileDropdown>\n  );\n}\n","import { isSearchTextEmptyOrUndefined } from '#PRIVATE_SelectCommon';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport type { useSelectSingle } from './useSelectSingle';\n\ntype Key = string | number;\ntype Data = Record<string, any>;\n\ntype PickedPropsFromUseSelectSingle<K extends Key, D extends Data> = Pick<\n  ReturnType<typeof useSelectSingle<K, D>>,\n  | 'clearValue'\n  | 'inputRef'\n  | 'isDropdownOpen'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K extends Key, D extends Data> = PickedPropsFromUseSelectSingle<\n  K,\n  D\n> & {\n  displayValue: string;\n};\n\nexport function useMobileDropdown<K extends Key, D extends Data>({\n  clearValue,\n  displayValue,\n  inputRef,\n  isDropdownOpen,\n  userInput,\n  setDropdownOpen,\n  stopFiltering,\n  setUserInput\n}: UseMobileDropdownProps<K, D>) {\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  const closeDropdown = useCallback(() => {\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    // reset the user filter and the value of the component\n    stopFiltering();\n    // clear the value but do not close the dropdown\n    clearValue(false);\n    // set focus to the dropdown input field\n    dropdownInputRef.current?.focus();\n  }, [clearValue, stopFiltering]);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n    }\n    wasDropdownOpen.current = isDropdownOpen;\n  }, [isDropdownOpen]);\n\n  const isInitialRender = useRef(true);\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    setUserInput(displayValue);\n  }\n\n  return {\n    selectSingleFieldInputProps: {\n      displayValue: userInput ?? '',\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput\n    },\n    selectSingleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown:\n        !isSearchTextEmptyOrUndefined(userInput) || !isSearchTextEmptyOrUndefined(displayValue),\n      isDropdownArrowShown: false,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  DefaultList,\n  SelectMobileFieldInput,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { Label } from '#UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput } from '#UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  type UserAssistanceDensityType\n} from '#UNSAFE_UserAssistance';\nimport type { VirtualizedListView } from '#UNSAFE_VirtualizedListView';\nimport { useFocusableTextField, type FocusableHandle } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '#hooks/UNSAFE_useLoadingIndicatorTimer';\nimport type { TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport { useTextField } from '#hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '#resources/nls/bundle';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport type { ItemTextType } from '#utils/UNSAFE_selectUtils';\nimport type { Size } from '#utils/UNSAFE_size';\nimport type { LayoutColumnSpan } from '#utils/UNSAFE_styles/Layout';\nimport type { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport {\n  Fragment,\n  type VNode,\n  type ComponentChildren,\n  type ComponentProps,\n  type Ref\n} from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef, useCallback, useImperativeHandle, useRef } from 'preact/hooks';\nimport type { CollectionRendererProps, ItemRendererProps } from './SelectSingle.types';\nimport { SelectSingleDesktopDropdown } from './SelectSingleDesktopDropdown';\nimport { SelectSingleField } from './SelectSingleField';\nimport { SelectSingleFieldInput } from './SelectSingleFieldInput';\nimport { SelectSingleMobileDropdown } from './SelectSingleMobileDropdown';\nimport { useDisplayValue } from './useDisplayValue';\nimport { useSelectSingle } from './useSelectSingle';\nimport { defaultTextAlignForVariant } from '#utils/PRIVATE_formControlUtils';\n\ntype SelectSingleFieldInputProps = ComponentProps<typeof SelectSingleFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = TestIdProps & {\n  /**\n   * Specifies whether the add to list link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because its external UI could also potentially include\n   * the ability to add to list.\n   */\n  addToList?: 'on' | 'off';\n  /**\n   * Specifies whether the advanced search link is shown in the dropdown when the user filters.\n   * It is up to the application to show its own UI when the link is triggered.\n   *\n   * Advanced search and add to list should not be enabled at the same time.  If both are on,\n   * advanced search will take precedence because its external UI could also potentially include\n   * the ability to add to list.\n   */\n  advancedSearch?: 'on' | 'off';\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: SelectSingleFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Render function for the collection in the dropdown.\n   */\n  collectionRenderer?: (\n    collectionRendererProps: CollectionRendererProps<K, D>\n  ) => ComponentChildren;\n  /**\n   * Specifies how many columns to span in a FormLayout with direction === 'row'\n   */\n  columnSpan?: LayoutColumnSpan;\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectSingle will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: SelectSingleFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: SelectSingleFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: SelectSingleFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the key, data, and optional metadata for the selected value.\n   */\n  valueItem?: Item<K, D>;\n  /**\n   * The style variant of the component.\n   */\n  variant?: SelectSingleFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback function called when the user triggers the add to list link shown in the dropdown.\n   */\n  onAddToListAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function called when the user triggers the advanced search link shown in the dropdown.\n   */\n  onAdvancedSearchAction?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback invoked when the user commits the selected value.\n   *\n   * The function should set a new <code>valueItem</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectSingle is a dropdown list that supports single selection and search filtering.\n */\nexport const SelectSingle = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      addToList = 'off',\n      advancedSearch = 'off',\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      collectionRenderer,\n      columnSpan,\n      data,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      testId,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItem,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign ?? defaultTextAlignForVariant(variant);\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const enabledElementRef = useRef<HTMLInputElement>(null);\n    const readonlyElementRef = useRef<HTMLDivElement>(null);\n\n    const {\n      focusProps,\n      isFocused: origIsFocused,\n      methods: focusMethods\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({\n      isDisabled,\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef\n    });\n\n    useImperativeHandle(ref!, () => focusMethods, [focusMethods]);\n\n    const {\n      addToListEventHandlers,\n      advancedSearchEventHandlers,\n      clearValue,\n      collectionRendererContext,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      inputEventHandlers,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isDataFetched,\n      isDropdownAbove,\n      isDropdownOpen,\n      isEmptyResults,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textFieldRef,\n      userInput\n    } = useSelectSingle<K, D>({\n      addToList,\n      advancedSearch,\n      data,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onAddToListAction,\n      onAdvancedSearchAction,\n      onCommit,\n      onFilter,\n      valueItem\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItem !== undefined ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValue(itemText, valueItem);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined,\n      labelText: labelEdge === 'inside' && !isDisabled ? label : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : isReadonly ? (\n        <InlineUserAssistance\n          fieldLabel={label}\n          messages={messages}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    const defaultCollectionRenderer = useCallback(\n      ({\n        onPersistCurrentRowKey,\n        onRowAction,\n        selected,\n        searchText,\n        currentRowKeyOverride\n      }: CollectionRendererProps<K, D>) => (\n        <DefaultList\n          aria-label={label ?? ''}\n          currentItemVariant=\"highlight\"\n          currentKey={currentRowKeyOverride}\n          data={data}\n          itemRenderer={itemRenderer}\n          itemText={itemText}\n          onCurrentKeyChange={onPersistCurrentRowKey}\n          onItemAction={onRowAction}\n          onLoadRange={onLoadRange}\n          searchText={isUserFiltering ? searchText : undefined}\n          selectedKeys={selected}\n          selectionMode=\"single\"\n        />\n      ),\n      [data, isUserFiltering, itemRenderer, itemText, label, onLoadRange]\n    );\n\n    if (isReadonly) {\n      const mainContent = (\n        <ReadonlyTextFieldInput\n          aria-describedby={inputProps['aria-describedby']}\n          aria-label={ariaLabel}\n          aria-labelledby={labelProps.id}\n          as=\"div\"\n          elementRef={readonlyElementRef}\n          formVariant={variant}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n          onBlur={inputProps.onBlur}\n          onFocus={inputProps.onFocus}\n          textAlign={textAlign}\n          value={displayValue}\n        />\n      );\n\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onFocusOut}\n            onFocus={focusProps.onFocusIn}\n            ref={mainFieldRef}\n            mainContent={mainContent}\n            testId={testId}\n            {...fieldLabelProps}></ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n    // Use the mobile field if the component is being rendered in a phone\n    // and it is not disabled.\n    const isPhoneMainFieldInput = isPhone() && !isDisabled;\n    const mainContent = !isPhoneMainFieldInput ? (\n      <SelectSingleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isRequired={isRequired}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputProps}\n        {...inputEventHandlers}\n      />\n    ) : (\n      <SelectMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n    const dropdown = !shouldShowDropdown ? null : isPhone() ? (\n      <SelectSingleMobileDropdown\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabel}\n        assistiveText={assistiveText}\n        clearValue={clearValue}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        collectionRendererContext={collectionRendererContext}\n        data={data}\n        displayValue={displayValue}\n        dropdownId={dropdownId}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isEmptyResults={isEmptyResults}\n        isFocused={isFocused}\n        isLoading={isLoading}\n        isOpen={shouldShowDropdown}\n        isRequired={isRequired}\n        label={label}\n        liveRegionText={liveRegionText}\n        mainFieldInputRef={enabledElementRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        onFieldBlur={focusProps.onFocusOut}\n        onFieldFocus={focusProps.onFocusIn}\n        onFieldInput={inputEventHandlers.onInput}\n        onFieldKeyDown={inputEventHandlers.onKeyDown}\n        onFieldKeyUp={inputEventHandlers.onKeyUp}\n        placeholder={placeholder}\n        propIsLoading={propIsLoading}\n        setDropdownOpen={setDropdownOpen}\n        stopFiltering={stopFiltering}\n        setUserInput={setUserInput}\n        textAlign={textAlign}\n        userAssistanceDensity={userAssistanceDensity}\n        userInput={userInput}\n        virtualKeyboard={virtualKeyboard}\n      />\n    ) : (\n      <SelectSingleDesktopDropdown\n        {...dropdownEventHandlers}\n        assistiveText={assistiveText}\n        collectionRenderer={collectionRenderer ?? defaultCollectionRenderer}\n        collectionRendererContext={collectionRendererContext}\n        data={data}\n        dropdownId={dropdownId}\n        dropdownRef={dropdownRef}\n        helpSourceLink={helpSourceLink}\n        helpSourceText={helpSourceText}\n        isAddToListShown={isAddToListShown}\n        isAdvancedSearchShown={isAdvancedSearchShown}\n        isDisabled={isDisabled}\n        isDropdownAbove={isDropdownAbove}\n        isEmptyResults={isEmptyResults}\n        isOpen={shouldShowDropdown}\n        isReadonly={isReadonly}\n        label={label}\n        mainFieldRef={mainFieldRef}\n        onAddToListAction={addToListEventHandlers.onAction}\n        onAdvancedSearchAction={advancedSearchEventHandlers.onAction}\n        userAssistanceDensity={userAssistanceDensity}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectSingleField\n            columnSpan={columnSpan}\n            compactUserAssistance={compactUserAssistance}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onFocusOut}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onFocus={focusProps?.onFocusIn}\n            rootRef={textFieldRef as Ref<HTMLElement> | undefined}\n            testId={testId}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}>\n            {mainContent}\n          </SelectSingleField>\n        </FormFieldContext.Provider>\n        {dropdown}\n      </Fragment>\n    );\n  }\n) as {\n  <K extends string | number, D extends Record<string, any>>(\n    props: Props<K, D> & { ref?: Ref<FocusableHandle> }\n  ): VNode<any> | null;\n}; // forwardRef will remove generics, so we cast it explicitly to preserve generics.\n\nexport type SelectSingleProps<K extends string | number, D extends Record<string, any>> = Props<\n  K,\n  D\n>;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  UseCollectionRendererSelectSingleParams,\n  isBeforeDataFetch,\n  isPhone,\n  isSearchTextEmptyOrUndefined,\n  useCollectionRenderer,\n  useSelectCommon\n} from '#PRIVATE_SelectCommon';\nimport type { DataState } from '#UNSAFE_Collection';\nimport { useEffectEvent } from '#hooks/PRIVATE_useEffectEvent';\nimport { KEYS, isControlOrFunctionKey } from '#utils/PRIVATE_keyboardUtils';\nimport type { Item } from '#utils/UNSAFE_dataProvider';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '#utils/UNSAFE_valueUpdateDetail';\nimport type { ComponentProps, RefObject } from 'preact';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { SelectSingle } from './SelectSingle';\nimport { useHiddenTestMethod } from '#hooks/UNSAFE_useHiddenTestMethod/useHiddenTestMethod';\n\ntype PickedPropsFromSelectSingle = Pick<\n  ComponentProps<typeof SelectSingle>,\n  | 'addToList'\n  | 'advancedSearch'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'onAddToListAction'\n  | 'onAdvancedSearchAction'\n  | 'onFilter'\n>;\ntype UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {\n  data?: DataState<K, D> | null;\n  inputRef: RefObject<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  valueItem?: Item<K, D>;\n};\n\n/**\n * Hook that manages SelectSingle state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectSingle, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected value is committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param valueItem Specifies the key, data, and optional metadata for the selected value.\n *\n * @returns Properties to apply to internal components that SelectSingle renders, and component\n * state.\n */\nexport function useSelectSingle<K extends string | number, D extends Record<string, any>>({\n  addToList,\n  advancedSearch,\n  data,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onAddToListAction,\n  onAdvancedSearchAction,\n  onCommit: propOnCommit,\n  onFilter,\n  valueItem\n}: UseSelectSingleProps<K, D>) {\n  const {\n    currentRowKeyRef,\n    currentRowOverride,\n    dropdownRef,\n    getDropdownTabbableElems,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    setCurrentRowOverride,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isBlurClearValue, setBlurClearValue] = useState(false);\n  const [prevIsFocused, setPrevIsFocused] = useState(isFocused);\n  const [isTabbingOutOfDropdown, setTabbingOutOfDropdown] = useState(false);\n\n  // refs used by some of the effects below to determine whether the effect needs to run,\n  // for when the list of dependencies is longer than what we want the trigger to actually be\n  const prevDataRef = useRef(data);\n  const prevDropdownOpenRef = useRef(isDropdownOpen);\n  const prevSearchText = useRef(searchText);\n\n  const isAdvancedSearchShown =\n    advancedSearch === 'on' && isUserFiltering && searchText != null && searchText.length > 0;\n  const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n  const isEmptyResults = isDataFetched && data?.totalSize === 0;\n  // advanced search and add to list should not be shown at the same time, so if both are on,\n  // let advanced search win because it is shown more often than add to list in the dropdown\n  // (even when the list is not empty) and its external UI could potentially include the\n  // ability to add to list too\n  const isAddToListShown =\n    addToList === 'on' &&\n    advancedSearch !== 'on' &&\n    isUserFiltering &&\n    searchText != null &&\n    searchText.length > 0;\n\n  const handleAddToListAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAddToListAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAddToListAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const handleAdvancedSearchAction = useCallback(() => {\n    setDropdownOpen(false);\n    stopFiltering();\n    onAdvancedSearchAction?.({ searchText: isUserFiltering ? searchText : undefined });\n  }, [isUserFiltering, onAdvancedSearchAction, searchText, setDropdownOpen, stopFiltering]);\n\n  const onCommit = useCallback(\n    (value?: K) => {\n      propOnCommit?.({\n        value: value,\n        previousValue: valueItem !== undefined ? valueItem.key : undefined\n      });\n    },\n    [propOnCommit, valueItem]\n  );\n\n  const clearValue = useCallback(\n    (shouldCloseDropdown = true) => {\n      if (shouldCloseDropdown) {\n        setDropdownOpen(false);\n      }\n\n      setSelectedKeys(new Set<K>());\n\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(undefined);\n    },\n    [onCommit, setDropdownOpen]\n  );\n\n  // determine if we need to clear the value because the user has deleted all the text\n  const isClearValueNeeded = useCallback(() => {\n    return isUserFiltering && userInput === '' && valueItem !== undefined;\n  }, [isUserFiltering, userInput, valueItem]);\n\n  const clearValueIfNeeded = useCallback(() => {\n    if (isClearValueNeeded()) {\n      clearValue();\n      return true;\n    }\n    return false;\n  }, [clearValue, isClearValueNeeded]);\n\n  // JET-65757 - Empty value rejected when not confirmed by Enter/Tab\n  // When the field loses focus, check to see if we need to clear the value and set a state flag\n  // to later check in a useEffect.\n  // (We have to make this check outside of the useEffect itself because by the time the useEffect\n  // is called, the state we check here to see if we need to clear the value may have already\n  // been changed.)\n  if (\n    prevIsFocused &&\n    !isFocused &&\n    !isTabbingOutOfDropdown &&\n    !isBlurClearValue &&\n    isClearValueNeeded()\n  ) {\n    setBlurClearValue(true);\n  }\n  // Create this function with useEffectEvent so that it is stable and by itself won't cause\n  // the below dependent useEffect to trigger.\n  const handleBlur_stable = useEffectEvent(() => {\n    // if we need to clear the value, do it now and reset the flag\n    if (isBlurClearValue) {\n      clearValue();\n      setBlurClearValue(false);\n    }\n    // if we were tabbing out of the dropdown, reset the flag now that we've lost focus\n    if (isTabbingOutOfDropdown) {\n      setTabbingOutOfDropdown(false);\n    }\n  });\n  // only run this effect when focus changes (handleBlur_stable has to be listed\n  // as a dependency, but it's stable and won't change across renders)\n  useEffect(() => {\n    if (!isFocused) {\n      handleBlur_stable();\n    }\n  }, [handleBlur_stable, isFocused]);\n\n  // JET-60376, JET-62113: Create a changeValue method that can be called by a test adapter to\n  // simulate a user changing the value. This method calls the onCommit callback, just like what\n  // would happen if a user (or test) made a change through the UI.\n  const textFieldRef = useRef<HTMLElement>(null);\n  const changeValue = useCallback(\n    (value?: K) => {\n      // We always want this method available on the DOM element so that a test can call it,\n      // but we only want it to change the value when the component is enabled because that's\n      // the only time the user could change the value through the UI.\n      if (!isReadonly && !isDisabled) {\n        onCommit(value);\n        return Promise.resolve();\n      }\n      return Promise.reject('Component is readonly or disabled');\n    },\n    [isDisabled, isReadonly, onCommit]\n  );\n  // Expose _changeValue as a hidden method on the root DOM.\n  useHiddenTestMethod({\n    elementRef: isReadonly ? mainFieldRef : textFieldRef,\n    method: changeValue,\n    name: '_changeValue'\n  });\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB: {\n              // if there are multiple tabbable elements in the dropdown, like the list and\n              // the advanced search link, then leave the dropdown open when tabbing among them\n              const isShift = keyboardEvent.shiftKey;\n              const tabbableElems = getDropdownTabbableElems();\n              if (tabbableElems && tabbableElems.length > 1) {\n                const firstTabbableElem = tabbableElems[0];\n                const lastTabbableElem = tabbableElems[tabbableElems.length - 1];\n                // check if tabbing forwards and focus is not on the last tabbable elem or\n                // tabbing backwards and focus is not on the first tabbable elem,\n                // then keep the dropdown open and simply return\n                if (\n                  (!isShift && document.activeElement !== lastTabbableElem) ||\n                  (isShift && document.activeElement !== firstTabbableElem)\n                ) {\n                  setDropdownOpen(true);\n                  return;\n                }\n              }\n\n              // if there is a currentRow in the dropdown, select it and commit it\n              if (currentRowKeyRef.current !== undefined && data != null && data.data.length > 0) {\n                setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n                onCommit(currentRowKeyRef.current);\n\n                // set flag that we're tabbing out of dropdown so that we can check it in a\n                // useEffect that gets executed when we lose focus\n                setTabbingOutOfDropdown(true);\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              focusInput();\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [\n      currentRowKeyRef,\n      data,\n      focusInput,\n      getDropdownTabbableElems,\n      isDropdownOpen,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen\n    ]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          // if we're not going to clear the value when the component loses focus,\n          // check whether we need to select the current item\n          const isValueClearedTab = isClearValueNeeded();\n          if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {\n            // JET-68215 (Error state is lost after mouse click + Tab). If the user is just tabbing\n            // to navigate between controls, we don't want to consider that a selection. Only commit\n            // if the user has interacted with the control. isUserFiltering is set to true whenever\n            // the user types to filter and will get reset when the dropdown closes.\n            if (isUserFiltering) {\n              // if there is a currentRow in the dropdown (meaning a highlighted item that would\n              // have keyboard focus if the dropdown list had physical focus, which may be different\n              // from the currently selected item), select it and commit it;\n              // otherwise commit the currently selected value again so that a valueAction event\n              // will be fired\n              if (currentRowKeyRef.current !== undefined) {\n                setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n                onCommit(currentRowKeyRef.current);\n              } else {\n                onCommit(valueItem?.key ?? undefined);\n              }\n            }\n          }\n\n          // Remove the dropdown immediately, without waiting for a rerender based on changing\n          // state, so that the open dropdown cannot get focus when the browser handles the\n          // Tab key.\n          removeDropdown();\n\n          setDropdownOpen(false);\n          break;\n\n        case KEYS.ENTER:\n          // if this is on a mobile device (only phone and not in tablet devices), do not do anything\n          if (isPhone()) {\n            return;\n          }\n\n          // if add to list is shown and there are no results, trigger the add to list link\n          if (isAddToListShown && isEmptyResults) {\n            handleAddToListAction();\n            return;\n          }\n\n          // if advanced search is shown and there are no results, trigger the advanced\n          // search link\n          if (isAdvancedSearchShown && isEmptyResults) {\n            handleAdvancedSearchAction();\n            return;\n          }\n\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueCleared = clearValueIfNeeded();\n          if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {\n            setDropdownOpen(false);\n\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n\n            // if there is a currentRow in the dropdown, select it and commit it;\n            // otherwise commit the currently selected value again\n            if (currentRowKeyRef.current !== undefined) {\n              setSelectedKeys(new Set<K>([currentRowKeyRef.current]));\n              onCommit(currentRowKeyRef.current);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      clearValueIfNeeded,\n      currentRowKeyRef,\n      data,\n      handleAddToListAction,\n      handleAdvancedSearchAction,\n      isAddToListShown,\n      isAdvancedSearchShown,\n      isClearValueNeeded,\n      isDropdownOpen,\n      isEmptyResults,\n      isUserFiltering,\n      onCommit,\n      removeDropdown,\n      setDropdownOpen,\n      stopFiltering,\n      valueItem\n    ]\n  );\n\n  // when the valueItem changes, save the new selectedKeys\n  useEffect(() => {\n    setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));\n  }, [valueItem]);\n\n  const onItemAction = useCallback<UseCollectionRendererSelectSingleParams<K, D>['onItemAction']>(\n    (detail) => {\n      focusInput();\n      setDropdownOpen(false);\n\n      // after selecting a value, the user is no longer actively filtering, so update related\n      // state accordingly so that the newly selected value appears in the field\n      stopFiltering();\n\n      const newKey = detail.context.key;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for a new valueItem to be set\n      setSelectedKeys(new Set([newKey]));\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(newKey);\n    },\n    [focusInput, onCommit, setDropdownOpen, stopFiltering]\n  );\n\n  useEffect(() => {\n    // only run this effect when data changes because we need to wait for the new set of\n    // filtered data to be set before highlighting the first result\n    if (data === prevDataRef.current) {\n      return;\n    }\n\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    if (\n      isDropdownOpen &&\n      isUserFiltering &&\n      data != null &&\n      data.offset === 0 &&\n      data.data.length > 0\n    ) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRowOverride({\n        rowKey: !isSearchTextEmptyOrUndefined(searchText) ? data.data[0].metadata.key : undefined\n      });\n    }\n  }, [data, isDropdownOpen, isUserFiltering, searchText, setCurrentRowOverride]);\n\n  useEffect(() => {\n    // only run this effect when the state of the dropdown changes\n    if (isDropdownOpen === prevDropdownOpenRef.current) {\n      return;\n    }\n\n    // JET-66783 - <oj-c-select-single> scroll position is not at selected item when we open the list second time.\n    // set the current item to the selected item (if there is one)\n    // when the dropdown opens if there is no filter text\n    if (\n      isDropdownOpen &&\n      (!isUserFiltering || searchText === undefined || searchText.length === 0)\n    ) {\n      setCurrentRowOverride({ rowKey: [...(selectedKeys ?? [undefined])][0] });\n    }\n  }, [isDropdownOpen, isUserFiltering, searchText, selectedKeys, setCurrentRowOverride]);\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const collectionRendererContext = useCollectionRenderer<K, D>({\n    currentKey: currentRowOverride.rowKey,\n    searchText,\n    selectedKeys,\n    onCurrentKeyChange,\n    onItemAction\n  });\n\n  if (isFocused !== prevIsFocused) {\n    setPrevIsFocused(isFocused);\n  }\n\n  // update refs used in some of the above effects in a useEffect on every render so that they\n  // update after the above effects run\n  useEffect(() => {\n    prevDataRef.current = data;\n    prevDropdownOpenRef.current = isDropdownOpen;\n    prevSearchText.current = searchText;\n  });\n\n  return {\n    addToListEventHandlers: {\n      onAction: handleAddToListAction\n    },\n    advancedSearchEventHandlers: {\n      onAction: handleAdvancedSearchAction\n    },\n    collectionRendererContext,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    clearValue,\n    dropdownEventHandlers,\n    dropdownRef,\n    inputEventHandlers,\n    inputRef,\n    isAddToListShown,\n    isAdvancedSearchShown,\n    isDataFetched,\n    isDropdownAbove,\n    isDropdownOpen,\n    isEmptyResults,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textFieldRef,\n    userInput\n  };\n}\n"],"names":["SelectSingleDesktopDropdown","assistiveText","collectionRenderer","collectionRendererContext","data","dropdownId","dropdownRef","helpSourceLink","helpSourceText","isAddToListShown","isAdvancedSearchShown","isDisabled","isDropdownAbove","isEmptyResults","isOpen","isReadonly","label","mainFieldRef","onAddToListAction","onAdvancedSearchAction","onAutoDismiss","onPosition","userAssistanceDensity","translations","useTranslationBundle","dropdownInlineUserAssistance","undefined","_jsx","TabbableModeContext","Provider","value","isTabbable","children","jsx","DropdownUserAssistance","fieldLabel","dropdownListContent","EmptyResults","addToListContent","_jsxs","onMouseDown","preventDefault","Separator","LinkItem","isHighlighted","onAction","select_addToList","advancedSearchContent","select_moreSearchOptions","Dropdown","anchorRef","id","jsxs","DropdownList","hasBottomGap","isLoading","SelectSingleMobileDropdown","ariaDescribedBy","ariaLabel","clearValue","displayValue","isFocused","isRequired","liveRegionText","mainFieldInputRef","onFieldBlur","onFieldFocus","onFieldInput","onFieldKeyDown","onFieldKeyUp","placeholder","propIsLoading","setDropdownOpen","setUserInput","stopFiltering","textAlign","userInput","virtualKeyboard","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","isRequiredShown","labelEdge","styleVariant","selectSingleFieldInputProps","selectSingleFieldProps","inputRef","isDropdownOpen","dropdownInputRef","useRef","closeDropdown","useCallback","current","focus","onBackButtonClick","onClearButtonClick","wasDropdownOpen","useEffect","setTimeout","isInitialRender","hasEmptyLabel","hasInsideLabel","isUserFiltering","removeIcon","isBackButtonShown","isClearButtonShown","isSearchTextEmptyOrUndefined","isDropdownArrowShown","useMobileDropdown","hasValue","mobileDropdownFieldLabelProps","Label","_Fragment","SelectMobileDropdown","header","FormFieldContext","View","SelectSingleField","onFocus","onBlur","SelectSingleFieldInput","onInput","onKeyDown","onKeyUp","hasHeaderSeparator","labelId","hasTopGap","SelectSingle","forwardRef","addToList","advancedSearch","columnSpan","propIsDisabled","propIsReadonly","itemRenderer","itemText","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","onLoadRange","testId","propTextAlign","propUserAssistanceDensity","valueItem","variant","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","defaultTextAlignForVariant","enabledElementRef","readonlyElementRef","focusProps","origIsFocused","methods","focusMethods","useFocusableTextField","useImperativeHandle","addToListEventHandlers","advancedSearchEventHandlers","dropdownArrowEventHandlers","dropdownEventHandlers","inputEventHandlers","isDataFetched","mouseProps","textFieldRef","propIsFocused","propOnCommit","currentRowKeyRef","currentRowOverride","getDropdownTabbableElems","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","onCurrentKeyChange","searchText","setCurrentRowOverride","useSelectCommon","selectedKeys","setSelectedKeys","useState","isBlurClearValue","setBlurClearValue","prevIsFocused","setPrevIsFocused","isTabbingOutOfDropdown","setTabbingOutOfDropdown","prevDataRef","prevDropdownOpenRef","prevSearchText","length","isBeforeDataFetch","totalSize","handleAddToListAction","handleAdvancedSearchAction","previousValue","key","shouldCloseDropdown","Set","isClearValueNeeded","clearValueIfNeeded","handleBlur_stable","useEffectEvent","changeValue","Promise","reject","resolve","useHiddenTestMethod","elementRef","method","name","focusInput","removeDropdown","parentElement","removeChild","myHandleDropdownAutoDismiss","event","type","keyboardEvent","code","KEYS","TAB","isShift","shiftKey","tabbableElems","firstTabbableElem","lastTabbableElem","document","activeElement","myHandleMainFieldKeyDown","isControlOrFunctionKey","ENTER","isPhone","onItemAction","detail","newKey","context","offset","rowKey","metadata","useMemo","mergeProps","useCollectionRenderer","currentKey","onClick","useSelectSingle","useLoadingIndicatorTimer","baseId","useDisplayValue","labelComp","fieldLabelProps","labelText","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","defaultCollectionRenderer","onPersistCurrentRowKey","onRowAction","selected","currentRowKeyOverride","DefaultList","currentItemVariant","selectionMode","mainContent","ReadonlyTextFieldInput","as","formVariant","ReadonlyTextField","role","onFocusOut","onFocusIn","select_noMatchesFound","select_oneMatchFound","sizePrecision","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","SelectMobileFieldInput","isTablet","shouldShowDropdown","dropdown","Fragment","onDropdownArrowClick","rootRef"],"mappings":"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"}