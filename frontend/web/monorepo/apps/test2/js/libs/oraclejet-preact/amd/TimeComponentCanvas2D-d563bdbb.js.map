{"version":3,"file":"TimeComponentCanvas2D-d563bdbb.js","sources":["../../src/PRIVATE_TimeComponent/TimeComponentLayersStack.tsx","../../src/PRIVATE_TimeComponent/TimeComponentOverlayControlsContainer.tsx","../../src/PRIVATE_TimeComponent/TimeComponentZoomControl.tsx","../../src/PRIVATE_TimeComponent/utils/timeUtils.ts","../../src/PRIVATE_TimeComponent/utils/timeZoomUtils.ts","../../src/PRIVATE_TimeComponent/TimeComponentZoomInControl.tsx","../../src/PRIVATE_TimeComponent/TimeComponentZoomOutControl.tsx","../../src/PRIVATE_TimeComponent/hooks/useDrag.ts","../../src/PRIVATE_TimeComponent/TimeComponentScrollbar.tsx","../../src/PRIVATE_TimeComponent/TimeComponentVerticalGridlines.tsx","../../src/PRIVATE_TimeComponent/TimeComponentHorizontalTimeAxisLabel.tsx","../../src/PRIVATE_TimeComponent/TimeComponentCanvas2D.tsx","../../src/PRIVATE_TimeComponent/TimeComponentHorizontalScrollbar.tsx","../../src/PRIVATE_TimeComponent/TimeComponentHorizontalScrollbarContainer.tsx","../../src/PRIVATE_TimeComponent/TimeComponentHorizontalTimeAxis.tsx","../../src/PRIVATE_TimeComponent/TimeComponentPanZoomLayout.tsx","../../src/PRIVATE_TimeComponent/TimeComponentVerticalScrollbar.tsx","../../src/PRIVATE_TimeComponent/TimeComponentVerticalScrollbarContainer.tsx","../../src/PRIVATE_TimeComponent/TimeComponentZoomControls.tsx","../../src/PRIVATE_TimeComponent/hooks/useWheel.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { toChildArray, type JSX } from 'preact';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport type { BoxAlignmentProps } from '#utils/UNSAFE_interpolations/boxalignment';\nimport { layersStackStyles } from './themes/TimeComponentStyles.css';\nimport { Size } from '#utils/UNSAFE_size';\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'children'>;\ntype Props = IntrinsicProps &\n  Omit<BoxAlignmentProps, 'gap'> & {\n    width?: Size;\n    height?: Size;\n  };\n\nexport function TimeComponentLayersStack({ width, height, children, align, justify }: Props) {\n  const layers = toChildArray(children);\n  return (\n    <div\n      class={layersStackStyles.base}\n      style={{ width, height, alignItems: align, justifyItems: justify }}>\n      {layers.map((layer) => (\n        <div class={layersStackStyles.layer}>{layer}</div>\n      ))}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject, JSX } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { overlayControlsContainerStyles } from './themes/TimeComponentStyles.css';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\n\ntype IntrinsicProps = Pick<UnpackSignals<JSX.IntrinsicElements['div']>, 'children'>;\ntype Props = IntrinsicProps & {\n  innerRef: RefObject<HTMLDivElement>;\n};\n\nexport function TimeComponentOverlayControlsContainer({ innerRef, children }: Props) {\n  const [isVisible, setIsVisible] = useState(false);\n  const onControlsShow = () => setIsVisible(true);\n  const onControlsHide = () => setIsVisible(false);\n  const visibilityProps = { onControlsShow, onControlsHide };\n\n  return (\n    <div\n      ref={innerRef}\n      {...visibilityProps}\n      class={classNames([\n        overlayControlsContainerStyles.base,\n        isVisible && overlayControlsContainerStyles.visible\n      ])}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { BaseButton } from '#UNSAFE_BaseButton';\nimport { ButtonLabelLayout } from '#UNSAFE_ButtonLabelLayout';\nimport { zoomControlStyles } from './themes/TimeComponentStyles.css';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  children?: ComponentChildren;\n  accessibleLabel: string;\n  isDisabled: boolean;\n  onAction: () => void;\n};\n\nexport function TimeComponentZoomControl({\n  children,\n  accessibleLabel,\n  isDisabled = false,\n  onAction\n}: Props) {\n  const {\n    tooltipContent,\n    tooltipProps: { onFocus, onBlur, ...restTooltipProps }\n  } = useTooltip({ text: accessibleLabel });\n\n  // Note that below we ensure the button is not tabbable;\n  // one should use a specific set of keyboard shortcuts for zooming instead.\n  // TODO: Work with UX to confirm the final look, and then switch to use the EmbeddedIconButton.\n  return (\n    <div class={zoomControlStyles.base} {...restTooltipProps}>\n      <BaseButton\n        elementDetails={isDisabled ? undefined : { type: 'span', isFocusable: false }}\n        isDisabled={isDisabled}\n        size=\"sm\"\n        variant=\"outlined\"\n        styling={['min']}\n        onAction={onAction}>\n        <ButtonLabelLayout display={'icons'} startIcon={children} size={'sm'}></ButtonLabelLayout>\n      </BaseButton>\n      {tooltipContent}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { getFormatParse } from '#UNSAFE_IntlDateTime';\nimport { TimeComponentScale } from '../timeComponent.types';\n\nconst DAY = 1000 * 60 * 60 * 24;\n\n/**\n * Returns the timestamp value of the given ISO date string.\n * @param date The ISO date string.\n * @returns The number of milliseconds that has elapsed since the epoch.\n */\nconst parseDate = (date: string) => Date.parse(date);\n\n/**\n * Returns the ISO date string given a date timestamp.\n * @param date The timestamp (number of milliseconds that has elapsed since the epoch.)\n * @returns The corresponding ISO date string.\n */\nconst getISOString = (time: number) => new Date(time).toISOString();\n\n/**\n * Gets the pixel position of the given time in a given viewport.\n * @param time The query time.\n * @param viewportStartTime The viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param width The viewport width.\n * @param isRTL Whether the reading direction is rtl.\n * @returns The pixel position.\n */\nconst getTimePosition = (\n  time: number,\n  viewportStartTime: number,\n  viewportEndTime: number,\n  width: number,\n  isRTL: boolean\n) => {\n  const ltrPos = (width * (time - viewportStartTime)) / (viewportEndTime - viewportStartTime);\n  return isRTL ? width - ltrPos : ltrPos;\n};\n\n/**\n * Gets the time of a given pixel position in a given viewport.\n * @param pos The query position.\n * @param viewportStartTime Thew viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param width The viewport width.\n * @param isRTL Whether the reading direction is rtl.\n * @returns The time.\n */\nconst getPositionTime = (\n  pos: number,\n  viewportStartTime: number,\n  viewportEndTime: number,\n  width: number,\n  isRTL: boolean\n) => {\n  const ltrPos = isRTL ? width - pos : pos;\n  return (ltrPos * (viewportEndTime - viewportStartTime)) / width + viewportStartTime;\n};\n\n/**\n * Gets an appropriate date formatter function for the given scale.\n * @param scale The time scale.\n * @param timeTest A time to invoke the scale on to determine the best date formatter function to return.\n * @returns The date formatter function.\n */\nconst getDefaultDateFormatter = (scale: TimeComponentScale, timeTest: number) => {\n  // This is used for default datatip and acc.\n  // Note that in legacy, the default converter depends on the enum scale of the minor axis.\n  // However, in preact, we don't have enum scales, so we'll instead default based\n  // on the duration of a minor axis scale interval, i.e. if interval < 1 day, use datetime formatter,\n  // otherwise use date formatter. This should yield the same desired behavior if the default importable scales\n  // are used. For custom scales in legacy we just use dateformatter always even when the resolution is in < day.\n  // So arguably, this is a better default behavior than what we have in legacy.\n  //\n  // TODO: Decide whether to change legacy to do this behavior, OR in corepack, to 100%\n  // preserve the legacy behavior for default datatips + custom time scales,\n  // we'll make sure to pass the appropriate default converter to\n  // preact comp's valueformats based on scale (when we support valueformats in the future).\n  const timeTestString = getISOString(timeTest);\n  const intervalStart = parseDate(scale.getPreviousDate(timeTestString));\n  const intervalEnd = parseDate(scale.getNextDate(timeTestString));\n  const duration = intervalEnd - intervalStart;\n  const formatOptions =\n    duration <= DAY\n      ? {\n          dateStyle: 'medium' as const,\n          timeStyle: 'medium' as const,\n          locale: navigator.language\n        }\n      : {\n          dateStyle: 'medium' as const,\n          locale: navigator.language\n        };\n  return getFormatParse(formatOptions).format as (date: string) => string;\n};\n\nexport { parseDate, getISOString, getTimePosition, getPositionTime, getDefaultDateFormatter };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type {\n  OnTimeComponentViewportChange,\n  TimeComponentZoomParameters\n} from '../timeComponent.types';\nimport { PX_FACTOR_PER_LINE } from '../hooks/useWheel';\nimport { getISOString } from './timeUtils';\n\nconst DEFAULT_ZOOM_IN_FACTOR = 1.25;\nconst DEFAULT_ZOOM_OUT_FACTOR = 1 / 1.25;\n\n/**\n * Gets the zoom viewport given the current viewport, zoom location, zoom factor, etc.\n * @param time The zoom location.\n * @param viewportStartTime The viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param startTime The start time.\n * @param endTime The end time.\n * @param zoomFactor The zoom factor.\n * @param minViewportDuration The min viewport duration.\n * @param maxViewportDuration The max viewport duration.\n * @returns The new viewport if the zoom were to happen.\n */\nconst getZoomViewport = (\n  time: number,\n  viewportStartTime: number,\n  viewportEndTime: number,\n  startTime: number,\n  endTime: number,\n  zoomFactor: number,\n  minViewportDuration: number,\n  maxViewportDuration: number\n) => {\n  // Let\n  // t = time point that triggered the zoom\n  // vs = viewport start time\n  // ve = viewport end time\n  // s = start time\n  // e = end time\n  // N = zoom factor, e.g. zoom factor == 2 means the content should \"stretch\"/\"scale\" by 2x.\n  //\n  // Zooming by N means:\n  //     current viewport: (vs, ve)\n  //     current viewport duration: (ve - vs)\n  //     final viewport: (vs + ds, ve - de) for some ds, de\n  //     final viewport duration: (1/N)*(ve - vs) = (ve - de) - (vs + ds)\n  //\n  // Solving for ds and de:\n  // (ve - de) - (vs + ds) = (1/N)*(ve - vs)\n  // (ve - vs) - (de + ds) = (1/N)*(ve - vs)\n  // (de + ds) = (ve - vs) * (1 - 1/N)\n  //\n  // Note that (t - vs) / (ve - vs) = ds / (de + ds). Rearranging and substituting the above:\n  // ds = (de + ds) * (t - vs) / (ve - vs)\n  // ds = (ve - vs) * (1 - 1/N) * (t - vs) / (ve - vs)\n  // ds = (1 - 1/N) * (t - vs)\n  //\n  // de = (ve - vs) * (1 - 1/N) - ds\n  // de = (ve - vs) * (1 - 1/N) - (1 - 1/N) * (t - vs)\n  // de = (1 - 1/N)(ve - vs - t + vs)\n  // de = (1 - 1/N)(ve - t)\n  //\n  // Therefore, assuming NO bounds and constraints:\n  // ds = (1 - 1/N) * (t - vs)\n  // de = (1 - 1/N)(ve - t)\n  // Final viewport after zoom: (vs + ds, ve - de)\n  //\n  // In reality, there is a max amount of zoom in (minViewportDuration),\n  // and a max amount of zoom out (maxViewportDuration),\n  // and the final viewport is constrained by the start and end edges,\n  // so the code below takes these constraints into account:\n\n  const t = time;\n  const vs = viewportStartTime;\n  const ve = viewportEndTime;\n  const s = startTime;\n  const e = endTime;\n  const N = zoomFactor;\n\n  const dur = ve - vs;\n  const dsMax = Math.max(0, dur - minViewportDuration) * ((t - vs) / dur);\n  const deMax = Math.max(0, dur - minViewportDuration) * ((ve - t) / dur);\n  const dsMin = -Math.max(0, maxViewportDuration - dur) * ((t - vs) / dur);\n  const deMin = -Math.max(0, maxViewportDuration - dur) * ((ve - t) / dur);\n\n  const ds = Math.max(dsMin, Math.min(dsMax, (1 - 1 / N) * (t - vs)));\n  const de = Math.max(deMin, Math.min(deMax, (1 - 1 / N) * (ve - t)));\n\n  const sOverShoot = Math.max(0, s - (vs + ds));\n  const eOverShoot = Math.max(0, ve - de - e);\n\n  return {\n    newViewportStartTime: Math.max(s, vs + (ds - eOverShoot)),\n    newViewportEndTime: Math.min(e, ve - (de - sOverShoot))\n  };\n};\n\n/**\n * Gets the best zoom order index given a viewport.\n * @param viewportStartTime The viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param zoomOrderViewDurationThresholds The computed zoom order viewport duration thresholds.\n * @returns\n */\nconst getZoomOrderIndex = (\n  viewportStartTime: number,\n  viewportEndTime: number,\n  zoomOrderViewDurationThresholds: number[]\n) => {\n  const duration = viewportEndTime - viewportStartTime;\n  const nextIndex = [...zoomOrderViewDurationThresholds, -Infinity].findIndex(\n    (threshold) => duration > threshold\n  );\n  return nextIndex - 1;\n};\n\n/**\n * Gets the best time axes scales given the viewport.\n * @param viewportStartTime The viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param zoomOrderViewDurationThresholds The computed zoom order viewport duration thresholds.\n * @param minorAxisZoomOrder The minor axis zoom order.\n * @param minorAxisZoomOrderIndex The current minor axis zoom order index.\n * @param majorAxisZoomOrder The major axis zoom order.\n * @param majorAxisZoomOrderIndex The current major axis zoom order index.\n * @returns The best time axes scales given the viewport.\n */\nconst getZoomScales = (\n  viewportStartTime: number,\n  viewportEndTime: number,\n  zoomOrderViewDurationThresholds: number[],\n  minorAxisZoomOrder: TimeComponentZoomParameters['minorAxisZoomOrder'],\n  minorAxisZoomOrderIndex: number,\n  majorAxisZoomOrder?: TimeComponentZoomParameters['majorAxisZoomOrder'],\n  majorAxisZoomOrderIndex?: number\n) => {\n  const idealMinorZoomOrderIndex = getZoomOrderIndex(\n    viewportStartTime,\n    viewportEndTime,\n    zoomOrderViewDurationThresholds\n  );\n  let indexOffset = 0;\n  if (majorAxisZoomOrder === undefined) {\n    indexOffset = idealMinorZoomOrderIndex - minorAxisZoomOrderIndex;\n  } else if (idealMinorZoomOrderIndex >= minorAxisZoomOrderIndex) {\n    indexOffset = Math.min(\n      idealMinorZoomOrderIndex - minorAxisZoomOrderIndex,\n      majorAxisZoomOrder.length - 1 - majorAxisZoomOrderIndex!\n    );\n  } else {\n    indexOffset = -Math.min(\n      minorAxisZoomOrderIndex - idealMinorZoomOrderIndex,\n      majorAxisZoomOrderIndex!\n    );\n  }\n  return {\n    minorAxisScale: minorAxisZoomOrder[minorAxisZoomOrderIndex + indexOffset],\n    majorAxisScale: majorAxisZoomOrder && majorAxisZoomOrder[majorAxisZoomOrderIndex! + indexOffset]\n  };\n};\n\n/**\n * Gets the equivalent zoom factor from a zoom gesture value (e.g. wheel delta value).\n * @param delta The zoom gesture value.\n * @returns The corresponding zoom factor to apply.\n */\nconst getGestureZoomFactor = (delta: number) => {\n  const deltaVal = Math.abs(delta);\n  const deltaSign = Math.sign(delta);\n  // Formula is adopted from TimeComponent Toolkit\n  // But in toolkit we use the deprecated WheelEvent.wheelDelta(Y) instead of WheelEvent.delta(Y)\n  // We use the latter here, but the two values are a bit different and it's unclear how they relate.\n  // According to MDN wheelDelta is platform dependent but generally represents mouse wheel turns,\n  // and in our case delta represent pixels.\n  // So the constants in the formula below are tweaked based on \"feel\"\n  // (e.g., changed from 0.02 toolkit value to 0.05, and approximating wheelDelta as delta/(px per line)).\n  return ((deltaVal / PX_FACTOR_PER_LINE) * 0.05 + 1) ** deltaSign;\n};\n\n/**\n * Performs a zoom, by invoking a viewport change callback with the new viewport.\n * @param time The zoom location.\n * @param viewportStartTime The viewport start time.\n * @param viewportEndTime The viewport end time.\n * @param startTime The start time.\n * @param endTime The end time.\n * @param zoomFactor The zoom factor.\n * @param minZoomViewportDuration The min viewport duration.\n * @param maxZoomViewportDuration The max viewport duration.\n * @param zoomOrderViewDurationThresholds The computed zoom order viewport duration thresholds.\n * @param minorAxisZoomOrder The major axis zoom order.\n * @param minorAxisZoomOrderIndex The current minor axis zoom order index.\n * @param majorAxisZoomOrder The major axis zoom order.\n * @param majorAxisZoomOrderIndex The current major axis zoom order index.\n * @param onViewportChange The viewport change callback.\n * @returns The new viewport, and whether the viewport actually changed.\n */\nconst zoomTime = (\n  time: number,\n  viewportStartTime: number,\n  viewportEndTime: number,\n  startTime: number,\n  endTime: number,\n  zoomFactor: number,\n  minZoomViewportDuration: number,\n  maxZoomViewportDuration: number,\n  zoomOrderViewDurationThresholds: number[],\n  minorAxisZoomOrder: TimeComponentZoomParameters['minorAxisZoomOrder'],\n  minorAxisZoomOrderIndex: number,\n  majorAxisZoomOrder?: TimeComponentZoomParameters['majorAxisZoomOrder'],\n  majorAxisZoomOrderIndex?: number,\n  onViewportChange?: OnTimeComponentViewportChange\n) => {\n  const { newViewportStartTime, newViewportEndTime } = getZoomViewport(\n    time,\n    viewportStartTime,\n    viewportEndTime,\n    startTime,\n    endTime,\n    zoomFactor,\n    minZoomViewportDuration,\n    maxZoomViewportDuration\n  );\n  const { minorAxisScale, majorAxisScale } = getZoomScales(\n    newViewportStartTime,\n    newViewportEndTime,\n    zoomOrderViewDurationThresholds,\n    minorAxisZoomOrder,\n    minorAxisZoomOrderIndex,\n    majorAxisZoomOrder,\n    majorAxisZoomOrderIndex\n  );\n  const newViewport = {\n    viewportStartTime: newViewportStartTime,\n    viewportEndTime: newViewportEndTime,\n    majorAxisScale,\n    minorAxisScale\n  };\n  const isViewportChanged =\n    newViewportStartTime !== viewportStartTime || newViewportEndTime !== viewportEndTime;\n\n  if (onViewportChange && isViewportChanged) {\n    onViewportChange({\n      viewportStart: getISOString(newViewportStartTime),\n      viewportEnd: getISOString(newViewportEndTime),\n      majorAxisScale,\n      minorAxisScale\n    });\n  }\n\n  return { newViewport, isViewportChanged };\n};\n\nexport { zoomTime, getGestureZoomFactor, DEFAULT_ZOOM_IN_FACTOR, DEFAULT_ZOOM_OUT_FACTOR };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TimeComponentZoomControl } from './TimeComponentZoomControl';\nimport { PlusIcon } from '#PRIVATE_ThemedIcons/PlusIcon';\nimport type {\n  OnTimeComponentViewportChange,\n  TimeComponentZoomParameters\n} from './timeComponent.types';\nimport { getISOString } from './utils/timeUtils';\nimport { zoomTime, DEFAULT_ZOOM_IN_FACTOR } from './utils/timeZoomUtils';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\n\ntype Props = {\n  zoomFactor?: number;\n  startTime: number;\n  endTime: number;\n  viewportStartTime: number;\n  viewportEndTime: number;\n  majorAxisZoomOrder?: TimeComponentZoomParameters['majorAxisZoomOrder'];\n  majorAxisZoomOrderIndex?: TimeComponentZoomParameters['majorAxisZoomOrderIndex'];\n  minorAxisZoomOrder: TimeComponentZoomParameters['minorAxisZoomOrder'];\n  minorAxisZoomOrderIndex: TimeComponentZoomParameters['minorAxisZoomOrderIndex'];\n  zoomOrderViewDurationThresholds: ReturnType<\n    TimeComponentZoomParameters['getZoomOrderViewDurationThresholds']\n  >;\n  minZoomViewportDuration: TimeComponentZoomParameters['minZoomViewportDuration'];\n  maxZoomViewportDuration: TimeComponentZoomParameters['maxZoomViewportDuration'];\n  onViewportChange?: OnTimeComponentViewportChange;\n};\n\nexport function TimeComponentZoomInControl({\n  zoomFactor = DEFAULT_ZOOM_IN_FACTOR,\n  startTime,\n  endTime,\n  viewportStartTime,\n  viewportEndTime,\n  majorAxisZoomOrder,\n  majorAxisZoomOrderIndex,\n  minorAxisZoomOrder,\n  minorAxisZoomOrderIndex,\n  zoomOrderViewDurationThresholds,\n  minZoomViewportDuration,\n  maxZoomViewportDuration,\n  onViewportChange\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const accessibleLabel = translations.timeComponent_tooltipZoomIn();\n\n  const viewportCenter = viewportStartTime + (viewportEndTime - viewportStartTime) / 2;\n  const { newViewport, isViewportChanged } = zoomTime(\n    viewportCenter,\n    viewportStartTime,\n    viewportEndTime,\n    startTime,\n    endTime,\n    zoomFactor,\n    minZoomViewportDuration,\n    maxZoomViewportDuration,\n    zoomOrderViewDurationThresholds,\n    minorAxisZoomOrder,\n    minorAxisZoomOrderIndex,\n    majorAxisZoomOrder,\n    majorAxisZoomOrderIndex\n  );\n  const isDisabled = !isViewportChanged;\n\n  const onAction = () => {\n    onViewportChange?.({\n      viewportStart: getISOString(newViewport.viewportStartTime),\n      viewportEnd: getISOString(newViewport.viewportEndTime),\n      majorAxisScale: newViewport.majorAxisScale,\n      minorAxisScale: newViewport.minorAxisScale\n    });\n  };\n\n  return (\n    <TimeComponentZoomControl\n      accessibleLabel={accessibleLabel}\n      isDisabled={isDisabled}\n      onAction={onAction}>\n      <PlusIcon size=\"4x\" />\n    </TimeComponentZoomControl>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TimeComponentZoomControl } from './TimeComponentZoomControl';\nimport { MinusIcon } from '#PRIVATE_ThemedIcons/MinusIcon';\nimport type {\n  OnTimeComponentViewportChange,\n  TimeComponentZoomParameters\n} from './timeComponent.types';\nimport { getISOString } from './utils/timeUtils';\nimport { zoomTime, DEFAULT_ZOOM_OUT_FACTOR } from './utils/timeZoomUtils';\nimport { useTranslationBundle } from '#hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '#resources/nls/bundle';\n\ntype Props = {\n  zoomFactor?: number;\n  startTime: number;\n  endTime: number;\n  viewportStartTime: number;\n  viewportEndTime: number;\n  majorAxisZoomOrder?: TimeComponentZoomParameters['majorAxisZoomOrder'];\n  majorAxisZoomOrderIndex?: TimeComponentZoomParameters['majorAxisZoomOrderIndex'];\n  minorAxisZoomOrder: TimeComponentZoomParameters['minorAxisZoomOrder'];\n  minorAxisZoomOrderIndex: TimeComponentZoomParameters['minorAxisZoomOrderIndex'];\n  zoomOrderViewDurationThresholds: ReturnType<\n    TimeComponentZoomParameters['getZoomOrderViewDurationThresholds']\n  >;\n  minZoomViewportDuration: TimeComponentZoomParameters['minZoomViewportDuration'];\n  maxZoomViewportDuration: TimeComponentZoomParameters['maxZoomViewportDuration'];\n  onViewportChange?: OnTimeComponentViewportChange;\n};\n\nexport function TimeComponentZoomOutControl({\n  zoomFactor = DEFAULT_ZOOM_OUT_FACTOR,\n  startTime,\n  endTime,\n  viewportStartTime,\n  viewportEndTime,\n  majorAxisZoomOrder,\n  majorAxisZoomOrderIndex,\n  minorAxisZoomOrder,\n  minorAxisZoomOrderIndex,\n  zoomOrderViewDurationThresholds,\n  minZoomViewportDuration,\n  maxZoomViewportDuration,\n  onViewportChange\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const accessibleLabel = translations.timeComponent_tooltipZoomOut();\n\n  const viewportCenter = viewportStartTime + (viewportEndTime - viewportStartTime) / 2;\n  const { newViewport, isViewportChanged } = zoomTime(\n    viewportCenter,\n    viewportStartTime,\n    viewportEndTime,\n    startTime,\n    endTime,\n    zoomFactor,\n    minZoomViewportDuration,\n    maxZoomViewportDuration,\n    zoomOrderViewDurationThresholds,\n    minorAxisZoomOrder,\n    minorAxisZoomOrderIndex,\n    majorAxisZoomOrder,\n    majorAxisZoomOrderIndex\n  );\n  const isDisabled = !isViewportChanged;\n\n  const onAction = () => {\n    onViewportChange?.({\n      viewportStart: getISOString(newViewport.viewportStartTime),\n      viewportEnd: getISOString(newViewport.viewportEndTime),\n      majorAxisScale: newViewport.majorAxisScale,\n      minorAxisScale: newViewport.minorAxisScale\n    });\n  };\n\n  return (\n    <TimeComponentZoomControl\n      accessibleLabel={accessibleLabel}\n      isDisabled={isDisabled}\n      onAction={onAction}>\n      <MinusIcon size=\"4x\" />\n    </TimeComponentZoomControl>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { usePointerGesture } from './usePointerGesture';\n\ntype DraggableRegion = {\n  xMin: number;\n  xMax: number;\n  yMin: number;\n  yMax: number;\n};\n\ntype DragDetail = {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  regionOffsetX: number;\n  regionOffsetY: number;\n  originalEvent: PointerEvent;\n};\n\ntype UseDragOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  draggableRegion?: DraggableRegion;\n  onDragStart?: (detail: Omit<DragDetail, 'dx' | 'dy'>) => void;\n  onDragMove?: (detail: DragDetail) => void;\n  onDragEnd?: (detail: DragDetail) => void;\n  isDisabled?: boolean;\n};\n\nconst inDraggableRegion = (x: number, y: number, region?: DraggableRegion) => {\n  if (!region) return true;\n  const { xMin, xMax, yMin, yMax } = region;\n  return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n};\n\nconst getRegionOffset = (x: number, y: number, region?: DraggableRegion) => {\n  if (!region) return { regionOffsetX: x, regionOffsetY: y };\n  return { regionOffsetX: x - region.xMin, regionOffsetY: y - region.yMin };\n};\n\n/**\n * Hook that enables and handles drag gestures.\n */\nconst useDrag = ({\n  captureTargetRef,\n  draggableRegion,\n  onDragStart,\n  onDragMove,\n  onDragEnd,\n  isDisabled = false\n}: UseDragOptions) => {\n  const inactiveState = { isDragging: false, x0: -1, y0: -1, regionOffsetX: -1, regionOffsetY: -1 };\n  const dragState = useRef(inactiveState);\n\n  const handlePointerEvent = (e: PointerEvent, cb?: (detail: DragDetail) => void) => {\n    const { isDragging, x0, y0, regionOffsetX, regionOffsetY } = dragState.current;\n    if (!isDragging) return;\n    const x = e.offsetX;\n    const y = e.offsetY;\n    cb && cb({ x, y, dx: x - x0, dy: y - y0, regionOffsetX, regionOffsetY, originalEvent: e });\n  };\n\n  const dragProps = usePointerGesture({\n    captureTargetRef,\n    numPointers: 1, // Only allow 1 pointer dragging\n    onExtraneousPointerDown: () => {\n      dragState.current = inactiveState;\n    },\n    onPointerGestureDown: ({ pointers: [e] }) => {\n      const x = e.offsetX;\n      const y = e.offsetY;\n      if (e.button !== 0 || !inDraggableRegion(x, y, draggableRegion)) return;\n      const { regionOffsetX, regionOffsetY } = getRegionOffset(x, y, draggableRegion);\n      dragState.current = { isDragging: true, x0: x, y0: y, regionOffsetX, regionOffsetY };\n      // captureTargetRef.current!.setPointerCapture(e.pointerId);\n      onDragStart && onDragStart({ x, y, regionOffsetX, regionOffsetY, originalEvent: e });\n    },\n    onPointerGestureMove: ({ pointers: [e] }) => {\n      handlePointerEvent(e, onDragMove);\n    },\n    onPointerGestureEnd: ({ pointers: [e] }) => {\n      handlePointerEvent(e, onDragEnd);\n      dragState.current = inactiveState;\n    }\n  });\n\n  return isDisabled ? {} : dragProps;\n};\n\nexport { useDrag };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useRef } from 'preact/hooks';\nimport { useDrag } from './hooks/useDrag';\nimport type {\n  horizontalScrollbarStyles,\n  verticalScrollbarStyles\n} from './themes/TimeComponentStyles.css';\n\ntype HorizontalThumbProps = {\n  thumbWidth: number;\n  thumbHeight?: undefined;\n  thumbTop?: undefined;\n  thumbLeft?: number;\n  thumbRight?: number;\n  styles: typeof horizontalScrollbarStyles;\n};\n\ntype VerticalThumbProps = {\n  thumbWidth?: undefined;\n  thumbHeight: number;\n  thumbTop: number;\n  thumbLeft?: undefined;\n  thumbRight?: undefined;\n  styles: typeof verticalScrollbarStyles;\n};\n\ntype Props = (HorizontalThumbProps | VerticalThumbProps) & {\n  draggableRegion: { xMin: number; xMax: number; yMin: number; yMax: number };\n  processDragRangeXChange?: (x: number, thumbOffsetX: number) => void;\n  processDragRangeYChange?: (y: number, thumbOffsetY: number) => void;\n  processClickRangeXChange?: (x: number) => void;\n  processClickRangeYChange?: (y: number) => void;\n  width: number;\n  height: number;\n};\n\nexport function TimeComponentScrollbar({\n  thumbWidth,\n  thumbHeight,\n  thumbTop,\n  thumbLeft,\n  thumbRight,\n  draggableRegion,\n  processDragRangeXChange,\n  processDragRangeYChange,\n  processClickRangeXChange,\n  processClickRangeYChange,\n  styles,\n  width,\n  height\n}: Props) {\n  // Scrollbar is draggable to change the range\n  const ref = useRef<HTMLDivElement>(null);\n  const dragProps = useDrag({\n    captureTargetRef: ref,\n    draggableRegion,\n    onDragMove: ({ x, y, regionOffsetX, regionOffsetY }) => {\n      processDragRangeXChange?.(x, regionOffsetX);\n      processDragRangeYChange?.(y, regionOffsetY);\n    }\n  });\n\n  // Scrollbar is also clickable to jump to an arbitrary range\n  const handleClick = (e: MouseEvent) => {\n    const x = e.offsetX;\n    const y = e.offsetY;\n    const { xMin, xMax, yMin, yMax } = draggableRegion;\n    const inDraggableRegion = x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    if (inDraggableRegion) return;\n    processClickRangeXChange?.(x);\n    processClickRangeYChange?.(y);\n  };\n\n  return (\n    <div\n      ref={ref}\n      class={styles.container}\n      style={{ width, height }}\n      onClick={handleClick}\n      {...dragProps}>\n      <div class={styles.track}>\n        <div\n          class={styles.thumb}\n          style={{\n            width: thumbWidth,\n            height: thumbHeight,\n            top: thumbTop,\n            left: thumbLeft,\n            right: thumbRight\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { verticalGridlinesStyles } from './themes/TimeComponentStyles.css';\n\ntype Props = {\n  width: number;\n  height: number;\n  positions: number[];\n  variant: 'major' | 'minor';\n};\n\nexport function TimeComponentVerticalGridlines({ width, height, positions, variant }: Props) {\n  const cmd = positions.map((p) => `M${p},0 V${height}`).join(' ');\n  return (\n    <svg width={width} height={height}>\n      <path class={verticalGridlinesStyles[variant]} d={cmd} />\n    </svg>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useTooltip } from '#hooks/UNSAFE_useTooltip';\nimport { Text } from '#UNSAFE_Text';\nimport { timeAxisLabelsStyles } from './themes/TimeComponentStyles.css';\n\ntype Props = {\n  x: number;\n  y: number;\n  width: number;\n  label: string;\n  labelPosition: 'start' | 'center';\n  font: { fontSize?: string; fontWeight?: string };\n  isTruncated: boolean;\n  isStartIntervalTruncated: boolean;\n  isRTL: boolean;\n};\n\nexport function TimeComponentHorizontalTimeAxisLabel({\n  x,\n  y,\n  width,\n  label,\n  font,\n  labelPosition,\n  isTruncated,\n  isStartIntervalTruncated,\n  isRTL\n}: Props) {\n  const {\n    tooltipContent,\n    tooltipProps: { onFocus, onBlur, ...restTooltipProps }\n  } = useTooltip({ text: label, isDisabled: !isTruncated });\n\n  const textAlign = labelPosition === 'center' ? 'center' : undefined;\n\n  // If start truncated, we want the ellipsis to be the prefix rather than suffix in ltr,\n  // so a trick is to locally set the direction to rtl\n  const direction = isStartIntervalTruncated && isTruncated ? (isRTL ? 'ltr' : 'rtl') : undefined;\n\n  return (\n    <div\n      {...restTooltipProps}\n      aria-hidden=\"true\"\n      class={classNames([\n        timeAxisLabelsStyles.label,\n        isTruncated && timeAxisLabelsStyles.labelTruncated\n      ])}\n      style={{ left: x, top: y, width, textAlign, direction, ...font }}>\n      <Text variant=\"primary\" truncation=\"ellipsis\" size=\"inherit\" weight=\"inherit\">\n        {label}\n      </Text>\n      {tooltipContent}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useLayoutEffect, useRef } from 'preact/hooks';\n\ntype Props = {\n  width: number;\n  height: number;\n  draw: (ctx: CanvasRenderingContext2D) => void;\n};\n\nexport function TimeComponentCanvas2D({ width, height, draw }: Props) {\n  const ref = useRef<HTMLCanvasElement>(null);\n\n  useLayoutEffect(() => {\n    const canvas = ref.current!;\n    const ctx = canvas.getContext('2d')!;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    const scale = window.devicePixelRatio;\n    canvas.width = Math.floor(width * scale);\n    canvas.height = Math.floor(height * scale);\n    ctx.scale(scale, scale);\n  }, [width, height]);\n\n  useLayoutEffect(() => {\n    const canvas = ref.current!;\n    const ctx = canvas.getContext('2d')!;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    draw(ctx);\n  }, [width, height, draw]);\n\n  return <canvas ref={ref}></canvas>;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useRef } from 'preact/hooks';\nimport { horizontalScrollbarStyles } from './themes/TimeComponentStyles.css';\nimport { TimeComponentScrollbar } from './TimeComponentScrollbar';\n\ntype Props = {\n  thumbWidth: number;\n  thumbLeft?: number;\n  thumbRight?: number;\n  draggableRegion: { xMin: number; xMax: number; yMin: number; yMax: number };\n  getNewRange: (newThumbLeft: number) => { newMin: number; newMax: number };\n  onRangeChange: (newMin: number, newMax: number) => void;\n  width: number;\n  height: number;\n};\n\nexport function TimeComponentHorizontalScrollbar({ getNewRange, onRangeChange, ...props }: Props) {\n  const prevRange = useRef({ min: 0, max: 0 });\n  const processRange = (newMin: number, newMax: number) => {\n    const { min: prevMin, max: prevMax } = prevRange.current;\n    const isRangeChanged = newMin !== prevMin || newMax !== prevMax;\n    isRangeChanged && onRangeChange(newMin, newMax);\n    prevRange.current = { min: newMin, max: newMax };\n  };\n\n  const processDragRangeXChange = (x: number, thumbOffsetX: number) => {\n    const { newMin, newMax } = getNewRange(Math.max(0, x - thumbOffsetX));\n    processRange(newMin, newMax);\n  };\n\n  const processClickRangeXChange = (x: number) => {\n    const { xMin, xMax } = props.draggableRegion;\n    const halfThumbWidth = (xMax - xMin) / 2;\n    const { newMin, newMax } = getNewRange(Math.max(0, x - halfThumbWidth));\n    processRange(newMin, newMax);\n  };\n\n  return (\n    <TimeComponentScrollbar\n      {...props}\n      processDragRangeXChange={processDragRangeXChange}\n      processClickRangeXChange={processClickRangeXChange}\n      styles={horizontalScrollbarStyles}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { horizontalScrollbarStyles } from './themes/TimeComponentStyles.css';\nimport type { getResolvedHorizontalScrollbarLayout } from './utils/scrollbarLayoutUtils';\n\ntype GetLayout = ReturnType<typeof getResolvedHorizontalScrollbarLayout>;\ntype OnRangeChange = (newMin: number, newMax: number) => void;\ntype Layout = ReturnType<GetLayout> & { onRangeChange: OnRangeChange } & {\n  width: number;\n  height: number;\n};\n\ntype Props = {\n  getLayout: GetLayout;\n  onRangeChange: OnRangeChange;\n  children: (layout: Layout) => ComponentChildren;\n};\n\nexport function TimeComponentHorizontalScrollbarContainer({\n  getLayout,\n  onRangeChange,\n  children\n}: Props) {\n  return (\n    <div class={horizontalScrollbarStyles.base}>\n      <TrackResizeContainer width=\"100%\" height=\"100%\">\n        {(width, height) => children({ ...getLayout(width), onRangeChange, width, height })}\n      </TrackResizeContainer>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TimeComponentLayersStack } from './TimeComponentLayersStack';\nimport { TimeComponentVerticalGridlines } from './TimeComponentVerticalGridlines';\nimport { TimeComponentHorizontalTimeAxisLabel } from './TimeComponentHorizontalTimeAxisLabel';\nimport { timeAxisLabelsStyles } from './themes/TimeComponentStyles.css';\n\ntype Props = {\n  font: { fontSize?: string; fontWeight?: string };\n  labelPosition: 'start' | 'center';\n  labels: string[];\n  labelTicks: number[];\n  labelPositions: number[];\n  isLabelTruncated: boolean[];\n  isIntervalStartTruncated: boolean;\n  intervalWidths: number[];\n  majorGridTicksPos?: number[];\n  minorGridTicksPos?: number[];\n  isRTL: boolean;\n  width: number;\n  height: number;\n};\n\nexport function TimeComponentHorizontalTimeAxis({\n  font,\n  labelPosition,\n  labels,\n  labelTicks,\n  labelPositions,\n  isLabelTruncated,\n  isIntervalStartTruncated,\n  intervalWidths,\n  majorGridTicksPos,\n  minorGridTicksPos,\n  isRTL,\n  width,\n  height\n}: Props) {\n  return (\n    <TimeComponentLayersStack width={`${width}px`} height={`${height}px`}>\n      <div class={timeAxisLabelsStyles.base}>\n        {labels.map((text, i) => (\n          <TimeComponentHorizontalTimeAxisLabel\n            key={labelTicks[i]}\n            font={font}\n            label={text}\n            labelPosition={labelPosition}\n            x={labelPositions[i]}\n            y={0}\n            width={intervalWidths[i]}\n            isTruncated={isLabelTruncated[i]}\n            isStartIntervalTruncated={i === 0 ? isIntervalStartTruncated : false}\n            isRTL={isRTL}\n          />\n        ))}\n      </div>\n      {minorGridTicksPos && (\n        <TimeComponentVerticalGridlines\n          width={width}\n          height={height}\n          positions={minorGridTicksPos}\n          variant=\"minor\"\n        />\n      )}\n      {majorGridTicksPos && (\n        <TimeComponentVerticalGridlines\n          width={width}\n          height={height}\n          positions={majorGridTicksPos}\n          variant=\"major\"\n        />\n      )}\n    </TimeComponentLayersStack>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentChildren, RefObject } from 'preact';\nimport { panZoomLayoutStyles } from './themes/TimeComponentStyles.css';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { TimeComponentLayersStack } from './TimeComponentLayersStack';\nimport { TimeComponentOverlayControlsContainer } from './TimeComponentOverlayControlsContainer';\nimport { Size } from '#utils/UNSAFE_size';\n\ntype Props = {\n  overlayControlsContainerRef: RefObject<HTMLDivElement>;\n  width?: Size;\n  height?: Size;\n  overlayControls?: ComponentChildren;\n  verticalControl?: ComponentChildren;\n  verticalControlTopGap?: string;\n  verticalControlBottomGap?: string;\n  verticalControlStartGap?: boolean;\n  horizontalControl?: ComponentChildren;\n  horizontalControlStartGap?: string;\n  horizontalControlEndGap?: string;\n  horizontalControlTopGap?: boolean;\n  vis: ComponentChildren;\n};\n\nexport function TimeComponentPanZoomLayout({\n  overlayControlsContainerRef,\n  width,\n  height,\n  overlayControls,\n  verticalControl,\n  verticalControlTopGap = '0',\n  verticalControlBottomGap = '0',\n  verticalControlStartGap = true,\n  horizontalControl,\n  horizontalControlStartGap = '0',\n  horizontalControlEndGap = '0',\n  horizontalControlTopGap = true,\n  vis\n}: Props) {\n  return (\n    <div\n      class={panZoomLayoutStyles.base}\n      style={{\n        gridTemplateColumns: `${horizontalControlStartGap} minmax(0, 1fr) ${horizontalControlEndGap} auto`,\n        gridTemplateRows: `${verticalControlTopGap} minmax(0, 1fr) ${verticalControlBottomGap} auto`,\n        width,\n        height\n      }}>\n      <div\n        class={classNames([\n          panZoomLayoutStyles.verticalControl,\n          verticalControlStartGap && panZoomLayoutStyles.verticalControlWithSpacing\n        ])}>\n        {verticalControl}\n      </div>\n      <div\n        class={classNames([\n          panZoomLayoutStyles.horizontalControl,\n          horizontalControlTopGap && panZoomLayoutStyles.horizontalControlWithSpacing\n        ])}>\n        {horizontalControl}\n      </div>\n      <div class={panZoomLayoutStyles.vis}>\n        {overlayControls ? (\n          <TimeComponentLayersStack>\n            {vis}\n            <TimeComponentOverlayControlsContainer innerRef={overlayControlsContainerRef}>\n              {overlayControls}\n            </TimeComponentOverlayControlsContainer>\n          </TimeComponentLayersStack>\n        ) : (\n          vis\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useRef } from 'preact/hooks';\nimport { verticalScrollbarStyles } from './themes/TimeComponentStyles.css';\nimport { TimeComponentScrollbar } from './TimeComponentScrollbar';\n\ntype Props = {\n  thumbHeight: number;\n  thumbTop: number;\n  draggableRegion: { xMin: number; xMax: number; yMin: number; yMax: number };\n  getNewRange: (newThumbTop: number) => { newMin: number; newMax: number };\n  onRangeChange: (newMin: number, newMax: number) => void;\n  width: number;\n  height: number;\n};\n\nexport function TimeComponentVerticalScrollbar({ getNewRange, onRangeChange, ...props }: Props) {\n  const prevRange = useRef({ min: 0, max: 0 });\n  const processRange = (newMin: number, newMax: number) => {\n    const { min: prevMin, max: prevMax } = prevRange.current;\n    const isRangeChanged = newMin !== prevMin || newMax !== prevMax;\n    isRangeChanged && onRangeChange(newMin, newMax);\n    prevRange.current = { min: newMin, max: newMax };\n  };\n\n  const processDragRangeYChange = (y: number, thumbOffsetY: number) => {\n    const { newMin, newMax } = getNewRange(Math.max(0, y - thumbOffsetY));\n    processRange(newMin, newMax);\n  };\n\n  const processClickRangeYChange = (y: number) => {\n    const { yMin, yMax } = props.draggableRegion;\n    const halfThumbWidth = (yMax - yMin) / 2;\n    const { newMin, newMax } = getNewRange(Math.max(0, y - halfThumbWidth));\n    processRange(newMin, newMax);\n  };\n\n  return (\n    <TimeComponentScrollbar\n      {...props}\n      processDragRangeYChange={processDragRangeYChange}\n      processClickRangeYChange={processClickRangeYChange}\n      styles={verticalScrollbarStyles}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { verticalScrollbarStyles } from './themes/TimeComponentStyles.css';\nimport type { getResolvedVerticalScrollbarLayout } from './utils/scrollbarLayoutUtils';\n\ntype GetLayout = ReturnType<typeof getResolvedVerticalScrollbarLayout>;\ntype OnRangeChange = (newMin: number, newMax: number) => void;\ntype Layout = ReturnType<GetLayout> & { onRangeChange: OnRangeChange } & {\n  width: number;\n  height: number;\n};\n\ntype Props = {\n  getLayout: GetLayout;\n  onRangeChange: OnRangeChange;\n  children: (layout: Layout) => ComponentChildren;\n};\n\nexport function TimeComponentVerticalScrollbarContainer({\n  getLayout,\n  onRangeChange,\n  children\n}: Props) {\n  return (\n    <div class={verticalScrollbarStyles.base}>\n      <TrackResizeContainer width=\"100%\" height=\"100%\">\n        {(width, height) => children({ ...getLayout(height), onRangeChange, width, height })}\n      </TrackResizeContainer>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { Flex } from '#UNSAFE_Flex';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { zoomControlsLayoutStyles } from './themes/TimeComponentStyles.css';\nimport { TimeComponentZoomInControl } from './TimeComponentZoomInControl';\nimport { TimeComponentZoomOutControl } from './TimeComponentZoomOutControl';\nimport type {\n  OnTimeComponentViewportChange,\n  TimeComponentZoomParameters\n} from './timeComponent.types';\n\ntype Props = {\n  position?: 'topStart' | 'topEnd' | 'bottomStart' | 'bottomEnd';\n  zoomParameters: TimeComponentZoomParameters;\n  onViewportChange?: OnTimeComponentViewportChange;\n};\n\nexport function TimeComponentZoomControls({\n  position = 'topEnd',\n  zoomParameters,\n  onViewportChange\n}: Props) {\n  return (\n    <TrackResizeContainer width=\"100%\" height=\"100%\">\n      {(width, _) => {\n        const { getZoomOrderViewDurationThresholds, ...restZoomParameters } = zoomParameters;\n        const zoomOrderViewDurationThresholds = getZoomOrderViewDurationThresholds(width);\n        return (\n          <div\n            class={classNames([zoomControlsLayoutStyles.base, zoomControlsLayoutStyles[position]])}>\n            <div class={zoomControlsLayoutStyles.controls}>\n              <Flex direction=\"column\" gap=\"2.25x\">\n                <TimeComponentZoomInControl\n                  {...restZoomParameters}\n                  zoomOrderViewDurationThresholds={zoomOrderViewDurationThresholds}\n                  onViewportChange={onViewportChange}\n                />\n                <TimeComponentZoomOutControl\n                  {...restZoomParameters}\n                  zoomOrderViewDurationThresholds={zoomOrderViewDurationThresholds}\n                  onViewportChange={onViewportChange}\n                />\n              </Flex>\n            </div>\n          </div>\n        );\n      }}\n    </TrackResizeContainer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\ntype WheelDetail = {\n  x: number;\n  y: number;\n  deltaX: number;\n  deltaY: number;\n  ctrlKey: boolean;\n};\n\ntype UseWheelOptions = {\n  onWheel: (detail: WheelDetail) => void;\n  preventDefault?: boolean;\n  isDisabled?: boolean;\n};\n\nconst PX_FACTOR_PER_LINE = 15; // Value used in Toolkit\nconst PX_FACTOR_PER_PAGE = 40; // Value copied from datagrid; this is not handled in Toolkit\n\nconst getNormalizedDelta = (e: WheelEvent) => {\n  const { deltaX, deltaY, deltaMode } = e;\n\n  switch (deltaMode) {\n    case e.DOM_DELTA_PIXEL:\n      return { deltaX: -deltaX, deltaY: -deltaY };\n    case e.DOM_DELTA_LINE:\n      return { deltaX: -deltaX * PX_FACTOR_PER_LINE, deltaY: -deltaY * PX_FACTOR_PER_LINE };\n    case e.DOM_DELTA_PAGE:\n      return { deltaX: -deltaX * PX_FACTOR_PER_PAGE, deltaY: -deltaY * PX_FACTOR_PER_PAGE };\n    default:\n      return { deltaX: -deltaX, deltaY: -deltaY };\n  }\n};\n\n/**\n * Hook that enables and handles wheel gestures.\n */\nconst useWheel = ({\n  onWheel: onWheelCallback,\n  preventDefault = true,\n  isDisabled = false\n}: UseWheelOptions) => {\n  const onWheel = (e: WheelEvent) => {\n    const { deltaX, deltaY } = getNormalizedDelta(e);\n    if (preventDefault) e.preventDefault();\n    onWheelCallback({\n      x: e.offsetX,\n      y: e.offsetY,\n      deltaX,\n      deltaY,\n      ctrlKey: e.ctrlKey || e.metaKey\n    });\n  };\n  return isDisabled ? {} : { onWheel };\n};\n\nexport { useWheel, PX_FACTOR_PER_LINE };\n"],"names":["TimeComponentLayersStack","width","height","children","align","justify","layers","toChildArray","_jsx","class","layersStackStyles","base","style","alignItems","justifyItems","map","layer","jsx","TimeComponentOverlayControlsContainer","innerRef","isVisible","setIsVisible","useState","visibilityProps","onControlsShow","onControlsHide","ref","classNames","overlayControlsContainerStyles","visible","TimeComponentZoomControl","accessibleLabel","isDisabled","onAction","tooltipContent","tooltipProps","onFocus","onBlur","restTooltipProps","useTooltip","text","_jsxs","jsxs","zoomControlStyles","BaseButton","elementDetails","undefined","type","isFocusable","size","variant","styling","ButtonLabelLayout","display","startIcon","parseDate","date","Date","parse","getISOString","time","toISOString","zoomTime","viewportStartTime","viewportEndTime","startTime","endTime","zoomFactor","minZoomViewportDuration","maxZoomViewportDuration","zoomOrderViewDurationThresholds","minorAxisZoomOrder","minorAxisZoomOrderIndex","majorAxisZoomOrder","majorAxisZoomOrderIndex","onViewportChange","newViewportStartTime","newViewportEndTime","minViewportDuration","maxViewportDuration","t","vs","ve","s","e","N","dur","dsMax","Math","max","deMax","dsMin","deMin","ds","min","de","sOverShoot","eOverShoot","getZoomViewport","minorAxisScale","majorAxisScale","idealMinorZoomOrderIndex","duration","findIndex","threshold","getZoomOrderIndex","indexOffset","length","getZoomScales","newViewport","isViewportChanged","viewportStart","viewportEnd","TimeComponentZoomInControl","useTranslationBundle","timeComponent_tooltipZoomIn","viewportCenter","PlusIcon","TimeComponentZoomOutControl","timeComponent_tooltipZoomOut","MinusIcon","useDrag","captureTargetRef","draggableRegion","onDragStart","onDragMove","onDragEnd","inactiveState","isDragging","x0","y0","regionOffsetX","regionOffsetY","dragState","useRef","handlePointerEvent","cb","current","x","offsetX","y","offsetY","dx","dy","originalEvent","dragProps","usePointerGesture","numPointers","onExtraneousPointerDown","onPointerGestureDown","pointers","button","region","xMin","xMax","yMin","yMax","inDraggableRegion","getRegionOffset","onPointerGestureMove","onPointerGestureEnd","TimeComponentScrollbar","thumbWidth","thumbHeight","thumbTop","thumbLeft","thumbRight","processDragRangeXChange","processDragRangeYChange","processClickRangeXChange","processClickRangeYChange","styles","container","onClick","track","thumb","top","left","right","TimeComponentVerticalGridlines","positions","cmd","p","join","verticalGridlinesStyles","d","TimeComponentHorizontalTimeAxisLabel","label","font","labelPosition","isTruncated","isStartIntervalTruncated","isRTL","textAlign","direction","timeAxisLabelsStyles","labelTruncated","Text","truncation","weight","draw","useLayoutEffect","canvas","ctx","getContext","scale","window","devicePixelRatio","floor","clearRect","getNewRange","onRangeChange","props","prevRange","processRange","newMin","newMax","prevMin","prevMax","thumbOffsetX","halfThumbWidth","horizontalScrollbarStyles","getLayout","TrackResizeContainer","labels","labelTicks","labelPositions","isLabelTruncated","isIntervalStartTruncated","intervalWidths","majorGridTicksPos","minorGridTicksPos","i","overlayControlsContainerRef","overlayControls","verticalControl","verticalControlTopGap","verticalControlBottomGap","verticalControlStartGap","horizontalControl","horizontalControlStartGap","horizontalControlEndGap","horizontalControlTopGap","vis","panZoomLayoutStyles","gridTemplateColumns","gridTemplateRows","verticalControlWithSpacing","horizontalControlWithSpacing","thumbOffsetY","verticalScrollbarStyles","position","zoomParameters","_","getZoomOrderViewDurationThresholds","restZoomParameters","zoomControlsLayoutStyles","controls","Flex","gap","timeTest","timeTestString","intervalStart","getPreviousDate","formatOptions","getNextDate","dateStyle","timeStyle","locale","navigator","language","getFormatParse","format","delta","abs","sign","pos","ltrPos","onWheel","onWheelCallback","preventDefault","deltaX","deltaY","deltaMode","DOM_DELTA_PIXEL","DOM_DELTA_LINE","DOM_DELTA_PAGE","getNormalizedDelta","ctrlKey","metaKey"],"mappings":"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"}