{"version":3,"file":"Legend-a8e9f523.js","sources":["../../src/UNSAFE_Legend/legendNavUtils.ts","../../src/UNSAFE_Legend/getLegendLayout.ts","../../src/UNSAFE_Legend/Legend.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  ItemActionDetail,\n  ItemFocusDetail,\n  ItemHoverDetail,\n  ItemInfo,\n  LegendItemData\n} from '#utils/UNSAFE_visTypes/legend';\n\nfunction getItem<K, D extends LegendItemData<K>>(itemInfo: ItemInfo, items: D[]) {\n  const { itemIdx } = itemInfo;\n\n  if (itemIdx == -1) {\n    return items[items.length - 1];\n  }\n  return items[itemIdx];\n}\n\nfunction getNextItemInfo<K>(itemInfo: ItemInfo, items: LegendItemData<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.min(items.length - 1, itemIdx + 1);\n  if (items[itemIdx].actionable !== 'off') {\n    return { sectionIdx: 0, itemIdx };\n  } else if (itemIdx === items.length - 1) {\n    itemIdx = itemIdx - 1;\n    return { sectionIdx: 0, itemIdx };\n  }\n\n  return getNextItemInfo({ sectionIdx: 0, itemIdx }, items);\n}\n\nfunction getPrevItemInfo<K>(itemInfo: ItemInfo, items: LegendItemData<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.max(0, itemIdx - 1);\n  if (items[itemIdx].actionable !== 'off') {\n    return { sectionIdx: 0, itemIdx };\n  }\n\n  return getPrevItemInfo({ sectionIdx: 0, itemIdx }, items);\n}\n\n/**\n * Returns utils functions for navigation in simple legend.\n * @param items\n * @returns\n */\nexport function getLegendNavUtils<K extends string | number, D extends LegendItemData<K>>(\n  items: D[]\n) {\n  return {\n    getItem: (itemInfo: ItemInfo) => {\n      return getItem(itemInfo, items);\n    },\n    getDetailFromInfo: (\n      itemInfo?: ItemInfo\n    ): ItemFocusDetail<K, D> | ItemHoverDetail<K, D> | ItemActionDetail<K, D> => {\n      if (!itemInfo || items.length === 0) {\n        return { itemId: undefined, data: undefined };\n      }\n      const item = getItem(itemInfo, items);\n      return { itemId: item.id, data: item };\n    },\n    getPrevItemInfo: (itemInfo: ItemInfo) => {\n      return getPrevItemInfo(itemInfo, items);\n    },\n    getNextItemInfo: (itemInfo: ItemInfo) => {\n      return getNextItemInfo(itemInfo, items);\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { LegendItemData } from '#utils/UNSAFE_visTypes/legend';\nimport { Font, TextDimensions, useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { getGridNums } from '#utils/PRIVATE_legendUtils/legendUtils';\n\ntype Props<K> = {\n  width: number;\n  getTextDimensions?: ((textString: string, font?: Font | undefined) => TextDimensions) | undefined;\n  resolvedVars: Record<string, any>;\n  orientation?: 'vertical' | 'horizontal';\n  legendFontStylesObj?: Font;\n  symbolWidth?: number;\n  symbolHeight?: number;\n  items: LegendItemData<K>[];\n};\nexport type LayoutInfo = {\n  totalWidth: number;\n  maxItemWidth: number;\n  maxItemHeight: number;\n  itemsPerRow: number;\n  isWrapped?: boolean;\n};\ntype getTextDimensionsType = NonNullable<\n  NonNullable<ReturnType<typeof useTextDimensions>>['getTextDimensions']\n>;\n\nexport const getLinearLegendLayoutInfo = <K>({\n  width,\n  getTextDimensions,\n  resolvedVars,\n  orientation,\n  legendFontStylesObj = {},\n  symbolWidth,\n  items\n}: Props<K>) => {\n  let maxWidth = 0;\n  let maxHeight = 0;\n  let totalWidth = 0;\n  let isWrapped = false;\n\n  const containerWidth = width;\n\n  if (!Object.keys(resolvedVars).length || !getTextDimensions) {\n    return;\n  }\n\n  const unitLength = parseFloat(resolvedVars['unit']);\n\n  const { maxItemWidth, maxItemHeight, horizontalSectionWidth } = getMaxWidth(\n    items,\n    unitLength,\n    getTextDimensions,\n    legendFontStylesObj,\n    symbolWidth\n  );\n  totalWidth = horizontalSectionWidth;\n  maxWidth = maxItemWidth;\n  maxHeight = maxItemHeight;\n  isWrapped = horizontalSectionWidth > containerWidth!;\n\n  const legendLayoutInfo = {\n    totalWidth,\n    maxItemWidth: Math.min(maxWidth, containerWidth!),\n    maxItemHeight: maxHeight,\n    itemsPerRow:\n      orientation === 'vertical' ? 1 : Math.max(1, Math.floor(containerWidth / maxWidth)),\n    isWrapped\n  };\n\n  return legendLayoutInfo;\n};\n\n/**\n * Returns maximum of the width among the items in a section of legend also return the width of the entire section.\n * @param items Legend items array\n * @param unitLength Base  element\n * @param getTextDimensions Text width measurement function\n * @param legendFontStylesObj Legend text font style properties object\n * @param symbolWidth Width of legend symbol\n *\n * @returns\n */\nconst getMaxWidth = <K>(\n  items: LegendItemData<K>[],\n  unitLength: number,\n  getTextDimensions: getTextDimensionsType,\n  legendFontStylesObj?: Font,\n  symbolWidth?: number,\n  symbolHeight?: number\n) => {\n  let maxItemWidth = 0;\n  let maxItemHeight = 0;\n  let horizontalSectionWidth = 0;\n  let itemSymbolWidth = 0;\n  let itemSymbolHeight = 0;\n  if (symbolWidth) {\n    itemSymbolWidth = unitLength * 1.5 + symbolWidth;\n  } else {\n    //itemSymbolWidth = marginLeft + marginRight + width below expression is simplified\n    itemSymbolWidth = 4 * unitLength;\n  }\n\n  if (symbolHeight) {\n    // symbolHeight/defaultSymbolHeight + symbolPaddingTopBottom\n    itemSymbolHeight = symbolHeight + unitLength * 1.7;\n  } else {\n    // symbolHeight/defaultSymbolHeight + symbolPaddingTopBottom\n    itemSymbolHeight = 2.5 * unitLength + unitLength * 1.7;\n  }\n\n  items?.forEach((item) => {\n    const legendItem = item as LegendItemData<K>;\n    const { width, height } = getTextDimensions(legendItem.text, legendFontStylesObj);\n    //itemTextWidth = paddingLeft + paddingRight + width\n    const itemTextWidth = unitLength * 2.5 + width;\n    //horizontalSectionWidth = total width of the section\n    horizontalSectionWidth += itemSymbolWidth + itemTextWidth;\n    maxItemWidth = Math.max(maxItemWidth, itemSymbolWidth + itemTextWidth);\n    maxItemHeight = Math.max(maxItemHeight, height, itemSymbolHeight);\n  });\n\n  return { maxItemWidth, maxItemHeight, horizontalSectionWidth };\n};\n\nexport function _getPreferredSize<K>(\n  _width: number,\n  _height: number,\n  items: LegendItemData<K>[],\n  resolvedVars: Record<string, any>,\n  orientation: 'vertical' | 'horizontal',\n  legendFontStylesObj: Record<string, any>,\n  symbolWidth?: number,\n  symbolHeight?: number,\n  getTextDimensions?: (textString: string, font?: Font | undefined) => TextDimensions\n) {\n  if (!getTextDimensions) {\n    return undefined;\n  }\n  const layoutInfo = getLinearLegendLayoutInfo({\n    width: _width,\n    getTextDimensions,\n    resolvedVars,\n    orientation,\n    legendFontStylesObj,\n    symbolWidth: symbolWidth,\n    symbolHeight: symbolHeight,\n    items\n  });\n  const { itemsPerCol, itemsPerRow } = getGridNums(items.length, layoutInfo, orientation);\n  const unitLength = parseFloat(resolvedVars['unit']);\n  const preferredWidth = Math.min(\n    _width,\n    itemsPerCol === 1\n      ? layoutInfo!.totalWidth\n      : itemsPerRow\n      ? layoutInfo!.maxItemWidth * itemsPerRow!\n      : layoutInfo!.totalWidth\n  );\n  const paddingLegendItems = 0.8 * unitLength;\n  const paddingLegendTopBottom = 1.5 * unitLength;\n\n  const legendHeight = itemsPerCol\n    ? layoutInfo!.maxItemHeight * itemsPerCol! +\n      (itemsPerCol! - 1) * paddingLegendItems +\n      paddingLegendTopBottom\n    : layoutInfo!.maxItemHeight + paddingLegendTopBottom;\n  const preferredHeight = Math.min(_height, legendHeight);\n\n  return { width: Math.ceil(preferredWidth), height: Math.ceil(preferredHeight) };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Ref, VNode } from 'preact';\nimport { useContext, useMemo, useRef, useState } from 'preact/hooks';\nimport { BaseLegend } from '#PRIVATE_BaseLegend/BaseLegend';\nimport { useVisEvent } from '#hooks/PRIVATE_useVisEvents/useVisEvents';\nimport { LegendProps, LegendDragStartDetail } from './legend.type';\nimport { getLegendNavUtils } from './legendNavUtils';\nimport {\n  getAriaProps,\n  getDatatipText,\n  getGridNums,\n  getIsLegendItemActionable,\n  getItemInfo,\n  getLegendTextStyle,\n  isEqualItem\n} from '#utils/PRIVATE_legendUtils/legendUtils';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { useLegendDatatip } from './useLegendDatatip';\nimport { useItemFocus } from '#hooks/PRIVATE_useVisEvents';\nimport { styles } from '#PRIVATE_BaseLegend/themes/LegendStyles.css';\nimport { useCssVars } from '#hooks/PRIVATE_useCssVars';\nimport { legendVars, getKeyUpHandler } from '#utils/PRIVATE_legendUtils/legendUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { useTestId } from '#hooks/UNSAFE_useTestId';\nimport { useLegendContextMenu } from '#PRIVATE_BaseLegend/useLegendContextMenu';\nimport {\n  ItemFocusDetail,\n  ItemActionDetail,\n  ItemInfo,\n  LegendItemData\n} from '#utils/UNSAFE_visTypes/legend';\nimport { useVisTouchResponse } from '#hooks/PRIVATE_useVisTouchResponse';\nimport { merge } from '@oracle/oraclejet-internal-utilities/stringUtils';\nimport { forwardRef, useImperativeHandle } from 'preact/compat';\nimport { TrackResizeContainer } from '#UNSAFE_TrackResizeContainer';\nimport { useTextDimensions } from '#hooks/PRIVATE_useTextDimensions';\nimport { _getPreferredSize, getLinearLegendLayoutInfo } from './getLegendLayout';\nimport { useLegendDnd } from '#hooks/PRIVATE_useLegendDnD/useLegendDnd';\nimport { styles as VisDndStyles } from '#hooks/PRIVATE_useVisDnd/themes/VisDndStyles.css';\nimport { LegendRenderedContext } from '#hooks/UNSAFE_useLegendPreferredSize';\n\nexport type SizeHandle = {\n  _getPreferredSize: (\n    _width: number,\n    _height: number\n  ) => { width: number; height: number } | undefined;\n};\n\ntype ForwardRefLegend = <K extends string | number, D extends LegendItemData<K>>(\n  props: LegendProps<K, D> & { ref?: Ref<SizeHandle> }\n) => VNode | null;\n\n/**\n * A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.\n */\nexport const Legend = forwardRef(\n  <K extends string | number, D extends LegendItemData<K>>(\n    {\n      orientation = 'horizontal',\n      items,\n      isReadOnly = true,\n      onItemAction,\n      onItemHover,\n      onItemFocus,\n      testId,\n      contextMenuConfig,\n      hideAndShowBehavior = 'off',\n      hoverBehavior = 'none',\n      halign = 'start',\n      valign = 'top',\n      ...props\n    }: LegendProps<K, D>,\n    ref: Ref<SizeHandle> = null\n  ) => {\n    // Use the context\n    const { isGetPreferredSizeReady, width, height } = useContext(LegendRenderedContext);\n    const { textMeasureContent, getTextDimensions } = useTextDimensions();\n    const { resolvedVars, cssContent } = useCssVars(legendVars);\n\n    const legendFontStylesObj = getLegendTextStyle(\n      {\n        fontStyle: props.textFontStyle,\n        fontSize: props.textFontSize?.toString(),\n        fontWeight: props.textFontWeight?.toString(),\n        fontFamily: props.textFontFamily\n      },\n      resolvedVars\n    );\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    useImperativeHandle(\n      ref!,\n      () => ({\n        _getPreferredSize: (_width: number, _height: number) => {\n          return _getPreferredSize(\n            _width,\n            _height,\n            items,\n            resolvedVars,\n            orientation,\n            legendFontStylesObj,\n            props.symbolWidth,\n            props.symbolHeight,\n            getTextDimensions\n          );\n        }\n      }),\n      [\n        getTextDimensions,\n        resolvedVars,\n        orientation,\n        legendFontStylesObj,\n        props.symbolWidth,\n        props.symbolHeight,\n        items\n      ]\n    );\n\n    if (\n      getTextDimensions &&\n      resolvedVars['unit'] != undefined &&\n      resolvedVars['fontSize'] != undefined\n    ) {\n      isGetPreferredSizeReady?.(true);\n    }\n\n    const testIdProps = useTestId(testId);\n    const isTestEnv = testIdProps['data-testid'] !== undefined;\n    const rootDimsRef = useRef<DOMRect>();\n    const { getItem, getDetailFromInfo, getPrevItemInfo, getNextItemInfo } = getLegendNavUtils<\n      K,\n      D\n    >(items);\n\n    const isLegendItemActionable = getIsLegendItemActionable(items, isReadOnly);\n    const hasData = items.length > 0;\n\n    const legendKeyUpHandler = (\n      triggerOnAction: () => void,\n      updatefocusedItemInfo: (itemInfo: ItemInfo) => void,\n      focusedItemInfo: ItemInfo\n    ) =>\n      getKeyUpHandler(\n        triggerOnAction,\n        updatefocusedItemInfo,\n        focusedItemInfo,\n        props.hiddenIds != null\n      );\n\n    const { touchResponse, touchResponseStyle } = useVisTouchResponse({\n      type: 'touchStart'\n    });\n    const { focusedItemInfo, hoveredItemInfo, onContextMenuDismissed, activeId, eventsProps } =\n      useVisEvent<ItemInfo, ItemActionDetail<K, D>, ItemFocusDetail<K, D>, D>(\n        touchResponse,\n        !isReadOnly,\n        isLegendItemActionable,\n        legendKeyUpHandler,\n        getDetailFromInfo,\n        getPrevItemInfo,\n        getNextItemInfo,\n        onItemAction,\n        onItemHover,\n        onItemFocus,\n        isEqualItem,\n        getItemInfo,\n        { itemIdx: 0, sectionIdx: 0 },\n        props.hiddenIds != null\n      );\n\n    const { focusedItemRef } = useItemFocus(focusedItemInfo);\n    const datatipText = getDatatipText(items, getItem, focusedItemInfo, hoveredItemInfo);\n    const [datatipDisabled, setDatatipDisabled] = useState(false);\n    const {\n      datatipContent,\n      datatipProps: { 'aria-describedby': datatipAriaDescribedby, ...datatipProps }\n    } = useLegendDatatip({\n      text: datatipText,\n      rootDimsRef,\n      focusedItemInfo,\n      focusedItemRef,\n      touchResponse,\n      isDisabled: datatipDisabled\n    });\n\n    const ariaProps = getAriaProps<K>(\n      isReadOnly,\n      props['aria-label'],\n      props.hiddenIds,\n      merge([props['aria-describedby'], datatipAriaDescribedby]),\n      props['aria-labelledby']\n    );\n\n    const { contextMenuContent, contextMenuProps } = useLegendContextMenu<D>({\n      rootRef,\n      contextMenuConfig: hasData ? contextMenuConfig : undefined,\n      focusedItemInfo,\n      items,\n      isReadOnly,\n      onContextMenuDismissed\n    });\n\n    const [dragOver, setDragOver] = useState<boolean>();\n\n    const { draggable, dndProps, dndContent } = useLegendDnd<K, D, LegendDragStartDetail<D>>({\n      onDrag: props.onDrag,\n      onDragStart: props.onDragStart,\n      onDragEnd: props.onDragEnd,\n      onDragEnter: props.onDragEnter,\n      onDragLeave: props.onDragLeave,\n      onDragOver: props.onDragOver,\n      onDrop: props.onDrop,\n      items,\n      setDragOver,\n      setDatatipDisabled,\n      itemDraggable: props.itemDraggable\n    });\n\n    const mergedProps = mergeProps(eventsProps, datatipProps, contextMenuProps, dndProps);\n    const { legendStyle, renderedLegendStyle } = styles;\n\n    return (\n      <>\n        {!isGetPreferredSizeReady && (\n          <TrackResizeContainer\n            width={width ? `${width}px` : '100%'}\n            height={height ? `${height}px` : '100%'}\n            class={classNames([\n              styles.flexStyle,\n              styles[`${halign}HAlign`],\n              styles[`${valign}VAlign`]\n            ])}>\n            {function _(width) {\n              const layoutInfo = useMemo(\n                () =>\n                  getLinearLegendLayoutInfo<K>({\n                    width,\n                    getTextDimensions,\n                    resolvedVars,\n                    orientation,\n                    legendFontStylesObj,\n                    symbolWidth: props.symbolWidth,\n                    symbolHeight: props.symbolHeight,\n                    items\n                  }),\n                [width]\n              );\n              const { itemsPerCol, itemsPerRow } = getGridNums(items.length, layoutInfo);\n              return (\n                <>\n                  <div\n                    ref={rootRef}\n                    tabIndex={isReadOnly ? undefined : 0}\n                    role=\"application\"\n                    draggable={draggable}\n                    class={classNames([\n                      legendStyle,\n                      renderedLegendStyle,\n                      dragOver\n                        ? VisDndStyles.dndDragOverHTMLStyle\n                        : dragOver === false\n                        ? VisDndStyles.dndRejectedStyle\n                        : undefined\n                    ])}\n                    style={touchResponseStyle}\n                    {...testIdProps}\n                    {...ariaProps}\n                    {...mergedProps}\n                    aria-activedescendant={activeId}>\n                    <BaseLegend\n                      {...props}\n                      focusedItemRef={focusedItemRef}\n                      items={items}\n                      isReadOnly={isReadOnly}\n                      orientation={orientation}\n                      sectionIdx={0}\n                      itemsPerRow={itemsPerRow}\n                      itemsPerCol={itemsPerCol}\n                      itemWidth={layoutInfo?.isWrapped ? layoutInfo?.maxItemWidth : undefined}\n                      focusedItemInfo={focusedItemInfo}\n                      hoveredItemInfo={hoveredItemInfo}\n                      activeId={activeId}\n                      hideAndShowBehavior={hideAndShowBehavior}\n                      hoverBehavior={hoverBehavior}\n                      isTestEnv={isTestEnv}\n                    />\n                  </div>\n                  {datatipContent}\n                  {contextMenuContent}\n                  {dndContent}\n                </>\n              );\n            }}\n          </TrackResizeContainer>\n        )}\n        {textMeasureContent}\n        {cssContent}\n      </>\n    );\n  }\n) as ForwardRefLegend;\n"],"names":["getItem","itemInfo","items","itemIdx","length","getNextItemInfo","Math","min","actionable","sectionIdx","getPrevItemInfo","max","getLegendNavUtils","getDetailFromInfo","itemId","undefined","data","item","id","getLinearLegendLayoutInfo","width","getTextDimensions","resolvedVars","orientation","legendFontStylesObj","symbolWidth","maxWidth","maxHeight","totalWidth","isWrapped","containerWidth","Object","keys","unitLength","parseFloat","maxItemWidth","maxItemHeight","horizontalSectionWidth","getMaxWidth","itemsPerRow","floor","symbolHeight","itemSymbolWidth","itemSymbolHeight","forEach","legendItem","height","text","itemTextWidth","Legend","forwardRef","isReadOnly","onItemAction","onItemHover","onItemFocus","testId","contextMenuConfig","hideAndShowBehavior","hoverBehavior","halign","valign","props","ref","isGetPreferredSizeReady","useContext","LegendRenderedContext","textMeasureContent","useTextDimensions","cssContent","useCssVars","legendVars","getLegendTextStyle","fontStyle","textFontStyle","fontSize","textFontSize","toString","fontWeight","textFontWeight","fontFamily","textFontFamily","rootRef","useRef","useImperativeHandle","_getPreferredSize","_width","_height","layoutInfo","itemsPerCol","getGridNums","preferredWidth","paddingLegendItems","paddingLegendTopBottom","legendHeight","preferredHeight","ceil","testIdProps","useTestId","isTestEnv","rootDimsRef","isLegendItemActionable","getIsLegendItemActionable","hasData","touchResponse","touchResponseStyle","useVisTouchResponse","type","focusedItemInfo","hoveredItemInfo","onContextMenuDismissed","activeId","eventsProps","useVisEvent","triggerOnAction","updatefocusedItemInfo","getKeyUpHandler","hiddenIds","isEqualItem","getItemInfo","focusedItemRef","useItemFocus","datatipText","getDatatipText","datatipDisabled","setDatatipDisabled","useState","datatipContent","datatipProps","datatipAriaDescribedby","useLegendDatatip","isDisabled","ariaProps","getAriaProps","merge","l","contextMenuContent","contextMenuProps","useLegendContextMenu","dragOver","setDragOver","draggable","dndProps","dndContent","useLegendDnd","onDrag","onDragStart","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDrop","itemDraggable","mergedProps","mergeProps","legendStyle","renderedLegendStyle","styles","_jsxs","_Fragment","children","_jsx","TrackResizeContainer","class","classNames","flexStyle","useMemo","jsxs","Fragment","tabIndex","role","VisDndStyles","dndDragOverHTMLStyle","dndRejectedStyle","style","BaseLegend","itemWidth"],"mappings":"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"}