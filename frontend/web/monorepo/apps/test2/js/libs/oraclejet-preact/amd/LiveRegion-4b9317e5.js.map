{"version":3,"file":"LiveRegion-4b9317e5.js","sources":["../../src/UNSAFE_LiveRegion/LiveRegion.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { offScreenStyle } from './LiveRegionStyles.css';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\n\ntype Props = TestIdProps & {\n  /**\n   * Whether this live region is atomic\n   */\n  atomic?: 'true' | 'false';\n\n  /**\n   * The text to be read out in the live region\n   */\n  children?: string;\n\n  /**\n   * Timeout for updating the text\n   */\n  timeout?: number;\n\n  /**\n   * The value for the aria-live attribute\n   */\n  type?: 'assertive' | 'polite' | 'off';\n};\n\n/**\n * A helper component that renders an aria-live region\n *\n * TODO: Create a more centralized component that can handle aria-live region for\n * the whole application and use context api to communicate\n */\nfunction LiveRegion({\n  testId,\n  atomic = 'false',\n  children = '',\n  timeout = 100,\n  type = 'polite'\n}: Props) {\n  const ariaLiveText = useLiveText(children, timeout);\n  const testIdProps = useTestId(testId);\n\n  return (\n    <span aria-live={type} aria-atomic={atomic} class={offScreenStyle} {...testIdProps}>\n      {ariaLiveText}\n    </span>\n  );\n}\n\n/**\n * A custom hook for handling the aria-live region\n *\n * @param text The aria-live text to use\n * @param timeout The timeout for setting the aria-live text async\n * @returns The aria-live text\n */\nfunction useLiveText(text: string, timeout: number) {\n  const [liveText, setLiveText] = useState('');\n  const updateText = useCallback(() => setLiveText(text), [text]);\n  const updateTextAsync = useCallback(() => setTimeout(updateText, timeout), [updateText, timeout]);\n\n  useEffect(() => {\n    const timeoutId = updateTextAsync();\n\n    return () => clearTimeout(timeoutId);\n  }, [updateTextAsync]);\n\n  return liveText;\n}\n\nexport { LiveRegion };\n"],"names":["testId","atomic","children","timeout","type","ariaLiveText","text","liveText","setLiveText","useState","updateText","useCallback","updateTextAsync","setTimeout","useEffect","timeoutId","clearTimeout","useLiveText","testIdProps","useTestId","_jsx","jsx","class"],"mappings":"6JAgCA,UAAoBA,OAClBA,EAAMC,OACNA,EAAS,QAAOC,SAChBA,EAAW,GAAEC,QACbA,EAAU,IAAGC,KACbA,EAAO,WAEP,MAAMC,EAiBR,SAAqBC,EAAcH,GACjC,MAAOI,EAAUC,GAAeC,EAAQA,SAAC,IACnCC,EAAaC,EAAAA,aAAY,IAAMH,EAAYF,IAAO,CAACA,IACnDM,EAAkBD,eAAY,IAAME,WAAWH,EAAYP,IAAU,CAACO,EAAYP,IAQxF,OANAW,EAAAA,WAAU,KACR,MAAMC,EAAYH,IAElB,MAAO,IAAMI,aAAaD,EAAU,GACnC,CAACH,IAEGL,CACT,CA7BuBU,CAAYf,EAAUC,GACrCe,EAAcC,YAAUnB,GAE9B,OACEoB,EAAAC,IAAA,OAAA,CAAA,YAAiBjB,EAAI,cAAeH,EAAQqB,qDAA2BJ,EAAWhB,SAC/EG,GAGP"}