{"version":3,"file":"useBareButton-98f047f8.js","sources":["../../src/hooks/UNSAFE_useBareButton/useBareButton.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { ComponentChildren, JSX } from 'preact';\nimport { usePress } from '../UNSAFE_usePress';\nimport { usePressClick } from '../UNSAFE_usePressClick';\nimport { useTabbableMode } from '../UNSAFE_useTabbableMode';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\nimport { mergeProps } from '../../utils/UNSAFE_mergeProps';\nimport type { UnpackSignals } from '../../utils/UNSAFE_attributeUtils';\nimport { processGlobals } from '../../utils/UNSAFE_buttonUtils';\nimport type {\n  ButtonIntrinsicProps,\n  ButtonIntrinsicAriaProps\n} from '../../utils/UNSAFE_buttonUtils';\nimport { useTestId, TestIdProps } from '../UNSAFE_useTestId';\n\n/**\n * The ActionDetail reasons\n */\nexport type ActionDetail = {\n  reason: 'pointer' | 'keyboard';\n};\n\n/**\n * Element details\n */\nexport type BareButtonElementDetails =\n  | {\n      type: 'button';\n      isFocusable?: never;\n      buttonType?: 'button' | 'submit';\n      isLabel?: never;\n      isSwitch?: boolean;\n    }\n  | {\n      type: 'a';\n      buttonType?: never;\n      href: string;\n      target?: string;\n      rel?: string;\n      isFocusable?: never;\n      isLabel?: never;\n      isSwitch?: never;\n    }\n  | {\n      type: 'span';\n      buttonType?: never;\n      isFocusable?: boolean;\n      isLabel?: boolean;\n      isSwitch?: boolean;\n    }\n  | {\n      type: 'div';\n      buttonType?: never;\n      isFocusable?: boolean;\n      isLabel?: boolean;\n      isSwitch?: boolean;\n    };\n\nexport type BareButtonProps = ButtonIntrinsicProps &\n  ButtonIntrinsicAriaProps &\n  TestIdProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     * Specifies if Button should use only a click handler, not keyup/down, ptr up/down\n     */\n    isClick?: boolean;\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: (details: ActionDetail) => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: BareButtonElementDetails;\n  };\n\nconst roleProps = (\n  elType: string,\n  hidden: boolean,\n  isFocusable: boolean,\n  isLabel: boolean,\n  isSwitch: boolean\n): { role?: UnpackSignals<JSX.HTMLAttributes['role']> } => {\n  switch (elType) {\n    case 'link':\n      return { role: 'link' };\n    case 'button':\n      return isSwitch ? { role: 'switch' } : {};\n    case 'div':\n      return hidden ? {} : { role: 'button' };\n    case 'span':\n      return isLabel\n        ? {}\n        : hidden\n        ? { role: 'none' }\n        : isFocusable\n        ? isSwitch\n          ? { role: 'switch' }\n          : { role: 'button' }\n        : { role: 'img' };\n    default:\n      return hidden ? { role: 'none' } : isFocusable ? { role: 'button' } : { role: 'img' };\n  }\n};\n\n/**\n * BareButtons are unformatted bare buttons that direct users to initiate or take actions and work with a single tap, click, or keystroke.\n */\nexport function useBareButton({\n  onAction,\n  isDisabled,\n  isRepeat,\n  isClick,\n  elementDetails = { type: 'button', buttonType: 'button' },\n  testId,\n  ...props\n}: BareButtonProps) {\n  const clientHints = getClientHints();\n  // :active only works on IOS devices if a touch handler exists\n  const iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\n\n  const pressHandler = (e: Event) => {\n    if (onAction) {\n      onAction({\n        reason: (e as PointerEvent).pointerType == '' ? 'keyboard' : 'pointer'\n      });\n    }\n  };\n  const {\n    globalEventProps,\n    ariaProps: { 'aria-disabled': ariaDisabled, 'aria-hidden': ariaHidden, ...ariaOtherProps }\n  } = processGlobals(props);\n\n  const { pressProps } = usePress(pressHandler, {\n    isDisabled: isDisabled,\n    isRepeat\n  });\n\n  const { pressProps: pressClickProps } = usePressClick(pressHandler, {\n    isDisabled: isDisabled\n  });\n\n  const {\n    type: elementType = 'button',\n    isFocusable: isElementFocusable = true,\n    isLabel: isElementLabel = false,\n    isSwitch: isElementSwitch = false,\n    ...elementProps\n  } = { ...elementDetails };\n\n  const buttonType =\n    elementDetails.type === 'button' ? elementDetails.buttonType ?? 'button' : undefined;\n  const typeProps =\n    elementDetails.type === 'button' && elementDetails.buttonType === 'button'\n      ? { type: buttonType }\n      : {};\n\n  // 'role' should be 'none' when aria-hidden is true or 'img' when false and not focusable\n  const role = roleProps(\n    elementType,\n    Boolean(ariaHidden),\n    isElementFocusable ?? false,\n    isElementLabel ?? false,\n    isElementSwitch ?? false\n  );\n  const ElementType = elementDetails?.type;\n  const isSpan = ElementType == 'span';\n  const isBareButton = ElementType == 'button';\n  const { tabbableModeProps } = useTabbableMode(isDisabled);\n\n  const arDisabled =\n    ElementType == 'button'\n      ? ariaDisabled\n        ? { 'aria-disabled': ariaDisabled }\n        : {}\n      : isDisabled\n      ? { 'aria-disabled': isDisabled }\n      : {};\n\n  const arHidden = ElementType === 'div' ? {} : { 'aria-hidden': ariaHidden };\n\n  const adjustedAriaProps =\n    role.role === 'none' ? {} : mergeProps(arDisabled, arHidden, ariaOtherProps);\n\n  const testIdProps = useTestId(testId);\n\n  const getTabIndex = () => {\n    if ((isSpan && (isElementFocusable === false || isDisabled)) || (isBareButton && isDisabled)) {\n      // no tabIndex value should be defined for disabled button elements and non-focusable or disabled span elements\n      return { tabIndex: undefined };\n    }\n    return tabbableModeProps;\n  };\n\n  const legacyGlobals = {\n    autofocus: props.autofocus,\n    title: props.title,\n    disabled: isDisabled\n  };\n\n  return mergeProps(\n    elementProps,\n    onAction ? (isRepeat || (isClick ?? isBareButton) ? pressClickProps : pressProps) : {},\n    iosProps,\n    globalEventProps,\n    adjustedAriaProps,\n    getTabIndex(),\n    typeProps,\n    testIdProps,\n    role,\n    legacyGlobals\n  );\n}\n"],"names":["onAction","isDisabled","isRepeat","isClick","elementDetails","type","buttonType","testId","props","iosProps","getClientHints","platform","ontouchstart","pressHandler","e","reason","pointerType","globalEventProps","ariaProps","ariaDisabled","ariaHidden","ariaOtherProps","processGlobals","pressProps","usePress","pressClickProps","usePressClick","elementType","isFocusable","isElementFocusable","isLabel","isElementLabel","isSwitch","isElementSwitch","elementProps","undefined","typeProps","role","elType","hidden","roleProps","Boolean","ElementType","isSpan","isBareButton","tabbableModeProps","useTabbableMode","arDisabled","arHidden","adjustedAriaProps","mergeProps","testIdProps","useTestId","legacyGlobals","autofocus","title","disabled","tabIndex"],"mappings":"6RAkIgB,UAAcA,SAC5BA,EAAQC,WACRA,EAAUC,SACVA,EAAQC,QACRA,EAAOC,eACPA,EAAiB,CAAEC,KAAM,SAAUC,WAAY,UAAUC,OACzDA,KACGC,IAEH,MAEMC,EAAoC,QAFtBC,EAAAA,iBAESC,SAAqB,CAAEC,aAAc,cAAmB,GAE/EC,EAAgBC,IAChBd,GACFA,EAAS,CACPe,OAA2C,IAAlCD,EAAmBE,YAAoB,WAAa,WAEhE,GAEGC,iBACJA,EACAC,WAAa,gBAAiBC,EAAc,cAAeC,KAAeC,IACxEC,EAAcA,eAACd,IAEbe,WAAEA,GAAeC,EAAQA,SAACX,EAAc,CAC5CZ,WAAYA,EACZC,cAGMqB,WAAYE,GAAoBC,EAAAA,cAAcb,EAAc,CAClEZ,WAAYA,KAIZI,KAAMsB,EAAc,SACpBC,YAAaC,GAAqB,EAClCC,QAASC,GAAiB,EAC1BC,SAAUC,GAAkB,KACzBC,GACD,IAAK9B,GAEHE,EACoB,WAAxBF,EAAeC,KAAoBD,EAAeE,YAAc,cAAW6B,EACvEC,EACoB,WAAxBhC,EAAeC,MAAmD,WAA9BD,EAAeE,WAC/C,CAAED,KAAMC,GACR,GAGA+B,EAlFU,EAChBC,EACAC,EACAX,EACAE,EACAE,KAEA,OAAQM,GACN,IAAK,OACH,MAAO,CAAED,KAAM,QACjB,IAAK,SACH,OAAOL,EAAW,CAAEK,KAAM,UAAa,CAAA,EACzC,IAAK,MACH,OAAOE,EAAS,CAAE,EAAG,CAAEF,KAAM,UAC/B,IAAK,OACH,OAAOP,EACH,CAAE,EACFS,EACA,CAAEF,KAAM,QACRT,EACAI,EACE,CAAEK,KAAM,UACR,CAAEA,KAAM,UACV,CAAEA,KAAM,OACd,QACE,OAAOE,EAAS,CAAEF,KAAM,QAAWT,EAAc,CAAES,KAAM,UAAa,CAAEA,KAAM,OACjF,EAwDYG,CACXb,EACAc,QAAQrB,GACRS,IAAsB,EACtBE,IAAkB,EAClBE,IAAmB,GAEfS,EAActC,GAAgBC,KAC9BsC,EAAwB,QAAfD,EACTE,EAA8B,UAAfF,GACfG,kBAAEA,GAAsBC,EAAeA,gBAAC7C,GAExC8C,EACW,UAAfL,EACIvB,EACE,CAAE,gBAAiBA,GACnB,CAAE,EACJlB,EACA,CAAE,gBAAiBA,GACnB,GAEA+C,EAA2B,QAAhBN,EAAwB,CAAE,EAAG,CAAE,cAAetB,GAEzD6B,EACU,SAAdZ,EAAKA,KAAkB,GAAKa,EAAAA,WAAWH,EAAYC,EAAU3B,GAEzD8B,EAAcC,YAAU7C,GAUxB8C,EAAgB,CACpBC,UAAW9C,EAAM8C,UACjBC,MAAO/C,EAAM+C,MACbC,SAAUvD,GAGZ,OAAOiD,EAAUA,WACfhB,EACAlC,EAAYE,IAAaC,GAAWyC,GAAgBnB,EAAkBF,EAAc,CAAE,EACtFd,EACAQ,EACAgC,EAlBKN,KAAkC,IAAvBd,GAAgC5B,IAAiB2C,GAAgB3C,EAExE,CAAEwD,cAAUtB,GAEdU,EAgBPT,EACAe,EACAd,EACAgB,EAEJ"}