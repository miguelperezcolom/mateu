{"version":3,"file":"useChartViewport-167a8e6b.js","sources":["../../src/hooks/PRIVATE_useChartViewport/utils.ts","../../src/hooks/PRIVATE_useChartViewport/useChartViewport.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Dimension } from '#utils/UNSAFE_visTypes/common';\nimport { Scale } from '#utils/UNSAFE_visTypes/chart';\nexport function getAxisBoundsByDelta(\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  yViewportExtent: { viewportMin: number; viewportMax: number },\n  y2ViewportExtent: { viewportMin: number; viewportMax: number },\n  yAxisExtent: { min: number; max: number },\n  y2AxisExtent: { min: number; max: number },\n  xScale: Scale,\n  yScale: Scale,\n  y2Scale: Scale,\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  y2Min: number,\n  y2Max: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const { viewportMin: xViewportMin, viewportMax: xViewportMax } = xViewportExtent;\n  const { min: xAxisMin, max: xAxisMax } = xAxisExtent;\n  const { viewportMin: yViewportMin, viewportMax: yViewportMax } = yViewportExtent;\n  const { min: yAxisMin, max: yAxisMax } = yAxisExtent;\n  const { viewportMin: y2ViewportMin, viewportMax: y2ViewportMax } = y2ViewportExtent;\n  const { min: y2AxisMin, max: y2AxisMax } = y2AxisExtent;\n  const deltas = convertToAxisCoord(xMin, xMax, yMin, yMax, y2Min, y2Max, isRtl, isHoriz);\n  const xExtents = getAxisMinMaxByDelta(\n    xViewportMin,\n    xViewportMax,\n    xAxisMin,\n    xAxisMax,\n    xScale,\n    deltas['xMin'],\n    deltas['xMax']\n  );\n  const yExtents = getAxisMinMaxByDelta(\n    yViewportMin,\n    yViewportMax,\n    yAxisMin,\n    yAxisMax,\n    yScale,\n    deltas['yMin'],\n    deltas['yMax']\n  );\n\n  const y2Extents = getAxisMinMaxByDelta(\n    y2ViewportMin,\n    y2ViewportMax,\n    y2AxisMin,\n    y2AxisMax,\n    y2Scale,\n    deltas['y2Min'],\n    deltas['y2Max']\n  );\n\n  return { xExtents, yExtents, y2Extents };\n}\n\nexport function convertToAxisCoord(\n  xMin: number,\n  xMax: number,\n  yMin: number,\n  yMax: number,\n  y2Min: number,\n  y2Max: number,\n  isRtl: boolean,\n  isHoriz: boolean\n) {\n  const axisCoord: Record<string, any> = {};\n  if (isHoriz) {\n    axisCoord['xMin'] = yMin;\n    axisCoord['xMax'] = yMax;\n    axisCoord['yMin'] = isRtl ? xMax : xMin;\n    axisCoord['yMax'] = isRtl ? xMin : xMax;\n    axisCoord['y2Min'] = isRtl ? xMin : xMax;\n    axisCoord['y2Max'] = isRtl ? xMax : xMin;\n  } else {\n    axisCoord['xMin'] = isRtl ? xMax : xMin;\n    axisCoord['xMax'] = isRtl ? xMin : xMax;\n    axisCoord['yMin'] = yMax;\n    axisCoord['yMax'] = yMin;\n    axisCoord['y2Min'] = y2Max;\n    axisCoord['y2Max'] = y2Min;\n  }\n  return axisCoord;\n}\n\nexport function getAxisMinMaxByDelta(\n  viewportMin: number,\n  viewportMax: number,\n  globalMin: number,\n  globalMax: number,\n  axisScale: Scale,\n  minDelta: number,\n  maxDelta: number\n) {\n  const minDeltaVal = axisScale.invert(minDelta) - axisScale.invert(0);\n  const maxDeltaVal = axisScale.invert(maxDelta) - axisScale.invert(0);\n\n  let weight = 1;\n  const newExtent = viewportMax + maxDeltaVal - (viewportMin + minDeltaVal);\n  const minExtent = 1; //axisInfo.getMinExtent();\n  if (minDelta != maxDelta && newExtent < minExtent)\n    weight = (viewportMax - viewportMin - minExtent) / (minDeltaVal - maxDeltaVal);\n\n  viewportMin += minDeltaVal * weight;\n  viewportMax += maxDeltaVal * weight;\n\n  // Limit to global min/max\n  if (viewportMax - viewportMin >= globalMax - globalMin) {\n    viewportMin = globalMin;\n    viewportMax = globalMax;\n  } else if (viewportMin < globalMin) {\n    viewportMax += globalMin - viewportMin;\n    viewportMin = globalMin;\n  } else if (viewportMax > globalMax) {\n    viewportMin -= viewportMax - globalMax;\n    viewportMax = globalMax;\n  }\n\n  return { viewportMin, viewportMax };\n}\n\nexport function getAxisMinMaxDrag(\n  offsetX: number,\n  offsetY: number,\n  plotAreaSpace: Dimension,\n  xViewportExtent: { viewportMin: number; viewportMax: number },\n  xAxisExtent: { min: number; max: number },\n  isHoriz: boolean,\n  isRtl: boolean\n) {\n  const deltaX = isRtl ? plotAreaSpace.width - offsetX : offsetX - plotAreaSpace.x;\n  const deltaY = offsetY - plotAreaSpace.y;\n  const deltaV = xViewportExtent.viewportMax - xViewportExtent.viewportMin;\n  const delta =\n    (isHoriz ? deltaY : deltaX) *\n    ((xAxisExtent.max - xAxisExtent.min) / (isHoriz ? plotAreaSpace.height : plotAreaSpace.width));\n  let xMin = delta - deltaV / 2;\n  let xMax = delta + deltaV / 2;\n\n  if (xMin < xAxisExtent.min) {\n    xMin = xAxisExtent.min;\n    xMax = xMin + deltaV;\n  }\n\n  if (xMax > xAxisExtent.max) {\n    xMin = xAxisExtent.max - deltaV;\n    xMax = xAxisExtent.max;\n  }\n\n  return {\n    xMin,\n    xMax\n  };\n}\n\nexport function panBy(\n  plotAreaSpace: Dimension,\n  isPageUp: boolean,\n  PAN_RATIO: number,\n  isHoriz: boolean,\n  isRtl: boolean\n) {\n  const dx = isHoriz ? 0 : (isPageUp ? -1 : 1) * PAN_RATIO;\n  const dy = isHoriz ? (isPageUp ? -1 : 1) * PAN_RATIO : 0;\n\n  const deltaX = dx * plotAreaSpace.width * (isRtl ? -1 : 1);\n  const deltaY = dy * plotAreaSpace.height;\n\n  return { deltaX, deltaY };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getElementData } from '#utils/UNSAFE_visUtils';\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { Scale } from '#utils/UNSAFE_visTypes/chart';\nimport { getAxisBoundsByDelta, getAxisMinMaxDrag, panBy } from './utils';\nimport { usePinch } from '#PRIVATE_TimeComponent/hooks/usePinch';\nimport { mergeProps } from '#utils/UNSAFE_mergeProps';\nimport { AxisInfo } from '#PRIVATE_Axis/axis.types';\n\ntype ViewportHandlerProps = {\n  rootRef: RefObject<HTMLDivElement>;\n  width: number;\n  height: number;\n  plotAreaSpace: { x: number; y: number; width: number; height: number };\n  isRtl: boolean;\n  isHoriz: boolean;\n  xAxisInfo: AxisInfo;\n  yAxisInfo: AxisInfo;\n  y2AxisInfo: AxisInfo;\n  yScale: Scale;\n  y2Scale: Scale;\n  xScale: Scale;\n  zoomAndScroll: 'live' | 'off';\n  onViewportChange?: (detail: any) => void;\n};\n\nconst VIEWPORT_SCALE = 0.05;\nconst PAN_RATIO = 0.25;\n\nexport function useChartViewport({\n  plotAreaSpace,\n  yScale,\n  y2Scale,\n  xScale,\n  onViewportChange,\n  isHoriz,\n  zoomAndScroll,\n  isRtl,\n  rootRef,\n  xAxisInfo,\n  yAxisInfo,\n  y2AxisInfo\n}: ViewportHandlerProps) {\n  const isPointerClicked = useRef(false);\n  const handleViewportChange = (delta: number, origin: { x: number; y: number }) => {\n    const deltaXMin = delta * (origin.x - plotAreaSpace.x);\n    const deltaXMax = -delta * (plotAreaSpace.x + plotAreaSpace.width - origin.x);\n    const deltaYMin = delta * (origin.y - plotAreaSpace.y);\n    const deltaYMax = -delta * (plotAreaSpace.y + plotAreaSpace.height - origin.y);\n    const deltaY2Min = delta * (origin.y - plotAreaSpace.y);\n    const deltaY2Max = -delta * (plotAreaSpace.y + plotAreaSpace.height - origin.y);\n    const extents = getAxisBoundsByDelta(\n      xAxisInfo,\n      xAxisInfo,\n      yAxisInfo,\n      y2AxisInfo,\n      yAxisInfo,\n      y2AxisInfo,\n      xScale,\n      yScale,\n      y2Scale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      deltaY2Min,\n      deltaY2Max,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax,\n      y2Min: extents.y2Extents.viewportMax,\n      y2Max: extents.y2Extents.viewportMax\n    });\n  };\n\n  const pinchProps = usePinch({\n    captureTargetRef: rootRef,\n    onPinchZoomChange: ({ delta, origin }) => {\n      const d = (isHoriz ? 1 : -1) * -1 * delta * VIEWPORT_SCALE;\n      handleViewportChange(d, origin);\n    }\n  });\n\n  pinchProps.onPointerOut = undefined;\n\n  const onWheel = (event: WheelEvent) => {\n    const delta = (isHoriz ? 1 : -1) * event.deltaY * VIEWPORT_SCALE;\n    handleViewportChange(delta, { x: event.offsetX, y: event.offsetY });\n    event.preventDefault();\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    const zoomIn = key === '+' || key === '=';\n    const zoomOut = key === '-' || key === '_';\n\n    const isPageUp = key === 'PageUp';\n    const isPageDown = key === 'PageDown';\n\n    if (!zoomIn && !zoomOut && !isPageUp && !isPageDown) {\n      return;\n    }\n    const zoomRatio = zoomIn ? 1.5 : 1 / 1.5;\n    const zoomShiftRatio = (1 / zoomRatio - 1) / 2;\n\n    let deltaXMin = 0,\n      deltaXMax = 0,\n      deltaYMin = 0,\n      deltaYMax = 0,\n      deltas;\n\n    if (zoomIn || zoomOut) {\n      deltaXMin = -1 * zoomShiftRatio * plotAreaSpace.width;\n      deltaXMax = zoomShiftRatio * plotAreaSpace.width;\n      deltaYMin = -1 * zoomShiftRatio * plotAreaSpace.height;\n      deltaYMax = zoomShiftRatio * plotAreaSpace.height;\n    } else {\n      deltas = panBy(plotAreaSpace, isPageUp, PAN_RATIO, isHoriz, isRtl);\n      if (deltas) {\n        deltaXMin = deltas.deltaX;\n        deltaXMax = deltas.deltaX;\n        deltaYMin = deltas.deltaY;\n        deltaYMax = deltas.deltaY;\n      }\n    }\n\n    const extents = getAxisBoundsByDelta(\n      xAxisInfo,\n      xAxisInfo,\n      yAxisInfo,\n      y2AxisInfo,\n      yAxisInfo,\n      y2AxisInfo,\n      xScale,\n      yScale,\n      y2Scale,\n      deltaXMin,\n      deltaXMax,\n      deltaYMin,\n      deltaYMax,\n      deltaYMin,\n      deltaYMax,\n      isRtl,\n      isHoriz\n    );\n    onViewportChange?.({\n      xMin: extents.xExtents.viewportMin,\n      yMin: extents.yExtents.viewportMin,\n      xMax: extents.xExtents.viewportMax,\n      yMax: extents.yExtents.viewportMax,\n      y2Min: extents.y2Extents.viewportMax,\n      y2Max: extents.y2Extents.viewportMax\n    });\n  };\n\n  const onPointerDown = (event: PointerEvent) => {\n    isPointerClicked.current = true;\n    const obj = getElementData(rootRef, event.target as HTMLElement);\n    if (obj && obj['ojPrivateObject'] === 'scrollBar') {\n      (event.target as HTMLElement).setPointerCapture(event.pointerId);\n      const { xMin, xMax } = getAxisMinMaxDrag(\n        event.offsetX,\n        event.offsetY,\n        plotAreaSpace,\n        xAxisInfo,\n        xAxisInfo,\n        isHoriz,\n        isRtl\n      );\n\n      onViewportChange?.({\n        xMin,\n        yMin: yAxisInfo.viewportMin,\n        xMax,\n        yMax: yAxisInfo.viewportMax\n      });\n    }\n  };\n\n  const onPointerUp = () => {\n    isPointerClicked.current = false;\n  };\n\n  const onPointerMove = (event: PointerEvent) => {\n    if (!isPointerClicked.current) {\n      return;\n    }\n\n    const obj = getElementData(rootRef, event.target as HTMLElement);\n    if (obj && obj['ojPrivateObject'] === 'scrollBar') {\n      const { xMin, xMax } = getAxisMinMaxDrag(\n        event.offsetX,\n        event.offsetY,\n        plotAreaSpace,\n        xAxisInfo,\n        xAxisInfo,\n        isHoriz,\n        isRtl\n      );\n\n      onViewportChange?.({\n        xMin,\n        yMin: yAxisInfo.viewportMin,\n        xMax,\n        yMax: yAxisInfo.viewportMax\n      });\n    }\n  };\n  return onViewportChange && zoomAndScroll === 'live'\n    ? mergeProps({ onWheel, onKeyDown, onPointerMove, onPointerDown, onPointerUp }, pinchProps)\n    : {};\n}\n"],"names":["getAxisBoundsByDelta","xViewportExtent","xAxisExtent","yViewportExtent","y2ViewportExtent","yAxisExtent","y2AxisExtent","xScale","yScale","y2Scale","xMin","xMax","yMin","yMax","y2Min","y2Max","isRtl","isHoriz","viewportMin","xViewportMin","viewportMax","xViewportMax","min","xAxisMin","max","xAxisMax","yViewportMin","yViewportMax","yAxisMin","yAxisMax","y2ViewportMin","y2ViewportMax","y2AxisMin","y2AxisMax","deltas","axisCoord","convertToAxisCoord","xExtents","getAxisMinMaxByDelta","yExtents","y2Extents","globalMin","globalMax","axisScale","minDelta","maxDelta","minDeltaVal","invert","maxDeltaVal","weight","getAxisMinMaxDrag","offsetX","offsetY","plotAreaSpace","deltaX","width","x","deltaY","y","deltaV","delta","height","onViewportChange","zoomAndScroll","rootRef","xAxisInfo","yAxisInfo","y2AxisInfo","isPointerClicked","useRef","handleViewportChange","origin","deltaXMin","deltaXMax","deltaYMin","deltaYMax","deltaY2Min","deltaY2Max","extents","pinchProps","usePinch","captureTargetRef","onPinchZoomChange","onPointerOut","undefined","mergeProps","onWheel","event","preventDefault","onKeyDown","key","zoomIn","zoomOut","isPageUp","zoomShiftRatio","PAN_RATIO","dy","panBy","onPointerMove","current","obj","getElementData","target","onPointerDown","setPointerCapture","pointerId","onPointerUp"],"mappings":"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"}