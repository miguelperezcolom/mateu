{"version":3,"file":"usePinch-fc8ed928.js","sources":["../../src/PRIVATE_TimeComponent/hooks/usePinch.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport type { RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { usePointerGesture } from './usePointerGesture';\n\ntype Point = { x: number; y: number };\n\nconst getMidpoint = (p1: Point, p2: Point) => ({ x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 });\nconst getDistance = (p1: Point, p2: Point) => Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p2.y) ** 2);\n\ntype PinchDetail = {\n  origin: Point;\n  delta: number;\n};\n\ntype UsePinchOptions = {\n  captureTargetRef: RefObject<HTMLDivElement>;\n  onPinchZoomStart?: (detail: PinchDetail) => void;\n  onPinchZoomChange?: (detail: PinchDetail) => void;\n  onPinchZoomEnd?: () => void;\n  isDisabled?: boolean;\n};\n\n/**\n * Hook that enables and handles pinch gestures.\n */\nconst usePinch = ({\n  captureTargetRef,\n  onPinchZoomStart,\n  onPinchZoomChange,\n  onPinchZoomEnd,\n  isDisabled = false\n}: UsePinchOptions) => {\n  const origin = useRef({ x: -1, y: -1 });\n  const prevDistance = useRef(-1);\n  const reset = () => {\n    origin.current = { x: -1, y: -1 };\n    prevDistance.current = -1;\n  };\n\n  if (isDisabled) reset();\n\n  const pinchProps = usePointerGesture({\n    captureTargetRef,\n    numPointers: 2, // Pinch gesture requires 2 pointers\n    onPointerGestureDown: ({ pointers: [pointer1, pointer2] }) => {\n      const p1 = { x: pointer1.offsetX, y: pointer1.offsetY };\n      const p2 = { x: pointer2.offsetX, y: pointer2.offsetY };\n      origin.current = getMidpoint(p1, p2);\n      prevDistance.current = getDistance(p1, p2);\n      onPinchZoomStart &&\n        onPinchZoomStart({\n          origin: origin.current,\n          delta: 0\n        });\n    },\n    onPointerGestureMove: ({ pointers: [pointer1, pointer2] }) => {\n      const p1 = { x: pointer1.offsetX, y: pointer1.offsetY };\n      const p2 = { x: pointer2.offsetX, y: pointer2.offsetY };\n      const distance = getDistance(p1, p2);\n      const delta = distance - prevDistance.current;\n      prevDistance.current = distance;\n      onPinchZoomChange &&\n        onPinchZoomChange({\n          origin: origin.current,\n          delta\n        });\n    },\n    onPointerGestureEnd: () => {\n      reset();\n      onPinchZoomEnd && onPinchZoomEnd();\n    }\n  });\n\n  return isDisabled ? {} : pinchProps;\n};\n\nexport { usePinch };\n"],"names":["getDistance","p1","p2","Math","sqrt","x","y","captureTargetRef","onPinchZoomStart","onPinchZoomChange","onPinchZoomEnd","isDisabled","origin","useRef","prevDistance","reset","current","pinchProps","usePointerGesture","numPointers","onPointerGestureDown","pointers","pointer1","pointer2","offsetX","offsetY","getMidpoint","delta","onPointerGestureMove","distance","onPointerGestureEnd"],"mappings":"+FAaA,MACMA,EAAc,CAACC,EAAWC,IAAcC,KAAKC,MAAMF,EAAGG,EAAIJ,EAAGI,IAAM,GAAKH,EAAGI,EAAIJ,EAAGI,IAAM,cAkB7E,EACfC,mBACAC,mBACAC,oBACAC,iBACAC,cAAa,MAEb,MAAMC,EAASC,EAAMA,OAAC,CAAER,GAAI,EAAGC,GAAI,IAC7BQ,EAAeD,EAAAA,QAAQ,GACvBE,EAAQ,KACZH,EAAOI,QAAU,CAAEX,GAAI,EAAGC,GAAI,GAC9BQ,EAAaE,SAAW,CAAC,EAGvBL,GAAYI,IAEhB,MAAME,EAAaC,EAAAA,kBAAkB,CACnCX,mBACAY,YAAa,EACbC,qBAAsB,EAAGC,UAAWC,EAAUC,OAC5C,MAAMtB,EAAK,CAAEI,EAAGiB,EAASE,QAASlB,EAAGgB,EAASG,SACxCvB,EAAK,CAAEG,EAAGkB,EAASC,QAASlB,EAAGiB,EAASE,SAC9Cb,EAAOI,QAzCO,EAACf,EAAWC,KAAS,CAAQG,GAAIJ,EAAGI,EAAIH,EAAGG,GAAK,EAAGC,GAAIL,EAAGK,EAAIJ,EAAGI,GAAK,IAyCnEoB,CAAYzB,EAAIC,GACjCY,EAAaE,QAAUhB,EAAYC,EAAIC,GACvCM,GACEA,EAAiB,CACfI,OAAQA,EAAOI,QACfW,MAAO,GACP,EAENC,qBAAsB,EAAGP,UAAWC,EAAUC,OAC5C,MAAMtB,EAAK,CAAEI,EAAGiB,EAASE,QAASlB,EAAGgB,EAASG,SACxCvB,EAAK,CAAEG,EAAGkB,EAASC,QAASlB,EAAGiB,EAASE,SACxCI,EAAW7B,EAAYC,EAAIC,GAC3ByB,EAAQE,EAAWf,EAAaE,QACtCF,EAAaE,QAAUa,EACvBpB,GACEA,EAAkB,CAChBG,OAAQA,EAAOI,QACfW,SACA,EAENG,oBAAqB,KACnBf,IACAL,GAAkBA,GAAgB,IAItC,OAAOC,EAAa,CAAE,EAAGM,CAAU"}