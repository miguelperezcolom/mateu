{"version":3,"file":"StyledTextField-5e554e5b.js","sources":["../../src/UNSAFE_TextField/useTextFieldTooltip.ts","../../src/UNSAFE_TextField/ReadonlyTextFieldContent.tsx","../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx"],"sourcesContent":["import { ComponentChild, RefObject } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { useTooltipControlled } from '#hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  fieldRef?: RefObject<HTMLElement>;\n  hasTruncatedLabel?: boolean;\n  isDisabled: boolean;\n  label?: string;\n};\n\n/**\n * A hook that calls useTooltipControlled and uses a logical focus strategy to control the tooltip.\n * When hasTruncatedLabel is true, we call onLogicalFocus to make the tooltip appear; otherwise we\n * call onLogicalBlur to dismiss it. See useTextField.ts for how we set the value of hasTruncatedLabel.\n */\nexport const useTextFieldTooltip = ({\n  fieldRef,\n  hasTruncatedLabel,\n  isDisabled,\n  label\n}: Props): {\n  tooltipContent: ComponentChild;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  tooltipEventHandlerProps: Record<string, any>;\n} => {\n  const [isOpen, setOpen] = useState(false);\n  const { tooltipProps, tooltipContent } = useTooltipControlled({\n    dismissOnClick: false,\n    displayOnHover: false,\n    focusStrategy: 'logical',\n    isDisabled,\n    isOpen: isOpen,\n    offset: { mainAxis: 4 },\n    onToggle: ({ value }) => {\n      setOpen(value);\n    },\n    position: 'top-start',\n    text: label\n  });\n\n  // The label already has a for-id association with the input\n  // and is read by AT, so we don't need aria-describedby.\n  const {\n    'aria-describedby': notNeeded,\n    onLogicalBlur,\n    onLogicalFocus,\n    ...tooltipEventHandlerProps\n  } = tooltipProps;\n\n  if (!isDisabled) {\n    if (hasTruncatedLabel) {\n      onLogicalFocus?.(fieldRef?.current);\n    } else {\n      onLogicalBlur?.();\n    }\n  }\n\n  return { tooltipContent, tooltipEventHandlerProps };\n};\n","import { ComponentChildren, Ref, RefObject } from 'preact';\nimport { useRef } from 'preact/hooks';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useTextFieldTooltip } from './useTextFieldTooltip';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport type { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport type {\n  ReadonlyTextFieldStyles,\n  ReadonlyTextFieldVariantOptions\n} from './themes/ReadonlyTextFieldStyles.css';\nimport { ReadonlyTextFieldRedwoodTheme } from './themes/redwood/ReadonlyTextFieldTheme';\n\ntype VariantProps =\n  | {\n      variant?: never;\n      resize?: never;\n    }\n  | {\n      variant: 'textarea';\n      resize?: 'horizontal' | 'vertical' | 'both';\n    };\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  endContent?: ComponentChildren;\n  rootRef?: Ref<HTMLDivElement>;\n  startContent?: ComponentChildren;\n  hasZeroStartMargin?: boolean;\n  labelText?: string;\n};\n\n// Renders the oj-text-field-container dom which includes the\n// main (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const ReadonlyTextFieldContent = ({\n  variant,\n  insideLabel,\n  labelText,\n  mainContent,\n  endContent,\n  rootRef,\n  resize,\n  startContent\n}: Props) => {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { hasTruncatedLabel, isLoading } = useFormFieldContext();\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const isInsideNonReadonlyForm = isFormLayout && !isReadonlyForm;\n  const hasInsideLabel = insideLabel !== undefined;\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const {\n    variantClasses: middleStyles,\n    styles: { textFieldEndContent }\n  } = useComponentTheme<TextFieldVariantOptions, TextFieldStyles>(TextFieldRedwoodTheme, {\n    middleContent: variant,\n    textAreaResizeDirection: resize && variant === 'textarea' ? direction : undefined\n  });\n\n  const {\n    classes: readonlyClassNames,\n    styles: {\n      readonlyTextFieldMiddleBase,\n      readonlyTextFieldMiddleNotInEnabledForm,\n      readonlyTextFieldMiddleInEnabledForm,\n      readonlyTextFieldMiddleInEnabledFormNotTextarea,\n      startContentInsideLabel,\n      startContentMarginEnd,\n      startContentMarginStart,\n      startContentStartTopLabel\n    }\n  } = useComponentTheme<ReadonlyTextFieldVariantOptions, ReadonlyTextFieldStyles>(\n    ReadonlyTextFieldRedwoodTheme,\n    {\n      insideNonReadonlyForm: isInsideNonReadonlyForm\n        ? 'isInsideNonReadonlyForm'\n        : 'notInsideNonReadonlyForm',\n      insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n      loading: isLoading ? 'isLoading' : 'notLoading',\n      withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n      inputGroupPosition,\n      resize: resize ?? 'none'\n    }\n  );\n\n  // JET-73911: Temporarily use style classes directly instead of getting\n  // startContent styles from theming.\n  const readonlyTextFieldStartContentStyles = classNames([\n    hasInsideLabel ? startContentInsideLabel : startContentStartTopLabel,\n    isInsideNonReadonlyForm ? startContentMarginStart : startContentMarginEnd\n  ]);\n\n  const middleClasses = classNames([\n    middleStyles,\n    readonlyTextFieldMiddleBase,\n    isInsideNonReadonlyForm && readonlyTextFieldMiddleInEnabledForm,\n    isInsideNonReadonlyForm &&\n      variant !== 'textarea' &&\n      readonlyTextFieldMiddleInEnabledFormNotTextarea,\n    !isInsideNonReadonlyForm && readonlyTextFieldMiddleNotInEnabledForm\n  ]);\n\n  const fieldRef = useRef<HTMLDivElement>(null);\n  const ref = rootRef ?? fieldRef;\n  const { tooltipContent, tooltipEventHandlerProps } = useTextFieldTooltip({\n    hasTruncatedLabel,\n    fieldRef: ref as RefObject<HTMLElement>,\n    isDisabled: !hasInsideLabel,\n    label: labelText\n  });\n\n  return (\n    <div role=\"presentation\" class={readonlyClassNames} ref={ref} {...tooltipEventHandlerProps}>\n      {startContent && (\n        <span class={readonlyTextFieldStartContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {startContent}\n          </Flex>\n        </span>\n      )}\n      <div class={middleClasses}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={textFieldEndContent}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n      {tooltipContent}\n    </div>\n  );\n};\n\nexport type { VariantProps };\n","import { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { LabelValueLayout } from '#UNSAFE_LabelValueLayout';\nimport { SkeletonRedwoodTheme } from '#UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useTestId, type TestIdProps } from '#hooks/UNSAFE_useTestId';\nimport type { UnpackSignals } from '@oracle/oraclejet-internal-utilities/attributeUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { Size } from '#utils/UNSAFE_size';\nimport { LayoutColumnSpan, layoutSpanStyles } from '#utils/UNSAFE_styles/Layout';\nimport { StyledComponentProps } from '@oracle/oraclejet-internal-utilities/typeUtils';\nimport type { ComponentChildren, ComponentProps, Ref, JSX } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { ReadonlyTextFieldContent, VariantProps } from './ReadonlyTextFieldContent';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\n\ntype DivProps = UnpackSignals<JSX.IntrinsicElements['div']>;\ntype UAProps = {\n  compactUserAssistance?: ComponentChildren;\n  inlineUserAssistance?: ComponentChildren;\n};\ntype OuterClassNamesProps = {\n  outerClassNames?: string;\n};\n\ntype PickedPropsFromReadonlyTextFieldContent = Pick<\n  ComponentProps<typeof ReadonlyTextFieldContent>,\n  'mainContent' | 'endContent' | 'startContent'\n>;\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    columnSpan?: LayoutColumnSpan;\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n    rootRef?: Ref<HTMLDivElement>;\n  };\n\nconst StartTopLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      columnSpan,\n      label,\n      labelEdge,\n      labelStartWidth,\n      compactUserAssistance,\n      inlineUserAssistance,\n      mainContent,\n      endContent,\n      rootRef,\n      variant,\n      resize,\n      startContent,\n      ...props\n    }: StartTopLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    const parentComponentVariant = variant === 'textarea' ? 'textArea' : 'textField';\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <LabelValueLayout\n          columnSpan={columnSpan}\n          label={label}\n          labelEdge={labelEdge}\n          labelStartWidth={labelStartWidth}\n          parentComponentVariant={parentComponentVariant}>\n          <ReadonlyTextFieldContent\n            mainContent={mainContent}\n            endContent={endContent}\n            rootRef={rootRef}\n            startContent={startContent}\n            {...(variant ? ({ variant, resize } as VariantProps) : {})}\n          />\n          {inlineUserAssistance}\n        </LabelValueLayout>\n      </div>\n    );\n  }\n);\n\ntype InsideLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent &\n  OuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelText?: string;\n    rootRef?: Ref<HTMLDivElement>;\n  };\nconst InsideLabelReadonlyTextField = forwardRef(\n  (\n    {\n      outerClassNames,\n      compactUserAssistance,\n      inlineUserAssistance,\n      labelText,\n      mainContent,\n      endContent,\n      label,\n      rootRef,\n      variant,\n      resize,\n      startContent,\n      ...props\n    }: InsideLabelReadonlyTextFieldProps,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    return (\n      <div {...props} ref={ref} class={outerClassNames}>\n        {compactUserAssistance}\n        <ReadonlyTextFieldContent\n          insideLabel={label}\n          labelText={labelText}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={rootRef}\n          startContent={startContent}\n          {...(variant ? ({ variant, resize } as VariantProps) : {})}\n        />\n        {inlineUserAssistance}\n      </div>\n    );\n  }\n);\n\nexport type StyleProps = UAProps &\n  VariantProps &\n  PickedPropsFromReadonlyTextFieldContent & {\n    columnSpan?: LayoutColumnSpan;\n    label?: ComponentChildren;\n    labelEdge?: 'inside' | 'start' | 'top';\n    labelText?: string;\n    variant?: 'textarea';\n    mainFieldRef?: Ref<HTMLDivElement>;\n  };\n\ntype Props = TestIdProps & StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = forwardRef(\n  (\n    {\n      columnSpan = 1,\n      label,\n      labelEdge,\n      labelText,\n      mainContent,\n      endContent,\n      variant,\n      mainFieldRef,\n      startContent,\n      testId,\n      ...props\n    }: Props,\n    ref?: Ref<HTMLElement>\n  ) => {\n    const testIdProps = useTestId(testId);\n    const { classes, styles } = useComponentTheme(TextFieldRedwoodTheme, {\n      readonly: 'isReadonly'\n    });\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n    const { formControlBase } = styles;\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const outerClassNames = classNames([\n      classes,\n      skeletonBaseTheme,\n      formControlBase,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n      return (\n        <StartTopLabelReadonlyTextField\n          columnSpan={columnSpan}\n          outerClassNames={outerClassNames}\n          label={label}\n          labelEdge={labelEdge}\n          ref={ref as Ref<HTMLDivElement> | undefined}\n          mainContent={mainContent}\n          endContent={endContent}\n          rootRef={mainFieldRef}\n          startContent={startContent}\n          variant={variant}\n          {...props}\n          {...testIdProps}></StartTopLabelReadonlyTextField>\n      );\n    }\n\n    return (\n      <InsideLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        ref={ref as Ref<HTMLDivElement> | undefined}\n        label={label}\n        labelText={labelText}\n        mainContent={mainContent}\n        endContent={endContent}\n        rootRef={mainFieldRef}\n        startContent={startContent}\n        variant={variant}\n        {...props}\n        {...testIdProps}></InsideLabelReadonlyTextField>\n    );\n  }\n);\n","import type { ContextType, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nimport type { StyledComponentProps } from '@oracle/oraclejet-internal-utilities/typeUtils';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport type { FormVariantContext } from '#hooks/UNSAFE_useFormVariantContext';\nimport { useInputGroupContext } from '#hooks/UNSAFE_useInputGroupContext';\nimport { LabelRedwoodTheme } from '#UNSAFE_Label/themes/redwood/LabelTheme';\nimport { SkeletonRedwoodTheme } from '#UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\nimport { isEmbeddedVariant } from '#utils/PRIVATE_formControlUtils';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { type LayoutColumnSpan, layoutSpanStyles } from '#utils/UNSAFE_styles/Layout';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport type { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\n\nexport type StyleProps = {\n  columnSpan?: LayoutColumnSpan;\n  variant?: ContextType<typeof FormVariantContext>;\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = forwardRef(\n  ({ columnSpan = 1, variant = 'default', ...props }: Props, ref?: Ref<HTMLElement>) => {\n    // because of the mismatch of height for inputs with inside labels and no labels,\n    // we'll have to set everything to the same min-height while within an input group context.\n    // Here we'll look to see if it's present and apply the style as needed\n    const groupContext = useInputGroupContext();\n    const { isReadonly } = useFormFieldContext();\n    const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n    const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n    const { classes: textFieldClasses, styles } = useComponentTheme<\n      TextFieldVariantOptions,\n      TextFieldStyles\n    >(TextFieldRedwoodTheme, {\n      readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n      withinGroup: groupContext !== null ? 'isWithinGroup' : undefined\n    });\n\n    const { formControlBase, textFieldBase, textFieldEmbedded } = styles;\n\n    // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n    // to pick up the scoped var definitions.\n    const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n    const classes = classNames([\n      skeletonBaseTheme,\n      formControlBase,\n      textFieldBase,\n      isEmbeddedVariant(variant) && textFieldEmbedded,\n      textFieldClasses,\n      formLayoutTheme,\n      labelBaseTheme,\n      layoutSpanStyles.layoutSpanColumn[columnSpan]\n    ]);\n\n    return <div {...props} class={classes} ref={ref as Ref<HTMLDivElement> | undefined} />;\n  }\n);\n"],"names":["useTextFieldTooltip","fieldRef","hasTruncatedLabel","isDisabled","label","isOpen","setOpen","useState","tooltipProps","tooltipContent","useTooltipControlled","dismissOnClick","displayOnHover","focusStrategy","offset","mainAxis","onToggle","value","position","text","notNeeded","onLogicalBlur","onLogicalFocus","tooltipEventHandlerProps","current","ReadonlyTextFieldContent","variant","insideLabel","labelText","mainContent","endContent","rootRef","resize","startContent","isFormLayout","isReadonly","isReadonlyForm","useFormContext","isLoading","useFormFieldContext","direction","useUser","isLtr","isInsideNonReadonlyForm","hasInsideLabel","undefined","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","variantClasses","middleStyles","styles","textFieldEndContent","useComponentTheme","TextFieldRedwoodTheme","middleContent","textAreaResizeDirection","classes","readonlyClassNames","readonlyTextFieldMiddleBase","readonlyTextFieldMiddleNotInEnabledForm","readonlyTextFieldMiddleInEnabledForm","readonlyTextFieldMiddleInEnabledFormNotTextarea","startContentInsideLabel","startContentMarginEnd","startContentMarginStart","startContentStartTopLabel","ReadonlyTextFieldRedwoodTheme","insideNonReadonlyForm","textarea","loading","withinGroup","readonlyTextFieldStartContentStyles","classNames","middleClasses","useRef","ref","_jsxs","role","class","children","_jsx","jsx","Flex","justify","align","hasZeroMargins","StartTopLabelReadonlyTextField","forwardRef","outerClassNames","columnSpan","labelEdge","labelStartWidth","compactUserAssistance","inlineUserAssistance","props","parentComponentVariant","LabelValueLayout","InsideLabelReadonlyTextField","ReadonlyTextField","mainFieldRef","testId","testIdProps","useTestId","readonly","baseTheme","labelBaseTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","formControlBase","skeletonBaseTheme","SkeletonRedwoodTheme","layoutSpanStyles","layoutSpanColumn","StyledTextField","groupContext","textFieldClasses","textFieldBase","textFieldEmbedded","isEmbeddedVariant"],"mappings":"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"}