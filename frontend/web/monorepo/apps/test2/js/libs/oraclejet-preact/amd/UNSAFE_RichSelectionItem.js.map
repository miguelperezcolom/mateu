{"version":3,"file":"UNSAFE_RichSelectionItem.js","sources":["../../src/UNSAFE_RichSelectionItem/RichSelectionTextContent.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionMediaItem.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionControl.tsx","../../src/UNSAFE_RichSelectionItem/RichSelectionItem.tsx"],"sourcesContent":["import { TruncatingText } from '#UNSAFE_TruncatingText';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from './themes/RichSelectionItemStyles.css';\n\ntype RichSelectionTextContentProps = {\n  secondaryTextId?: string;\n  label?: string;\n  secondaryText?: string;\n  isDisabled?: boolean;\n  // INFO: label truncates for 1 line in only XL\n  isLayoutXL?: boolean;\n  labelId: string;\n};\n\n// INFO: Label and SecondaryText Content handling\nexport const RichSelectionTextContent = ({\n  secondaryTextId,\n  isDisabled,\n  isLayoutXL,\n  label,\n  labelId,\n  secondaryText\n}: RichSelectionTextContentProps) => {\n  const labelContent = (\n    <TruncatingText\n      variant={isDisabled ? 'disabled' : 'primary'}\n      lineClamp={isLayoutXL ? 1 : 2}\n      id={labelId}>\n      {label}\n    </TruncatingText>\n  );\n  const classes = classNames([\n    isLayoutXL ? styles.densityWrapper : styles.growOneColumn,\n    !isLayoutXL && !secondaryText && styles.labelOnly\n  ]);\n\n  return (\n    <div className={classes}>\n      {labelContent}\n      {secondaryText && (\n        <TruncatingText\n          size=\"sm\"\n          variant={isDisabled ? 'disabled' : 'secondary'}\n          lineClamp={3}\n          id={secondaryTextId}>\n          {secondaryText}\n        </TruncatingText>\n      )}\n    </div>\n  );\n};\n","import { Avatar } from '#UNSAFE_Avatar';\nimport { styles } from './themes/RichSelectionItemStyles.css';\nimport { Center } from '#UNSAFE_Center';\nimport { View } from '#UNSAFE_View';\nimport { AspectRatio } from '#UNSAFE_AspectRatio';\nimport { TestIdProps, useTestId } from '#hooks/UNSAFE_useTestId';\nimport { RichSelectionMediaItemProps } from './RichSelectionTypes';\nimport { classNames } from '#utils/UNSAFE_classNames';\n\ntype DisabledType = {\n  isDisabled?: boolean;\n};\n\ntype ThumbnailProps = TestIdProps &\n  DisabledType &\n  Pick<RichSelectionMediaItemProps, 'layout'> & {\n    thumbnailSrc?: string;\n    mediaAccessibleLabel?: string;\n  };\n\nconst ThumbnailXL = ({\n  thumbnailSrc,\n  mediaAccessibleLabel,\n  testId,\n  isDisabled\n}: ThumbnailProps) => {\n  const testIdProps = useTestId(testId ? `${testId}_thumbnail` : undefined);\n\n  return (\n    <AspectRatio ratio=\"4/3\">\n      <img\n        alt={mediaAccessibleLabel}\n        className={classNames([styles.thumbnailImage, isDisabled && styles.mediaDisabledOpacity])}\n        role={!mediaAccessibleLabel ? 'presentation' : undefined}\n        src={thumbnailSrc}\n        {...testIdProps}\n      />\n    </AspectRatio>\n  );\n};\n\nconst Thumbnail = ({\n  thumbnailSrc,\n  mediaAccessibleLabel,\n  layout,\n  testId,\n  isDisabled\n}: ThumbnailProps) => {\n  const thumbnailClass = classNames([\n    layout === 'md' ? styles.mdMediaVariant : styles.smMediaVariant,\n    isDisabled && styles.mediaDisabledOpacity\n  ]);\n  const testIdProps = useTestId(testId ? `${testId}_thumbnail` : undefined);\n  return (\n    <img\n      alt={mediaAccessibleLabel}\n      className={thumbnailClass}\n      role={!mediaAccessibleLabel ? 'presentation' : undefined}\n      src={thumbnailSrc}\n      {...testIdProps}\n    />\n  );\n};\n\nconst MediumRenderer = ({\n  mediaAccessibleLabel,\n  thumbnailSrc,\n  layout,\n  avatar,\n  testId,\n  isDisabled\n}: Partial<RichSelectionMediaItemProps> & DisabledType) => {\n  const testIdProps = useTestId(testId ? `${testId}_medium` : undefined);\n  let mediumMediaItem;\n\n  if (avatar) {\n    const avatarElement = (\n      <Avatar {...avatar} aria-label={mediaAccessibleLabel} size=\"md\" {...testIdProps} />\n    );\n    mediumMediaItem = isDisabled ? (\n      <span className={styles.mediaDisabledOpacity}>{avatarElement}</span>\n    ) : (\n      avatarElement\n    );\n  } else {\n    mediumMediaItem = (\n      <Thumbnail\n        thumbnailSrc={thumbnailSrc}\n        mediaAccessibleLabel={mediaAccessibleLabel}\n        layout={layout}\n        testId={testId}\n        isDisabled={isDisabled}\n      />\n    );\n  }\n\n  return <Center>{mediumMediaItem}</Center>;\n};\n\nconst SmallRenderer = ({\n  avatar,\n  iconClass,\n  isDisabled,\n  layout,\n  thumbnailSrc,\n  mediaAccessibleLabel,\n  testId\n}: RichSelectionMediaItemProps & DisabledType) => {\n  const testIdProps = useTestId(testId ? `${testId}_small` : undefined);\n  const { iconWrapper, iconEnabledColor, iconDisabledColor, mediaDisabledOpacity } = styles;\n  let smallMediaItem;\n\n  if (avatar) {\n    const avatarElement = (\n      <Avatar {...avatar} aria-label={mediaAccessibleLabel} size=\"xs\" {...testIdProps} />\n    );\n    smallMediaItem = isDisabled ? (\n      <span className={mediaDisabledOpacity}>{avatarElement}</span>\n    ) : (\n      avatarElement\n    );\n  } else if (thumbnailSrc) {\n    smallMediaItem = (\n      <Thumbnail\n        thumbnailSrc={thumbnailSrc}\n        mediaAccessibleLabel={mediaAccessibleLabel}\n        layout={layout}\n        testId={testId}\n        isDisabled={isDisabled}\n        {...testIdProps}\n      />\n    );\n  } else if (iconClass) {\n    const classes = classNames([\n      iconClass,\n      iconWrapper,\n      isDisabled ? iconDisabledColor : iconEnabledColor\n    ]);\n    smallMediaItem = <div class={classes} {...testIdProps}></div>;\n  }\n\n  return <Center>{smallMediaItem}</Center>;\n};\n\n// INFO: Media Item handling\nexport const RichSelectionMediaItem = ({\n  avatar,\n  iconClass,\n  isDisabled,\n  hasSecondaryText,\n  mediaAccessibleLabel,\n  layout,\n  thumbnailSrc,\n  testId\n}: RichSelectionMediaItemProps & DisabledType) => {\n  if (!layout) {\n    return null;\n  }\n\n  switch (layout) {\n    case 'xl':\n      return (\n        <ThumbnailXL\n          thumbnailSrc={thumbnailSrc}\n          mediaAccessibleLabel={mediaAccessibleLabel}\n          testId={testId}\n          isDisabled={isDisabled}\n        />\n      );\n\n    case 'md':\n      const mediumMedia = avatar ? { avatar } : thumbnailSrc ? { thumbnailSrc } : undefined;\n      return (\n        <View alignSelf={hasSecondaryText ? 'start' : 'center'}>\n          <MediumRenderer\n            mediaAccessibleLabel={mediaAccessibleLabel}\n            layout={layout}\n            testId={testId}\n            isDisabled={isDisabled}\n            {...mediumMedia}\n          />\n        </View>\n      );\n\n    case 'sm':\n      const smallMedia = avatar\n        ? { avatar, mediaAccessibleLabel }\n        : thumbnailSrc\n        ? { thumbnailSrc, mediaAccessibleLabel }\n        : iconClass\n        ? { iconClass }\n        : undefined;\n      return (\n        <View alignSelf={hasSecondaryText ? 'start' : 'center'}>\n          <SmallRenderer {...smallMedia} layout={layout} testId={testId} isDisabled={isDisabled} />\n        </View>\n      );\n\n    default:\n      return null;\n  }\n};\n","import type { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\n\nimport { useComponentTheme } from '#hooks/UNSAFE_useComponentTheme';\nimport { useInteractionStyle } from '#hooks/UNSAFE_useInteractionStyle';\nimport { useTabbableMode } from '#hooks/UNSAFE_useTabbableMode';\nimport { StyledCheckbox } from '#PRIVATE_StyledCheckbox';\nimport { CheckIcon } from '#PRIVATE_ThemedIcons/CheckIcon';\nimport { RadioOffIcon } from '#PRIVATE_ThemedIcons/RadioOffIcon';\nimport { RadioOnIcon } from '#PRIVATE_ThemedIcons/RadioOnIcon';\nimport { useCheckboxSetContext } from '#UNSAFE_CheckboxSet';\nimport { HiddenAccessible } from '#UNSAFE_HiddenAccessible';\nimport { useRadioItemContext } from '#UNSAFE_RadioItem/RadioItemContext';\nimport { radioIconVars } from '#UNSAFE_RadioItem/themes/RadioIconContract.css';\nimport { RadioIconVariantOptions } from '#UNSAFE_RadioItem/themes/RadioIconStyles.css';\nimport { radioDefaultColor, radioDisabledColor } from '#UNSAFE_RadioItem/themes/RadioStyles.css';\nimport { RadioIconRedwoodTheme } from '#UNSAFE_RadioItem/themes/redwood/RadioIconTheme';\nimport { useRadioSetContext } from '#UNSAFE_RadioSet/RadioSetContext';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { styles } from './themes/RichSelectionItemStyles.css';\n\n/**\n * Selective Element Props Type.\n */\ntype RichSelectionControlProps = {\n  value: string | number;\n  inputRef?: RefObject<HTMLInputElement>;\n  inputReadonlyRef?: RefObject<HTMLInputElement>;\n  isFocus?: boolean;\n  isLayoutXL?: boolean;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  isSelected?: boolean;\n  describedBy?: string;\n  labelledBy: string;\n  onBlur?: (event: FocusEvent) => void;\n  onFocus?: (event: FocusEvent) => void;\n};\n\nexport const RadioControl = ({\n  value,\n  inputRef,\n  inputReadonlyRef,\n  isFocus,\n  isDisabled,\n  isLayoutXL,\n  isReadonly,\n  isSelected,\n  describedBy,\n  labelledBy,\n  onBlur,\n  onFocus\n}: RichSelectionControlProps) => {\n  const { name, value: radioGroupValue, onCommit } = useRadioSetContext();\n\n  const IconComp = isReadonly\n    ? isSelected\n      ? CheckIcon\n      : RadioOffIcon\n    : isSelected\n    ? RadioOnIcon\n    : RadioOffIcon;\n\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const { interactionProps, applyActiveStyle } = useInteractionStyle();\n\n  const onChangeHandler = useCallback(\n    (event: Event) => {\n      event.stopPropagation();\n      onCommit?.({ previousValue: radioGroupValue, value });\n    },\n    [value, radioGroupValue, onCommit]\n  );\n\n  /**\n   * When focused the view should have the respective RichSelectionItem.\n   */\n  useEffect(() => {\n    const isActiveElement = document.activeElement === inputRef?.current;\n    if (!isActiveElement && isFocus) {\n      spanRef?.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [inputRef, isFocus, spanRef]);\n\n  const radioColor = isDisabled ? radioDisabledColor : radioDefaultColor;\n  const { classes: radioIconClasses } = useComponentTheme<RadioIconVariantOptions>(\n    RadioIconRedwoodTheme,\n    {\n      disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      active: applyActiveStyle ? 'isActive' : 'notActive',\n      richSelection: isLayoutXL ? 'isLayoutXL' : 'notLayoutXL'\n    }\n  );\n\n  const { isTabbable } = useTabbableMode();\n  const { index } = useRadioItemContext();\n  const tabIndex =\n    isTabbable !== false && ((index === 0 && !radioGroupValue) || isSelected) ? 0 : -1;\n\n  const hiddenInput = (\n    <HiddenAccessible>\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        {...(!isReadonly &&\n          !isDisabled && {\n            onChange: onChangeHandler\n          })}\n        checked={isSelected}\n        disabled={isDisabled}\n        aria-labelledby={labelledBy}\n        aria-describedby={describedBy}\n        tabIndex={tabIndex}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={isReadonly ? inputReadonlyRef : inputRef}\n      />\n    </HiddenAccessible>\n  );\n\n  // Radio control is visually hidden in readonly mode unless it is selected\n  if (!isSelected && isReadonly) {\n    return <span class={styles.inputElement}>{hiddenInput}</span>;\n  }\n\n  return (\n    <span\n      ref={spanRef}\n      class={classNames([radioColor, isLayoutXL ? styles.radioWrapper : undefined])}>\n      {hiddenInput}\n      <span aria-hidden=\"true\" class={radioIconClasses} {...interactionProps}>\n        <IconComp size={radioIconVars.iconSize} color=\"currentColor\" />\n      </span>\n    </span>\n  );\n};\n\nexport const CheckboxControl = ({\n  value,\n  inputRef,\n  inputReadonlyRef,\n  isSelected,\n  isLayoutXL,\n  isDisabled,\n  isReadonly,\n  describedBy,\n  labelledBy,\n  onBlur,\n  onFocus\n}: RichSelectionControlProps) => {\n  const { name } = useCheckboxSetContext();\n  const { isTabbable } = useTabbableMode();\n  const checkboxStyles = isLayoutXL ? styles.checkboxWrapper : styles.checkboxAlign;\n\n  // Checkbox control is visually hidden in readonly mode unless it is selected\n  if (!isSelected && isReadonly) {\n    return (\n      <span class={styles.inputElement}>\n        <HiddenAccessible>\n          <input\n            aria-readonly={true}\n            aria-labelledby={labelledBy}\n            aria-describedby={describedBy}\n            type=\"checkbox\"\n            name={name}\n            value={value}\n            checked={false}\n            disabled={isDisabled}\n            tabIndex={isTabbable ? 0 : -1}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            ref={inputReadonlyRef}\n          />\n        </HiddenAccessible>\n      </span>\n    );\n  }\n\n  return (\n    <span class={checkboxStyles}>\n      <StyledCheckbox\n        aria-describedby={describedBy}\n        aria-labelledby={labelledBy}\n        isDisabled={isDisabled}\n        isReadonly={isReadonly}\n        isChecked={isSelected ? 'checked' : 'unchecked'}\n        name={name}\n        value={value}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={isReadonly ? inputReadonlyRef : inputRef}\n      />\n    </span>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useEffect, useMemo, useRef } from 'preact/hooks';\n\nimport { useFormFieldContext } from '#hooks/UNSAFE_useFormFieldContext';\nimport { useRichSelectionContext } from '#PRIVATE_RichSelectionCommon/RichSelectionContext';\nimport { StyledCard } from '#PRIVATE_StyledCard';\nimport { useCheckboxSetContext } from '#UNSAFE_CheckboxSet';\nimport { useRadioSetContext } from '#UNSAFE_RadioSet/RadioSetContext';\nimport { RichSelectionTextContent } from './RichSelectionTextContent';\nimport { RichSelectionMediaItem } from './RichSelectionMediaItem';\nimport { Flex } from '#UNSAFE_Flex';\nimport { styles } from './themes/RichSelectionItemStyles.css';\nimport { useId } from '#hooks/UNSAFE_useId';\nimport { useFormContext } from '#hooks/UNSAFE_useFormContext';\nimport { usePress } from '#hooks/UNSAFE_usePress';\nimport { RadioControl, CheckboxControl } from './RichSelectionControl';\nimport { type RichSelectionItemData } from './RichSelectionTypes';\nimport { useFocusableTextField } from '#hooks/UNSAFE_useFocusableTextField';\nimport { useRichSelectionStartContext } from '#PRIVATE_RichSelectionCommon/RichSelectionStartContext';\nimport { classNames } from '#utils/UNSAFE_classNames';\nimport { type TestIdProps } from '#hooks/UNSAFE_useTestId';\n\ntype RichSelectionItemProps<V extends string | number> = RichSelectionItemData<V> &\n  TestIdProps & {\n    /**\n     * Specifies if the card is read-only.\n     */\n    isReadonly?: boolean;\n  };\n\nconst onMouseDown = (event: Event) => {\n  // Prevent focus from going to the body when the user clicks something within\n  // the card that is not focusable. This is important because we are detecting\n  // focus loss on the core pack side and showing hidden messages.\n  event.preventDefault();\n};\n\n/**\n * `RichSelectionItem` is a customizable input card element used in selection interfaces. It can display a label,\n * optional secondary text, and media (such as an avatar, thumbnail, or icon). It supports both radio and checkbox\n * controls, allowing users to make a single or multiple selections, respectively. The component also handles\n * different states such as disabled, readonly, and focus, and renders dynamically based on layout( 'xl', 'md', or 'sm').\n */\nexport const RichSelectionItem = <V extends string | number>({\n  avatar,\n  iconClass,\n  isReadonly: propsIsReadonly,\n  mediaAccessibleLabel,\n  secondaryText,\n  thumbnailSrc,\n  label,\n  value,\n  testId\n}: RichSelectionItemProps<V>) => {\n  const { isReadonly: isFormReadonly, isDisabled: isFormDisabled } = useFormContext();\n  const styledCardRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const inputReadonlyRef = useRef<HTMLInputElement>(null);\n  const { selection, layout, messageSeverity } = useRichSelectionContext()!;\n  const { isDisabled: isFieldDisabled, isReadonly: isFieldReadonly } = useFormFieldContext();\n  const { value: radioGroupValue, onCommit: onRadioCommit } = useRadioSetContext();\n  const { value: checkboxGroupValue, onCommit: onCheckboxCommit } = useCheckboxSetContext();\n\n  // Determining selection state for error\n  const styledCardVariant = messageSeverity === 'error' ? 'danger' : undefined;\n  const isDisabled = isFieldDisabled ?? isFormDisabled;\n  const isReadonly = isFieldReadonly || isFormReadonly || propsIsReadonly;\n  const isEnabled = !isDisabled && !isReadonly;\n  const id = useId();\n  const isLayoutXL = layout === 'xl';\n  const hasMedia = !!avatar || !!thumbnailSrc || !!iconClass;\n  const labelId = `${id}-labelled-text`;\n  const secondaryTextId = secondaryText ? `${id}-secondary-text` : undefined;\n  const isSingleSelection = selection === 'single';\n  const isSelected = isSingleSelection\n    ? radioGroupValue === value\n    : !!checkboxGroupValue?.has(value);\n\n  const {\n    isFocused: isFocus,\n    focusProps: { onFocusIn, onFocusOut },\n    methods\n  } = useFocusableTextField({\n    enabledElementRef: inputRef,\n    readonlyElementRef: inputReadonlyRef,\n    isReadonly,\n    isDisabled\n  });\n\n  // Scroll into view when the RichSelectionItem is focused\n  useEffect(() => {\n    if (isFocus) {\n      styledCardRef?.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocus, styledCardRef]);\n\n  // Text content of label and secondaryText rendering\n  const textContent = (\n    <RichSelectionTextContent\n      secondaryTextId={secondaryTextId}\n      labelId={labelId}\n      isDisabled={isDisabled}\n      isLayoutXL={isLayoutXL}\n      label={label}\n      secondaryText={secondaryText}\n    />\n  );\n\n  // Media content rendering based on available media props respective to layout\n  const media = avatar\n    ? { avatar, mediaAccessibleLabel, layout: layout as 'md' | 'sm' }\n    : thumbnailSrc\n    ? { thumbnailSrc, mediaAccessibleLabel, layout: layout as 'xl' | 'md' | 'sm' }\n    : iconClass\n    ? { iconClass, layout: layout as 'sm' }\n    : undefined;\n\n  const mediaContent = hasMedia ? (\n    <RichSelectionMediaItem\n      {...media}\n      isDisabled={isDisabled}\n      hasSecondaryText={!!secondaryText}\n      testId={testId ? `${testId}_media` : undefined}\n    />\n  ) : undefined;\n\n  // Selection control rendering (radio or checkbox)\n  const selectionControl = (\n    <Flex align={secondaryText ? 'start' : 'center'}>\n      {isSingleSelection ? (\n        <RadioControl\n          onFocus={onFocusIn}\n          onBlur={onFocusOut}\n          value={value}\n          inputRef={inputRef}\n          inputReadonlyRef={inputReadonlyRef}\n          isFocus={isFocus}\n          isLayoutXL={isLayoutXL}\n          isDisabled={isDisabled}\n          isReadonly={isReadonly}\n          isSelected={isSelected}\n          describedBy={secondaryTextId}\n          labelledBy={`${id}-labelled-text`}\n        />\n      ) : (\n        <CheckboxControl\n          onFocus={onFocusIn}\n          onBlur={onFocusOut}\n          value={value}\n          inputRef={inputRef}\n          inputReadonlyRef={inputReadonlyRef}\n          isFocus={isFocus}\n          isDisabled={isDisabled}\n          isLayoutXL={isLayoutXL}\n          isReadonly={isReadonly}\n          isSelected={isSelected}\n          describedBy={secondaryTextId}\n          labelledBy={`${id}-labelled-text`}\n        />\n      )}\n    </Flex>\n  );\n\n  // Handler for checkbox selection changes\n  const triggerCheckBoxAction = useCallback(() => {\n    // if selected from a click, we need to manually set focus on the input to allow for keyboard navigation\n    methods.focus();\n\n    const newGroupValue = new Set(checkboxGroupValue);\n    // If the value is already selected, remove it; otherwise, add it\n    if (newGroupValue.has(value)) {\n      newGroupValue.delete(value);\n    } else {\n      newGroupValue.add(value);\n    }\n    onCheckboxCommit?.({\n      previousValue: checkboxGroupValue,\n      value: newGroupValue.size > 0 ? newGroupValue : undefined\n    });\n  }, [checkboxGroupValue, methods, onCheckboxCommit, value]);\n\n  // Handler for radio selection changes\n  const triggerRadioAction = useCallback(() => {\n    if (radioGroupValue !== value) {\n      // if selected from a click, we need to manually set focus on the input to allow for keyboard navigation\n      methods.focus();\n\n      onRadioCommit?.({\n        previousValue: radioGroupValue,\n        value: value\n      });\n    }\n  }, [radioGroupValue, value, methods, onRadioCommit]);\n\n  // due to the placement of the start label in rich selection, we need to check if the first item contains media or secondary text.\n  const startData = useMemo(\n    () => ({ hasMedia, hasSecondaryText: !!secondaryText }),\n    [hasMedia, secondaryText]\n  );\n  const richSelectionStartContext = useRichSelectionStartContext();\n  if (richSelectionStartContext?.isFirst) {\n    richSelectionStartContext?.setStartData?.(startData);\n  }\n\n  // Event handlers for the interaction of the StyledCard\n  const { pressProps } = usePress(isSingleSelection ? triggerRadioAction : triggerCheckBoxAction, {\n    isDisabled: !isEnabled\n  });\n\n  return (\n    <StyledCard\n      cursor={isEnabled ? 'pointer' : 'arrow'}\n      display=\"inlineFlex\"\n      height=\"100%\"\n      isDisabled={!isEnabled}\n      isFocusWithin={isFocus}\n      isSelected={styledCardVariant !== 'danger' && isEnabled && isSelected}\n      onMouseDown={onMouseDown}\n      parentComponentVariant=\"richSelectionItemCard\"\n      ref={styledCardRef}\n      role=\"listitem\"\n      styleVariant={styledCardVariant}\n      testId={testId ? `${testId}_styled_card` : undefined}\n      width=\"100%\"\n      {...(isReadonly ? { onClick: () => methods.focus() } : pressProps)}>\n      {isLayoutXL ? (\n        <Flex direction=\"column\" height=\"100%\" width=\"100%\">\n          {mediaContent}\n          <div class={styles.selectionElement}>{selectionControl}</div>\n          {textContent}\n        </Flex>\n      ) : (\n        <div\n          className={classNames([\n            styles.densityWrapper,\n            // if the item has a sm/md layout, without media or secondary text,\n            // we need to set the min height of the card to match the start label\n            !isLayoutXL &&\n              !hasMedia &&\n              !secondaryText &&\n              richSelectionStartContext !== null &&\n              styles.startMinHeight\n          ])}>\n          <Flex direction=\"row\" gap=\"4x\" height=\"100%\" width=\"100%\">\n            {selectionControl}\n            {textContent}\n            {mediaContent}\n          </Flex>\n        </div>\n      )}\n    </StyledCard>\n  );\n};\n"],"names":["RichSelectionTextContent","secondaryTextId","isDisabled","isLayoutXL","label","labelId","secondaryText","labelContent","_jsx","TruncatingText","variant","lineClamp","id","classes","classNames","styles","densityWrapper","growOneColumn","labelOnly","_jsxs","className","children","size","ThumbnailXL","thumbnailSrc","mediaAccessibleLabel","testId","testIdProps","useTestId","undefined","AspectRatio","ratio","alt","thumbnailImage","mediaDisabledOpacity","role","src","Thumbnail","layout","thumbnailClass","mdMediaVariant","smMediaVariant","MediumRenderer","avatar","mediumMediaItem","avatarElement","jsx","Avatar","Center","SmallRenderer","iconClass","iconWrapper","iconEnabledColor","iconDisabledColor","smallMediaItem","class","RichSelectionMediaItem","hasSecondaryText","mediumMedia","View","alignSelf","smallMedia","RadioControl","value","inputRef","inputReadonlyRef","isFocus","isReadonly","isSelected","describedBy","labelledBy","onBlur","onFocus","name","radioGroupValue","onCommit","useRadioSetContext","IconComp","CheckIcon","SvgCheck","RadioOffIcon","SvgRadioButtonOff","RadioOnIcon","SvgRadioButtonOn","spanRef","useRef","interactionProps","applyActiveStyle","useInteractionStyle","onChangeHandler","useCallback","event","stopPropagation","previousValue","useEffect","document","activeElement","current","scrollIntoView","block","radioColor","radioDisabledColor","radioDefaultColor","radioIconClasses","useComponentTheme","RadioIconRedwoodTheme","disabled","selected","active","richSelection","isTabbable","useTabbableMode","index","useRadioItemContext","tabIndex","hiddenInput","HiddenAccessible","type","onChange","checked","ref","inputElement","radioWrapper","radioIconVars","iconSize","color","CheckboxControl","useCheckboxSetContext","checkboxStyles","checkboxWrapper","checkboxAlign","StyledCheckbox","isChecked","onMouseDown","preventDefault","propsIsReadonly","isFormReadonly","isFormDisabled","useFormContext","styledCardRef","selection","messageSeverity","useRichSelectionContext","isFieldDisabled","isFieldReadonly","useFormFieldContext","onRadioCommit","checkboxGroupValue","onCheckboxCommit","styledCardVariant","isEnabled","useId","hasMedia","isSingleSelection","has","isFocused","focusProps","onFocusIn","onFocusOut","methods","useFocusableTextField","enabledElementRef","readonlyElementRef","textContent","media","mediaContent","selectionControl","Flex","align","triggerCheckBoxAction","focus","newGroupValue","Set","delete","add","triggerRadioAction","startData","useMemo","richSelectionStartContext","useRichSelectionStartContext","isFirst","setStartData","pressProps","usePress","StyledCard","cursor","display","height","isFocusWithin","parentComponentVariant","styleVariant","width","onClick","jsxs","direction","selectionElement","startMinHeight","gap"],"mappings":"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"}